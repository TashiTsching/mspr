
V3_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027c4  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad34  0800ad34  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad34  0800ad34  0001ad34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad3c  0800ad3c  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad3c  0800ad3c  0001ad3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800ad44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00008ad0  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008bbc  20008bbc  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037873  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cf5  00000000  00000000  0005798f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000235cd  00000000  00000000  0005d684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021d8  00000000  00000000  00080c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002208  00000000  00000000  00082e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ad7d  00000000  00000000  00085038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034527  00000000  00000000  000afdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5631  00000000  00000000  000e42dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001d990d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006794  00000000  00000000  001d9960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008558 	.word	0x08008558

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	08008558 	.word	0x08008558

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <TouchTask>:
	}

}

#ifdef WITH_TOUCH_TASK
static void TouchTask(__attribute__ ((unused)) void *pvParameters) {
 8000588:	b500      	push	{lr}
 800058a:	b089      	sub	sp, #36	; 0x24
	while (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize())) {
 800058c:	e010      	b.n	80005b0 <TouchTask+0x28>
		BSP_LCD_DisplayStringAt(0,
				BSP_LCD_GetYSize() / 2 + BSP_LCD_GetYSize() / 4,
 800058e:	f000 fd57 	bl	8001040 <BSP_LCD_GetYSize>
 8000592:	0844      	lsrs	r4, r0, #1
 8000594:	f000 fd54 	bl	8001040 <BSP_LCD_GetYSize>
		BSP_LCD_DisplayStringAt(0,
 8000598:	eb04 0190 	add.w	r1, r4, r0, lsr #2
 800059c:	2301      	movs	r3, #1
 800059e:	4a26      	ldr	r2, [pc, #152]	; (8000638 <TouchTask+0xb0>)
 80005a0:	b289      	uxth	r1, r1
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 feb6 	bl	8001314 <BSP_LCD_DisplayStringAt>
				"Error init. TS!!", CENTER_MODE);
		vTaskDelay(500);
 80005a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ac:	f006 fe22 	bl	80071f4 <vTaskDelay>
	while (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize())) {
 80005b0:	f000 fd3e 	bl	8001030 <BSP_LCD_GetXSize>
 80005b4:	4604      	mov	r4, r0
 80005b6:	f000 fd43 	bl	8001040 <BSP_LCD_GetYSize>
 80005ba:	b281      	uxth	r1, r0
 80005bc:	b2a0      	uxth	r0, r4
 80005be:	f000 ff63 	bl	8001488 <BSP_TS_Init>
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d1e3      	bne.n	800058e <TouchTask+0x6>
 80005c6:	e015      	b.n	80005f4 <TouchTask+0x6c>
					BSP_LCD_GetYSize() / 2 + BSP_LCD_GetYSize() / 4, s,
					CENTER_MODE);
			HAL_GPIO_WritePin(LD_GPIO_PORT, LD4_RED, 1);
		} else {
			BSP_LCD_DisplayStringAt(0,
					BSP_LCD_GetYSize() / 2 + BSP_LCD_GetYSize() / 4,
 80005c8:	f000 fd3a 	bl	8001040 <BSP_LCD_GetYSize>
 80005cc:	0844      	lsrs	r4, r0, #1
 80005ce:	f000 fd37 	bl	8001040 <BSP_LCD_GetYSize>
			BSP_LCD_DisplayStringAt(0,
 80005d2:	eb04 0190 	add.w	r1, r4, r0, lsr #2
 80005d6:	2301      	movs	r3, #1
 80005d8:	4a18      	ldr	r2, [pc, #96]	; (800063c <TouchTask+0xb4>)
 80005da:	b289      	uxth	r1, r1
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fe99 	bl	8001314 <BSP_LCD_DisplayStringAt>
					"      touch me!     ", CENTER_MODE);
			HAL_GPIO_WritePin(LD_GPIO_PORT, LD4_RED, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e8:	4815      	ldr	r0, [pc, #84]	; (8000640 <TouchTask+0xb8>)
 80005ea:	f002 fc5d 	bl	8002ea8 <HAL_GPIO_WritePin>
		}
		vTaskDelay(100);
 80005ee:	2064      	movs	r0, #100	; 0x64
 80005f0:	f006 fe00 	bl	80071f4 <vTaskDelay>
		BSP_TS_GetState(&ts);
 80005f4:	a801      	add	r0, sp, #4
 80005f6:	f000 ff6b 	bl	80014d0 <BSP_TS_GetState>
		if (ts.TouchDetected) {
 80005fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0e2      	beq.n	80005c8 <TouchTask+0x40>
			sprintf(s, "  (%d,%d)  ", ts.X, ts.X);
 8000602:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000606:	4613      	mov	r3, r2
 8000608:	490e      	ldr	r1, [pc, #56]	; (8000644 <TouchTask+0xbc>)
 800060a:	a803      	add	r0, sp, #12
 800060c:	f007 fb84 	bl	8007d18 <siprintf>
					BSP_LCD_GetYSize() / 2 + BSP_LCD_GetYSize() / 4, s,
 8000610:	f000 fd16 	bl	8001040 <BSP_LCD_GetYSize>
 8000614:	0844      	lsrs	r4, r0, #1
 8000616:	f000 fd13 	bl	8001040 <BSP_LCD_GetYSize>
			BSP_LCD_DisplayStringAt(0,
 800061a:	eb04 0190 	add.w	r1, r4, r0, lsr #2
 800061e:	2301      	movs	r3, #1
 8000620:	aa03      	add	r2, sp, #12
 8000622:	b289      	uxth	r1, r1
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fe75 	bl	8001314 <BSP_LCD_DisplayStringAt>
			HAL_GPIO_WritePin(LD_GPIO_PORT, LD4_RED, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <TouchTask+0xb8>)
 8000632:	f002 fc39 	bl	8002ea8 <HAL_GPIO_WritePin>
 8000636:	e7da      	b.n	80005ee <TouchTask+0x66>
 8000638:	08008570 	.word	0x08008570
 800063c:	08008590 	.word	0x08008590
 8000640:	40021800 	.word	0x40021800
 8000644:	08008584 	.word	0x08008584

08000648 <WorkerTask>:
static void WorkerTask(__attribute__ ((unused)) void *pvParameters) {
 8000648:	b500      	push	{lr}
 800064a:	b089      	sub	sp, #36	; 0x24
		if (xSemaphoreTake(LCDSemaphore, ( TickType_t ) 10) == pdTRUE) {
 800064c:	210a      	movs	r1, #10
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <WorkerTask+0x4c>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f006 f9b7 	bl	80069c4 <xQueueSemaphoreTake>
 8000656:	2801      	cmp	r0, #1
 8000658:	d1f8      	bne.n	800064c <WorkerTask+0x4>
			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800065a:	480f      	ldr	r0, [pc, #60]	; (8000698 <WorkerTask+0x50>)
 800065c:	f000 fd42 	bl	80010e4 <BSP_LCD_SetTextColor>
			snprintf(text, sizeof(text), "Hello from Worker Task");
 8000660:	466c      	mov	r4, sp
 8000662:	4d0e      	ldr	r5, [pc, #56]	; (800069c <WorkerTask+0x54>)
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 0003 	ldmia.w	r5, {r0, r1}
 800066c:	f844 0b04 	str.w	r0, [r4], #4
 8000670:	f824 1b02 	strh.w	r1, [r4], #2
 8000674:	0c09      	lsrs	r1, r1, #16
 8000676:	7021      	strb	r1, [r4, #0]
			BSP_LCD_DisplayStringAt(0, 0, text, LEFT_MODE);
 8000678:	2303      	movs	r3, #3
 800067a:	466a      	mov	r2, sp
 800067c:	2100      	movs	r1, #0
 800067e:	4608      	mov	r0, r1
 8000680:	f000 fe48 	bl	8001314 <BSP_LCD_DisplayStringAt>
			xSemaphoreGive(LCDSemaphore);
 8000684:	2300      	movs	r3, #0
 8000686:	461a      	mov	r2, r3
 8000688:	4619      	mov	r1, r3
 800068a:	4802      	ldr	r0, [pc, #8]	; (8000694 <WorkerTask+0x4c>)
 800068c:	6800      	ldr	r0, [r0, #0]
 800068e:	f006 f8d9 	bl	8006844 <xQueueGenericSend>
	while (1) {
 8000692:	e7db      	b.n	800064c <WorkerTask+0x4>
 8000694:	2000859c 	.word	0x2000859c
 8000698:	ff0000ff 	.word	0xff0000ff
 800069c:	080085a8 	.word	0x080085a8

080006a0 <HeartbeatTask>:
static void HeartbeatTask(__attribute__ ((unused)) void *pvParameters) {
 80006a0:	b510      	push	{r4, lr}
 80006a2:	e00f      	b.n	80006c4 <HeartbeatTask+0x24>
			HAL_GPIO_TogglePin(LD_GPIO_PORT, LD4_RED);
 80006a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <HeartbeatTask+0x28>)
 80006aa:	f002 fc03 	bl	8002eb4 <HAL_GPIO_TogglePin>
			vTaskDelay(50);
 80006ae:	2032      	movs	r0, #50	; 0x32
 80006b0:	f006 fda0 	bl	80071f4 <vTaskDelay>
		for (uint8_t i = 0; i < 4; ++i) {
 80006b4:	3401      	adds	r4, #1
 80006b6:	b2e4      	uxtb	r4, r4
 80006b8:	2c03      	cmp	r4, #3
 80006ba:	d9f3      	bls.n	80006a4 <HeartbeatTask+0x4>
		vTaskDelay(300);
 80006bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006c0:	f006 fd98 	bl	80071f4 <vTaskDelay>
		for (uint8_t i = 0; i < 4; ++i) {
 80006c4:	2400      	movs	r4, #0
 80006c6:	e7f7      	b.n	80006b8 <HeartbeatTask+0x18>
 80006c8:	40021800 	.word	0x40021800

080006cc <CounterTask>:
static void CounterTask(__attribute__ ((unused)) void *pvParameters) {
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	b086      	sub	sp, #24
	int semaphore_take_errors = 0;
 80006d0:	2500      	movs	r5, #0
	int n = 0;
 80006d2:	462c      	mov	r4, r5
 80006d4:	e014      	b.n	8000700 <CounterTask+0x34>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80006d6:	4820      	ldr	r0, [pc, #128]	; (8000758 <CounterTask+0x8c>)
 80006d8:	f000 fd04 	bl	80010e4 <BSP_LCD_SetTextColor>
			snprintf(text, sizeof(text), "ST-Error = %d",
 80006dc:	1c6e      	adds	r6, r5, #1
 80006de:	462b      	mov	r3, r5
 80006e0:	4a1e      	ldr	r2, [pc, #120]	; (800075c <CounterTask+0x90>)
 80006e2:	2114      	movs	r1, #20
 80006e4:	a801      	add	r0, sp, #4
 80006e6:	f007 fae3 	bl	8007cb0 <sniprintf>
			BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, text,
 80006ea:	f000 fca9 	bl	8001040 <BSP_LCD_GetYSize>
 80006ee:	0841      	lsrs	r1, r0, #1
 80006f0:	3114      	adds	r1, #20
 80006f2:	2301      	movs	r3, #1
 80006f4:	aa01      	add	r2, sp, #4
 80006f6:	b289      	uxth	r1, r1
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fe0b 	bl	8001314 <BSP_LCD_DisplayStringAt>
			snprintf(text, sizeof(text), "ST-Error = %d",
 80006fe:	4635      	mov	r5, r6
		HAL_GPIO_TogglePin(LD_GPIO_PORT, LD3_GREEN);
 8000700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000704:	4816      	ldr	r0, [pc, #88]	; (8000760 <CounterTask+0x94>)
 8000706:	f002 fbd5 	bl	8002eb4 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 800070a:	2064      	movs	r0, #100	; 0x64
 800070c:	f006 fd72 	bl	80071f4 <vTaskDelay>
		if (xSemaphoreTake(LCDSemaphore,( TickType_t ) 10) == pdTRUE) {
 8000710:	210a      	movs	r1, #10
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <CounterTask+0x98>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	f006 f955 	bl	80069c4 <xQueueSemaphoreTake>
 800071a:	2801      	cmp	r0, #1
 800071c:	d1db      	bne.n	80006d6 <CounterTask+0xa>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800071e:	f1a0 1001 	sub.w	r0, r0, #65537	; 0x10001
 8000722:	f000 fcdf 	bl	80010e4 <BSP_LCD_SetTextColor>
			snprintf(text, sizeof(text), "Counter = %d", n++);
 8000726:	1c66      	adds	r6, r4, #1
 8000728:	4623      	mov	r3, r4
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <CounterTask+0x9c>)
 800072c:	2114      	movs	r1, #20
 800072e:	a801      	add	r0, sp, #4
 8000730:	f007 fabe 	bl	8007cb0 <sniprintf>
			BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, text,
 8000734:	f000 fc84 	bl	8001040 <BSP_LCD_GetYSize>
 8000738:	2301      	movs	r3, #1
 800073a:	aa01      	add	r2, sp, #4
 800073c:	f3c0 014f 	ubfx	r1, r0, #1, #16
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fde7 	bl	8001314 <BSP_LCD_DisplayStringAt>
			xSemaphoreGive(LCDSemaphore);
 8000746:	2300      	movs	r3, #0
 8000748:	461a      	mov	r2, r3
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <CounterTask+0x98>)
 800074e:	6800      	ldr	r0, [r0, #0]
 8000750:	f006 f878 	bl	8006844 <xQueueGenericSend>
			snprintf(text, sizeof(text), "Counter = %d", n++);
 8000754:	4634      	mov	r4, r6
 8000756:	e7d3      	b.n	8000700 <CounterTask+0x34>
 8000758:	ffff0000 	.word	0xffff0000
 800075c:	080085d0 	.word	0x080085d0
 8000760:	40021800 	.word	0x40021800
 8000764:	2000859c 	.word	0x2000859c
 8000768:	080085c0 	.word	0x080085c0

0800076c <app_main>:
void app_main(void) {
 800076c:	b500      	push	{lr}
 800076e:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(LD_GPIO_PORT, LD3_GREEN, RESET);
 8000770:	4c20      	ldr	r4, [pc, #128]	; (80007f4 <app_main+0x88>)
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000778:	4620      	mov	r0, r4
 800077a:	f002 fb95 	bl	8002ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_GPIO_PORT, LD4_RED, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000784:	4620      	mov	r0, r4
 8000786:	f002 fb8f 	bl	8002ea8 <HAL_GPIO_WritePin>
	BSP_LCD_Init();
 800078a:	f000 fcf1 	bl	8001170 <BSP_LCD_Init>
	LCDSemaphore = xSemaphoreCreateBinary();
 800078e:	2203      	movs	r2, #3
 8000790:	2100      	movs	r1, #0
 8000792:	2001      	movs	r0, #1
 8000794:	f006 f832 	bl	80067fc <xQueueGenericCreate>
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <app_main+0x8c>)
 800079a:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(LCDSemaphore);
 800079c:	2300      	movs	r3, #0
 800079e:	461a      	mov	r2, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	f006 f84f 	bl	8006844 <xQueueGenericSend>
	xTaskCreate(CounterTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80007a6:	4d15      	ldr	r5, [pc, #84]	; (80007fc <app_main+0x90>)
 80007a8:	2400      	movs	r4, #0
 80007aa:	9401      	str	r4, [sp, #4]
 80007ac:	2303      	movs	r3, #3
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4623      	mov	r3, r4
 80007b2:	22d0      	movs	r2, #208	; 0xd0
 80007b4:	4629      	mov	r1, r5
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <app_main+0x94>)
 80007b8:	f006 fba2 	bl	8006f00 <xTaskCreate>
	xTaskCreate(HeartbeatTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80007bc:	9401      	str	r4, [sp, #4]
 80007be:	2601      	movs	r6, #1
 80007c0:	9600      	str	r6, [sp, #0]
 80007c2:	4623      	mov	r3, r4
 80007c4:	22d0      	movs	r2, #208	; 0xd0
 80007c6:	4629      	mov	r1, r5
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <app_main+0x98>)
 80007ca:	f006 fb99 	bl	8006f00 <xTaskCreate>
	xTaskCreate(WorkerTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80007ce:	9401      	str	r4, [sp, #4]
 80007d0:	9600      	str	r6, [sp, #0]
 80007d2:	4623      	mov	r3, r4
 80007d4:	22d0      	movs	r2, #208	; 0xd0
 80007d6:	4629      	mov	r1, r5
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <app_main+0x9c>)
 80007da:	f006 fb91 	bl	8006f00 <xTaskCreate>
	xTaskCreate(TouchTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80007de:	9401      	str	r4, [sp, #4]
 80007e0:	9600      	str	r6, [sp, #0]
 80007e2:	4623      	mov	r3, r4
 80007e4:	22d0      	movs	r2, #208	; 0xd0
 80007e6:	4629      	mov	r1, r5
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <app_main+0xa0>)
 80007ea:	f006 fb89 	bl	8006f00 <xTaskCreate>
	vTaskStartScheduler();
 80007ee:	f006 fbbb 	bl	8006f68 <vTaskStartScheduler>
	for (;;)
 80007f2:	e7fe      	b.n	80007f2 <app_main+0x86>
 80007f4:	40021800 	.word	0x40021800
 80007f8:	2000859c 	.word	0x2000859c
 80007fc:	080085e0 	.word	0x080085e0
 8000800:	080006cd 	.word	0x080006cd
 8000804:	080006a1 	.word	0x080006a1
 8000808:	08000649 	.word	0x08000649
 800080c:	08000589 	.word	0x08000589

08000810 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8000810:	20f0      	movs	r0, #240	; 0xf0
 8000812:	4770      	bx	lr

08000814 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8000814:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000818:	4770      	bx	lr

0800081a <ili9341_WriteReg>:
{
 800081a:	b508      	push	{r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 800081c:	f000 fb78 	bl	8000f10 <LCD_IO_WriteReg>
}
 8000820:	bd08      	pop	{r3, pc}

08000822 <ili9341_DisplayOn>:
{
 8000822:	b508      	push	{r3, lr}
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000824:	2029      	movs	r0, #41	; 0x29
 8000826:	f7ff fff8 	bl	800081a <ili9341_WriteReg>
}
 800082a:	bd08      	pop	{r3, pc}

0800082c <ili9341_DisplayOff>:
{
 800082c:	b508      	push	{r3, lr}
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f7ff fff3 	bl	800081a <ili9341_WriteReg>
}
 8000834:	bd08      	pop	{r3, pc}

08000836 <ili9341_WriteData>:
{
 8000836:	b508      	push	{r3, lr}
  LCD_IO_WriteData(RegValue);
 8000838:	f000 fb4e 	bl	8000ed8 <LCD_IO_WriteData>
}
 800083c:	bd08      	pop	{r3, pc}

0800083e <ili9341_Init>:
{
 800083e:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000840:	f000 fae6 	bl	8000e10 <LCD_IO_Init>
  ili9341_WriteReg(0xCA);
 8000844:	20ca      	movs	r0, #202	; 0xca
 8000846:	f7ff ffe8 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800084a:	20c3      	movs	r0, #195	; 0xc3
 800084c:	f7ff fff3 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000850:	2008      	movs	r0, #8
 8000852:	f7ff fff0 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000856:	2050      	movs	r0, #80	; 0x50
 8000858:	f7ff ffed 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800085c:	20cf      	movs	r0, #207	; 0xcf
 800085e:	f7ff ffdc 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ffe7 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000868:	20c1      	movs	r0, #193	; 0xc1
 800086a:	f7ff ffe4 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800086e:	2030      	movs	r0, #48	; 0x30
 8000870:	f7ff ffe1 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000874:	20ed      	movs	r0, #237	; 0xed
 8000876:	f7ff ffd0 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800087a:	2064      	movs	r0, #100	; 0x64
 800087c:	f7ff ffdb 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000880:	2003      	movs	r0, #3
 8000882:	f7ff ffd8 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000886:	2012      	movs	r0, #18
 8000888:	f7ff ffd5 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800088c:	2081      	movs	r0, #129	; 0x81
 800088e:	f7ff ffd2 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000892:	20e8      	movs	r0, #232	; 0xe8
 8000894:	f7ff ffc1 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000898:	2085      	movs	r0, #133	; 0x85
 800089a:	f7ff ffcc 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff ffc9 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80008a4:	2078      	movs	r0, #120	; 0x78
 80008a6:	f7ff ffc6 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80008aa:	20cb      	movs	r0, #203	; 0xcb
 80008ac:	f7ff ffb5 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80008b0:	2039      	movs	r0, #57	; 0x39
 80008b2:	f7ff ffc0 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80008b6:	202c      	movs	r0, #44	; 0x2c
 80008b8:	f7ff ffbd 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff ffba 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80008c2:	2034      	movs	r0, #52	; 0x34
 80008c4:	f7ff ffb7 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff ffb4 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80008ce:	20f7      	movs	r0, #247	; 0xf7
 80008d0:	f7ff ffa3 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80008d4:	2020      	movs	r0, #32
 80008d6:	f7ff ffae 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80008da:	20ea      	movs	r0, #234	; 0xea
 80008dc:	f7ff ff9d 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ffa8 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ffa5 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80008ec:	20b1      	movs	r0, #177	; 0xb1
 80008ee:	f7ff ff94 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff9f 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80008f8:	201b      	movs	r0, #27
 80008fa:	f7ff ff9c 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80008fe:	20b6      	movs	r0, #182	; 0xb6
 8000900:	f7ff ff8b 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000904:	200a      	movs	r0, #10
 8000906:	f7ff ff96 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800090a:	20a2      	movs	r0, #162	; 0xa2
 800090c:	f7ff ff93 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000910:	20c0      	movs	r0, #192	; 0xc0
 8000912:	f7ff ff82 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000916:	2010      	movs	r0, #16
 8000918:	f7ff ff8d 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800091c:	20c1      	movs	r0, #193	; 0xc1
 800091e:	f7ff ff7c 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000922:	2010      	movs	r0, #16
 8000924:	f7ff ff87 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000928:	20c5      	movs	r0, #197	; 0xc5
 800092a:	f7ff ff76 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800092e:	2045      	movs	r0, #69	; 0x45
 8000930:	f7ff ff81 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000934:	2015      	movs	r0, #21
 8000936:	f7ff ff7e 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800093a:	20c7      	movs	r0, #199	; 0xc7
 800093c:	f7ff ff6d 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000940:	2090      	movs	r0, #144	; 0x90
 8000942:	f7ff ff78 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000946:	2036      	movs	r0, #54	; 0x36
 8000948:	f7ff ff67 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800094c:	20c8      	movs	r0, #200	; 0xc8
 800094e:	f7ff ff72 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000952:	20f2      	movs	r0, #242	; 0xf2
 8000954:	f7ff ff61 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff6c 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800095e:	20b0      	movs	r0, #176	; 0xb0
 8000960:	f7ff ff5b 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000964:	20c2      	movs	r0, #194	; 0xc2
 8000966:	f7ff ff66 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800096a:	20b6      	movs	r0, #182	; 0xb6
 800096c:	f7ff ff55 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000970:	200a      	movs	r0, #10
 8000972:	f7ff ff60 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000976:	20a7      	movs	r0, #167	; 0xa7
 8000978:	f7ff ff5d 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800097c:	2027      	movs	r0, #39	; 0x27
 800097e:	f7ff ff5a 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000982:	2004      	movs	r0, #4
 8000984:	f7ff ff57 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000988:	202a      	movs	r0, #42	; 0x2a
 800098a:	f7ff ff46 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ff51 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff4e 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff4b 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80009a0:	20ef      	movs	r0, #239	; 0xef
 80009a2:	f7ff ff48 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80009a6:	202b      	movs	r0, #43	; 0x2b
 80009a8:	f7ff ff37 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff42 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff3f 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff ff3c 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80009be:	203f      	movs	r0, #63	; 0x3f
 80009c0:	f7ff ff39 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80009c4:	20f6      	movs	r0, #246	; 0xf6
 80009c6:	f7ff ff28 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ff33 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff30 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80009d6:	2006      	movs	r0, #6
 80009d8:	f7ff ff2d 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_GRAM);
 80009dc:	202c      	movs	r0, #44	; 0x2c
 80009de:	f7ff ff1c 	bl	800081a <ili9341_WriteReg>
  LCD_Delay(200);
 80009e2:	20c8      	movs	r0, #200	; 0xc8
 80009e4:	f000 fad8 	bl	8000f98 <LCD_Delay>
  ili9341_WriteReg(LCD_GAMMA);
 80009e8:	2026      	movs	r0, #38	; 0x26
 80009ea:	f7ff ff16 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff ff21 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PGAMMA);
 80009f4:	20e0      	movs	r0, #224	; 0xe0
 80009f6:	f7ff ff10 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff ff1b 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000a00:	2029      	movs	r0, #41	; 0x29
 8000a02:	f7ff ff18 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000a06:	2024      	movs	r0, #36	; 0x24
 8000a08:	f7ff ff15 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000a0c:	200c      	movs	r0, #12
 8000a0e:	f7ff ff12 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000a12:	200e      	movs	r0, #14
 8000a14:	f7ff ff0f 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000a18:	2009      	movs	r0, #9
 8000a1a:	f7ff ff0c 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000a1e:	204e      	movs	r0, #78	; 0x4e
 8000a20:	f7ff ff09 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000a24:	2078      	movs	r0, #120	; 0x78
 8000a26:	f7ff ff06 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000a2a:	203c      	movs	r0, #60	; 0x3c
 8000a2c:	f7ff ff03 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000a30:	2009      	movs	r0, #9
 8000a32:	f7ff ff00 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000a36:	2013      	movs	r0, #19
 8000a38:	f7ff fefd 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000a3c:	2005      	movs	r0, #5
 8000a3e:	f7ff fefa 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000a42:	2017      	movs	r0, #23
 8000a44:	f7ff fef7 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000a48:	2011      	movs	r0, #17
 8000a4a:	f7ff fef4 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff fef1 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000a54:	20e1      	movs	r0, #225	; 0xe1
 8000a56:	f7ff fee0 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff feeb 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000a60:	2016      	movs	r0, #22
 8000a62:	f7ff fee8 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000a66:	201b      	movs	r0, #27
 8000a68:	f7ff fee5 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000a6c:	2004      	movs	r0, #4
 8000a6e:	f7ff fee2 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000a72:	2011      	movs	r0, #17
 8000a74:	f7ff fedf 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000a78:	2007      	movs	r0, #7
 8000a7a:	f7ff fedc 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000a7e:	2031      	movs	r0, #49	; 0x31
 8000a80:	f7ff fed9 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000a84:	2033      	movs	r0, #51	; 0x33
 8000a86:	f7ff fed6 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000a8a:	2042      	movs	r0, #66	; 0x42
 8000a8c:	f7ff fed3 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000a90:	2005      	movs	r0, #5
 8000a92:	f7ff fed0 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000a96:	200c      	movs	r0, #12
 8000a98:	f7ff fecd 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f7ff feca 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000aa2:	2028      	movs	r0, #40	; 0x28
 8000aa4:	f7ff fec7 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000aa8:	202f      	movs	r0, #47	; 0x2f
 8000aaa:	f7ff fec4 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff fec1 	bl	8000836 <ili9341_WriteData>
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000ab4:	2011      	movs	r0, #17
 8000ab6:	f7ff feb0 	bl	800081a <ili9341_WriteReg>
  LCD_Delay(200);
 8000aba:	20c8      	movs	r0, #200	; 0xc8
 8000abc:	f000 fa6c 	bl	8000f98 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000ac0:	2029      	movs	r0, #41	; 0x29
 8000ac2:	f7ff feaa 	bl	800081a <ili9341_WriteReg>
  ili9341_WriteReg(LCD_GRAM);
 8000ac6:	202c      	movs	r0, #44	; 0x2c
 8000ac8:	f7ff fea7 	bl	800081a <ili9341_WriteReg>
}
 8000acc:	bd08      	pop	{r3, pc}

08000ace <ili9341_ReadData>:
{
 8000ace:	b508      	push	{r3, lr}
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000ad0:	f000 fa3a 	bl	8000f48 <LCD_IO_ReadData>
}
 8000ad4:	bd08      	pop	{r3, pc}

08000ad6 <ili9341_ReadID>:
{
 8000ad6:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000ad8:	f000 f99a 	bl	8000e10 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000adc:	2103      	movs	r1, #3
 8000ade:	20d3      	movs	r0, #211	; 0xd3
 8000ae0:	f7ff fff5 	bl	8000ace <ili9341_ReadData>
}
 8000ae4:	b280      	uxth	r0, r0
 8000ae6:	bd08      	pop	{r3, pc}

08000ae8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000ae8:	b500      	push	{lr}
 8000aea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000aec:	2100      	movs	r1, #0
 8000aee:	9101      	str	r1, [sp, #4]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <SPIx_MspInit+0x54>)
 8000af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000af4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000af8:	645a      	str	r2, [r3, #68]	; 0x44
 8000afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000afc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000b00:	9201      	str	r2, [sp, #4]
 8000b02:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000b04:	9102      	str	r1, [sp, #8]
 8000b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b08:	f042 0220 	orr.w	r2, r2, #32
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000b18:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b1c:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000b22:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000b24:	2301      	movs	r3, #1
 8000b26:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000b28:	2305      	movs	r3, #5
 8000b2a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000b2c:	a903      	add	r1, sp, #12
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <SPIx_MspInit+0x58>)
 8000b30:	f002 f81c 	bl	8002b6c <HAL_GPIO_Init>
}
 8000b34:	b009      	add	sp, #36	; 0x24
 8000b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021400 	.word	0x40021400

08000b44 <I2Cx_MspInit>:
  if (hi2c->Instance == DISCOVERY_I2Cx)
 8000b44:	6802      	ldr	r2, [r0, #0]
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <I2Cx_MspInit+0xac>)
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d000      	beq.n	8000b4e <I2Cx_MspInit+0xa>
 8000b4c:	4770      	bx	lr
{
 8000b4e:	b530      	push	{r4, r5, lr}
 8000b50:	b089      	sub	sp, #36	; 0x24
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000b52:	2500      	movs	r5, #0
 8000b54:	9500      	str	r5, [sp, #0]
 8000b56:	4c27      	ldr	r4, [pc, #156]	; (8000bf4 <I2Cx_MspInit+0xb0>)
 8000b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000b6a:	9501      	str	r5, [sp, #4]
 8000b6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6323      	str	r3, [r4, #48]	; 0x30
 8000b74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8000b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000b88:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000b92:	a903      	add	r1, sp, #12
 8000b94:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <I2Cx_MspInit+0xb4>)
 8000b96:	f001 ffe9 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8000b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ba0:	a903      	add	r1, sp, #12
 8000ba2:	4816      	ldr	r0, [pc, #88]	; (8000bfc <I2Cx_MspInit+0xb8>)
 8000ba4:	f001 ffe2 	bl	8002b6c <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8000ba8:	9502      	str	r5, [sp, #8]
 8000baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bb0:	6423      	str	r3, [r4, #64]	; 0x40
 8000bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 8000bbc:	6a23      	ldr	r3, [r4, #32]
 8000bbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bc2:	6223      	str	r3, [r4, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8000bc4:	6a23      	ldr	r3, [r4, #32]
 8000bc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000bca:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000bcc:	462a      	mov	r2, r5
 8000bce:	210f      	movs	r1, #15
 8000bd0:	2048      	movs	r0, #72	; 0x48
 8000bd2:	f001 fd49 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000bd6:	2048      	movs	r0, #72	; 0x48
 8000bd8:	f001 fd7a 	bl	80026d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000bdc:	462a      	mov	r2, r5
 8000bde:	210f      	movs	r1, #15
 8000be0:	2049      	movs	r0, #73	; 0x49
 8000be2:	f001 fd41 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8000be6:	2049      	movs	r0, #73	; 0x49
 8000be8:	f001 fd72 	bl	80026d0 <HAL_NVIC_EnableIRQ>
}
 8000bec:	b009      	add	sp, #36	; 0x24
 8000bee:	bd30      	pop	{r4, r5, pc}
 8000bf0:	40005c00 	.word	0x40005c00
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020800 	.word	0x40020800

08000c00 <I2Cx_ITConfig>:
{
 8000c00:	b510      	push	{r4, lr}
 8000c02:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 8000c04:	2400      	movs	r4, #0
 8000c06:	9400      	str	r4, [sp, #0]
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <I2Cx_ITConfig+0x4c>)
 8000c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c0c:	f042 0201 	orr.w	r2, r2, #1
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8000c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c20:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000c26:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8000c28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c2c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8000c2e:	a901      	add	r1, sp, #4
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <I2Cx_ITConfig+0x50>)
 8000c32:	f001 ff9b 	bl	8002b6c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8000c36:	4622      	mov	r2, r4
 8000c38:	210f      	movs	r1, #15
 8000c3a:	2028      	movs	r0, #40	; 0x28
 8000c3c:	f001 fd14 	bl	8002668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8000c40:	2028      	movs	r0, #40	; 0x28
 8000c42:	f001 fd45 	bl	80026d0 <HAL_NVIC_EnableIRQ>
}
 8000c46:	b006      	add	sp, #24
 8000c48:	bd10      	pop	{r4, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000

08000c54 <SPIx_Init>:
{
 8000c54:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <SPIx_Init+0x44>)
 8000c58:	f004 fe8c 	bl	8005974 <HAL_SPI_GetState>
 8000c5c:	b100      	cbz	r0, 8000c60 <SPIx_Init+0xc>
}
 8000c5e:	bd10      	pop	{r4, pc}
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000c60:	4c0d      	ldr	r4, [pc, #52]	; (8000c98 <SPIx_Init+0x44>)
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <SPIx_Init+0x48>)
 8000c64:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c66:	2318      	movs	r3, #24
 8000c68:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60a3      	str	r3, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000c6e:	6163      	str	r3, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000c70:	6123      	str	r3, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000c72:	62a3      	str	r3, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000c74:	2207      	movs	r2, #7
 8000c76:	62e2      	str	r2, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000c78:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000c7a:	6223      	str	r3, [r4, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	61a2      	str	r2, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000c82:	6263      	str	r3, [r4, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000c84:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c88:	6063      	str	r3, [r4, #4]
    SPIx_MspInit(&SpiHandle);
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f7ff ff2c 	bl	8000ae8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000c90:	4620      	mov	r0, r4
 8000c92:	f004 fb4d 	bl	8005330 <HAL_SPI_Init>
}
 8000c96:	e7e2      	b.n	8000c5e <SPIx_Init+0xa>
 8000c98:	2000010c 	.word	0x2000010c
 8000c9c:	40015000 	.word	0x40015000

08000ca0 <SPIx_Error>:
{
 8000ca0:	b508      	push	{r3, lr}
  HAL_SPI_DeInit(&SpiHandle);
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <SPIx_Error+0x10>)
 8000ca4:	f004 fba3 	bl	80053ee <HAL_SPI_DeInit>
  SPIx_Init();
 8000ca8:	f7ff ffd4 	bl	8000c54 <SPIx_Init>
}
 8000cac:	bd08      	pop	{r3, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000010c 	.word	0x2000010c

08000cb4 <SPIx_Write>:
{
 8000cb4:	b500      	push	{lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <SPIx_Write+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f10d 0106 	add.w	r1, sp, #6
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <SPIx_Write+0x2c>)
 8000cc8:	f004 fba7 	bl	800541a <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8000ccc:	b910      	cbnz	r0, 8000cd4 <SPIx_Write+0x20>
}
 8000cce:	b003      	add	sp, #12
 8000cd0:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 8000cd4:	f7ff ffe4 	bl	8000ca0 <SPIx_Error>
}
 8000cd8:	e7f9      	b.n	8000cce <SPIx_Write+0x1a>
 8000cda:	bf00      	nop
 8000cdc:	2000004c 	.word	0x2000004c
 8000ce0:	2000010c 	.word	0x2000010c

08000ce4 <SPIx_Read>:
{
 8000ce4:	b500      	push	{lr}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	4602      	mov	r2, r0
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <SPIx_Read+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	a901      	add	r1, sp, #4
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <SPIx_Read+0x28>)
 8000cf2:	f004 fd85 	bl	8005800 <HAL_SPI_Receive>
  if(status != HAL_OK)
 8000cf6:	b918      	cbnz	r0, 8000d00 <SPIx_Read+0x1c>
}
 8000cf8:	9801      	ldr	r0, [sp, #4]
 8000cfa:	b003      	add	sp, #12
 8000cfc:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 8000d00:	f7ff ffce 	bl	8000ca0 <SPIx_Error>
 8000d04:	e7f8      	b.n	8000cf8 <SPIx_Read+0x14>
 8000d06:	bf00      	nop
 8000d08:	2000004c 	.word	0x2000004c
 8000d0c:	2000010c 	.word	0x2000010c

08000d10 <I2Cx_Init>:
{
 8000d10:	b510      	push	{r4, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <I2Cx_Init+0x38>)
 8000d14:	f003 faf4 	bl	8004300 <HAL_I2C_GetState>
 8000d18:	b100      	cbz	r0, 8000d1c <I2Cx_Init+0xc>
}
 8000d1a:	bd10      	pop	{r4, pc}
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <I2Cx_Init+0x38>)
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <I2Cx_Init+0x3c>)
 8000d20:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <I2Cx_Init+0x40>)
 8000d24:	6063      	str	r3, [r4, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60a3      	str	r3, [r4, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8000d2a:	60e3      	str	r3, [r4, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000d2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d30:	6122      	str	r2, [r4, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8000d32:	6163      	str	r3, [r4, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8000d34:	61a3      	str	r3, [r4, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8000d36:	61e3      	str	r3, [r4, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8000d38:	6223      	str	r3, [r4, #32]
    I2Cx_MspInit(&I2cHandle);
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f7ff ff02 	bl	8000b44 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000d40:	4620      	mov	r0, r4
 8000d42:	f002 ffc1 	bl	8003cc8 <HAL_I2C_Init>
}
 8000d46:	e7e8      	b.n	8000d1a <I2Cx_Init+0xa>
 8000d48:	200085a0 	.word	0x200085a0
 8000d4c:	40005c00 	.word	0x40005c00
 8000d50:	000186a0 	.word	0x000186a0

08000d54 <I2Cx_Error>:
{
 8000d54:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 8000d56:	4803      	ldr	r0, [pc, #12]	; (8000d64 <I2Cx_Error+0x10>)
 8000d58:	f003 f894 	bl	8003e84 <HAL_I2C_DeInit>
  I2Cx_Init();
 8000d5c:	f7ff ffd8 	bl	8000d10 <I2Cx_Init>
}
 8000d60:	bd08      	pop	{r3, pc}
 8000d62:	bf00      	nop
 8000d64:	200085a0 	.word	0x200085a0

08000d68 <I2Cx_WriteData>:
  {
 8000d68:	b500      	push	{lr}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <I2Cx_WriteData+0x30>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2301      	movs	r3, #1
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	f10d 0217 	add.w	r2, sp, #23
 8000d7e:	9200      	str	r2, [sp, #0]
 8000d80:	460a      	mov	r2, r1
 8000d82:	4601      	mov	r1, r0
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <I2Cx_WriteData+0x34>)
 8000d86:	f003 f897 	bl	8003eb8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000d8a:	b910      	cbnz	r0, 8000d92 <I2Cx_WriteData+0x2a>
}
 8000d8c:	b007      	add	sp, #28
 8000d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    I2Cx_Error();
 8000d92:	f7ff ffdf 	bl	8000d54 <I2Cx_Error>
}
 8000d96:	e7f9      	b.n	8000d8c <I2Cx_WriteData+0x24>
 8000d98:	20000048 	.word	0x20000048
 8000d9c:	200085a0 	.word	0x200085a0

08000da0 <I2Cx_ReadData>:
{
 8000da0:	b500      	push	{lr}
 8000da2:	b087      	sub	sp, #28
 8000da4:	460a      	mov	r2, r1
  uint8_t value = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <I2Cx_ReadData+0x38>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	9302      	str	r3, [sp, #8]
 8000db2:	2301      	movs	r3, #1
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	f10d 0117 	add.w	r1, sp, #23
 8000dba:	9100      	str	r1, [sp, #0]
 8000dbc:	4601      	mov	r1, r0
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <I2Cx_ReadData+0x3c>)
 8000dc0:	f003 f92c 	bl	800401c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000dc4:	b920      	cbnz	r0, 8000dd0 <I2Cx_ReadData+0x30>
}
 8000dc6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000dca:	b007      	add	sp, #28
 8000dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    I2Cx_Error();
 8000dd0:	f7ff ffc0 	bl	8000d54 <I2Cx_Error>
 8000dd4:	e7f7      	b.n	8000dc6 <I2Cx_ReadData+0x26>
 8000dd6:	bf00      	nop
 8000dd8:	20000048 	.word	0x20000048
 8000ddc:	200085a0 	.word	0x200085a0

08000de0 <I2Cx_ReadBuffer>:
{
 8000de0:	b510      	push	{r4, lr}
 8000de2:	b084      	sub	sp, #16
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8000de4:	4c08      	ldr	r4, [pc, #32]	; (8000e08 <I2Cx_ReadBuffer+0x28>)
 8000de6:	6824      	ldr	r4, [r4, #0]
 8000de8:	9402      	str	r4, [sp, #8]
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	9200      	str	r2, [sp, #0]
 8000dee:	2301      	movs	r3, #1
 8000df0:	460a      	mov	r2, r1
 8000df2:	4601      	mov	r1, r0
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <I2Cx_ReadBuffer+0x2c>)
 8000df6:	f003 f911 	bl	800401c <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 8000dfa:	b908      	cbnz	r0, 8000e00 <I2Cx_ReadBuffer+0x20>
}
 8000dfc:	b004      	add	sp, #16
 8000dfe:	bd10      	pop	{r4, pc}
    I2Cx_Error();
 8000e00:	f7ff ffa8 	bl	8000d54 <I2Cx_Error>
    return 1;
 8000e04:	2001      	movs	r0, #1
 8000e06:	e7f9      	b.n	8000dfc <I2Cx_ReadBuffer+0x1c>
 8000e08:	20000048 	.word	0x20000048
 8000e0c:	200085a0 	.word	0x200085a0

08000e10 <LCD_IO_Init>:
  */
void LCD_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <LCD_IO_Init+0xbc>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b103      	cbz	r3, 8000e18 <LCD_IO_Init+0x8>
 8000e16:	4770      	bx	lr
{
 8000e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e1c:	b088      	sub	sp, #32
  {
    Is_LCD_IO_Initialized = 1; 
 8000e1e:	2601      	movs	r6, #1
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <LCD_IO_Init+0xbc>)
 8000e22:	701e      	strb	r6, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000e24:	2500      	movs	r5, #0
 8000e26:	9500      	str	r5, [sp, #0]
 8000e28:	4c29      	ldr	r4, [pc, #164]	; (8000ed0 <LCD_IO_Init+0xc0>)
 8000e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	6323      	str	r3, [r4, #48]	; 0x30
 8000e32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e40:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e42:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e44:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e46:	f04f 0802 	mov.w	r8, #2
 8000e4a:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000e4e:	4f21      	ldr	r7, [pc, #132]	; (8000ed4 <LCD_IO_Init+0xc4>)
 8000e50:	a903      	add	r1, sp, #12
 8000e52:	4638      	mov	r0, r7
 8000e54:	f001 fe8a 	bl	8002b6c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000e58:	9501      	str	r5, [sp, #4]
 8000e5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	6323      	str	r3, [r4, #48]	; 0x30
 8000e62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e72:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e74:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e76:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000e7a:	a903      	add	r1, sp, #12
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	f001 fe75 	bl	8002b6c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000e82:	9502      	str	r5, [sp, #8]
 8000e84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	9b02      	ldr	r3, [sp, #8]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000e96:	2704      	movs	r7, #4
 8000e98:	9703      	str	r7, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e9a:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e9c:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e9e:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000ea2:	f5a4 5440 	sub.w	r4, r4, #12288	; 0x3000
 8000ea6:	a903      	add	r1, sp, #12
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f001 fe5f 	bl	8002b6c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000eae:	462a      	mov	r2, r5
 8000eb0:	4639      	mov	r1, r7
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f001 fff8 	bl	8002ea8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000eb8:	4632      	mov	r2, r6
 8000eba:	4639      	mov	r1, r7
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f001 fff3 	bl	8002ea8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000ec2:	f7ff fec7 	bl	8000c54 <SPIx_Init>
  }
}
 8000ec6:	b008      	add	sp, #32
 8000ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ecc:	20000108 	.word	0x20000108
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000ed8:	b538      	push	{r3, r4, r5, lr}
 8000eda:	4604      	mov	r4, r0
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <LCD_IO_WriteData+0x30>)
 8000ee4:	f001 ffe0 	bl	8002ea8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000ee8:	4d08      	ldr	r5, [pc, #32]	; (8000f0c <LCD_IO_WriteData+0x34>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	2104      	movs	r1, #4
 8000eee:	4628      	mov	r0, r5
 8000ef0:	f001 ffda 	bl	8002ea8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff fedd 	bl	8000cb4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000efa:	2201      	movs	r2, #1
 8000efc:	2104      	movs	r1, #4
 8000efe:	4628      	mov	r0, r5
 8000f00:	f001 ffd2 	bl	8002ea8 <HAL_GPIO_WritePin>
}
 8000f04:	bd38      	pop	{r3, r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40020800 	.word	0x40020800

08000f10 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4604      	mov	r4, r0
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <LCD_IO_WriteReg+0x30>)
 8000f1c:	f001 ffc4 	bl	8002ea8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000f20:	4d08      	ldr	r5, [pc, #32]	; (8000f44 <LCD_IO_WriteReg+0x34>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	2104      	movs	r1, #4
 8000f26:	4628      	mov	r0, r5
 8000f28:	f001 ffbe 	bl	8002ea8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff fec1 	bl	8000cb4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f32:	2201      	movs	r2, #1
 8000f34:	2104      	movs	r1, #4
 8000f36:	4628      	mov	r0, r5
 8000f38:	f001 ffb6 	bl	8002ea8 <HAL_GPIO_WritePin>
}
 8000f3c:	bd38      	pop	{r3, r4, r5, pc}
 8000f3e:	bf00      	nop
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	40020800 	.word	0x40020800

08000f48 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000f4e:	4e10      	ldr	r6, [pc, #64]	; (8000f90 <LCD_IO_ReadData+0x48>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	2104      	movs	r1, #4
 8000f54:	4630      	mov	r0, r6
 8000f56:	f001 ffa7 	bl	8002ea8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f5a:	4f0e      	ldr	r7, [pc, #56]	; (8000f94 <LCD_IO_ReadData+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	4638      	mov	r0, r7
 8000f64:	f001 ffa0 	bl	8002ea8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000f68:	4628      	mov	r0, r5
 8000f6a:	f7ff fea3 	bl	8000cb4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f7ff feb8 	bl	8000ce4 <SPIx_Read>
 8000f74:	4604      	mov	r4, r0

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	f001 ff93 	bl	8002ea8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f82:	2201      	movs	r2, #1
 8000f84:	2104      	movs	r1, #4
 8000f86:	4630      	mov	r0, r6
 8000f88:	f001 ff8e 	bl	8002ea8 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000f98:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8000f9a:	f001 fb3f 	bl	800261c <HAL_Delay>
}
 8000f9e:	bd08      	pop	{r3, pc}

08000fa0 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8000fa0:	b508      	push	{r3, lr}
  I2Cx_Init();
 8000fa2:	f7ff feb5 	bl	8000d10 <I2Cx_Init>
}
 8000fa6:	bd08      	pop	{r3, pc}

08000fa8 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8000fa8:	b508      	push	{r3, lr}
  I2Cx_ITConfig();
 8000faa:	f7ff fe29 	bl	8000c00 <I2Cx_ITConfig>
}
 8000fae:	bd08      	pop	{r3, pc}

08000fb0 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fb0:	b508      	push	{r3, lr}
  I2Cx_WriteData(Addr, Reg, Value);
 8000fb2:	f7ff fed9 	bl	8000d68 <I2Cx_WriteData>
}
 8000fb6:	bd08      	pop	{r3, pc}

08000fb8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8000fb8:	b508      	push	{r3, lr}
  return I2Cx_ReadData(Addr, Reg);
 8000fba:	f7ff fef1 	bl	8000da0 <I2Cx_ReadData>
}
 8000fbe:	bd08      	pop	{r3, pc}

08000fc0 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8000fc0:	b508      	push	{r3, lr}
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8000fc2:	f7ff ff0d 	bl	8000de0 <I2Cx_ReadBuffer>
}
 8000fc6:	b280      	uxth	r0, r0
 8000fc8:	bd08      	pop	{r3, pc}

08000fca <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8000fca:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8000fcc:	f001 fb26 	bl	800261c <HAL_Delay>
}
 8000fd0:	bd08      	pop	{r3, pc}
	...

08000fd4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	4604      	mov	r4, r0
 8000fda:	460d      	mov	r5, r1
 8000fdc:	4616      	mov	r6, r2
 8000fde:	461f      	mov	r7, r3
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <FillBuffer+0x54>)
 8000fe2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000fe6:	6043      	str	r3, [r0, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	6083      	str	r3, [r0, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8000fec:	9b08      	ldr	r3, [sp, #32]
 8000fee:	60c3      	str	r3, [r0, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <FillBuffer+0x58>)
 8000ff2:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000ff4:	f001 fbcf 	bl	8002796 <HAL_DMA2D_Init>
 8000ff8:	b108      	cbz	r0, 8000ffe <FillBuffer+0x2a>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
      }
    }
  } 
}
 8000ffa:	b003      	add	sp, #12
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8000ffe:	4621      	mov	r1, r4
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <FillBuffer+0x54>)
 8001002:	f001 fd51 	bl	8002aa8 <HAL_DMA2D_ConfigLayer>
 8001006:	2800      	cmp	r0, #0
 8001008:	d1f7      	bne.n	8000ffa <FillBuffer+0x26>
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800100a:	9700      	str	r7, [sp, #0]
 800100c:	4633      	mov	r3, r6
 800100e:	462a      	mov	r2, r5
 8001010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <FillBuffer+0x54>)
 8001014:	f001 fbec 	bl	80027f0 <HAL_DMA2D_Start>
 8001018:	2800      	cmp	r0, #0
 800101a:	d1ee      	bne.n	8000ffa <FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800101c:	210a      	movs	r1, #10
 800101e:	4802      	ldr	r0, [pc, #8]	; (8001028 <FillBuffer+0x54>)
 8001020:	f001 fc02 	bl	8002828 <HAL_DMA2D_PollForTransfer>
}
 8001024:	e7e9      	b.n	8000ffa <FillBuffer+0x26>
 8001026:	bf00      	nop
 8001028:	20000168 	.word	0x20000168
 800102c:	4002b000 	.word	0x4002b000

08001030 <BSP_LCD_GetXSize>:
{
 8001030:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8001032:	4b02      	ldr	r3, [pc, #8]	; (800103c <BSP_LCD_GetXSize+0xc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	4798      	blx	r3
}
 800103a:	bd08      	pop	{r3, pc}
 800103c:	200085f4 	.word	0x200085f4

08001040 <BSP_LCD_GetYSize>:
{
 8001040:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8001042:	4b02      	ldr	r3, [pc, #8]	; (800104c <BSP_LCD_GetYSize+0xc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	4798      	blx	r3
}
 800104a:	bd08      	pop	{r3, pc}
 800104c:	200085f4 	.word	0x200085f4

08001050 <BSP_LCD_LayerDefaultInit>:
{     
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	4604      	mov	r4, r0
 8001056:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 8001058:	2500      	movs	r5, #0
 800105a:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800105c:	f7ff ffe8 	bl	8001030 <BSP_LCD_GetXSize>
 8001060:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 8001062:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001064:	f7ff ffec 	bl	8001040 <BSP_LCD_GetYSize>
 8001068:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800106a:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 800106c:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 800106e:	23ff      	movs	r3, #255	; 0xff
 8001070:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 8001072:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8001074:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8001078:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 800107c:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001080:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001084:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001086:	2307      	movs	r3, #7
 8001088:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800108a:	f7ff ffd1 	bl	8001030 <BSP_LCD_GetXSize>
 800108e:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001090:	f7ff ffd6 	bl	8001040 <BSP_LCD_GetYSize>
 8001094:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 8001096:	4d0d      	ldr	r5, [pc, #52]	; (80010cc <BSP_LCD_LayerDefaultInit+0x7c>)
 8001098:	4622      	mov	r2, r4
 800109a:	a901      	add	r1, sp, #4
 800109c:	4628      	mov	r0, r5
 800109e:	f003 fb35 	bl	800470c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <BSP_LCD_LayerDefaultInit+0x80>)
 80010a4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80010a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <BSP_LCD_LayerDefaultInit+0x84>)
 80010b4:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80010b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80010ba:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80010be:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  HAL_LTDC_EnableDither(&hltdc);
 80010c2:	4628      	mov	r0, r5
 80010c4:	f003 fb50 	bl	8004768 <HAL_LTDC_EnableDither>
}
 80010c8:	b00e      	add	sp, #56	; 0x38
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	200086b0 	.word	0x200086b0
 80010d0:	200001a8 	.word	0x200001a8
 80010d4:	20000008 	.word	0x20000008

080010d8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80010d8:	4b01      	ldr	r3, [pc, #4]	; (80010e0 <BSP_LCD_SelectLayer+0x8>)
 80010da:	6018      	str	r0, [r3, #0]
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000164 	.word	0x20000164

080010e4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <BSP_LCD_SetTextColor+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80010ec:	4a02      	ldr	r2, [pc, #8]	; (80010f8 <BSP_LCD_SetTextColor+0x14>)
 80010ee:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80010f2:	4770      	bx	lr
 80010f4:	20000164 	.word	0x20000164
 80010f8:	200001a8 	.word	0x200001a8

080010fc <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <BSP_LCD_SetBackColor+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001104:	4a03      	ldr	r2, [pc, #12]	; (8001114 <BSP_LCD_SetBackColor+0x18>)
 8001106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800110a:	6058      	str	r0, [r3, #4]
}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000164 	.word	0x20000164
 8001114:	200001a8 	.word	0x200001a8

08001118 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <BSP_LCD_SetFont+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <BSP_LCD_SetFont+0x18>)
 8001122:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001126:	6098      	str	r0, [r3, #8]
}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000164 	.word	0x20000164
 8001130:	200001a8 	.word	0x200001a8

08001134 <BSP_LCD_Clear>:
{ 
 8001134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001136:	b083      	sub	sp, #12
 8001138:	4605      	mov	r5, r0
  FillBuffer(ActiveLayer, (uint32_t *)(hltdc.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <BSP_LCD_Clear+0x34>)
 800113c:	681e      	ldr	r6, [r3, #0]
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <BSP_LCD_Clear+0x38>)
 8001140:	2334      	movs	r3, #52	; 0x34
 8001142:	fb03 2306 	mla	r3, r3, r6, r2
 8001146:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001148:	f7ff ff72 	bl	8001030 <BSP_LCD_GetXSize>
 800114c:	4604      	mov	r4, r0
 800114e:	f7ff ff77 	bl	8001040 <BSP_LCD_GetYSize>
 8001152:	4603      	mov	r3, r0
 8001154:	9501      	str	r5, [sp, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	9200      	str	r2, [sp, #0]
 800115a:	4622      	mov	r2, r4
 800115c:	4639      	mov	r1, r7
 800115e:	4630      	mov	r0, r6
 8001160:	f7ff ff38 	bl	8000fd4 <FillBuffer>
}
 8001164:	b003      	add	sp, #12
 8001166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001168:	20000164 	.word	0x20000164
 800116c:	200086b0 	.word	0x200086b0

08001170 <BSP_LCD_Init>:
{ 
 8001170:	b508      	push	{r3, lr}
    LcdDrv = &ili9341_drv;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <BSP_LCD_Init+0x4c>)
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <BSP_LCD_Init+0x50>)
 8001176:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4798      	blx	r3
    BSP_SDRAM_Init();
 800117c:	f000 f97c 	bl	8001478 <BSP_SDRAM_Init>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <BSP_LCD_Init+0x54>)
 8001182:	f7ff ffc9 	bl	8001118 <BSP_LCD_SetFont>
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8001186:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff ff60 	bl	8001050 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff ffa1 	bl	80010d8 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001196:	f04f 30ff 	mov.w	r0, #4294967295
 800119a:	f7ff ffcb 	bl	8001134 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800119e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011a2:	f7ff ff9f 	bl	80010e4 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011a6:	f04f 30ff 	mov.w	r0, #4294967295
 80011aa:	f7ff ffa7 	bl	80010fc <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font16);
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <BSP_LCD_Init+0x58>)
 80011b0:	f7ff ffb2 	bl	8001118 <BSP_LCD_SetFont>
    HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f001 fa31 	bl	800261c <HAL_Delay>
}  
 80011ba:	bd08      	pop	{r3, pc}
 80011bc:	20000010 	.word	0x20000010
 80011c0:	200085f4 	.word	0x200085f4
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000000 	.word	0x20000000

080011cc <BSP_LCD_DrawPixel>:
{
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ce:	4606      	mov	r6, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	4615      	mov	r5, r2
  *(__IO uint32_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <BSP_LCD_DrawPixel+0x24>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <BSP_LCD_DrawPixel+0x28>)
 80011da:	2134      	movs	r1, #52	; 0x34
 80011dc:	fb01 2303 	mla	r3, r1, r3, r2
 80011e0:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80011e2:	f7ff ff25 	bl	8001030 <BSP_LCD_GetXSize>
 80011e6:	fb00 6004 	mla	r0, r0, r4, r6
 80011ea:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 80011ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f0:	20000164 	.word	0x20000164
 80011f4:	200086b0 	.word	0x200086b0

080011f8 <DrawChar>:
{
 80011f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011fc:	b083      	sub	sp, #12
 80011fe:	4681      	mov	r9, r0
 8001200:	460e      	mov	r6, r1
 8001202:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <DrawChar+0xe0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800120c:	4a33      	ldr	r2, [pc, #204]	; (80012dc <DrawChar+0xe4>)
 800120e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	88da      	ldrh	r2, [r3, #6]
 8001216:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001218:	889d      	ldrh	r5, [r3, #4]
  offset = 8 *((width + 7)/8) -  width ;
 800121a:	f105 0b07 	add.w	fp, r5, #7
 800121e:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8001222:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8001226:	fa5f f888 	uxtb.w	r8, r8
 800122a:	b2eb      	uxtb	r3, r5
 800122c:	eba8 0803 	sub.w	r8, r8, r3
 8001230:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8001234:	f04f 0a00 	mov.w	sl, #0
 8001238:	e034      	b.n	80012a4 <DrawChar+0xac>
      line =  pchar[0];      
 800123a:	9a00      	ldr	r2, [sp, #0]
 800123c:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 800123e:	2400      	movs	r4, #0
 8001240:	e014      	b.n	800126c <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];
 8001242:	9900      	ldr	r1, [sp, #0]
 8001244:	5ccb      	ldrb	r3, [r1, r3]
 8001246:	7857      	ldrb	r7, [r2, #1]
 8001248:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 800124c:	e7f7      	b.n	800123e <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <DrawChar+0xe0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <DrawChar+0xe4>)
 8001258:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800125c:	eb09 0004 	add.w	r0, r9, r4
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4631      	mov	r1, r6
 8001264:	b280      	uxth	r0, r0
 8001266:	f7ff ffb1 	bl	80011cc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800126a:	3401      	adds	r4, #1
 800126c:	42a5      	cmp	r5, r4
 800126e:	d915      	bls.n	800129c <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 8001270:	1b2b      	subs	r3, r5, r4
 8001272:	4443      	add	r3, r8
 8001274:	3b01      	subs	r3, #1
 8001276:	2201      	movs	r2, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	423b      	tst	r3, r7
 800127e:	d0e6      	beq.n	800124e <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <DrawChar+0xe0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001288:	eb09 0004 	add.w	r0, r9, r4
 800128c:	4a13      	ldr	r2, [pc, #76]	; (80012dc <DrawChar+0xe4>)
 800128e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001292:	4631      	mov	r1, r6
 8001294:	b280      	uxth	r0, r0
 8001296:	f7ff ff99 	bl	80011cc <BSP_LCD_DrawPixel>
 800129a:	e7e6      	b.n	800126a <DrawChar+0x72>
    Ypos++;
 800129c:	3601      	adds	r6, #1
 800129e:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 80012a0:	f10a 0a01 	add.w	sl, sl, #1
 80012a4:	9b01      	ldr	r3, [sp, #4]
 80012a6:	4553      	cmp	r3, sl
 80012a8:	d912      	bls.n	80012d0 <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80012aa:	fb0a f30b 	mul.w	r3, sl, fp
 80012ae:	9a00      	ldr	r2, [sp, #0]
 80012b0:	441a      	add	r2, r3
    switch(((width + 7)/8))
 80012b2:	f1bb 0f01 	cmp.w	fp, #1
 80012b6:	d0c0      	beq.n	800123a <DrawChar+0x42>
 80012b8:	f1bb 0f02 	cmp.w	fp, #2
 80012bc:	d0c1      	beq.n	8001242 <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80012be:	9900      	ldr	r1, [sp, #0]
 80012c0:	5ccb      	ldrb	r3, [r1, r3]
 80012c2:	7857      	ldrb	r7, [r2, #1]
 80012c4:	023f      	lsls	r7, r7, #8
 80012c6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 80012ca:	7893      	ldrb	r3, [r2, #2]
 80012cc:	431f      	orrs	r7, r3
      break;
 80012ce:	e7b6      	b.n	800123e <DrawChar+0x46>
}
 80012d0:	b003      	add	sp, #12
 80012d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d6:	bf00      	nop
 80012d8:	20000164 	.word	0x20000164
 80012dc:	200001a8 	.word	0x200001a8

080012e0 <BSP_LCD_DisplayChar>:
{
 80012e0:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <BSP_LCD_DisplayChar+0x2c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012ea:	4c09      	ldr	r4, [pc, #36]	; (8001310 <BSP_LCD_DisplayChar+0x30>)
 80012ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80012f0:	689c      	ldr	r4, [r3, #8]
 80012f2:	6825      	ldr	r5, [r4, #0]
 80012f4:	3a20      	subs	r2, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012f6:	88e3      	ldrh	r3, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012f8:	fb03 f202 	mul.w	r2, r3, r2
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012fc:	88a3      	ldrh	r3, [r4, #4]
 80012fe:	3307      	adds	r3, #7
 8001300:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001302:	fb03 5202 	mla	r2, r3, r2, r5
 8001306:	f7ff ff77 	bl	80011f8 <DrawChar>
}
 800130a:	bd38      	pop	{r3, r4, r5, pc}
 800130c:	20000164 	.word	0x20000164
 8001310:	200001a8 	.word	0x200001a8

08001314 <BSP_LCD_DisplayStringAt>:
{
 8001314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001318:	4606      	mov	r6, r0
 800131a:	460f      	mov	r7, r1
 800131c:	4615      	mov	r5, r2
 800131e:	4698      	mov	r8, r3
  uint32_t size = 0, xsize = 0; 
 8001320:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 8001322:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001326:	b109      	cbz	r1, 800132c <BSP_LCD_DisplayStringAt+0x18>
 8001328:	3401      	adds	r4, #1
 800132a:	e7fa      	b.n	8001322 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800132c:	f7ff fe80 	bl	8001030 <BSP_LCD_GetXSize>
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <BSP_LCD_DisplayStringAt+0xbc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <BSP_LCD_DisplayStringAt+0xc0>)
 800133a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (mode)
 8001346:	f1b8 0f01 	cmp.w	r8, #1
 800134a:	d030      	beq.n	80013ae <BSP_LCD_DisplayStringAt+0x9a>
 800134c:	f1b8 0f02 	cmp.w	r8, #2
 8001350:	d035      	beq.n	80013be <BSP_LCD_DisplayStringAt+0xaa>
  while (*ptr++) size ++ ;
 8001352:	2400      	movs	r4, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001354:	f895 8000 	ldrb.w	r8, [r5]
 8001358:	f7ff fe6a 	bl	8001030 <BSP_LCD_GetXSize>
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <BSP_LCD_DisplayStringAt+0xbc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <BSP_LCD_DisplayStringAt+0xc0>)
 8001366:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	889a      	ldrh	r2, [r3, #4]
 800136e:	fb02 0314 	mls	r3, r2, r4, r0
 8001372:	b29b      	uxth	r3, r3
 8001374:	4293      	cmp	r3, r2
 8001376:	bf34      	ite	cc
 8001378:	2300      	movcc	r3, #0
 800137a:	2301      	movcs	r3, #1
 800137c:	f1b8 0f00 	cmp.w	r8, #0
 8001380:	bf08      	it	eq
 8001382:	2300      	moveq	r3, #0
 8001384:	b313      	cbz	r3, 80013cc <BSP_LCD_DisplayStringAt+0xb8>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001386:	f815 2b01 	ldrb.w	r2, [r5], #1
 800138a:	4639      	mov	r1, r7
 800138c:	4630      	mov	r0, r6
 800138e:	f7ff ffa7 	bl	80012e0 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <BSP_LCD_DisplayStringAt+0xbc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <BSP_LCD_DisplayStringAt+0xc0>)
 800139c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	8898      	ldrh	r0, [r3, #4]
 80013a4:	4406      	add	r6, r0
 80013a6:	b2b6      	uxth	r6, r6
    i++;
 80013a8:	3401      	adds	r4, #1
 80013aa:	b2a4      	uxth	r4, r4
 80013ac:	e7d2      	b.n	8001354 <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80013ae:	1b00      	subs	r0, r0, r4
 80013b0:	fb00 f303 	mul.w	r3, r0, r3
 80013b4:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80013b8:	441e      	add	r6, r3
 80013ba:	b2b6      	uxth	r6, r6
      break;
 80013bc:	e7c9      	b.n	8001352 <BSP_LCD_DisplayStringAt+0x3e>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80013be:	1b00      	subs	r0, r0, r4
 80013c0:	fb10 f003 	smulbb	r0, r0, r3
 80013c4:	fa16 f680 	uxtah	r6, r6, r0
 80013c8:	b2b6      	uxth	r6, r6
      break;
 80013ca:	e7c2      	b.n	8001352 <BSP_LCD_DisplayStringAt+0x3e>
}
 80013cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d0:	20000164 	.word	0x20000164
 80013d4:	200001a8 	.word	0x200001a8

080013d8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80013d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd =0;
 80013e0:	f04f 0800 	mov.w	r8, #0
 80013e4:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80013e8:	4c21      	ldr	r4, [pc, #132]	; (8001470 <BSP_SDRAM_Initialization_sequence+0x98>)
 80013ea:	2601      	movs	r6, #1
 80013ec:	6026      	str	r6, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80013ee:	2708      	movs	r7, #8
 80013f0:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80013f2:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80013f4:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80013f8:	4d1e      	ldr	r5, [pc, #120]	; (8001474 <BSP_SDRAM_Initialization_sequence+0x9c>)
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	4621      	mov	r1, r4
 8001400:	4628      	mov	r0, r5
 8001402:	f003 fe85 	bl	8005110 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001406:	4630      	mov	r0, r6
 8001408:	f001 f908 	bl	800261c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800140c:	2302      	movs	r3, #2
 800140e:	6023      	str	r3, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001410:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 8001412:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8001414:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141c:	4621      	mov	r1, r4
 800141e:	4628      	mov	r0, r5
 8001420:	f003 fe76 	bl	8005110 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001424:	2303      	movs	r3, #3
 8001426:	6023      	str	r3, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001428:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 4;
 800142a:	f04f 0a04 	mov.w	sl, #4
 800142e:	f8c4 a008 	str.w	sl, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8001432:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143a:	4621      	mov	r1, r4
 800143c:	4628      	mov	r0, r5
 800143e:	f003 fe67 	bl	8005110 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001442:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001446:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001448:	f8c4 a000 	str.w	sl, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800144c:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 800144e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001450:	9b01      	ldr	r3, [sp, #4]
 8001452:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001458:	4621      	mov	r1, r4
 800145a:	4628      	mov	r0, r5
 800145c:	f003 fe58 	bl	8005110 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8001460:	4649      	mov	r1, r9
 8001462:	4628      	mov	r0, r5
 8001464:	f003 fe6f 	bl	8005146 <HAL_SDRAM_ProgramRefreshRate>
}
 8001468:	b002      	add	sp, #8
 800146a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800146e:	bf00      	nop
 8001470:	200001c0 	.word	0x200001c0
 8001474:	20008b2c 	.word	0x20008b2c

08001478 <BSP_SDRAM_Init>:
{
 8001478:	b508      	push	{r3, lr}
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800147a:	f240 506a 	movw	r0, #1386	; 0x56a
 800147e:	f7ff ffab 	bl	80013d8 <BSP_SDRAM_Initialization_sequence>
}
 8001482:	2000      	movs	r0, #0
 8001484:	bd08      	pop	{r3, pc}
	...

08001488 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8001488:	b510      	push	{r4, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <BSP_TS_Init+0x38>)
 800148c:	8018      	strh	r0, [r3, #0]
  TsYBoundary = YSize;
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <BSP_TS_Init+0x3c>)
 8001490:	8019      	strh	r1, [r3, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <BSP_TS_Init+0x40>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2082      	movs	r0, #130	; 0x82
 8001498:	4798      	blx	r3
 800149a:	f640 0311 	movw	r3, #2065	; 0x811
 800149e:	4298      	cmp	r0, r3
 80014a0:	d001      	beq.n	80014a6 <BSP_TS_Init+0x1e>
  uint8_t ret = TS_ERROR;
 80014a2:	2001      	movs	r0, #1
    TsDrv->Init(TS_I2C_ADDRESS);
    TsDrv->Start(TS_I2C_ADDRESS);
  }

  return ret;
}
 80014a4:	bd10      	pop	{r4, pc}
    TsDrv = &stmpe811_ts_drv;
 80014a6:	4c09      	ldr	r4, [pc, #36]	; (80014cc <BSP_TS_Init+0x44>)
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <BSP_TS_Init+0x40>)
 80014aa:	6023      	str	r3, [r4, #0]
    TsDrv->Init(TS_I2C_ADDRESS);
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2082      	movs	r0, #130	; 0x82
 80014b0:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2082      	movs	r0, #130	; 0x82
 80014b8:	4798      	blx	r3
    ret = TS_OK;
 80014ba:	2000      	movs	r0, #0
 80014bc:	e7f2      	b.n	80014a4 <BSP_TS_Init+0x1c>
 80014be:	bf00      	nop
 80014c0:	200001d4 	.word	0x200001d4
 80014c4:	200001d6 	.word	0x200001d6
 80014c8:	20000050 	.word	0x20000050
 80014cc:	200001d0 	.word	0x200001d0

080014d0 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80014d0:	b530      	push	{r4, r5, lr}
 80014d2:	b083      	sub	sp, #12
 80014d4:	4604      	mov	r4, r0
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <BSP_TS_GetState+0xe0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2082      	movs	r0, #130	; 0x82
 80014de:	4798      	blx	r3
 80014e0:	b280      	uxth	r0, r0
 80014e2:	8020      	strh	r0, [r4, #0]
  
  if(TsState->TouchDetected)
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d058      	beq.n	800159a <BSP_TS_GetState+0xca>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <BSP_TS_GetState+0xe0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	aa01      	add	r2, sp, #4
 80014f0:	f10d 0106 	add.w	r1, sp, #6
 80014f4:	2082      	movs	r0, #130	; 0x82
 80014f6:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80014f8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80014fc:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8001500:	b292      	uxth	r2, r2
    
    /* Y value second correction */
    yr = y / 11;
 8001502:	492c      	ldr	r1, [pc, #176]	; (80015b4 <BSP_TS_GetState+0xe4>)
 8001504:	fba1 3102 	umull	r3, r1, r1, r2
 8001508:	08c9      	lsrs	r1, r1, #3
    
    /* Return y position value */
    if(yr <= 0)
 800150a:	2a0a      	cmp	r2, #10
 800150c:	d906      	bls.n	800151c <BSP_TS_GetState+0x4c>
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <BSP_TS_GetState+0xe8>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	428b      	cmp	r3, r1
 8001514:	d203      	bcs.n	800151e <BSP_TS_GetState+0x4e>
    {
      yr = TsYBoundary - 1;
 8001516:	1e59      	subs	r1, r3, #1
 8001518:	b289      	uxth	r1, r1
 800151a:	e000      	b.n	800151e <BSP_TS_GetState+0x4e>
      yr = 0;
 800151c:	2100      	movs	r1, #0
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 800151e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001522:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001526:	4293      	cmp	r3, r2
 8001528:	d813      	bhi.n	8001552 <BSP_TS_GetState+0x82>
    {
      x = 3870 - x;
 800152a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800152e:	330e      	adds	r3, #14
 8001530:	f8ad 3006 	strh.w	r3, [sp, #6]
    {
      x = 3800 - x;
    }
    
    /* X value second correction */  
    xr = x / 15;
 8001534:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <BSP_TS_GetState+0xec>)
 800153a:	fba3 0302 	umull	r0, r3, r3, r2
 800153e:	08db      	lsrs	r3, r3, #3
    
    /* Return X position value */
    if(xr <= 0)
 8001540:	2a0e      	cmp	r2, #14
 8001542:	d90c      	bls.n	800155e <BSP_TS_GetState+0x8e>
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 8001544:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <BSP_TS_GetState+0xf0>)
 8001546:	8812      	ldrh	r2, [r2, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d209      	bcs.n	8001560 <BSP_TS_GetState+0x90>
    {
      xr = TsXBoundary - 1;
 800154c:	1e53      	subs	r3, r2, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	e006      	b.n	8001560 <BSP_TS_GetState+0x90>
      x = 3800 - x;
 8001552:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8001556:	3308      	adds	r3, #8
 8001558:	f8ad 3006 	strh.w	r3, [sp, #6]
 800155c:	e7ea      	b.n	8001534 <BSP_TS_GetState+0x64>
      xr = 0;
 800155e:	2300      	movs	r3, #0
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 8001560:	4618      	mov	r0, r3
 8001562:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <BSP_TS_GetState+0xf4>)
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	4293      	cmp	r3, r2
 8001568:	d919      	bls.n	800159e <BSP_TS_GetState+0xce>
 800156a:	b292      	uxth	r2, r2
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	b29b      	uxth	r3, r3
    yDiff = y > _y? (y - _y): (_y - y); 
 8001570:	460d      	mov	r5, r1
 8001572:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <BSP_TS_GetState+0xf8>)
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	4291      	cmp	r1, r2
 8001578:	d915      	bls.n	80015a6 <BSP_TS_GetState+0xd6>
 800157a:	b292      	uxth	r2, r2
 800157c:	1a89      	subs	r1, r1, r2
 800157e:	b289      	uxth	r1, r1
    
    if (xDiff + yDiff > 5)
 8001580:	440b      	add	r3, r1
 8001582:	2b05      	cmp	r3, #5
 8001584:	dd03      	ble.n	800158e <BSP_TS_GetState+0xbe>
    {
      _x = x;
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <BSP_TS_GetState+0xf4>)
 8001588:	6018      	str	r0, [r3, #0]
      _y = y; 
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <BSP_TS_GetState+0xf8>)
 800158c:	601d      	str	r5, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <BSP_TS_GetState+0xf4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	8063      	strh	r3, [r4, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <BSP_TS_GetState+0xf8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	80a3      	strh	r3, [r4, #4]
  }
}
 800159a:	b003      	add	sp, #12
 800159c:	bd30      	pop	{r4, r5, pc}
    xDiff = x > _x? (x - _x): (_x - x);
 800159e:	b292      	uxth	r2, r2
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	e7e4      	b.n	8001570 <BSP_TS_GetState+0xa0>
    yDiff = y > _y? (y - _y): (_y - y); 
 80015a6:	b292      	uxth	r2, r2
 80015a8:	1a51      	subs	r1, r2, r1
 80015aa:	b289      	uxth	r1, r1
 80015ac:	e7e8      	b.n	8001580 <BSP_TS_GetState+0xb0>
 80015ae:	bf00      	nop
 80015b0:	200001d0 	.word	0x200001d0
 80015b4:	ba2e8ba3 	.word	0xba2e8ba3
 80015b8:	200001d6 	.word	0x200001d6
 80015bc:	88888889 	.word	0x88888889
 80015c0:	200001d4 	.word	0x200001d4
 80015c4:	200001d8 	.word	0x200001d8
 80015c8:	200001dc 	.word	0x200001dc

080015cc <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80015cc:	4603      	mov	r3, r0
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80015ce:	2000      	movs	r0, #0
 80015d0:	2801      	cmp	r0, #1
 80015d2:	d806      	bhi.n	80015e2 <stmpe811_GetInstance+0x16>
  {
    if(stmpe811[idx] == DeviceAddr)
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <stmpe811_GetInstance+0x1c>)
 80015d6:	5c12      	ldrb	r2, [r2, r0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d003      	beq.n	80015e4 <stmpe811_GetInstance+0x18>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80015dc:	3001      	adds	r0, #1
 80015de:	b2c0      	uxtb	r0, r0
 80015e0:	e7f6      	b.n	80015d0 <stmpe811_GetInstance+0x4>
    {
      return idx; 
    }
  }
  
  return 0xFF;
 80015e2:	20ff      	movs	r0, #255	; 0xff
}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200001e0 	.word	0x200001e0

080015ec <stmpe811_Reset>:
{
 80015ec:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80015ee:	b2c4      	uxtb	r4, r0
 80015f0:	2202      	movs	r2, #2
 80015f2:	2103      	movs	r1, #3
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff fcdb 	bl	8000fb0 <IOE_Write>
  IOE_Delay(10); 
 80015fa:	200a      	movs	r0, #10
 80015fc:	f7ff fce5 	bl	8000fca <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2103      	movs	r1, #3
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff fcd3 	bl	8000fb0 <IOE_Write>
  IOE_Delay(2); 
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff fcdd 	bl	8000fca <IOE_Delay>
}
 8001610:	bd10      	pop	{r4, pc}
	...

08001614 <stmpe811_Init>:
{
 8001614:	b510      	push	{r4, lr}
 8001616:	4604      	mov	r4, r0
  instance = stmpe811_GetInstance(DeviceAddr);
 8001618:	f7ff ffd8 	bl	80015cc <stmpe811_GetInstance>
  if(instance == 0xFF)
 800161c:	28ff      	cmp	r0, #255	; 0xff
 800161e:	d000      	beq.n	8001622 <stmpe811_Init+0xe>
}
 8001620:	bd10      	pop	{r4, pc}
    empty = stmpe811_GetInstance(0);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff ffd2 	bl	80015cc <stmpe811_GetInstance>
    if(empty < STMPE811_MAX_INSTANCE)
 8001628:	2801      	cmp	r0, #1
 800162a:	d8f9      	bhi.n	8001620 <stmpe811_Init+0xc>
      stmpe811[empty] = DeviceAddr;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <stmpe811_Init+0x28>)
 800162e:	541c      	strb	r4, [r3, r0]
      IOE_Init(); 
 8001630:	f7ff fcb6 	bl	8000fa0 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff ffd9 	bl	80015ec <stmpe811_Reset>
}
 800163a:	e7f1      	b.n	8001620 <stmpe811_Init+0xc>
 800163c:	200001e0 	.word	0x200001e0

08001640 <stmpe811_ReadID>:
{
 8001640:	b538      	push	{r3, r4, r5, lr}
 8001642:	4604      	mov	r4, r0
  IOE_Init(); 
 8001644:	f7ff fcac 	bl	8000fa0 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001648:	b2e4      	uxtb	r4, r4
 800164a:	2100      	movs	r1, #0
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff fcb3 	bl	8000fb8 <IOE_Read>
 8001652:	0205      	lsls	r5, r0, #8
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001654:	2101      	movs	r1, #1
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff fcae 	bl	8000fb8 <IOE_Read>
 800165c:	b200      	sxth	r0, r0
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800165e:	4328      	orrs	r0, r5
}
 8001660:	b280      	uxth	r0, r0
 8001662:	bd38      	pop	{r3, r4, r5, pc}

08001664 <stmpe811_TS_DetectTouch>:
{
 8001664:	b510      	push	{r4, lr}
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001666:	b2c4      	uxtb	r4, r0
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff fca4 	bl	8000fb8 <IOE_Read>
  if(state > 0)
 8001670:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001674:	d10b      	bne.n	800168e <stmpe811_TS_DetectTouch+0x2a>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001676:	2201      	movs	r2, #1
 8001678:	214b      	movs	r1, #75	; 0x4b
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fc98 	bl	8000fb0 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001680:	2200      	movs	r2, #0
 8001682:	214b      	movs	r1, #75	; 0x4b
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fc93 	bl	8000fb0 <IOE_Write>
  uint8_t ret = 0;
 800168a:	2000      	movs	r0, #0
}
 800168c:	bd10      	pop	{r4, pc}
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800168e:	214c      	movs	r1, #76	; 0x4c
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff fc91 	bl	8000fb8 <IOE_Read>
 8001696:	2800      	cmp	r0, #0
 8001698:	d0f8      	beq.n	800168c <stmpe811_TS_DetectTouch+0x28>
      ret = 1;
 800169a:	2001      	movs	r0, #1
 800169c:	e7f6      	b.n	800168c <stmpe811_TS_DetectTouch+0x28>

0800169e <stmpe811_TS_GetXY>:
{
 800169e:	b570      	push	{r4, r5, r6, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	460e      	mov	r6, r1
 80016a4:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80016a6:	b2c4      	uxtb	r4, r0
 80016a8:	2304      	movs	r3, #4
 80016aa:	eb0d 0203 	add.w	r2, sp, r3
 80016ae:	21d7      	movs	r1, #215	; 0xd7
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff fc85 	bl	8000fc0 <IOE_ReadMultiple>
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80016b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80016ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016c4:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80016c8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80016cc:	0d1b      	lsrs	r3, r3, #20
 80016ce:	8033      	strh	r3, [r6, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80016d0:	f3c0 230b 	ubfx	r3, r0, #8, #12
 80016d4:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80016d6:	2201      	movs	r2, #1
 80016d8:	214b      	movs	r1, #75	; 0x4b
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fc68 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80016e0:	2200      	movs	r2, #0
 80016e2:	214b      	movs	r1, #75	; 0x4b
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff fc63 	bl	8000fb0 <IOE_Write>
}
 80016ea:	b002      	add	sp, #8
 80016ec:	bd70      	pop	{r4, r5, r6, pc}

080016ee <stmpe811_EnableGlobalIT>:
{
 80016ee:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80016f0:	b2c4      	uxtb	r4, r0
 80016f2:	2109      	movs	r1, #9
 80016f4:	4620      	mov	r0, r4
 80016f6:	f7ff fc5f 	bl	8000fb8 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80016fa:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	2109      	movs	r1, #9
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff fc54 	bl	8000fb0 <IOE_Write>
}
 8001708:	bd10      	pop	{r4, pc}

0800170a <stmpe811_DisableGlobalIT>:
{
 800170a:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800170c:	b2c4      	uxtb	r4, r0
 800170e:	2109      	movs	r1, #9
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fc51 	bl	8000fb8 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001716:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 800171a:	2109      	movs	r1, #9
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fc47 	bl	8000fb0 <IOE_Write>
}
 8001722:	bd10      	pop	{r4, pc}

08001724 <stmpe811_EnableITSource>:
{
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001728:	b2c4      	uxtb	r4, r0
 800172a:	210a      	movs	r1, #10
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fc43 	bl	8000fb8 <IOE_Read>
  tmp |= Source; 
 8001732:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	210a      	movs	r1, #10
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff fc38 	bl	8000fb0 <IOE_Write>
}
 8001740:	bd38      	pop	{r3, r4, r5, pc}

08001742 <stmpe811_TS_EnableIT>:
{
 8001742:	b510      	push	{r4, lr}
 8001744:	4604      	mov	r4, r0
  IOE_ITConfig();
 8001746:	f7ff fc2f 	bl	8000fa8 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800174a:	211f      	movs	r1, #31
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff ffe9 	bl	8001724 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff ffcb 	bl	80016ee <stmpe811_EnableGlobalIT>
}
 8001758:	bd10      	pop	{r4, pc}

0800175a <stmpe811_DisableITSource>:
{
 800175a:	b538      	push	{r3, r4, r5, lr}
 800175c:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800175e:	b2c4      	uxtb	r4, r0
 8001760:	210a      	movs	r1, #10
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff fc28 	bl	8000fb8 <IOE_Read>
  tmp &= ~Source; 
 8001768:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	210a      	movs	r1, #10
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff fc1d 	bl	8000fb0 <IOE_Write>
}
 8001776:	bd38      	pop	{r3, r4, r5, pc}

08001778 <stmpe811_TS_DisableIT>:
{
 8001778:	b510      	push	{r4, lr}
 800177a:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 800177c:	f7ff ffc5 	bl	800170a <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001780:	211f      	movs	r1, #31
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff ffe9 	bl	800175a <stmpe811_DisableITSource>
}
 8001788:	bd10      	pop	{r4, pc}

0800178a <stmpe811_ReadGITStatus>:
{
 800178a:	b510      	push	{r4, lr}
 800178c:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800178e:	210b      	movs	r1, #11
 8001790:	b2c0      	uxtb	r0, r0
 8001792:	f7ff fc11 	bl	8000fb8 <IOE_Read>
}
 8001796:	4020      	ands	r0, r4
 8001798:	bd10      	pop	{r4, pc}

0800179a <stmpe811_TS_ITStatus>:
{
 800179a:	b508      	push	{r3, lr}
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800179c:	211f      	movs	r1, #31
 800179e:	f7ff fff4 	bl	800178a <stmpe811_ReadGITStatus>
}
 80017a2:	bd08      	pop	{r3, pc}

080017a4 <stmpe811_ClearGlobalIT>:
{
 80017a4:	b508      	push	{r3, lr}
 80017a6:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80017a8:	210b      	movs	r1, #11
 80017aa:	b2c0      	uxtb	r0, r0
 80017ac:	f7ff fc00 	bl	8000fb0 <IOE_Write>
}
 80017b0:	bd08      	pop	{r3, pc}

080017b2 <stmpe811_TS_ClearIT>:
{
 80017b2:	b508      	push	{r3, lr}
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80017b4:	211f      	movs	r1, #31
 80017b6:	f7ff fff5 	bl	80017a4 <stmpe811_ClearGlobalIT>
}
 80017ba:	bd08      	pop	{r3, pc}

080017bc <stmpe811_IO_EnableAF>:
{
 80017bc:	b538      	push	{r3, r4, r5, lr}
 80017be:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80017c0:	b2c4      	uxtb	r4, r0
 80017c2:	2117      	movs	r1, #23
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff fbf7 	bl	8000fb8 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 80017ca:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	2117      	movs	r1, #23
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff fbec 	bl	8000fb0 <IOE_Write>
}
 80017d8:	bd38      	pop	{r3, r4, r5, pc}

080017da <stmpe811_TS_Start>:
{
 80017da:	b570      	push	{r4, r5, r6, lr}
 80017dc:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80017de:	b2c4      	uxtb	r4, r0
 80017e0:	2104      	movs	r1, #4
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff fbe8 	bl	8000fb8 <IOE_Read>
 80017e8:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80017ea:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
 80017ee:	2104      	movs	r1, #4
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff fbdd 	bl	8000fb0 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80017f6:	21f0      	movs	r1, #240	; 0xf0
 80017f8:	4630      	mov	r0, r6
 80017fa:	f7ff ffdf 	bl	80017bc <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80017fe:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 8001802:	2104      	movs	r1, #4
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff fbd3 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800180a:	2249      	movs	r2, #73	; 0x49
 800180c:	2120      	movs	r1, #32
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fbce 	bl	8000fb0 <IOE_Write>
  IOE_Delay(2); 
 8001814:	2002      	movs	r0, #2
 8001816:	f7ff fbd8 	bl	8000fca <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800181a:	2201      	movs	r2, #1
 800181c:	2121      	movs	r1, #33	; 0x21
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff fbc6 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001824:	229a      	movs	r2, #154	; 0x9a
 8001826:	2141      	movs	r1, #65	; 0x41
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fbc1 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800182e:	2201      	movs	r2, #1
 8001830:	214a      	movs	r1, #74	; 0x4a
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff fbbc 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001838:	2201      	movs	r2, #1
 800183a:	214b      	movs	r1, #75	; 0x4b
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff fbb7 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001842:	2200      	movs	r2, #0
 8001844:	214b      	movs	r1, #75	; 0x4b
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fbb2 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800184c:	2201      	movs	r2, #1
 800184e:	2156      	movs	r1, #86	; 0x56
 8001850:	4620      	mov	r0, r4
 8001852:	f7ff fbad 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001856:	2201      	movs	r2, #1
 8001858:	2158      	movs	r1, #88	; 0x58
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fba8 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001860:	2201      	movs	r2, #1
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fba3 	bl	8000fb0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	210b      	movs	r1, #11
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff fb9e 	bl	8000fb0 <IOE_Write>
  IOE_Delay(2); 
 8001874:	2002      	movs	r0, #2
 8001876:	f7ff fba8 	bl	8000fca <IOE_Delay>
}
 800187a:	bd70      	pop	{r4, r5, r6, pc}

0800187c <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800187c:	4770      	bx	lr

0800187e <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800187e:	4770      	bx	lr

08001880 <vApplicationMallocFailedHook>:
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001880:	4770      	bx	lr
	...

08001884 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <vApplicationGetIdleTaskMemory+0x10>)
 8001886:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <vApplicationGetIdleTaskMemory+0x14>)
 800188a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200003e4 	.word	0x200003e4
 8001898:	200001e4 	.word	0x200001e4

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a0:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	2400      	movs	r4, #0
 80018a4:	9409      	str	r4, [sp, #36]	; 0x24
 80018a6:	940a      	str	r4, [sp, #40]	; 0x28
 80018a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80018aa:	940c      	str	r4, [sp, #48]	; 0x30
 80018ac:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	9401      	str	r4, [sp, #4]
 80018b0:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <MX_GPIO_Init+0x18c>)
 80018b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b4:	f042 0204 	orr.w	r2, r2, #4
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018bc:	f002 0204 	and.w	r2, r2, #4
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c4:	9402      	str	r4, [sp, #8]
 80018c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c8:	f042 0220 	orr.w	r2, r2, #32
 80018cc:	631a      	str	r2, [r3, #48]	; 0x30
 80018ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d0:	f002 0220 	and.w	r2, r2, #32
 80018d4:	9202      	str	r2, [sp, #8]
 80018d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d8:	9403      	str	r4, [sp, #12]
 80018da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
 80018e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80018e8:	9203      	str	r2, [sp, #12]
 80018ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	9404      	str	r4, [sp, #16]
 80018ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
 80018f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f8:	f002 0201 	and.w	r2, r2, #1
 80018fc:	9204      	str	r2, [sp, #16]
 80018fe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	9405      	str	r4, [sp, #20]
 8001902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001904:	f042 0202 	orr.w	r2, r2, #2
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
 800190a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800190c:	f002 0202 	and.w	r2, r2, #2
 8001910:	9205      	str	r2, [sp, #20]
 8001912:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001914:	9406      	str	r4, [sp, #24]
 8001916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001924:	9206      	str	r2, [sp, #24]
 8001926:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001928:	9407      	str	r4, [sp, #28]
 800192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192c:	f042 0210 	orr.w	r2, r2, #16
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
 8001932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001934:	f002 0210 	and.w	r2, r2, #16
 8001938:	9207      	str	r2, [sp, #28]
 800193a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193c:	9408      	str	r4, [sp, #32]
 800193e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001940:	f042 0208 	orr.w	r2, r2, #8
 8001944:	631a      	str	r2, [r3, #48]	; 0x30
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	9308      	str	r3, [sp, #32]
 800194e:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001950:	4f36      	ldr	r7, [pc, #216]	; (8001a2c <MX_GPIO_Init+0x190>)
 8001952:	4622      	mov	r2, r4
 8001954:	2116      	movs	r1, #22
 8001956:	4638      	mov	r0, r7
 8001958:	f001 faa6 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800195c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001a38 <MX_GPIO_Init+0x19c>
 8001960:	4622      	mov	r2, r4
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	4640      	mov	r0, r8
 8001966:	f001 fa9f 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800196a:	4e31      	ldr	r6, [pc, #196]	; (8001a30 <MX_GPIO_Init+0x194>)
 800196c:	4622      	mov	r2, r4
 800196e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001972:	4630      	mov	r0, r6
 8001974:	f001 fa98 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001978:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001a3c <MX_GPIO_Init+0x1a0>
 800197c:	4622      	mov	r2, r4
 800197e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001982:	4648      	mov	r0, r9
 8001984:	f001 fa90 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001988:	2316      	movs	r3, #22
 800198a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2501      	movs	r5, #1
 800198e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	a909      	add	r1, sp, #36	; 0x24
 8001996:	4638      	mov	r0, r7
 8001998:	f001 f8e8 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800199c:	f248 0307 	movw	r3, #32775	; 0x8007
 80019a0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019a2:	f44f 1a90 	mov.w	sl, #1179648	; 0x120000
 80019a6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	a909      	add	r1, sp, #36	; 0x24
 80019ae:	4640      	mov	r0, r8
 80019b0:	f001 f8dc 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80019be:	a909      	add	r1, sp, #36	; 0x24
 80019c0:	4640      	mov	r0, r8
 80019c2:	f001 f8d3 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80019c6:	2320      	movs	r3, #32
 80019c8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019ca:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80019d0:	a909      	add	r1, sp, #36	; 0x24
 80019d2:	4638      	mov	r0, r7
 80019d4:	f001 f8ca 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019d8:	2304      	movs	r3, #4
 80019da:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019e0:	a909      	add	r1, sp, #36	; 0x24
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_GPIO_Init+0x198>)
 80019e4:	f001 f8c2 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80019e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ec:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ee:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80019f2:	a909      	add	r1, sp, #36	; 0x24
 80019f4:	4630      	mov	r0, r6
 80019f6:	f001 f8b9 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80019fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019fe:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a06:	a909      	add	r1, sp, #36	; 0x24
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f001 f8af 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a0e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a12:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a1a:	a909      	add	r1, sp, #36	; 0x24
 8001a1c:	4648      	mov	r0, r9
 8001a1e:	f001 f8a5 	bl	8002b6c <HAL_GPIO_Init>

}
 8001a22:	b00e      	add	sp, #56	; 0x38
 8001a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40021800 	.word	0x40021800

08001a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a42:	6802      	ldr	r2, [r0, #0]
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d000      	beq.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a4a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001a4c:	f000 fdd4 	bl	80025f8 <HAL_IncTick>
}
 8001a50:	e7fb      	b.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001a52:	bf00      	nop
 8001a54:	40001000 	.word	0x40001000

08001a58 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <Error_Handler+0x2>

08001a5c <MX_CRC_Init>:
{
 8001a5c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_CRC_Init+0x14>)
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <MX_CRC_Init+0x18>)
 8001a62:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a64:	f000 fe42 	bl	80026ec <HAL_CRC_Init>
 8001a68:	b900      	cbnz	r0, 8001a6c <MX_CRC_Init+0x10>
}
 8001a6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a6c:	f7ff fff4 	bl	8001a58 <Error_Handler>
 8001a70:	200086a8 	.word	0x200086a8
 8001a74:	40023000 	.word	0x40023000

08001a78 <MX_DMA2D_Init>:
{
 8001a78:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8001a7a:	480c      	ldr	r0, [pc, #48]	; (8001aac <MX_DMA2D_Init+0x34>)
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_DMA2D_Init+0x38>)
 8001a7e:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a80:	2300      	movs	r3, #0
 8001a82:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001a84:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a86:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a88:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001a8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a8c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a8e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a90:	f000 fe81 	bl	8002796 <HAL_DMA2D_Init>
 8001a94:	b928      	cbnz	r0, 8001aa2 <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a96:	2101      	movs	r1, #1
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_DMA2D_Init+0x34>)
 8001a9a:	f001 f805 	bl	8002aa8 <HAL_DMA2D_ConfigLayer>
 8001a9e:	b910      	cbnz	r0, 8001aa6 <MX_DMA2D_Init+0x2e>
}
 8001aa0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001aa2:	f7ff ffd9 	bl	8001a58 <Error_Handler>
    Error_Handler();
 8001aa6:	f7ff ffd7 	bl	8001a58 <Error_Handler>
 8001aaa:	bf00      	nop
 8001aac:	20008aec 	.word	0x20008aec
 8001ab0:	4002b000 	.word	0x4002b000

08001ab4 <MX_FMC_Init>:
{
 8001ab4:	b500      	push	{lr}
 8001ab6:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ab8:	4815      	ldr	r0, [pc, #84]	; (8001b10 <MX_FMC_Init+0x5c>)
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_FMC_Init+0x60>)
 8001abc:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001aca:	2210      	movs	r2, #16
 8001acc:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001ad2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001ad6:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ad8:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ade:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001ae0:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae6:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001aec:	2207      	movs	r2, #7
 8001aee:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001af0:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8001af2:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001af4:	2203      	movs	r2, #3
 8001af6:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8001af8:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8001afa:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001afc:	4469      	add	r1, sp
 8001afe:	f003 fae7 	bl	80050d0 <HAL_SDRAM_Init>
 8001b02:	b910      	cbnz	r0, 8001b0a <MX_FMC_Init+0x56>
}
 8001b04:	b009      	add	sp, #36	; 0x24
 8001b06:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8001b0a:	f7ff ffa5 	bl	8001a58 <Error_Handler>
 8001b0e:	bf00      	nop
 8001b10:	20008b2c 	.word	0x20008b2c
 8001b14:	a0000140 	.word	0xa0000140

08001b18 <MX_I2C3_Init>:
{
 8001b18:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8001b1a:	4811      	ldr	r0, [pc, #68]	; (8001b60 <MX_I2C3_Init+0x48>)
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_I2C3_Init+0x4c>)
 8001b1e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_I2C3_Init+0x50>)
 8001b22:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	2300      	movs	r3, #0
 8001b26:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b28:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2e:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b32:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b34:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b36:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b38:	f002 f8c6 	bl	8003cc8 <HAL_I2C_Init>
 8001b3c:	b950      	cbnz	r0, 8001b54 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_I2C3_Init+0x48>)
 8001b42:	f002 fbe0 	bl	8004306 <HAL_I2CEx_ConfigAnalogFilter>
 8001b46:	b938      	cbnz	r0, 8001b58 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_I2C3_Init+0x48>)
 8001b4c:	f002 fbfd 	bl	800434a <HAL_I2CEx_ConfigDigitalFilter>
 8001b50:	b920      	cbnz	r0, 8001b5c <MX_I2C3_Init+0x44>
}
 8001b52:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b54:	f7ff ff80 	bl	8001a58 <Error_Handler>
    Error_Handler();
 8001b58:	f7ff ff7e 	bl	8001a58 <Error_Handler>
    Error_Handler();
 8001b5c:	f7ff ff7c 	bl	8001a58 <Error_Handler>
 8001b60:	200085fc 	.word	0x200085fc
 8001b64:	40005c00 	.word	0x40005c00
 8001b68:	000186a0 	.word	0x000186a0

08001b6c <MX_LTDC_Init>:
{
 8001b6c:	b500      	push	{lr}
 8001b6e:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b70:	2234      	movs	r2, #52	; 0x34
 8001b72:	2100      	movs	r1, #0
 8001b74:	a801      	add	r0, sp, #4
 8001b76:	f006 f893 	bl	8007ca0 <memset>
  hltdc.Instance = LTDC;
 8001b7a:	4827      	ldr	r0, [pc, #156]	; (8001c18 <MX_LTDC_Init+0xac>)
 8001b7c:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <MX_LTDC_Init+0xb0>)
 8001b7e:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b84:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b86:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b88:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 9;
 8001b8a:	2209      	movs	r2, #9
 8001b8c:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 1;
 8001b8e:	2201      	movs	r2, #1
 8001b90:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001b92:	221d      	movs	r2, #29
 8001b94:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001b96:	2203      	movs	r2, #3
 8001b98:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001b9a:	f240 120d 	movw	r2, #269	; 0x10d
 8001b9e:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001ba0:	f240 1243 	movw	r2, #323	; 0x143
 8001ba4:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001ba6:	f240 1217 	movw	r2, #279	; 0x117
 8001baa:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001bac:	f240 1247 	movw	r2, #327	; 0x147
 8001bb0:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001bb2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001bb6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001bba:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bbe:	f002 fcbb 	bl	8004538 <HAL_LTDC_Init>
 8001bc2:	bb20      	cbnz	r0, 8001c0e <MX_LTDC_Init+0xa2>
  pLayerCfg.WindowX0 = 0;
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 240;
 8001bc8:	21f0      	movs	r1, #240	; 0xf0
 8001bca:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001bcc:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 320;
 8001bce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bd2:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001bd8:	20ff      	movs	r0, #255	; 0xff
 8001bda:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001bdc:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bde:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001be2:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001be4:	2007      	movs	r0, #7
 8001be6:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001be8:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 8001bec:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001bee:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001bf0:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001bf2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001bf6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001bfa:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bfe:	a901      	add	r1, sp, #4
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_LTDC_Init+0xac>)
 8001c02:	f002 fd83 	bl	800470c <HAL_LTDC_ConfigLayer>
 8001c06:	b920      	cbnz	r0, 8001c12 <MX_LTDC_Init+0xa6>
}
 8001c08:	b00f      	add	sp, #60	; 0x3c
 8001c0a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001c0e:	f7ff ff23 	bl	8001a58 <Error_Handler>
    Error_Handler();
 8001c12:	f7ff ff21 	bl	8001a58 <Error_Handler>
 8001c16:	bf00      	nop
 8001c18:	200086b0 	.word	0x200086b0
 8001c1c:	40016800 	.word	0x40016800

08001c20 <MX_SPI5_Init>:
{
 8001c20:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_SPI5_Init+0x38>)
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <MX_SPI5_Init+0x3c>)
 8001c26:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c28:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c2c:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c32:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c34:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c36:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3c:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c3e:	2218      	movs	r2, #24
 8001c40:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c42:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c44:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c46:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c48:	230a      	movs	r3, #10
 8001c4a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c4c:	f003 fb70 	bl	8005330 <HAL_SPI_Init>
 8001c50:	b900      	cbnz	r0, 8001c54 <MX_SPI5_Init+0x34>
}
 8001c52:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c54:	f7ff ff00 	bl	8001a58 <Error_Handler>
 8001c58:	20008650 	.word	0x20008650
 8001c5c:	40015000 	.word	0x40015000

08001c60 <MX_TIM1_Init>:
{
 8001c60:	b500      	push	{lr}
 8001c62:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c64:	2300      	movs	r3, #0
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	9303      	str	r3, [sp, #12]
 8001c6a:	9304      	str	r3, [sp, #16]
 8001c6c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 8001c72:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <MX_TIM1_Init+0x60>)
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <MX_TIM1_Init+0x64>)
 8001c76:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001c78:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8001c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c80:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c84:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c88:	f004 f80e 	bl	8005ca8 <HAL_TIM_Base_Init>
 8001c8c:	b990      	cbnz	r0, 8001cb4 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c92:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c94:	a902      	add	r1, sp, #8
 8001c96:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <MX_TIM1_Init+0x60>)
 8001c98:	f004 f83e 	bl	8005d18 <HAL_TIM_ConfigClockSource>
 8001c9c:	b960      	cbnz	r0, 8001cb8 <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ca4:	4669      	mov	r1, sp
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_TIM1_Init+0x60>)
 8001ca8:	f004 f8b6 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	b930      	cbnz	r0, 8001cbc <MX_TIM1_Init+0x5c>
}
 8001cae:	b007      	add	sp, #28
 8001cb0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001cb4:	f7ff fed0 	bl	8001a58 <Error_Handler>
    Error_Handler();
 8001cb8:	f7ff fece 	bl	8001a58 <Error_Handler>
    Error_Handler();
 8001cbc:	f7ff fecc 	bl	8001a58 <Error_Handler>
 8001cc0:	20008aa4 	.word	0x20008aa4
 8001cc4:	40010000 	.word	0x40010000

08001cc8 <MX_USART1_UART_Init>:
{
 8001cc8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001cca:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <MX_USART1_UART_Init+0x2c>)
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <MX_USART1_UART_Init+0x30>)
 8001cce:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001cd0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cd4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cda:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cdc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cde:	220c      	movs	r2, #12
 8001ce0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce6:	f004 f96b 	bl	8005fc0 <HAL_UART_Init>
 8001cea:	b900      	cbnz	r0, 8001cee <MX_USART1_UART_Init+0x26>
}
 8001cec:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001cee:	f7ff feb3 	bl	8001a58 <Error_Handler>
 8001cf2:	bf00      	nop
 8001cf4:	20008758 	.word	0x20008758
 8001cf8:	40011000 	.word	0x40011000

08001cfc <MX_USB_OTG_HS_HCD_Init>:
{
 8001cfc:	b508      	push	{r3, lr}
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001cfe:	480a      	ldr	r0, [pc, #40]	; (8001d28 <MX_USB_OTG_HS_HCD_Init+0x2c>)
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_USB_OTG_HS_HCD_Init+0x30>)
 8001d02:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001d04:	230c      	movs	r3, #12
 8001d06:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001d10:	2202      	movs	r2, #2
 8001d12:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001d14:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001d16:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001d18:	62c3      	str	r3, [r0, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001d1a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001d1c:	f001 f922 	bl	8002f64 <HAL_HCD_Init>
 8001d20:	b900      	cbnz	r0, 8001d24 <MX_USB_OTG_HS_HCD_Init+0x28>
}
 8001d22:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d24:	f7ff fe98 	bl	8001a58 <Error_Handler>
 8001d28:	2000879c 	.word	0x2000879c
 8001d2c:	40040000 	.word	0x40040000

08001d30 <SystemClock_Config>:
{
 8001d30:	b500      	push	{lr}
 8001d32:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d34:	2230      	movs	r2, #48	; 0x30
 8001d36:	2100      	movs	r1, #0
 8001d38:	a808      	add	r0, sp, #32
 8001d3a:	f005 ffb1 	bl	8007ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9303      	str	r3, [sp, #12]
 8001d42:	9304      	str	r3, [sp, #16]
 8001d44:	9305      	str	r3, [sp, #20]
 8001d46:	9306      	str	r3, [sp, #24]
 8001d48:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <SystemClock_Config+0xa0>)
 8001d4e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d50:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001d54:	6411      	str	r1, [r2, #64]	; 0x40
 8001d56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d58:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001d5c:	9201      	str	r2, [sp, #4]
 8001d5e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <SystemClock_Config+0xa4>)
 8001d64:	6813      	ldr	r3, [r2, #0]
 8001d66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d82:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d84:	2302      	movs	r3, #2
 8001d86:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d8c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d8e:	2204      	movs	r2, #4
 8001d90:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001d92:	2248      	movs	r2, #72	; 0x48
 8001d94:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d96:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9c:	a808      	add	r0, sp, #32
 8001d9e:	f002 fcfd 	bl	800479c <HAL_RCC_OscConfig>
 8001da2:	b980      	cbnz	r0, 8001dc6 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da4:	230f      	movs	r3, #15
 8001da6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da8:	2102      	movs	r1, #2
 8001daa:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001db4:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001db8:	a803      	add	r0, sp, #12
 8001dba:	f002 ff51 	bl	8004c60 <HAL_RCC_ClockConfig>
 8001dbe:	b920      	cbnz	r0, 8001dca <SystemClock_Config+0x9a>
}
 8001dc0:	b015      	add	sp, #84	; 0x54
 8001dc2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001dc6:	f7ff fe47 	bl	8001a58 <Error_Handler>
    Error_Handler();
 8001dca:	f7ff fe45 	bl	8001a58 <Error_Handler>
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40007000 	.word	0x40007000

08001dd8 <main>:
{
 8001dd8:	b508      	push	{r3, lr}
  HAL_Init();
 8001dda:	f000 fbf3 	bl	80025c4 <HAL_Init>
  SystemClock_Config();
 8001dde:	f7ff ffa7 	bl	8001d30 <SystemClock_Config>
  MX_GPIO_Init();
 8001de2:	f7ff fd5b 	bl	800189c <MX_GPIO_Init>
  MX_CRC_Init();
 8001de6:	f7ff fe39 	bl	8001a5c <MX_CRC_Init>
  MX_DMA2D_Init();
 8001dea:	f7ff fe45 	bl	8001a78 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001dee:	f7ff fe61 	bl	8001ab4 <MX_FMC_Init>
  MX_I2C3_Init();
 8001df2:	f7ff fe91 	bl	8001b18 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001df6:	f7ff feb9 	bl	8001b6c <MX_LTDC_Init>
  MX_SPI5_Init();
 8001dfa:	f7ff ff11 	bl	8001c20 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001dfe:	f7ff ff2f 	bl	8001c60 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001e02:	f7ff ff61 	bl	8001cc8 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8001e06:	f7ff ff79 	bl	8001cfc <MX_USB_OTG_HS_HCD_Init>
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <main+0x44>)
 8001e0e:	6013      	str	r3, [r2, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001e10:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <main+0x48>)
 8001e12:	6013      	str	r3, [r2, #0]
  app_main();
 8001e14:	f7fe fcaa 	bl	800076c <app_main>
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <main+0x40>
 8001e1a:	bf00      	nop
 8001e1c:	200085f8 	.word	0x200085f8
 8001e20:	20008aa0 	.word	0x20008aa0

08001e24 <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8001e24:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <HAL_FMC_MspInit+0xbc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b103      	cbz	r3, 8001e2c <HAL_FMC_MspInit+0x8>
 8001e2a:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 8001e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e30:	b086      	sub	sp, #24
    return;
  }
  FMC_Initialized = 1;
 8001e32:	f04f 0801 	mov.w	r8, #1
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_FMC_MspInit+0xbc>)
 8001e38:	f8c3 8000 	str.w	r8, [r3]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	9400      	str	r4, [sp, #0]
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_FMC_MspInit+0xc0>)
 8001e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e44:	ea42 0208 	orr.w	r2, r2, r8
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	ea03 0308 	and.w	r3, r3, r8
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	9b00      	ldr	r3, [sp, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e54:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e58:	9301      	str	r3, [sp, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2702      	movs	r7, #2
 8001e5c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2603      	movs	r6, #3
 8001e62:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e64:	250c      	movs	r5, #12
 8001e66:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e68:	a901      	add	r1, sp, #4
 8001e6a:	481f      	ldr	r0, [pc, #124]	; (8001ee8 <HAL_FMC_MspInit+0xc4>)
 8001e6c:	f000 fe7e 	bl	8002b6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001e70:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e7a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	a901      	add	r1, sp, #4
 8001e7e:	481b      	ldr	r0, [pc, #108]	; (8001eec <HAL_FMC_MspInit+0xc8>)
 8001e80:	f000 fe74 	bl	8002b6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001e84:	f248 1333 	movw	r3, #33075	; 0x8133
 8001e88:	9301      	str	r3, [sp, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e90:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e92:	a901      	add	r1, sp, #4
 8001e94:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <HAL_FMC_MspInit+0xcc>)
 8001e96:	f000 fe69 	bl	8002b6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001e9a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e9e:	9301      	str	r3, [sp, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ea6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea8:	a901      	add	r1, sp, #4
 8001eaa:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <HAL_FMC_MspInit+0xd0>)
 8001eac:	f000 fe5e 	bl	8002b6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001eb0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001eb4:	9301      	str	r3, [sp, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ebc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebe:	a901      	add	r1, sp, #4
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <HAL_FMC_MspInit+0xd4>)
 8001ec2:	f000 fe53 	bl	8002b6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001ec6:	2360      	movs	r3, #96	; 0x60
 8001ec8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ed0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	a901      	add	r1, sp, #4
 8001ed4:	4809      	ldr	r0, [pc, #36]	; (8001efc <HAL_FMC_MspInit+0xd8>)
 8001ed6:	f000 fe49 	bl	8002b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001eda:	b006      	add	sp, #24
 8001edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ee0:	2000043c 	.word	0x2000043c
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40021400 	.word	0x40021400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40021800 	.word	0x40021800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	40020400 	.word	0x40020400

08001f00 <HAL_MspInit>:
{
 8001f00:	b500      	push	{lr}
 8001f02:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f04:	2200      	movs	r2, #0
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_MspInit+0x40>)
 8001f0a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f0c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001f10:	6459      	str	r1, [r3, #68]	; 0x44
 8001f12:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f14:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001f18:	9100      	str	r1, [sp, #0]
 8001f1a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	9201      	str	r2, [sp, #4]
 8001f1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f20:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f24:	6419      	str	r1, [r3, #64]	; 0x40
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f30:	210f      	movs	r1, #15
 8001f32:	f06f 0001 	mvn.w	r0, #1
 8001f36:	f000 fb97 	bl	8002668 <HAL_NVIC_SetPriority>
}
 8001f3a:	b003      	add	sp, #12
 8001f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8001f44:	6802      	ldr	r2, [r0, #0]
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_CRC_MspInit+0x28>)
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d000      	beq.n	8001f4e <HAL_CRC_MspInit+0xa>
 8001f4c:	4770      	bx	lr
{
 8001f4e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_CRC_MspInit+0x2c>)
 8001f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	9b01      	ldr	r3, [sp, #4]
}
 8001f68:	b002      	add	sp, #8
 8001f6a:	4770      	bx	lr
 8001f6c:	40023000 	.word	0x40023000
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_DMA2D_MspInit+0x3c>)
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d000      	beq.n	8001f7e <HAL_DMA2D_MspInit+0xa>
 8001f7c:	4770      	bx	lr
{
 8001f7e:	b500      	push	{lr}
 8001f80:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f82:	2200      	movs	r2, #0
 8001f84:	9201      	str	r2, [sp, #4]
 8001f86:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8001f8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f8c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001f90:	6319      	str	r1, [r3, #48]	; 0x30
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	205a      	movs	r0, #90	; 0x5a
 8001fa0:	f000 fb62 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001fa4:	205a      	movs	r0, #90	; 0x5a
 8001fa6:	f000 fb93 	bl	80026d0 <HAL_NVIC_EnableIRQ>
}
 8001faa:	b003      	add	sp, #12
 8001fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb0:	4002b000 	.word	0x4002b000

08001fb4 <HAL_I2C_MspInit>:
{
 8001fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9303      	str	r3, [sp, #12]
 8001fbe:	9304      	str	r3, [sp, #16]
 8001fc0:	9305      	str	r3, [sp, #20]
 8001fc2:	9306      	str	r3, [sp, #24]
 8001fc4:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8001fc6:	6802      	ldr	r2, [r0, #0]
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_I2C_MspInit+0x9c>)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d002      	beq.n	8001fd4 <HAL_I2C_MspInit+0x20>
}
 8001fce:	b008      	add	sp, #32
 8001fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	2500      	movs	r5, #0
 8001fd6:	9500      	str	r5, [sp, #0]
 8001fd8:	4c1e      	ldr	r4, [pc, #120]	; (8002054 <HAL_I2C_MspInit+0xa0>)
 8001fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6323      	str	r3, [r4, #48]	; 0x30
 8001fe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	9501      	str	r5, [sp, #4]
 8001fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6323      	str	r3, [r4, #48]	; 0x30
 8001ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002006:	f04f 0812 	mov.w	r8, #18
 800200a:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800200e:	2701      	movs	r7, #1
 8002010:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002014:	2604      	movs	r6, #4
 8002016:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002018:	a903      	add	r1, sp, #12
 800201a:	480f      	ldr	r0, [pc, #60]	; (8002058 <HAL_I2C_MspInit+0xa4>)
 800201c:	f000 fda6 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002024:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002026:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800202e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002030:	a903      	add	r1, sp, #12
 8002032:	480a      	ldr	r0, [pc, #40]	; (800205c <HAL_I2C_MspInit+0xa8>)
 8002034:	f000 fd9a 	bl	8002b6c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002038:	9502      	str	r5, [sp, #8]
 800203a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800203c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002040:	6423      	str	r3, [r4, #64]	; 0x40
 8002042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	9b02      	ldr	r3, [sp, #8]
}
 800204c:	e7bf      	b.n	8001fce <HAL_I2C_MspInit+0x1a>
 800204e:	bf00      	nop
 8002050:	40005c00 	.word	0x40005c00
 8002054:	40023800 	.word	0x40023800
 8002058:	40020800 	.word	0x40020800
 800205c:	40020000 	.word	0x40020000

08002060 <HAL_I2C_MspDeInit>:
{
 8002060:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 8002062:	6802      	ldr	r2, [r0, #0]
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_I2C_MspDeInit+0x2c>)
 8002066:	429a      	cmp	r2, r3
 8002068:	d000      	beq.n	800206c <HAL_I2C_MspDeInit+0xc>
}
 800206a:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C3_CLK_DISABLE();
 800206c:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_I2C_MspDeInit+0x30>)
 800206e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002070:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8002076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800207a:	4806      	ldr	r0, [pc, #24]	; (8002094 <HAL_I2C_MspDeInit+0x34>)
 800207c:	f000 fe6e 	bl	8002d5c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8002080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <HAL_I2C_MspDeInit+0x38>)
 8002086:	f000 fe69 	bl	8002d5c <HAL_GPIO_DeInit>
}
 800208a:	e7ee      	b.n	800206a <HAL_I2C_MspDeInit+0xa>
 800208c:	40005c00 	.word	0x40005c00
 8002090:	40023800 	.word	0x40023800
 8002094:	40020800 	.word	0x40020800
 8002098:	40020000 	.word	0x40020000

0800209c <HAL_LTDC_MspInit>:
{
 800209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a0:	b098      	sub	sp, #96	; 0x60
 80020a2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	2100      	movs	r1, #0
 80020a6:	9113      	str	r1, [sp, #76]	; 0x4c
 80020a8:	9114      	str	r1, [sp, #80]	; 0x50
 80020aa:	9115      	str	r1, [sp, #84]	; 0x54
 80020ac:	9116      	str	r1, [sp, #88]	; 0x58
 80020ae:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	2230      	movs	r2, #48	; 0x30
 80020b2:	a807      	add	r0, sp, #28
 80020b4:	f005 fdf4 	bl	8007ca0 <memset>
  if(hltdc->Instance==LTDC)
 80020b8:	6822      	ldr	r2, [r4, #0]
 80020ba:	4b64      	ldr	r3, [pc, #400]	; (800224c <HAL_LTDC_MspInit+0x1b0>)
 80020bc:	429a      	cmp	r2, r3
 80020be:	d002      	beq.n	80020c6 <HAL_LTDC_MspInit+0x2a>
}
 80020c0:	b018      	add	sp, #96	; 0x60
 80020c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020c6:	2308      	movs	r3, #8
 80020c8:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80020ca:	233c      	movs	r3, #60	; 0x3c
 80020cc:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80020ce:	2305      	movs	r3, #5
 80020d0:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80020d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d6:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d8:	a807      	add	r0, sp, #28
 80020da:	f002 feb5 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 80020de:	2800      	cmp	r0, #0
 80020e0:	f040 80b0 	bne.w	8002244 <HAL_LTDC_MspInit+0x1a8>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020e4:	2400      	movs	r4, #0
 80020e6:	9400      	str	r4, [sp, #0]
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_LTDC_MspInit+0x1b4>)
 80020ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
 80020f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80020f8:	9200      	str	r2, [sp, #0]
 80020fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020fc:	9401      	str	r4, [sp, #4]
 80020fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002100:	f042 0220 	orr.w	r2, r2, #32
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
 8002106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002108:	f002 0220 	and.w	r2, r2, #32
 800210c:	9201      	str	r2, [sp, #4]
 800210e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	9402      	str	r4, [sp, #8]
 8002112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	631a      	str	r2, [r3, #48]	; 0x30
 800211a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800211c:	f002 0201 	and.w	r2, r2, #1
 8002120:	9202      	str	r2, [sp, #8]
 8002122:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	9403      	str	r4, [sp, #12]
 8002126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002128:	f042 0202 	orr.w	r2, r2, #2
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
 800212e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002130:	f002 0202 	and.w	r2, r2, #2
 8002134:	9203      	str	r2, [sp, #12]
 8002136:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002138:	9404      	str	r4, [sp, #16]
 800213a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
 8002142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002144:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002148:	9204      	str	r2, [sp, #16]
 800214a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214c:	9405      	str	r4, [sp, #20]
 800214e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002150:	f042 0204 	orr.w	r2, r2, #4
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
 8002156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002158:	f002 0204 	and.w	r2, r2, #4
 800215c:	9205      	str	r2, [sp, #20]
 800215e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002160:	9406      	str	r4, [sp, #24]
 8002162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002164:	f042 0208 	orr.w	r2, r2, #8
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	9306      	str	r3, [sp, #24]
 8002172:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002178:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2502      	movs	r5, #2
 800217c:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002182:	260e      	movs	r6, #14
 8002184:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002186:	a913      	add	r1, sp, #76	; 0x4c
 8002188:	4832      	ldr	r0, [pc, #200]	; (8002254 <HAL_LTDC_MspInit+0x1b8>)
 800218a:	f000 fcef 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800218e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002192:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800219a:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	a913      	add	r1, sp, #76	; 0x4c
 800219e:	482e      	ldr	r0, [pc, #184]	; (8002258 <HAL_LTDC_MspInit+0x1bc>)
 80021a0:	f000 fce4 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80021a4:	2303      	movs	r3, #3
 80021a6:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021ae:	f04f 0809 	mov.w	r8, #9
 80021b2:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	4f29      	ldr	r7, [pc, #164]	; (800225c <HAL_LTDC_MspInit+0x1c0>)
 80021b8:	a913      	add	r1, sp, #76	; 0x4c
 80021ba:	4638      	mov	r0, r7
 80021bc:	f000 fcd6 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80021c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021c4:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021cc:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ce:	a913      	add	r1, sp, #76	; 0x4c
 80021d0:	4638      	mov	r0, r7
 80021d2:	f000 fccb 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80021d6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80021da:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021e2:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021e4:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 80021e8:	a913      	add	r1, sp, #76	; 0x4c
 80021ea:	4638      	mov	r0, r7
 80021ec:	f000 fcbe 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80021f0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80021f4:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021fc:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fe:	a913      	add	r1, sp, #76	; 0x4c
 8002200:	4817      	ldr	r0, [pc, #92]	; (8002260 <HAL_LTDC_MspInit+0x1c4>)
 8002202:	f000 fcb3 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002206:	2348      	movs	r3, #72	; 0x48
 8002208:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002210:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002212:	a913      	add	r1, sp, #76	; 0x4c
 8002214:	4813      	ldr	r0, [pc, #76]	; (8002264 <HAL_LTDC_MspInit+0x1c8>)
 8002216:	f000 fca9 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800221a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800221e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002226:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800222a:	a913      	add	r1, sp, #76	; 0x4c
 800222c:	4638      	mov	r0, r7
 800222e:	f000 fc9d 	bl	8002b6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002232:	4622      	mov	r2, r4
 8002234:	2105      	movs	r1, #5
 8002236:	2058      	movs	r0, #88	; 0x58
 8002238:	f000 fa16 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800223c:	2058      	movs	r0, #88	; 0x58
 800223e:	f000 fa47 	bl	80026d0 <HAL_NVIC_EnableIRQ>
}
 8002242:	e73d      	b.n	80020c0 <HAL_LTDC_MspInit+0x24>
      Error_Handler();
 8002244:	f7ff fc08 	bl	8001a58 <Error_Handler>
 8002248:	e74c      	b.n	80020e4 <HAL_LTDC_MspInit+0x48>
 800224a:	bf00      	nop
 800224c:	40016800 	.word	0x40016800
 8002250:	40023800 	.word	0x40023800
 8002254:	40021400 	.word	0x40021400
 8002258:	40020000 	.word	0x40020000
 800225c:	40020400 	.word	0x40020400
 8002260:	40020800 	.word	0x40020800
 8002264:	40020c00 	.word	0x40020c00

08002268 <HAL_SPI_MspInit>:
{
 8002268:	b500      	push	{lr}
 800226a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	2300      	movs	r3, #0
 800226e:	9303      	str	r3, [sp, #12]
 8002270:	9304      	str	r3, [sp, #16]
 8002272:	9305      	str	r3, [sp, #20]
 8002274:	9306      	str	r3, [sp, #24]
 8002276:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI5)
 8002278:	6802      	ldr	r2, [r0, #0]
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_SPI_MspInit+0x68>)
 800227c:	429a      	cmp	r2, r3
 800227e:	d002      	beq.n	8002286 <HAL_SPI_MspInit+0x1e>
}
 8002280:	b009      	add	sp, #36	; 0x24
 8002282:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002286:	2200      	movs	r2, #0
 8002288:	9201      	str	r2, [sp, #4]
 800228a:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 800228e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002290:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002294:	6459      	str	r1, [r3, #68]	; 0x44
 8002296:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002298:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 800229c:	9101      	str	r1, [sp, #4]
 800229e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022a0:	9202      	str	r2, [sp, #8]
 80022a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022a4:	f041 0120 	orr.w	r1, r1, #32
 80022a8:	6319      	str	r1, [r3, #48]	; 0x30
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80022b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022c2:	2305      	movs	r3, #5
 80022c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c6:	a903      	add	r1, sp, #12
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <HAL_SPI_MspInit+0x6c>)
 80022ca:	f000 fc4f 	bl	8002b6c <HAL_GPIO_Init>
}
 80022ce:	e7d7      	b.n	8002280 <HAL_SPI_MspInit+0x18>
 80022d0:	40015000 	.word	0x40015000
 80022d4:	40021400 	.word	0x40021400

080022d8 <HAL_SPI_MspDeInit>:
{
 80022d8:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI5)
 80022da:	6802      	ldr	r2, [r0, #0]
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_SPI_MspDeInit+0x24>)
 80022de:	429a      	cmp	r2, r3
 80022e0:	d000      	beq.n	80022e4 <HAL_SPI_MspDeInit+0xc>
}
 80022e2:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI5_CLK_DISABLE();
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <HAL_SPI_MspDeInit+0x28>)
 80022e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80022e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80022ee:	f44f 7160 	mov.w	r1, #896	; 0x380
 80022f2:	4804      	ldr	r0, [pc, #16]	; (8002304 <HAL_SPI_MspDeInit+0x2c>)
 80022f4:	f000 fd32 	bl	8002d5c <HAL_GPIO_DeInit>
}
 80022f8:	e7f3      	b.n	80022e2 <HAL_SPI_MspDeInit+0xa>
 80022fa:	bf00      	nop
 80022fc:	40015000 	.word	0x40015000
 8002300:	40023800 	.word	0x40023800
 8002304:	40021400 	.word	0x40021400

08002308 <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 8002308:	6802      	ldr	r2, [r0, #0]
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_TIM_Base_MspInit+0x28>)
 800230c:	429a      	cmp	r2, r3
 800230e:	d000      	beq.n	8002312 <HAL_TIM_Base_MspInit+0xa>
 8002310:	4770      	bx	lr
{
 8002312:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_TIM_Base_MspInit+0x2c>)
 800231a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	9b01      	ldr	r3, [sp, #4]
}
 800232c:	b002      	add	sp, #8
 800232e:	4770      	bx	lr
 8002330:	40010000 	.word	0x40010000
 8002334:	40023800 	.word	0x40023800

08002338 <HAL_UART_MspInit>:
{
 8002338:	b500      	push	{lr}
 800233a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	2300      	movs	r3, #0
 800233e:	9303      	str	r3, [sp, #12]
 8002340:	9304      	str	r3, [sp, #16]
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	9306      	str	r3, [sp, #24]
 8002346:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8002348:	6802      	ldr	r2, [r0, #0]
 800234a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800234e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8002352:	429a      	cmp	r2, r3
 8002354:	d002      	beq.n	800235c <HAL_UART_MspInit+0x24>
}
 8002356:	b009      	add	sp, #36	; 0x24
 8002358:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800235c:	2200      	movs	r2, #0
 800235e:	9201      	str	r2, [sp, #4]
 8002360:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002364:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002366:	f041 0110 	orr.w	r1, r1, #16
 800236a:	6459      	str	r1, [r3, #68]	; 0x44
 800236c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800236e:	f001 0110 	and.w	r1, r1, #16
 8002372:	9101      	str	r1, [sp, #4]
 8002374:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	9202      	str	r2, [sp, #8]
 8002378:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800237a:	f041 0101 	orr.w	r1, r1, #1
 800237e:	6319      	str	r1, [r3, #48]	; 0x30
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800238a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800238e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800239a:	2307      	movs	r3, #7
 800239c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	a903      	add	r1, sp, #12
 80023a0:	4801      	ldr	r0, [pc, #4]	; (80023a8 <HAL_UART_MspInit+0x70>)
 80023a2:	f000 fbe3 	bl	8002b6c <HAL_GPIO_Init>
}
 80023a6:	e7d6      	b.n	8002356 <HAL_UART_MspInit+0x1e>
 80023a8:	40020000 	.word	0x40020000

080023ac <HAL_HCD_MspInit>:
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	2300      	movs	r3, #0
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	9304      	str	r3, [sp, #16]
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	9306      	str	r3, [sp, #24]
 80023ba:	9307      	str	r3, [sp, #28]
  if(hhcd->Instance==USB_OTG_HS)
 80023bc:	6802      	ldr	r2, [r0, #0]
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_HCD_MspInit+0x8c>)
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_HCD_MspInit+0x1c>
}
 80023c4:	b008      	add	sp, #32
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c8:	2400      	movs	r4, #0
 80023ca:	9401      	str	r4, [sp, #4]
 80023cc:	4d1b      	ldr	r5, [pc, #108]	; (800243c <HAL_HCD_MspInit+0x90>)
 80023ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	632b      	str	r3, [r5, #48]	; 0x30
 80023d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80023e0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80023e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80023ee:	230c      	movs	r3, #12
 80023f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	4e13      	ldr	r6, [pc, #76]	; (8002440 <HAL_HCD_MspInit+0x94>)
 80023f4:	eb0d 0103 	add.w	r1, sp, r3
 80023f8:	4630      	mov	r0, r6
 80023fa:	f000 fbb7 	bl	8002b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80023fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002402:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002404:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002408:	a903      	add	r1, sp, #12
 800240a:	4630      	mov	r0, r6
 800240c:	f000 fbae 	bl	8002b6c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002410:	9402      	str	r4, [sp, #8]
 8002412:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002418:	632b      	str	r3, [r5, #48]	; 0x30
 800241a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800241c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8002424:	4622      	mov	r2, r4
 8002426:	2105      	movs	r1, #5
 8002428:	204d      	movs	r0, #77	; 0x4d
 800242a:	f000 f91d 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800242e:	204d      	movs	r0, #77	; 0x4d
 8002430:	f000 f94e 	bl	80026d0 <HAL_NVIC_EnableIRQ>
}
 8002434:	e7c6      	b.n	80023c4 <HAL_HCD_MspInit+0x18>
 8002436:	bf00      	nop
 8002438:	40040000 	.word	0x40040000
 800243c:	40023800 	.word	0x40023800
 8002440:	40020400 	.word	0x40020400

08002444 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002444:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002446:	f7ff fced 	bl	8001e24 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800244a:	bd08      	pop	{r3, pc}

0800244c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b510      	push	{r4, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002452:	2200      	movs	r2, #0
 8002454:	2036      	movs	r0, #54	; 0x36
 8002456:	f000 f907 	bl	8002668 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800245a:	2036      	movs	r0, #54	; 0x36
 800245c:	f000 f938 	bl	80026d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002460:	2400      	movs	r4, #0
 8002462:	9401      	str	r4, [sp, #4]
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_InitTick+0x6c>)
 8002466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002468:	f042 0210 	orr.w	r2, r2, #16
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002478:	a902      	add	r1, sp, #8
 800247a:	a803      	add	r0, sp, #12
 800247c:	f002 fcc6 	bl	8004e0c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002480:	f002 fca4 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 8002484:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <HAL_InitTick+0x70>)
 8002488:	fba0 2303 	umull	r2, r3, r0, r3
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002490:	480b      	ldr	r0, [pc, #44]	; (80024c0 <HAL_InitTick+0x74>)
 8002492:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <HAL_InitTick+0x78>)
 8002494:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002496:	f240 32e7 	movw	r2, #999	; 0x3e7
 800249a:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800249c:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800249e:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024a2:	f003 fc01 	bl	8005ca8 <HAL_TIM_Base_Init>
 80024a6:	b110      	cbz	r0, 80024ae <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 80024a8:	2001      	movs	r0, #1
}
 80024aa:	b008      	add	sp, #32
 80024ac:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 80024ae:	4804      	ldr	r0, [pc, #16]	; (80024c0 <HAL_InitTick+0x74>)
 80024b0:	f003 fa90 	bl	80059d4 <HAL_TIM_Base_Start_IT>
 80024b4:	e7f9      	b.n	80024aa <HAL_InitTick+0x5e>
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	431bde83 	.word	0x431bde83
 80024c0:	20008b60 	.word	0x20008b60
 80024c4:	40001000 	.word	0x40001000

080024c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler>

080024ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <HardFault_Handler>

080024cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <MemManage_Handler>

080024ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler>

080024d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler>

080024d2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d2:	4770      	bx	lr

080024d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024d6:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM6_DAC_IRQHandler+0xc>)
 80024d8:	f003 fac4 	bl	8005a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024dc:	bd08      	pop	{r3, pc}
 80024de:	bf00      	nop
 80024e0:	20008b60 	.word	0x20008b60

080024e4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80024e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80024e6:	4802      	ldr	r0, [pc, #8]	; (80024f0 <OTG_HS_IRQHandler+0xc>)
 80024e8:	f001 f8fb 	bl	80036e2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80024ec:	bd08      	pop	{r3, pc}
 80024ee:	bf00      	nop
 80024f0:	2000879c 	.word	0x2000879c

080024f4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80024f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80024f6:	4802      	ldr	r0, [pc, #8]	; (8002500 <LTDC_IRQHandler+0xc>)
 80024f8:	f002 f89b 	bl	8004632 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80024fc:	bd08      	pop	{r3, pc}
 80024fe:	bf00      	nop
 8002500:	200086b0 	.word	0x200086b0

08002504 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002504:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002506:	4802      	ldr	r0, [pc, #8]	; (8002510 <DMA2D_IRQHandler+0xc>)
 8002508:	f000 fa2f 	bl	800296a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800250c:	bd08      	pop	{r3, pc}
 800250e:	bf00      	nop
 8002510:	20008aec 	.word	0x20008aec

08002514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002514:	b510      	push	{r4, lr}
 8002516:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002518:	4a0c      	ldr	r2, [pc, #48]	; (800254c <_sbrk+0x38>)
 800251a:	490d      	ldr	r1, [pc, #52]	; (8002550 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <_sbrk+0x40>)
 800251e:	6800      	ldr	r0, [r0, #0]
 8002520:	b140      	cbz	r0, 8002534 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	480c      	ldr	r0, [pc, #48]	; (8002554 <_sbrk+0x40>)
 8002524:	6800      	ldr	r0, [r0, #0]
 8002526:	4403      	add	r3, r0
 8002528:	1a52      	subs	r2, r2, r1
 800252a:	4293      	cmp	r3, r2
 800252c:	d806      	bhi.n	800253c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <_sbrk+0x40>)
 8002530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002532:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <_sbrk+0x40>)
 8002536:	4c08      	ldr	r4, [pc, #32]	; (8002558 <_sbrk+0x44>)
 8002538:	6004      	str	r4, [r0, #0]
 800253a:	e7f2      	b.n	8002522 <_sbrk+0xe>
    errno = ENOMEM;
 800253c:	f005 fb78 	bl	8007c30 <__errno>
 8002540:	230c      	movs	r3, #12
 8002542:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	e7f3      	b.n	8002532 <_sbrk+0x1e>
 800254a:	bf00      	nop
 800254c:	20030000 	.word	0x20030000
 8002550:	00000400 	.word	0x00000400
 8002554:	20000440 	.word	0x20000440
 8002558:	20008bc0 	.word	0x20008bc0

0800255c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800255c:	4a03      	ldr	r2, [pc, #12]	; (800256c <SystemInit+0x10>)
 800255e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002562:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002566:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002576:	490e      	ldr	r1, [pc, #56]	; (80025b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800257c:	e002      	b.n	8002584 <LoopCopyDataInit>

0800257e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002582:	3304      	adds	r3, #4

08002584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002588:	d3f9      	bcc.n	800257e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800258c:	4c0b      	ldr	r4, [pc, #44]	; (80025bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002590:	e001      	b.n	8002596 <LoopFillZerobss>

08002592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002594:	3204      	adds	r2, #4

08002596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002598:	d3fb      	bcc.n	8002592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800259a:	f7ff ffdf 	bl	800255c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259e:	f005 fb4d 	bl	8007c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a2:	f7ff fc19 	bl	8001dd8 <main>
  bx  lr    
 80025a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80025b4:	0800ad44 	.word	0x0800ad44
  ldr r2, =_sbss
 80025b8:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80025bc:	20008bbc 	.word	0x20008bbc

080025c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC_IRQHandler>
	...

080025c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_Init+0x30>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f82f 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7ff ff30 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ec:	f7ff fc88 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80025f0:	2000      	movs	r0, #0
 80025f2:	bd08      	pop	{r3, pc}
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <HAL_IncTick+0x10>)
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_IncTick+0x14>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	440b      	add	r3, r1
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20008ba8 	.word	0x20008ba8
 800260c:	2000007c 	.word	0x2000007c

08002610 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002610:	4b01      	ldr	r3, [pc, #4]	; (8002618 <HAL_GetTick+0x8>)
 8002612:	6818      	ldr	r0, [r3, #0]
}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20008ba8 	.word	0x20008ba8

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff fff6 	bl	8002610 <HAL_GetTick>
 8002624:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002626:	f1b4 3fff 	cmp.w	r4, #4294967295
 800262a:	d002      	beq.n	8002632 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_Delay+0x24>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002632:	f7ff ffed 	bl	8002610 <HAL_GetTick>
 8002636:	1b40      	subs	r0, r0, r5
 8002638:	42a0      	cmp	r0, r4
 800263a:	d3fa      	bcc.n	8002632 <HAL_Delay+0x16>
  {
  }
}
 800263c:	bd38      	pop	{r3, r4, r5, pc}
 800263e:	bf00      	nop
 8002640:	2000007c 	.word	0x2000007c

08002644 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002646:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002648:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	0200      	lsls	r0, r0, #8
 8002652:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002656:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002660:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002668:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_NVIC_SetPriority+0x60>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002672:	f1c3 0407 	rsb	r4, r3, #7
 8002676:	2c04      	cmp	r4, #4
 8002678:	bf28      	it	cs
 800267a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267c:	1d1d      	adds	r5, r3, #4
 800267e:	2d06      	cmp	r5, #6
 8002680:	d918      	bls.n	80026b4 <HAL_NVIC_SetPriority+0x4c>
 8002682:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 35ff 	mov.w	r5, #4294967295
 8002688:	fa05 f404 	lsl.w	r4, r5, r4
 800268c:	ea21 0104 	bic.w	r1, r1, r4
 8002690:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002692:	fa05 f303 	lsl.w	r3, r5, r3
 8002696:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800269c:	2800      	cmp	r0, #0
 800269e:	db0b      	blt.n	80026b8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	0109      	lsls	r1, r1, #4
 80026a2:	b2c9      	uxtb	r1, r1
 80026a4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80026a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80026ac:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026b0:	bc30      	pop	{r4, r5}
 80026b2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b4:	2300      	movs	r3, #0
 80026b6:	e7e5      	b.n	8002684 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	f000 000f 	and.w	r0, r0, #15
 80026bc:	0109      	lsls	r1, r1, #4
 80026be:	b2c9      	uxtb	r1, r1
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_NVIC_SetPriority+0x64>)
 80026c2:	5419      	strb	r1, [r3, r0]
 80026c4:	e7f4      	b.n	80026b0 <HAL_NVIC_SetPriority+0x48>
 80026c6:	bf00      	nop
 80026c8:	e000ed00 	.word	0xe000ed00
 80026cc:	e000ed14 	.word	0xe000ed14

080026d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026d0:	2800      	cmp	r0, #0
 80026d2:	db07      	blt.n	80026e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d4:	f000 021f 	and.w	r2, r0, #31
 80026d8:	0940      	lsrs	r0, r0, #5
 80026da:	2301      	movs	r3, #1
 80026dc:	4093      	lsls	r3, r2
 80026de:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <HAL_NVIC_EnableIRQ+0x18>)
 80026e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026ec:	b158      	cbz	r0, 8002706 <HAL_CRC_Init+0x1a>
{
 80026ee:	b510      	push	{r4, lr}
 80026f0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026f2:	7943      	ldrb	r3, [r0, #5]
 80026f4:	b11b      	cbz	r3, 80026fe <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026f6:	2301      	movs	r3, #1
 80026f8:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80026fa:	2000      	movs	r0, #0
}
 80026fc:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80026fe:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8002700:	f7ff fc20 	bl	8001f44 <HAL_CRC_MspInit>
 8002704:	e7f7      	b.n	80026f6 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8002706:	2001      	movs	r0, #1
}
 8002708:	4770      	bx	lr

0800270a <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800270a:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800270c:	6806      	ldr	r6, [r0, #0]
 800270e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8002710:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002714:	9d03      	ldr	r5, [sp, #12]
 8002716:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800271a:	432c      	orrs	r4, r5
 800271c:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800271e:	6803      	ldr	r3, [r0, #0]
 8002720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002722:	6843      	ldr	r3, [r0, #4]
 8002724:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002728:	d003      	beq.n	8002732 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800272a:	6803      	ldr	r3, [r0, #0]
 800272c:	60d9      	str	r1, [r3, #12]
  }
}
 800272e:	bc70      	pop	{r4, r5, r6}
 8002730:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002732:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002736:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800273a:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800273e:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002740:	6884      	ldr	r4, [r0, #8]
 8002742:	b194      	cbz	r4, 800276a <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002744:	2c01      	cmp	r4, #1
 8002746:	d00e      	beq.n	8002766 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002748:	2c02      	cmp	r4, #2
 800274a:	d011      	beq.n	8002770 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800274c:	2c03      	cmp	r4, #3
 800274e:	d017      	beq.n	8002780 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8002750:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8002752:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002754:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002756:	0219      	lsls	r1, r3, #8
 8002758:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 800275c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8002760:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8002764:	e001      	b.n	800276a <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 8002766:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800276a:	6803      	ldr	r3, [r0, #0]
 800276c:	6399      	str	r1, [r3, #56]	; 0x38
 800276e:	e7de      	b.n	800272e <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8002770:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002772:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002774:	02d9      	lsls	r1, r3, #11
 8002776:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800277a:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 800277e:	e7f4      	b.n	800276a <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8002780:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8002782:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002784:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002786:	0299      	lsls	r1, r3, #10
 8002788:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800278c:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8002790:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002794:	e7e9      	b.n	800276a <DMA2D_SetConfig+0x60>

08002796 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8002796:	b348      	cbz	r0, 80027ec <HAL_DMA2D_Init+0x56>
{
 8002798:	b510      	push	{r4, lr}
 800279a:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800279c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027a0:	b1fb      	cbz	r3, 80027e2 <HAL_DMA2D_Init+0x4c>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80027a8:	6822      	ldr	r2, [r4, #0]
 80027aa:	6813      	ldr	r3, [r2, #0]
 80027ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027b0:	6861      	ldr	r1, [r4, #4]
 80027b2:	430b      	orrs	r3, r1
 80027b4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80027b6:	6822      	ldr	r2, [r4, #0]
 80027b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	68a1      	ldr	r1, [r4, #8]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80027c4:	6822      	ldr	r2, [r4, #0]
 80027c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80027c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027d0:	68e1      	ldr	r1, [r4, #12]
 80027d2:	430b      	orrs	r3, r1
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80027d6:	2000      	movs	r0, #0
 80027d8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80027da:	2301      	movs	r3, #1
 80027dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80027e0:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80027e2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80027e6:	f7ff fbc5 	bl	8001f74 <HAL_DMA2D_MspInit>
 80027ea:	e7da      	b.n	80027a2 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
}
 80027ee:	4770      	bx	lr

080027f0 <HAL_DMA2D_Start>:
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80027f6:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 80027fa:	2801      	cmp	r0, #1
 80027fc:	d012      	beq.n	8002824 <HAL_DMA2D_Start+0x34>
 80027fe:	2001      	movs	r0, #1
 8002800:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002804:	2002      	movs	r0, #2
 8002806:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800280a:	9804      	ldr	r0, [sp, #16]
 800280c:	9000      	str	r0, [sp, #0]
 800280e:	4620      	mov	r0, r4
 8002810:	f7ff ff7b 	bl	800270a <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800281e:	2000      	movs	r0, #0
}
 8002820:	b002      	add	sp, #8
 8002822:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8002824:	2002      	movs	r0, #2
 8002826:	e7fb      	b.n	8002820 <HAL_DMA2D_Start+0x30>

08002828 <HAL_DMA2D_PollForTransfer>:
{
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	4604      	mov	r4, r0
 800282e:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8002830:	2300      	movs	r3, #0
 8002832:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002834:	6803      	ldr	r3, [r0, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f013 0f01 	tst.w	r3, #1
 800283c:	d111      	bne.n	8002862 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002844:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002846:	f013 0f20 	tst.w	r3, #32
 800284a:	d147      	bne.n	80028dc <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	2212      	movs	r2, #18
 8002850:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002852:	2301      	movs	r3, #1
 8002854:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002858:	2000      	movs	r0, #0
 800285a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800285e:	b002      	add	sp, #8
 8002860:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002862:	f7ff fed5 	bl	8002610 <HAL_GetTick>
 8002866:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	f012 0f02 	tst.w	r2, #2
 8002870:	d1e5      	bne.n	800283e <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002876:	9a01      	ldr	r2, [sp, #4]
 8002878:	f012 0f21 	tst.w	r2, #33	; 0x21
 800287c:	d114      	bne.n	80028a8 <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 800287e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002882:	d0f1      	beq.n	8002868 <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002884:	f7ff fec4 	bl	8002610 <HAL_GetTick>
 8002888:	1b80      	subs	r0, r0, r6
 800288a:	42a8      	cmp	r0, r5
 800288c:	d801      	bhi.n	8002892 <HAL_DMA2D_PollForTransfer+0x6a>
 800288e:	2d00      	cmp	r5, #0
 8002890:	d1ea      	bne.n	8002868 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002892:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002894:	f043 0320 	orr.w	r3, r3, #32
 8002898:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800289a:	2003      	movs	r0, #3
 800289c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80028a0:	2300      	movs	r3, #0
 80028a2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80028a6:	e7da      	b.n	800285e <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028a8:	9a01      	ldr	r2, [sp, #4]
 80028aa:	f012 0f20 	tst.w	r2, #32
 80028ae:	d003      	beq.n	80028b8 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80028b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028b2:	f042 0202 	orr.w	r2, r2, #2
 80028b6:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80028b8:	9a01      	ldr	r2, [sp, #4]
 80028ba:	f012 0f01 	tst.w	r2, #1
 80028be:	d003      	beq.n	80028c8 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028cc:	2304      	movs	r3, #4
 80028ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80028d2:	2300      	movs	r3, #0
 80028d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80028d8:	2001      	movs	r0, #1
 80028da:	e7c0      	b.n	800285e <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 80028dc:	f7ff fe98 	bl	8002610 <HAL_GetTick>
 80028e0:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	f012 0f10 	tst.w	r2, #16
 80028ea:	d1af      	bne.n	800284c <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80028f0:	9a01      	ldr	r2, [sp, #4]
 80028f2:	f012 0f29 	tst.w	r2, #41	; 0x29
 80028f6:	d114      	bne.n	8002922 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 80028f8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80028fc:	d0f1      	beq.n	80028e2 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7ff fe87 	bl	8002610 <HAL_GetTick>
 8002902:	1b80      	subs	r0, r0, r6
 8002904:	42a8      	cmp	r0, r5
 8002906:	d801      	bhi.n	800290c <HAL_DMA2D_PollForTransfer+0xe4>
 8002908:	2d00      	cmp	r5, #0
 800290a:	d1ea      	bne.n	80028e2 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800290c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002914:	2003      	movs	r0, #3
 8002916:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 800291a:	2300      	movs	r3, #0
 800291c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002920:	e79d      	b.n	800285e <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002922:	9a01      	ldr	r2, [sp, #4]
 8002924:	f012 0f08 	tst.w	r2, #8
 8002928:	d003      	beq.n	8002932 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800292a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800292c:	f042 0204 	orr.w	r2, r2, #4
 8002930:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002932:	9a01      	ldr	r2, [sp, #4]
 8002934:	f012 0f20 	tst.w	r2, #32
 8002938:	d003      	beq.n	8002942 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800293a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800293c:	f042 0202 	orr.w	r2, r2, #2
 8002940:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002942:	9a01      	ldr	r2, [sp, #4]
 8002944:	f012 0f01 	tst.w	r2, #1
 8002948:	d003      	beq.n	8002952 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800294a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002952:	2229      	movs	r2, #41	; 0x29
 8002954:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002956:	2304      	movs	r3, #4
 8002958:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800295c:	2300      	movs	r3, #0
 800295e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002962:	2001      	movs	r0, #1
 8002964:	e77b      	b.n	800285e <HAL_DMA2D_PollForTransfer+0x36>

08002966 <HAL_DMA2D_LineEventCallback>:
}
 8002966:	4770      	bx	lr

08002968 <HAL_DMA2D_CLUTLoadingCpltCallback>:
}
 8002968:	4770      	bx	lr

0800296a <HAL_DMA2D_IRQHandler>:
{
 800296a:	b570      	push	{r4, r5, r6, lr}
 800296c:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800296e:	6803      	ldr	r3, [r0, #0]
 8002970:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002972:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002974:	f015 0f01 	tst.w	r5, #1
 8002978:	d016      	beq.n	80029a8 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800297a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800297e:	d013      	beq.n	80029a8 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002986:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002988:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002990:	6803      	ldr	r3, [r0, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002996:	2304      	movs	r3, #4
 8002998:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800299c:	2300      	movs	r3, #0
 800299e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80029a2:	6943      	ldr	r3, [r0, #20]
 80029a4:	b103      	cbz	r3, 80029a8 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 80029a6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80029a8:	f015 0f20 	tst.w	r5, #32
 80029ac:	d018      	beq.n	80029e0 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80029ae:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80029b2:	d015      	beq.n	80029e0 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80029b4:	6822      	ldr	r2, [r4, #0]
 80029b6:	6813      	ldr	r3, [r2, #0]
 80029b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029bc:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	2220      	movs	r2, #32
 80029c2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029cc:	2304      	movs	r3, #4
 80029ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80029d2:	2300      	movs	r3, #0
 80029d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80029d8:	6963      	ldr	r3, [r4, #20]
 80029da:	b10b      	cbz	r3, 80029e0 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 80029dc:	4620      	mov	r0, r4
 80029de:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029e0:	f015 0f08 	tst.w	r5, #8
 80029e4:	d018      	beq.n	8002a18 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80029e6:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80029ea:	d015      	beq.n	8002a18 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029f4:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	2208      	movs	r2, #8
 80029fa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80029fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a04:	2304      	movs	r3, #4
 8002a06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002a10:	6963      	ldr	r3, [r4, #20]
 8002a12:	b10b      	cbz	r3, 8002a18 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8002a14:	4620      	mov	r0, r4
 8002a16:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002a18:	f015 0f04 	tst.w	r5, #4
 8002a1c:	d002      	beq.n	8002a24 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002a1e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002a22:	d120      	bne.n	8002a66 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002a24:	f015 0f02 	tst.w	r5, #2
 8002a28:	d016      	beq.n	8002a58 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002a2a:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002a2e:	d013      	beq.n	8002a58 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002a30:	6822      	ldr	r2, [r4, #0]
 8002a32:	6813      	ldr	r3, [r2, #0]
 8002a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a38:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a42:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8002a50:	6923      	ldr	r3, [r4, #16]
 8002a52:	b10b      	cbz	r3, 8002a58 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8002a54:	4620      	mov	r0, r4
 8002a56:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002a58:	f015 0f10 	tst.w	r5, #16
 8002a5c:	d002      	beq.n	8002a64 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002a5e:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8002a62:	d10c      	bne.n	8002a7e <HAL_DMA2D_IRQHandler+0x114>
}
 8002a64:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002a66:	6822      	ldr	r2, [r4, #0]
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a6e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	2204      	movs	r2, #4
 8002a74:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7ff ff75 	bl	8002966 <HAL_DMA2D_LineEventCallback>
 8002a7c:	e7d2      	b.n	8002a24 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	6813      	ldr	r3, [r2, #0]
 8002a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a86:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a90:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff ff62 	bl	8002968 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8002aa4:	e7de      	b.n	8002a64 <HAL_DMA2D_IRQHandler+0xfa>
	...

08002aa8 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002aa8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d059      	beq.n	8002b64 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8002ab0:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002abe:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	1c8b      	adds	r3, r1, #2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	58c3      	ldr	r3, [r0, r3]
 8002aca:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ace:	3a09      	subs	r2, #9
 8002ad0:	2a01      	cmp	r2, #1
 8002ad2:	d91e      	bls.n	8002b12 <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ad4:	1c8a      	adds	r2, r1, #2
 8002ad6:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002ada:	6852      	ldr	r2, [r2, #4]
 8002adc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002ae0:	bb41      	cbnz	r1, 8002b34 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ae2:	6804      	ldr	r4, [r0, #0]
 8002ae4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002ae6:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002ae8:	402a      	ands	r2, r5
 8002aea:	4313      	orrs	r3, r2
 8002aec:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002aee:	6802      	ldr	r2, [r0, #0]
 8002af0:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002af4:	699c      	ldr	r4, [r3, #24]
 8002af6:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	3b09      	subs	r3, #9
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d910      	bls.n	8002b22 <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002b06:	2300      	movs	r3, #0
 8002b08:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8002b0c:	4618      	mov	r0, r3
}
 8002b0e:	bc30      	pop	{r4, r5}
 8002b10:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002b12:	1c8a      	adds	r2, r1, #2
 8002b14:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002b18:	6852      	ldr	r2, [r2, #4]
 8002b1a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	e7de      	b.n	8002ae0 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002b22:	3102      	adds	r1, #2
 8002b24:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002b28:	684b      	ldr	r3, [r1, #4]
 8002b2a:	6802      	ldr	r2, [r0, #0]
 8002b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b30:	6293      	str	r3, [r2, #40]	; 0x28
 8002b32:	e7e5      	b.n	8002b00 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002b34:	6804      	ldr	r4, [r0, #0]
 8002b36:	69e5      	ldr	r5, [r4, #28]
 8002b38:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002b3a:	402a      	ands	r2, r5
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002b40:	6802      	ldr	r2, [r0, #0]
 8002b42:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002b46:	699c      	ldr	r4, [r3, #24]
 8002b48:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	3b09      	subs	r3, #9
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d8d6      	bhi.n	8002b00 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002b52:	3102      	adds	r1, #2
 8002b54:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002b58:	684b      	ldr	r3, [r1, #4]
 8002b5a:	6802      	ldr	r2, [r0, #0]
 8002b5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	e7cd      	b.n	8002b00 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8002b64:	2002      	movs	r0, #2
}
 8002b66:	4770      	bx	lr
 8002b68:	00fcfff0 	.word	0x00fcfff0

08002b6c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	f200 80ea 	bhi.w	8002d48 <HAL_GPIO_Init+0x1dc>
{
 8002b74:	b4f0      	push	{r4, r5, r6, r7}
 8002b76:	b082      	sub	sp, #8
 8002b78:	e05e      	b.n	8002c38 <HAL_GPIO_Init+0xcc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b7a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b7c:	005f      	lsls	r7, r3, #1
 8002b7e:	2403      	movs	r4, #3
 8002b80:	40bc      	lsls	r4, r7
 8002b82:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b86:	68cc      	ldr	r4, [r1, #12]
 8002b88:	40bc      	lsls	r4, r7
 8002b8a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002b8c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b90:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b94:	684c      	ldr	r4, [r1, #4]
 8002b96:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002b9e:	6042      	str	r2, [r0, #4]
 8002ba0:	e058      	b.n	8002c54 <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba2:	08dc      	lsrs	r4, r3, #3
 8002ba4:	3408      	adds	r4, #8
 8002ba6:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002baa:	f003 0207 	and.w	r2, r3, #7
 8002bae:	0096      	lsls	r6, r2, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	40b2      	lsls	r2, r6
 8002bb4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb8:	690a      	ldr	r2, [r1, #16]
 8002bba:	40b2      	lsls	r2, r6
 8002bbc:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002bbe:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002bc2:	e05b      	b.n	8002c7c <HAL_GPIO_Init+0x110>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc4:	2209      	movs	r2, #9
 8002bc6:	e000      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002bc8:	2200      	movs	r2, #0
 8002bca:	40b2      	lsls	r2, r6
 8002bcc:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bce:	3402      	adds	r4, #2
 8002bd0:	4e5e      	ldr	r6, [pc, #376]	; (8002d4c <HAL_GPIO_Init+0x1e0>)
 8002bd2:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd6:	4a5e      	ldr	r2, [pc, #376]	; (8002d50 <HAL_GPIO_Init+0x1e4>)
 8002bd8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	43ea      	mvns	r2, r5
 8002bdc:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be0:	684f      	ldr	r7, [r1, #4]
 8002be2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002be6:	d001      	beq.n	8002bec <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8002be8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002bec:	4c58      	ldr	r4, [pc, #352]	; (8002d50 <HAL_GPIO_Init+0x1e4>)
 8002bee:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002bf0:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf6:	684f      	ldr	r7, [r1, #4]
 8002bf8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002bfc:	d001      	beq.n	8002c02 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8002bfe:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002c02:	4c53      	ldr	r4, [pc, #332]	; (8002d50 <HAL_GPIO_Init+0x1e4>)
 8002c04:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c06:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c08:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c0c:	684f      	ldr	r7, [r1, #4]
 8002c0e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002c12:	d001      	beq.n	8002c18 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8002c14:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002c18:	4c4d      	ldr	r4, [pc, #308]	; (8002d50 <HAL_GPIO_Init+0x1e4>)
 8002c1a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002c1c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c20:	684e      	ldr	r6, [r1, #4]
 8002c22:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002c26:	d001      	beq.n	8002c2c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8002c28:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002c2c:	4c48      	ldr	r4, [pc, #288]	; (8002d50 <HAL_GPIO_Init+0x1e4>)
 8002c2e:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c30:	3301      	adds	r3, #1
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f200 8085 	bhi.w	8002d42 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3c:	680c      	ldr	r4, [r1, #0]
 8002c3e:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002c42:	ea32 0404 	bics.w	r4, r2, r4
 8002c46:	d1f3      	bne.n	8002c30 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c48:	684c      	ldr	r4, [r1, #4]
 8002c4a:	f004 0403 	and.w	r4, r4, #3
 8002c4e:	3c01      	subs	r4, #1
 8002c50:	2c01      	cmp	r4, #1
 8002c52:	d992      	bls.n	8002b7a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	684a      	ldr	r2, [r1, #4]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	2a03      	cmp	r2, #3
 8002c5c:	d009      	beq.n	8002c72 <HAL_GPIO_Init+0x106>
        temp = GPIOx->PUPDR;
 8002c5e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c60:	005e      	lsls	r6, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	40b2      	lsls	r2, r6
 8002c66:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c6a:	688a      	ldr	r2, [r1, #8]
 8002c6c:	40b2      	lsls	r2, r6
 8002c6e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002c70:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c72:	684a      	ldr	r2, [r1, #4]
 8002c74:	f002 0203 	and.w	r2, r2, #3
 8002c78:	2a02      	cmp	r2, #2
 8002c7a:	d092      	beq.n	8002ba2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8002c7c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7e:	005e      	lsls	r6, r3, #1
 8002c80:	2203      	movs	r2, #3
 8002c82:	40b2      	lsls	r2, r6
 8002c84:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c88:	684a      	ldr	r2, [r1, #4]
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	40b2      	lsls	r2, r6
 8002c90:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002c92:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c94:	684a      	ldr	r2, [r1, #4]
 8002c96:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002c9a:	d0c9      	beq.n	8002c30 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	9201      	str	r2, [sp, #4]
 8002ca0:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_GPIO_Init+0x1e8>)
 8002ca2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002ca4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002ca8:	6454      	str	r4, [r2, #68]	; 0x44
 8002caa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002cb0:	9201      	str	r2, [sp, #4]
 8002cb2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb4:	089c      	lsrs	r4, r3, #2
 8002cb6:	1ca6      	adds	r6, r4, #2
 8002cb8:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <HAL_GPIO_Init+0x1e0>)
 8002cba:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	0096      	lsls	r6, r2, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	40b2      	lsls	r2, r6
 8002cc8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ccc:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_GPIO_Init+0x1ec>)
 8002cce:	4290      	cmp	r0, r2
 8002cd0:	f43f af7a 	beq.w	8002bc8 <HAL_GPIO_Init+0x5c>
 8002cd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd8:	4290      	cmp	r0, r2
 8002cda:	d022      	beq.n	8002d22 <HAL_GPIO_Init+0x1b6>
 8002cdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ce0:	4290      	cmp	r0, r2
 8002ce2:	d020      	beq.n	8002d26 <HAL_GPIO_Init+0x1ba>
 8002ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ce8:	4290      	cmp	r0, r2
 8002cea:	d01e      	beq.n	8002d2a <HAL_GPIO_Init+0x1be>
 8002cec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf0:	4290      	cmp	r0, r2
 8002cf2:	d01c      	beq.n	8002d2e <HAL_GPIO_Init+0x1c2>
 8002cf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf8:	4290      	cmp	r0, r2
 8002cfa:	d01a      	beq.n	8002d32 <HAL_GPIO_Init+0x1c6>
 8002cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d00:	4290      	cmp	r0, r2
 8002d02:	d018      	beq.n	8002d36 <HAL_GPIO_Init+0x1ca>
 8002d04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d08:	4290      	cmp	r0, r2
 8002d0a:	d016      	beq.n	8002d3a <HAL_GPIO_Init+0x1ce>
 8002d0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d10:	4290      	cmp	r0, r2
 8002d12:	d014      	beq.n	8002d3e <HAL_GPIO_Init+0x1d2>
 8002d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d18:	4290      	cmp	r0, r2
 8002d1a:	f43f af53 	beq.w	8002bc4 <HAL_GPIO_Init+0x58>
 8002d1e:	220a      	movs	r2, #10
 8002d20:	e753      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002d22:	2201      	movs	r2, #1
 8002d24:	e751      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002d26:	2202      	movs	r2, #2
 8002d28:	e74f      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	e74d      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002d2e:	2204      	movs	r2, #4
 8002d30:	e74b      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002d32:	2205      	movs	r2, #5
 8002d34:	e749      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002d36:	2206      	movs	r2, #6
 8002d38:	e747      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	e745      	b.n	8002bca <HAL_GPIO_Init+0x5e>
 8002d3e:	2208      	movs	r2, #8
 8002d40:	e743      	b.n	8002bca <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8002d42:	b002      	add	sp, #8
 8002d44:	bcf0      	pop	{r4, r5, r6, r7}
 8002d46:	4770      	bx	lr
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	40013c00 	.word	0x40013c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000

08002d5c <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	f200 809b 	bhi.w	8002e9a <HAL_GPIO_DeInit+0x13e>
{
 8002d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d66:	e02d      	b.n	8002dc4 <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002d68:	2609      	movs	r6, #9
 8002d6a:	e000      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	fa06 f404 	lsl.w	r4, r6, r4
 8002d72:	42ac      	cmp	r4, r5
 8002d74:	d075      	beq.n	8002e62 <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d76:	6805      	ldr	r5, [r0, #0]
 8002d78:	005c      	lsls	r4, r3, #1
 8002d7a:	2603      	movs	r6, #3
 8002d7c:	fa06 f404 	lsl.w	r4, r6, r4
 8002d80:	ea25 0504 	bic.w	r5, r5, r4
 8002d84:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d86:	fa23 f506 	lsr.w	r5, r3, r6
 8002d8a:	3508      	adds	r5, #8
 8002d8c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8002d90:	f003 0707 	and.w	r7, r3, #7
 8002d94:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8002d98:	270f      	movs	r7, #15
 8002d9a:	fa07 f70c 	lsl.w	r7, r7, ip
 8002d9e:	ea26 0607 	bic.w	r6, r6, r7
 8002da2:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da6:	68c5      	ldr	r5, [r0, #12]
 8002da8:	ea25 0504 	bic.w	r5, r5, r4
 8002dac:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dae:	6845      	ldr	r5, [r0, #4]
 8002db0:	ea25 0202 	bic.w	r2, r5, r2
 8002db4:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db6:	6882      	ldr	r2, [r0, #8]
 8002db8:	ea22 0404 	bic.w	r4, r2, r4
 8002dbc:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	2b0f      	cmp	r3, #15
 8002dc2:	d869      	bhi.n	8002e98 <HAL_GPIO_DeInit+0x13c>
    ioposition = 0x01U << position;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8002dc8:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 8002dcc:	ea32 0401 	bics.w	r4, r2, r1
 8002dd0:	d1f5      	bne.n	8002dbe <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002dd2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002dd6:	f10c 0502 	add.w	r5, ip, #2
 8002dda:	4c30      	ldr	r4, [pc, #192]	; (8002e9c <HAL_GPIO_DeInit+0x140>)
 8002ddc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002de0:	f003 0403 	and.w	r4, r3, #3
 8002de4:	00a4      	lsls	r4, r4, #2
 8002de6:	260f      	movs	r6, #15
 8002de8:	fa06 fe04 	lsl.w	lr, r6, r4
 8002dec:	ea0e 0505 	and.w	r5, lr, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002df0:	4e2b      	ldr	r6, [pc, #172]	; (8002ea0 <HAL_GPIO_DeInit+0x144>)
 8002df2:	42b0      	cmp	r0, r6
 8002df4:	d0ba      	beq.n	8002d6c <HAL_GPIO_DeInit+0x10>
 8002df6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002dfa:	42b0      	cmp	r0, r6
 8002dfc:	d021      	beq.n	8002e42 <HAL_GPIO_DeInit+0xe6>
 8002dfe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e02:	42b0      	cmp	r0, r6
 8002e04:	d01f      	beq.n	8002e46 <HAL_GPIO_DeInit+0xea>
 8002e06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e0a:	42b0      	cmp	r0, r6
 8002e0c:	d01d      	beq.n	8002e4a <HAL_GPIO_DeInit+0xee>
 8002e0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e12:	42b0      	cmp	r0, r6
 8002e14:	d01b      	beq.n	8002e4e <HAL_GPIO_DeInit+0xf2>
 8002e16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e1a:	42b0      	cmp	r0, r6
 8002e1c:	d019      	beq.n	8002e52 <HAL_GPIO_DeInit+0xf6>
 8002e1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e22:	42b0      	cmp	r0, r6
 8002e24:	d017      	beq.n	8002e56 <HAL_GPIO_DeInit+0xfa>
 8002e26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e2a:	42b0      	cmp	r0, r6
 8002e2c:	d015      	beq.n	8002e5a <HAL_GPIO_DeInit+0xfe>
 8002e2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e32:	42b0      	cmp	r0, r6
 8002e34:	d013      	beq.n	8002e5e <HAL_GPIO_DeInit+0x102>
 8002e36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002e3a:	42b0      	cmp	r0, r6
 8002e3c:	d094      	beq.n	8002d68 <HAL_GPIO_DeInit+0xc>
 8002e3e:	260a      	movs	r6, #10
 8002e40:	e795      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002e42:	2601      	movs	r6, #1
 8002e44:	e793      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002e46:	2602      	movs	r6, #2
 8002e48:	e791      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002e4a:	2603      	movs	r6, #3
 8002e4c:	e78f      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002e4e:	2604      	movs	r6, #4
 8002e50:	e78d      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002e52:	2605      	movs	r6, #5
 8002e54:	e78b      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002e56:	2606      	movs	r6, #6
 8002e58:	e789      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002e5a:	2607      	movs	r6, #7
 8002e5c:	e787      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
 8002e5e:	2608      	movs	r6, #8
 8002e60:	e785      	b.n	8002d6e <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e62:	4c10      	ldr	r4, [pc, #64]	; (8002ea4 <HAL_GPIO_DeInit+0x148>)
 8002e64:	6825      	ldr	r5, [r4, #0]
 8002e66:	ea25 0507 	bic.w	r5, r5, r7
 8002e6a:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e6c:	6865      	ldr	r5, [r4, #4]
 8002e6e:	ea25 0507 	bic.w	r5, r5, r7
 8002e72:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e74:	68a5      	ldr	r5, [r4, #8]
 8002e76:	ea25 0507 	bic.w	r5, r5, r7
 8002e7a:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e7c:	68e5      	ldr	r5, [r4, #12]
 8002e7e:	ea25 0707 	bic.w	r7, r5, r7
 8002e82:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e84:	4d05      	ldr	r5, [pc, #20]	; (8002e9c <HAL_GPIO_DeInit+0x140>)
 8002e86:	f10c 0402 	add.w	r4, ip, #2
 8002e8a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8002e8e:	ea26 060e 	bic.w	r6, r6, lr
 8002e92:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 8002e96:	e76e      	b.n	8002d76 <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8002e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9a:	4770      	bx	lr
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	b10a      	cbz	r2, 8002eae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	6181      	str	r1, [r0, #24]
 8002eac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eae:	0409      	lsls	r1, r1, #16
 8002eb0:	6181      	str	r1, [r0, #24]
  }
}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002eb4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eb6:	ea01 0203 	and.w	r2, r1, r3
 8002eba:	ea21 0103 	bic.w	r1, r1, r3
 8002ebe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002ec2:	6181      	str	r1, [r0, #24]
}
 8002ec4:	4770      	bx	lr

08002ec6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec8:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002eca:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ecc:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ed0:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ed4:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d000      	beq.n	8002ede <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8002edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ede:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ee0:	2c00      	cmp	r4, #0
 8002ee2:	d0fb      	beq.n	8002edc <HCD_RXQLVL_IRQHandler+0x16>
 8002ee4:	232c      	movs	r3, #44	; 0x2c
 8002ee6:	fb03 0307 	mla	r3, r3, r7, r0
 8002eea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002eec:	2900      	cmp	r1, #0
 8002eee:	d0f5      	beq.n	8002edc <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ef0:	232c      	movs	r3, #44	; 0x2c
 8002ef2:	fb03 0307 	mla	r3, r3, r7, r0
 8002ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ef8:	4422      	add	r2, r4
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d906      	bls.n	8002f0e <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f00:	202c      	movs	r0, #44	; 0x2c
 8002f02:	fb00 5507 	mla	r5, r0, r7, r5
 8002f06:	2304      	movs	r3, #4
 8002f08:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 8002f0c:	e7e6      	b.n	8002edc <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f0e:	4622      	mov	r2, r4
 8002f10:	4630      	mov	r0, r6
 8002f12:	f003 f9d9 	bl	80062c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f16:	232c      	movs	r3, #44	; 0x2c
 8002f18:	fb03 5307 	mla	r3, r3, r7, r5
 8002f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1e:	4422      	add	r2, r4
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f24:	4422      	add	r2, r4
 8002f26:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f28:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8002f2c:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 8002f30:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	d1cf      	bne.n	8002edc <HCD_RXQLVL_IRQHandler+0x16>
 8002f3c:	2a00      	cmp	r2, #0
 8002f3e:	d0cd      	beq.n	8002edc <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f40:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f4c:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f50:	232c      	movs	r3, #44	; 0x2c
 8002f52:	fb03 5507 	mla	r5, r3, r7, r5
 8002f56:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8002f5a:	f083 0301 	eor.w	r3, r3, #1
 8002f5e:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8002f62:	e7bb      	b.n	8002edc <HCD_RXQLVL_IRQHandler+0x16>

08002f64 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d045      	beq.n	8002ff4 <HAL_HCD_Init+0x90>
{
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6a:	b08b      	sub	sp, #44	; 0x2c
 8002f6c:	4606      	mov	r6, r0
  USBx = hhcd->Instance;
 8002f6e:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f70:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d038      	beq.n	8002fea <HAL_HCD_Init+0x86>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f84:	d101      	bne.n	8002f8a <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	6133      	str	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 8002f8a:	6830      	ldr	r0, [r6, #0]
 8002f8c:	f003 f967 	bl	800625e <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f90:	4634      	mov	r4, r6
 8002f92:	f854 cb10 	ldr.w	ip, [r4], #16
 8002f96:	466d      	mov	r5, sp
 8002f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fa8:	1d37      	adds	r7, r6, #4
 8002faa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002fae:	4660      	mov	r0, ip
 8002fb0:	f003 f910 	bl	80061d4 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	6830      	ldr	r0, [r6, #0]
 8002fb8:	f003 f9b4 	bl	8006324 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002fbc:	4634      	mov	r4, r6
 8002fbe:	f854 cb10 	ldr.w	ip, [r4], #16
 8002fc2:	466d      	mov	r5, sp
 8002fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002fd8:	4660      	mov	r0, ip
 8002fda:	f003 f9d5 	bl	8006388 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  return HAL_OK;
 8002fe4:	2000      	movs	r0, #0
}
 8002fe6:	b00b      	add	sp, #44	; 0x2c
 8002fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8002fea:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8002fee:	f7ff f9dd 	bl	80023ac <HAL_HCD_MspInit>
 8002ff2:	e7c1      	b.n	8002f78 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8002ff4:	2001      	movs	r0, #1
}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_HCD_SOF_Callback>:
}
 8002ff8:	4770      	bx	lr

08002ffa <HAL_HCD_Connect_Callback>:
}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_HCD_Disconnect_Callback>:
}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_HCD_PortEnabled_Callback>:
}
 8002ffe:	4770      	bx	lr

08003000 <HAL_HCD_PortDisabled_Callback>:
}
 8003000:	4770      	bx	lr

08003002 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003002:	b530      	push	{r4, r5, lr}
 8003004:	b083      	sub	sp, #12
 8003006:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003008:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800300a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800300e:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8003010:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8003014:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003016:	9b00      	ldr	r3, [sp, #0]
 8003018:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800301c:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800301e:	9b01      	ldr	r3, [sp, #4]
 8003020:	f013 0f02 	tst.w	r3, #2
 8003024:	d007      	beq.n	8003036 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003026:	9b01      	ldr	r3, [sp, #4]
 8003028:	f013 0f01 	tst.w	r3, #1
 800302c:	d125      	bne.n	800307a <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800302e:	9b00      	ldr	r3, [sp, #0]
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003036:	9b01      	ldr	r3, [sp, #4]
 8003038:	f013 0f08 	tst.w	r3, #8
 800303c:	d010      	beq.n	8003060 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800303e:	9b00      	ldr	r3, [sp, #0]
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003046:	9b01      	ldr	r3, [sp, #4]
 8003048:	f013 0f04 	tst.w	r3, #4
 800304c:	d02d      	beq.n	80030aa <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800304e:	69a3      	ldr	r3, [r4, #24]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d015      	beq.n	8003080 <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003054:	68e3      	ldr	r3, [r4, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d022      	beq.n	80030a0 <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800305a:	4620      	mov	r0, r4
 800305c:	f7ff ffcf 	bl	8002ffe <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003060:	9b01      	ldr	r3, [sp, #4]
 8003062:	f013 0f20 	tst.w	r3, #32
 8003066:	d003      	beq.n	8003070 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003068:	9b00      	ldr	r3, [sp, #0]
 800306a:	f043 0320 	orr.w	r3, r3, #32
 800306e:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003070:	9b00      	ldr	r3, [sp, #0]
 8003072:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 8003076:	b003      	add	sp, #12
 8003078:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 800307a:	f7ff ffbe 	bl	8002ffa <HAL_HCD_Connect_Callback>
 800307e:	e7d6      	b.n	800302e <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003080:	9b01      	ldr	r3, [sp, #4]
 8003082:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800308a:	d004      	beq.n	8003096 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800308c:	2101      	movs	r1, #1
 800308e:	6820      	ldr	r0, [r4, #0]
 8003090:	f003 f9f2 	bl	8006478 <USB_InitFSLSPClkSel>
 8003094:	e7e1      	b.n	800305a <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003096:	2102      	movs	r1, #2
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	f003 f9ed 	bl	8006478 <USB_InitFSLSPClkSel>
 800309e:	e7dc      	b.n	800305a <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 80030a0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80030a4:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 80030a8:	e7d7      	b.n	800305a <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff ffa8 	bl	8003000 <HAL_HCD_PortDisabled_Callback>
 80030b0:	e7d6      	b.n	8003060 <HCD_Port_IRQHandler+0x5e>

080030b2 <HAL_HCD_HC_NotifyURBChange_Callback>:
}
 80030b2:	4770      	bx	lr

080030b4 <HCD_HC_IN_IRQHandler>:
{
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	4605      	mov	r5, r0
 80030b8:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030ba:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030bc:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 80030c0:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 80030c4:	68a3      	ldr	r3, [r4, #8]
 80030c6:	f013 0f04 	tst.w	r3, #4
 80030ca:	d040      	beq.n	800314e <HCD_HC_IN_IRQHandler+0x9a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030cc:	2304      	movs	r3, #4
 80030ce:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d0:	68e3      	ldr	r3, [r4, #12]
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030d8:	68a3      	ldr	r3, [r4, #8]
 80030da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80030de:	f040 8093 	bne.w	8003208 <HCD_HC_IN_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030e2:	68a3      	ldr	r3, [r4, #8]
 80030e4:	f013 0f01 	tst.w	r3, #1
 80030e8:	f000 80d7 	beq.w	800329a <HCD_HC_IN_IRQHandler+0x1e6>
    if (hhcd->Init.dma_enable != 0U)
 80030ec:	692b      	ldr	r3, [r5, #16]
 80030ee:	b143      	cbz	r3, 8003102 <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030f0:	232c      	movs	r3, #44	; 0x2c
 80030f2:	fb03 5306 	mla	r3, r3, r6, r5
 80030f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030f8:	6921      	ldr	r1, [r4, #16]
 80030fa:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030fe:	1a52      	subs	r2, r2, r1
 8003100:	651a      	str	r2, [r3, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8003102:	232c      	movs	r3, #44	; 0x2c
 8003104:	fb03 5306 	mla	r3, r3, r6, r5
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 800310e:	2100      	movs	r1, #0
 8003110:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003112:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003114:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8081 	beq.w	8003220 <HCD_HC_IN_IRQHandler+0x16c>
 800311e:	2b02      	cmp	r3, #2
 8003120:	d07e      	beq.n	8003220 <HCD_HC_IN_IRQHandler+0x16c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003122:	2b03      	cmp	r3, #3
 8003124:	f000 8093 	beq.w	800324e <HCD_HC_IN_IRQHandler+0x19a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003128:	2b01      	cmp	r3, #1
 800312a:	f040 8083 	bne.w	8003234 <HCD_HC_IN_IRQHandler+0x180>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800312e:	232c      	movs	r3, #44	; 0x2c
 8003130:	fb03 5306 	mla	r3, r3, r6, r5
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800313a:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800313e:	4051      	eors	r1, r2
 8003140:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003144:	4631      	mov	r1, r6
 8003146:	4628      	mov	r0, r5
 8003148:	f7ff ffb3 	bl	80030b2 <HAL_HCD_HC_NotifyURBChange_Callback>
 800314c:	e072      	b.n	8003234 <HCD_HC_IN_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800314e:	68a3      	ldr	r3, [r4, #8]
 8003150:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003154:	d106      	bne.n	8003164 <HCD_HC_IN_IRQHandler+0xb0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003156:	68a3      	ldr	r3, [r4, #8]
 8003158:	f013 0f20 	tst.w	r3, #32
 800315c:	d013      	beq.n	8003186 <HCD_HC_IN_IRQHandler+0xd2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800315e:	2320      	movs	r3, #32
 8003160:	60a3      	str	r3, [r4, #8]
 8003162:	e7b9      	b.n	80030d8 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003168:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800316a:	232c      	movs	r3, #44	; 0x2c
 800316c:	fb03 0301 	mla	r3, r3, r1, r0
 8003170:	2207      	movs	r2, #7
 8003172:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003176:	68e3      	ldr	r3, [r4, #12]
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317e:	6800      	ldr	r0, [r0, #0]
 8003180:	f003 f99f 	bl	80064c2 <USB_HC_Halt>
 8003184:	e7a8      	b.n	80030d8 <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003186:	68a3      	ldr	r3, [r4, #8]
 8003188:	f013 0f08 	tst.w	r3, #8
 800318c:	d117      	bne.n	80031be <HCD_HC_IN_IRQHandler+0x10a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800318e:	68a3      	ldr	r3, [r4, #8]
 8003190:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003194:	d125      	bne.n	80031e2 <HCD_HC_IN_IRQHandler+0x12e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003196:	68a3      	ldr	r3, [r4, #8]
 8003198:	f013 0f80 	tst.w	r3, #128	; 0x80
 800319c:	d09c      	beq.n	80030d8 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800319e:	68e3      	ldr	r3, [r4, #12]
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031a6:	232c      	movs	r3, #44	; 0x2c
 80031a8:	fb03 0301 	mla	r3, r3, r1, r0
 80031ac:	2206      	movs	r2, #6
 80031ae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b2:	6800      	ldr	r0, [r0, #0]
 80031b4:	f003 f985 	bl	80064c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	60a3      	str	r3, [r4, #8]
 80031bc:	e78c      	b.n	80030d8 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031be:	68e3      	ldr	r3, [r4, #12]
 80031c0:	f043 0302 	orr.w	r3, r3, #2
 80031c4:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80031c6:	232c      	movs	r3, #44	; 0x2c
 80031c8:	fb03 0301 	mla	r3, r3, r1, r0
 80031cc:	2205      	movs	r2, #5
 80031ce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031d2:	2310      	movs	r3, #16
 80031d4:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031d6:	2308      	movs	r3, #8
 80031d8:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031da:	6800      	ldr	r0, [r0, #0]
 80031dc:	f003 f971 	bl	80064c2 <USB_HC_Halt>
 80031e0:	e77a      	b.n	80030d8 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e2:	68e3      	ldr	r3, [r4, #12]
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031ea:	232c      	movs	r3, #44	; 0x2c
 80031ec:	fb03 0301 	mla	r3, r3, r1, r0
 80031f0:	2208      	movs	r2, #8
 80031f2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031f6:	2310      	movs	r3, #16
 80031f8:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031fe:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003200:	6800      	ldr	r0, [r0, #0]
 8003202:	f003 f95e 	bl	80064c2 <USB_HC_Halt>
 8003206:	e767      	b.n	80030d8 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003208:	68e3      	ldr	r3, [r4, #12]
 800320a:	f043 0302 	orr.w	r3, r3, #2
 800320e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003210:	4631      	mov	r1, r6
 8003212:	6828      	ldr	r0, [r5, #0]
 8003214:	f003 f955 	bl	80064c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800321c:	60a3      	str	r3, [r4, #8]
}
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003220:	68e3      	ldr	r3, [r4, #12]
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003228:	4631      	mov	r1, r6
 800322a:	6828      	ldr	r0, [r5, #0]
 800322c:	f003 f949 	bl	80064c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003230:	2310      	movs	r3, #16
 8003232:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 8003234:	692b      	ldr	r3, [r5, #16]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d01a      	beq.n	8003270 <HCD_HC_IN_IRQHandler+0x1bc>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800323a:	202c      	movs	r0, #44	; 0x2c
 800323c:	fb00 5506 	mla	r5, r0, r6, r5
 8003240:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 800324c:	e7e7      	b.n	800321e <HCD_HC_IN_IRQHandler+0x16a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800324e:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8003252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003256:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800325a:	232c      	movs	r3, #44	; 0x2c
 800325c:	fb03 5306 	mla	r3, r3, r6, r5
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003266:	4631      	mov	r1, r6
 8003268:	4628      	mov	r0, r5
 800326a:	f7ff ff22 	bl	80030b2 <HAL_HCD_HC_NotifyURBChange_Callback>
 800326e:	e7e1      	b.n	8003234 <HCD_HC_IN_IRQHandler+0x180>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003270:	232c      	movs	r3, #44	; 0x2c
 8003272:	fb03 5306 	mla	r3, r3, r6, r5
 8003276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	f013 0f01 	tst.w	r3, #1
 8003284:	d0cb      	beq.n	800321e <HCD_HC_IN_IRQHandler+0x16a>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003286:	232c      	movs	r3, #44	; 0x2c
 8003288:	fb03 5506 	mla	r5, r3, r6, r5
 800328c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8003298:	e7c1      	b.n	800321e <HCD_HC_IN_IRQHandler+0x16a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800329a:	68a3      	ldr	r3, [r4, #8]
 800329c:	f013 0f02 	tst.w	r3, #2
 80032a0:	d064      	beq.n	800336c <HCD_HC_IN_IRQHandler+0x2b8>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032a2:	68e3      	ldr	r3, [r4, #12]
 80032a4:	f023 0302 	bic.w	r3, r3, #2
 80032a8:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032aa:	232c      	movs	r3, #44	; 0x2c
 80032ac:	fb03 5306 	mla	r3, r3, r6, r5
 80032b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d013      	beq.n	80032e0 <HCD_HC_IN_IRQHandler+0x22c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d023      	beq.n	8003304 <HCD_HC_IN_IRQHandler+0x250>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d028      	beq.n	8003312 <HCD_HC_IN_IRQHandler+0x25e>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d026      	beq.n	8003312 <HCD_HC_IN_IRQHandler+0x25e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d042      	beq.n	800334e <HCD_HC_IN_IRQHandler+0x29a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032c8:	2b07      	cmp	r3, #7
 80032ca:	d10f      	bne.n	80032ec <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 80032cc:	232c      	movs	r3, #44	; 0x2c
 80032ce:	fb03 5306 	mla	r3, r3, r6, r5
 80032d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032d4:	3201      	adds	r2, #1
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032d8:	2204      	movs	r2, #4
 80032da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80032de:	e005      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032e0:	232c      	movs	r3, #44	; 0x2c
 80032e2:	fb03 5306 	mla	r3, r3, r6, r5
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032ec:	2302      	movs	r3, #2
 80032ee:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032f0:	232c      	movs	r3, #44	; 0x2c
 80032f2:	fb03 5306 	mla	r3, r3, r6, r5
 80032f6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80032fa:	4631      	mov	r1, r6
 80032fc:	4628      	mov	r0, r5
 80032fe:	f7ff fed8 	bl	80030b2 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003302:	e78c      	b.n	800321e <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003304:	232c      	movs	r3, #44	; 0x2c
 8003306:	fb03 5306 	mla	r3, r3, r6, r5
 800330a:	2205      	movs	r2, #5
 800330c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003310:	e7ec      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 8003312:	222c      	movs	r2, #44	; 0x2c
 8003314:	fb02 5206 	mla	r2, r2, r6, r5
 8003318:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800331a:	3301      	adds	r3, #1
 800331c:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800331e:	2b02      	cmp	r3, #2
 8003320:	d906      	bls.n	8003330 <HCD_HC_IN_IRQHandler+0x27c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003322:	4613      	mov	r3, r2
 8003324:	2200      	movs	r2, #0
 8003326:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003328:	2204      	movs	r2, #4
 800332a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800332e:	e7dd      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x238>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003330:	232c      	movs	r3, #44	; 0x2c
 8003332:	fb03 5306 	mla	r3, r3, r6, r5
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800333c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003340:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003348:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 800334c:	e7ce      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800334e:	232c      	movs	r3, #44	; 0x2c
 8003350:	fb03 5306 	mla	r3, r3, r6, r5
 8003354:	2202      	movs	r2, #2
 8003356:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800335a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800335e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003366:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 800336a:	e7bf      	b.n	80032ec <HCD_HC_IN_IRQHandler+0x238>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800336c:	68a3      	ldr	r3, [r4, #8]
 800336e:	f013 0f10 	tst.w	r3, #16
 8003372:	f43f af54 	beq.w	800321e <HCD_HC_IN_IRQHandler+0x16a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003376:	232c      	movs	r3, #44	; 0x2c
 8003378:	fb03 5306 	mla	r3, r3, r6, r5
 800337c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003380:	2b03      	cmp	r3, #3
 8003382:	d00c      	beq.n	800339e <HCD_HC_IN_IRQHandler+0x2ea>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003384:	b10b      	cbz	r3, 800338a <HCD_HC_IN_IRQHandler+0x2d6>
 8003386:	2b02      	cmp	r3, #2
 8003388:	d106      	bne.n	8003398 <HCD_HC_IN_IRQHandler+0x2e4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800338a:	232c      	movs	r3, #44	; 0x2c
 800338c:	fb03 5306 	mla	r3, r3, r6, r5
 8003390:	2200      	movs	r2, #0
 8003392:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8003394:	692b      	ldr	r3, [r5, #16]
 8003396:	b183      	cbz	r3, 80033ba <HCD_HC_IN_IRQHandler+0x306>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003398:	2310      	movs	r3, #16
 800339a:	60a3      	str	r3, [r4, #8]
}
 800339c:	e73f      	b.n	800321e <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800339e:	232c      	movs	r3, #44	; 0x2c
 80033a0:	fb03 5306 	mla	r3, r3, r6, r5
 80033a4:	2200      	movs	r2, #0
 80033a6:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033a8:	68e3      	ldr	r3, [r4, #12]
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b0:	4631      	mov	r1, r6
 80033b2:	6828      	ldr	r0, [r5, #0]
 80033b4:	f003 f885 	bl	80064c2 <USB_HC_Halt>
 80033b8:	e7ee      	b.n	8003398 <HCD_HC_IN_IRQHandler+0x2e4>
        hhcd->hc[ch_num].state = HC_NAK;
 80033ba:	232c      	movs	r3, #44	; 0x2c
 80033bc:	fb03 5306 	mla	r3, r3, r6, r5
 80033c0:	2203      	movs	r2, #3
 80033c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c6:	68e3      	ldr	r3, [r4, #12]
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ce:	4631      	mov	r1, r6
 80033d0:	6828      	ldr	r0, [r5, #0]
 80033d2:	f003 f876 	bl	80064c2 <USB_HC_Halt>
 80033d6:	e7df      	b.n	8003398 <HCD_HC_IN_IRQHandler+0x2e4>

080033d8 <HCD_HC_OUT_IRQHandler>:
{
 80033d8:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033da:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033dc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80033e0:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80033e4:	68a2      	ldr	r2, [r4, #8]
 80033e6:	f012 0f04 	tst.w	r2, #4
 80033ea:	d006      	beq.n	80033fa <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033ec:	2304      	movs	r3, #4
 80033ee:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f0:	68e3      	ldr	r3, [r4, #12]
 80033f2:	f043 0302 	orr.w	r3, r3, #2
 80033f6:	60e3      	str	r3, [r4, #12]
}
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
 80033fa:	4605      	mov	r5, r0
 80033fc:	460e      	mov	r6, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033fe:	68a2      	ldr	r2, [r4, #8]
 8003400:	f012 0f20 	tst.w	r2, #32
 8003404:	d018      	beq.n	8003438 <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003406:	2320      	movs	r3, #32
 8003408:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800340a:	232c      	movs	r3, #44	; 0x2c
 800340c:	fb03 0301 	mla	r3, r3, r1, r0
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	2b01      	cmp	r3, #1
 8003416:	d1ef      	bne.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 8003418:	232c      	movs	r3, #44	; 0x2c
 800341a:	fb03 0301 	mla	r3, r3, r1, r0
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003430:	6800      	ldr	r0, [r0, #0]
 8003432:	f003 f846 	bl	80064c2 <USB_HC_Halt>
 8003436:	e7df      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003438:	68a2      	ldr	r2, [r4, #8]
 800343a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800343e:	d124      	bne.n	800348a <HCD_HC_OUT_IRQHandler+0xb2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003440:	68a2      	ldr	r2, [r4, #8]
 8003442:	f012 0f01 	tst.w	r2, #1
 8003446:	d02b      	beq.n	80034a0 <HCD_HC_OUT_IRQHandler+0xc8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003448:	232c      	movs	r3, #44	; 0x2c
 800344a:	fb03 0301 	mla	r3, r3, r1, r0
 800344e:	2200      	movs	r2, #0
 8003450:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003452:	68a3      	ldr	r3, [r4, #8]
 8003454:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003458:	d007      	beq.n	800346a <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 800345a:	232c      	movs	r3, #44	; 0x2c
 800345c:	fb03 0301 	mla	r3, r3, r1, r0
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003466:	2340      	movs	r3, #64	; 0x40
 8003468:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800346a:	68e3      	ldr	r3, [r4, #12]
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003472:	4631      	mov	r1, r6
 8003474:	6828      	ldr	r0, [r5, #0]
 8003476:	f003 f824 	bl	80064c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800347a:	2301      	movs	r3, #1
 800347c:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800347e:	202c      	movs	r0, #44	; 0x2c
 8003480:	fb00 5506 	mla	r5, r0, r6, r5
 8003484:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8003488:	e7b6      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800348a:	68e3      	ldr	r3, [r4, #12]
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003492:	6800      	ldr	r0, [r0, #0]
 8003494:	f003 f815 	bl	80064c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800349c:	60a3      	str	r3, [r4, #8]
 800349e:	e7ab      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034a0:	68a2      	ldr	r2, [r4, #8]
 80034a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034a6:	d129      	bne.n	80034fc <HCD_HC_OUT_IRQHandler+0x124>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034a8:	68a2      	ldr	r2, [r4, #8]
 80034aa:	f012 0f08 	tst.w	r2, #8
 80034ae:	d13a      	bne.n	8003526 <HCD_HC_OUT_IRQHandler+0x14e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034b0:	68a2      	ldr	r2, [r4, #8]
 80034b2:	f012 0f10 	tst.w	r2, #16
 80034b6:	d046      	beq.n	8003546 <HCD_HC_OUT_IRQHandler+0x16e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034b8:	232c      	movs	r3, #44	; 0x2c
 80034ba:	fb03 0301 	mla	r3, r3, r1, r0
 80034be:	2200      	movs	r2, #0
 80034c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 80034c2:	2203      	movs	r2, #3
 80034c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b95b      	cbnz	r3, 80034e6 <HCD_HC_OUT_IRQHandler+0x10e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80034ce:	232c      	movs	r3, #44	; 0x2c
 80034d0:	fb03 0301 	mla	r3, r3, r1, r0
 80034d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d8:	b92b      	cbnz	r3, 80034e6 <HCD_HC_OUT_IRQHandler+0x10e>
        hhcd->hc[ch_num].do_ping = 1U;
 80034da:	232c      	movs	r3, #44	; 0x2c
 80034dc:	fb03 0301 	mla	r3, r3, r1, r0
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034e6:	68e3      	ldr	r3, [r4, #12]
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ee:	4631      	mov	r1, r6
 80034f0:	6828      	ldr	r0, [r5, #0]
 80034f2:	f002 ffe6 	bl	80064c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034f6:	2310      	movs	r3, #16
 80034f8:	60a3      	str	r3, [r4, #8]
 80034fa:	e77d      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 80034fc:	232c      	movs	r3, #44	; 0x2c
 80034fe:	fb03 0301 	mla	r3, r3, r1, r0
 8003502:	2204      	movs	r2, #4
 8003504:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800350e:	2200      	movs	r2, #0
 8003510:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003512:	68e3      	ldr	r3, [r4, #12]
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800351a:	6800      	ldr	r0, [r0, #0]
 800351c:	f002 ffd1 	bl	80064c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003520:	2340      	movs	r3, #64	; 0x40
 8003522:	60a3      	str	r3, [r4, #8]
 8003524:	e768      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003526:	2308      	movs	r3, #8
 8003528:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352a:	68e3      	ldr	r3, [r4, #12]
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003532:	6800      	ldr	r0, [r0, #0]
 8003534:	f002 ffc5 	bl	80064c2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003538:	232c      	movs	r3, #44	; 0x2c
 800353a:	fb03 5506 	mla	r5, r3, r6, r5
 800353e:	2305      	movs	r3, #5
 8003540:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8003544:	e758      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003546:	68a2      	ldr	r2, [r4, #8]
 8003548:	f012 0f80 	tst.w	r2, #128	; 0x80
 800354c:	d029      	beq.n	80035a2 <HCD_HC_OUT_IRQHandler+0x1ca>
    if (hhcd->Init.dma_enable == 0U)
 800354e:	6903      	ldr	r3, [r0, #16]
 8003550:	b183      	cbz	r3, 8003574 <HCD_HC_OUT_IRQHandler+0x19c>
      hhcd->hc[ch_num].ErrCnt++;
 8003552:	222c      	movs	r2, #44	; 0x2c
 8003554:	fb02 0201 	mla	r2, r2, r1, r0
 8003558:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800355a:	3301      	adds	r3, #1
 800355c:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800355e:	2b02      	cmp	r3, #2
 8003560:	d816      	bhi.n	8003590 <HCD_HC_OUT_IRQHandler+0x1b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003562:	232c      	movs	r3, #44	; 0x2c
 8003564:	fb03 0501 	mla	r5, r3, r1, r0
 8003568:	2302      	movs	r3, #2
 800356a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	60a3      	str	r3, [r4, #8]
 8003572:	e741      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003574:	232c      	movs	r3, #44	; 0x2c
 8003576:	fb03 0301 	mla	r3, r3, r1, r0
 800357a:	2206      	movs	r2, #6
 800357c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003580:	68e3      	ldr	r3, [r4, #12]
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003588:	6800      	ldr	r0, [r0, #0]
 800358a:	f002 ff9a 	bl	80064c2 <USB_HC_Halt>
 800358e:	e7ee      	b.n	800356e <HCD_HC_OUT_IRQHandler+0x196>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003590:	4613      	mov	r3, r2
 8003592:	2200      	movs	r2, #0
 8003594:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003596:	2204      	movs	r2, #4
 8003598:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800359c:	f7ff fd89 	bl	80030b2 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035a0:	e7e5      	b.n	800356e <HCD_HC_OUT_IRQHandler+0x196>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035a2:	68a2      	ldr	r2, [r4, #8]
 80035a4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80035a8:	d127      	bne.n	80035fa <HCD_HC_OUT_IRQHandler+0x222>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035aa:	68a2      	ldr	r2, [r4, #8]
 80035ac:	f012 0f02 	tst.w	r2, #2
 80035b0:	f43f af22 	beq.w	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035b4:	68e2      	ldr	r2, [r4, #12]
 80035b6:	f022 0202 	bic.w	r2, r2, #2
 80035ba:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035bc:	222c      	movs	r2, #44	; 0x2c
 80035be:	fb02 0201 	mla	r2, r2, r1, r0
 80035c2:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 80035c6:	2a01      	cmp	r2, #1
 80035c8:	d02a      	beq.n	8003620 <HCD_HC_OUT_IRQHandler+0x248>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035ca:	2a03      	cmp	r2, #3
 80035cc:	d05b      	beq.n	8003686 <HCD_HC_OUT_IRQHandler+0x2ae>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035ce:	2a04      	cmp	r2, #4
 80035d0:	d06b      	beq.n	80036aa <HCD_HC_OUT_IRQHandler+0x2d2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035d2:	2a05      	cmp	r2, #5
 80035d4:	d070      	beq.n	80036b8 <HCD_HC_OUT_IRQHandler+0x2e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035d6:	2a06      	cmp	r2, #6
 80035d8:	d001      	beq.n	80035de <HCD_HC_OUT_IRQHandler+0x206>
 80035da:	2a08      	cmp	r2, #8
 80035dc:	d159      	bne.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].ErrCnt++;
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	fb01 5106 	mla	r1, r1, r6, r5
 80035e4:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80035e6:	3201      	adds	r2, #1
 80035e8:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035ea:	2a02      	cmp	r2, #2
 80035ec:	d96a      	bls.n	80036c4 <HCD_HC_OUT_IRQHandler+0x2ec>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035ee:	2200      	movs	r2, #0
 80035f0:	65ca      	str	r2, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035f2:	2204      	movs	r2, #4
 80035f4:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
 80035f8:	e04b      	b.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fa:	68e3      	ldr	r3, [r4, #12]
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003602:	6800      	ldr	r0, [r0, #0]
 8003604:	f002 ff5d 	bl	80064c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003608:	2310      	movs	r3, #16
 800360a:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800360c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003610:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003612:	232c      	movs	r3, #44	; 0x2c
 8003614:	fb03 5506 	mla	r5, r3, r6, r5
 8003618:	2308      	movs	r3, #8
 800361a:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 800361e:	e6eb      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003620:	232c      	movs	r3, #44	; 0x2c
 8003622:	fb03 0301 	mla	r3, r3, r1, r0
 8003626:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800362a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800362e:	3b02      	subs	r3, #2
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4293      	cmp	r3, r2
 8003634:	d82d      	bhi.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
        if (hhcd->Init.dma_enable == 0U)
 8003636:	6901      	ldr	r1, [r0, #16]
 8003638:	b941      	cbnz	r1, 800364c <HCD_HC_OUT_IRQHandler+0x274>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800363a:	232c      	movs	r3, #44	; 0x2c
 800363c:	fb03 0306 	mla	r3, r3, r6, r0
 8003640:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8003644:	f082 0201 	eor.w	r2, r2, #1
 8003648:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800364c:	2901      	cmp	r1, #1
 800364e:	d120      	bne.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
 8003650:	232c      	movs	r3, #44	; 0x2c
 8003652:	fb03 5306 	mla	r3, r3, r6, r5
 8003656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003658:	b1db      	cbz	r3, 8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800365a:	222c      	movs	r2, #44	; 0x2c
 800365c:	fb02 5206 	mla	r2, r2, r6, r5
 8003660:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8003664:	4413      	add	r3, r2
 8003666:	3b01      	subs	r3, #1
 8003668:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 800366c:	f013 0f01 	tst.w	r3, #1
 8003670:	d00f      	beq.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003672:	232c      	movs	r3, #44	; 0x2c
 8003674:	fb03 5306 	mla	r3, r3, r6, r5
 8003678:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800367c:	f082 0201 	eor.w	r2, r2, #1
 8003680:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8003684:	e005      	b.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003686:	232c      	movs	r3, #44	; 0x2c
 8003688:	fb03 0301 	mla	r3, r3, r1, r0
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003692:	2302      	movs	r3, #2
 8003694:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003696:	232c      	movs	r3, #44	; 0x2c
 8003698:	fb03 5306 	mla	r3, r3, r6, r5
 800369c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80036a0:	4631      	mov	r1, r6
 80036a2:	4628      	mov	r0, r5
 80036a4:	f7ff fd05 	bl	80030b2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036a8:	e6a6      	b.n	80033f8 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036aa:	232c      	movs	r3, #44	; 0x2c
 80036ac:	fb03 0301 	mla	r3, r3, r1, r0
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80036b6:	e7ec      	b.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036b8:	232c      	movs	r3, #44	; 0x2c
 80036ba:	fb03 0301 	mla	r3, r3, r1, r0
 80036be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80036c2:	e7e6      	b.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036c4:	222c      	movs	r2, #44	; 0x2c
 80036c6:	fb02 5206 	mla	r2, r2, r6, r5
 80036ca:	2102      	movs	r1, #2
 80036cc:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036d0:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036d4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80036e0:	e7d7      	b.n	8003692 <HCD_HC_OUT_IRQHandler+0x2ba>

080036e2 <HAL_HCD_IRQHandler>:
{
 80036e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e4:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036e6:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80036e8:	4628      	mov	r0, r5
 80036ea:	f002 fe17 	bl	800631c <USB_GetMode>
 80036ee:	2801      	cmp	r0, #1
 80036f0:	d000      	beq.n	80036f4 <HAL_HCD_IRQHandler+0x12>
}
 80036f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f4:	462e      	mov	r6, r5
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	f002 fe0c 	bl	8006314 <USB_ReadInterrupts>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d0f8      	beq.n	80036f2 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	f002 fe07 	bl	8006314 <USB_ReadInterrupts>
 8003706:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800370a:	d003      	beq.n	8003714 <HAL_HCD_IRQHandler+0x32>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003712:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003714:	6820      	ldr	r0, [r4, #0]
 8003716:	f002 fdfd 	bl	8006314 <USB_ReadInterrupts>
 800371a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800371e:	d003      	beq.n	8003728 <HAL_HCD_IRQHandler+0x46>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003726:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003728:	6820      	ldr	r0, [r4, #0]
 800372a:	f002 fdf3 	bl	8006314 <USB_ReadInterrupts>
 800372e:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8003732:	d003      	beq.n	800373c <HAL_HCD_IRQHandler+0x5a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800373a:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	f002 fde9 	bl	8006314 <USB_ReadInterrupts>
 8003742:	f010 0f02 	tst.w	r0, #2
 8003746:	d002      	beq.n	800374e <HAL_HCD_IRQHandler+0x6c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	2202      	movs	r2, #2
 800374c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800374e:	6820      	ldr	r0, [r4, #0]
 8003750:	f002 fde0 	bl	8006314 <USB_ReadInterrupts>
 8003754:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8003758:	d008      	beq.n	800376c <HAL_HCD_IRQHandler+0x8a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003760:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003762:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8003766:	f013 0f01 	tst.w	r3, #1
 800376a:	d01d      	beq.n	80037a8 <HAL_HCD_IRQHandler+0xc6>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	f002 fdd1 	bl	8006314 <USB_ReadInterrupts>
 8003772:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003776:	d126      	bne.n	80037c6 <HAL_HCD_IRQHandler+0xe4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003778:	6820      	ldr	r0, [r4, #0]
 800377a:	f002 fdcb 	bl	8006314 <USB_ReadInterrupts>
 800377e:	f010 0f08 	tst.w	r0, #8
 8003782:	d124      	bne.n	80037ce <HAL_HCD_IRQHandler+0xec>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	f002 fdc5 	bl	8006314 <USB_ReadInterrupts>
 800378a:	f010 0f10 	tst.w	r0, #16
 800378e:	d125      	bne.n	80037dc <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	f002 fdbf 	bl	8006314 <USB_ReadInterrupts>
 8003796:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800379a:	d0aa      	beq.n	80036f2 <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	f002 fe8b 	bl	80064b8 <USB_HC_ReadInterrupt>
 80037a2:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037a4:	2500      	movs	r5, #0
 80037a6:	e02c      	b.n	8003802 <HAL_HCD_IRQHandler+0x120>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80037a8:	2110      	movs	r1, #16
 80037aa:	4628      	mov	r0, r5
 80037ac:	f002 fd5e 	bl	800626c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80037b0:	4628      	mov	r0, r5
 80037b2:	f002 fd73 	bl	800629c <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037b6:	2101      	movs	r1, #1
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	f002 fe5d 	bl	8006478 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 80037be:	4620      	mov	r0, r4
 80037c0:	f7ff fc1c 	bl	8002ffc <HAL_HCD_Disconnect_Callback>
 80037c4:	e7d2      	b.n	800376c <HAL_HCD_IRQHandler+0x8a>
      HCD_Port_IRQHandler(hhcd);
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff fc1b 	bl	8003002 <HCD_Port_IRQHandler>
 80037cc:	e7d4      	b.n	8003778 <HAL_HCD_IRQHandler+0x96>
      HAL_HCD_SOF_Callback(hhcd);
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7ff fc12 	bl	8002ff8 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	2208      	movs	r2, #8
 80037d8:	615a      	str	r2, [r3, #20]
 80037da:	e7d3      	b.n	8003784 <HAL_HCD_IRQHandler+0xa2>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	6993      	ldr	r3, [r2, #24]
 80037e0:	f023 0310 	bic.w	r3, r3, #16
 80037e4:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7ff fb6d 	bl	8002ec6 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	6993      	ldr	r3, [r2, #24]
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	6193      	str	r3, [r2, #24]
 80037f6:	e7cb      	b.n	8003790 <HAL_HCD_IRQHandler+0xae>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037f8:	b2e9      	uxtb	r1, r5
 80037fa:	4620      	mov	r0, r4
 80037fc:	f7ff fdec 	bl	80033d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003800:	3501      	adds	r5, #1
 8003802:	68a3      	ldr	r3, [r4, #8]
 8003804:	42ab      	cmp	r3, r5
 8003806:	d912      	bls.n	800382e <HAL_HCD_IRQHandler+0x14c>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003808:	f005 030f 	and.w	r3, r5, #15
 800380c:	fa27 f303 	lsr.w	r3, r7, r3
 8003810:	f013 0f01 	tst.w	r3, #1
 8003814:	d0f4      	beq.n	8003800 <HAL_HCD_IRQHandler+0x11e>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003816:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 800381a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800381e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003822:	d0e9      	beq.n	80037f8 <HAL_HCD_IRQHandler+0x116>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003824:	b2e9      	uxtb	r1, r5
 8003826:	4620      	mov	r0, r4
 8003828:	f7ff fc44 	bl	80030b4 <HCD_HC_IN_IRQHandler>
 800382c:	e7e8      	b.n	8003800 <HAL_HCD_IRQHandler+0x11e>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003834:	615a      	str	r2, [r3, #20]
 8003836:	e75c      	b.n	80036f2 <HAL_HCD_IRQHandler+0x10>

08003838 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003838:	6803      	ldr	r3, [r0, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003840:	d101      	bne.n	8003846 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003842:	2000      	movs	r0, #0
}
 8003844:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800384a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	2300      	movs	r3, #0
 800384e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003850:	2220      	movs	r2, #32
 8003852:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003856:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800385a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800385c:	f042 0204 	orr.w	r2, r2, #4
 8003860:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003862:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003866:	2001      	movs	r0, #1
 8003868:	4770      	bx	lr

0800386a <I2C_WaitOnFlagUntilTimeout>:
{
 800386a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800386e:	4607      	mov	r7, r0
 8003870:	460d      	mov	r5, r1
 8003872:	4690      	mov	r8, r2
 8003874:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003876:	e022      	b.n	80038be <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003878:	f7fe feca 	bl	8002610 <HAL_GetTick>
 800387c:	9b06      	ldr	r3, [sp, #24]
 800387e:	1ac0      	subs	r0, r0, r3
 8003880:	42b0      	cmp	r0, r6
 8003882:	d800      	bhi.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8003884:	b9de      	cbnz	r6, 80038be <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003886:	2300      	movs	r3, #0
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800388a:	2220      	movs	r2, #32
 800388c:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003890:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003896:	f042 0220 	orr.w	r2, r2, #32
 800389a:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800389c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 80038a0:	2001      	movs	r0, #1
 80038a2:	e01a      	b.n	80038da <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	699c      	ldr	r4, [r3, #24]
 80038a8:	ea25 0404 	bic.w	r4, r5, r4
 80038ac:	b2a4      	uxth	r4, r4
 80038ae:	fab4 f484 	clz	r4, r4
 80038b2:	0964      	lsrs	r4, r4, #5
 80038b4:	45a0      	cmp	r8, r4
 80038b6:	d10f      	bne.n	80038d8 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 80038b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80038bc:	d1dc      	bne.n	8003878 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038be:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d1ee      	bne.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695c      	ldr	r4, [r3, #20]
 80038ca:	ea25 0404 	bic.w	r4, r5, r4
 80038ce:	b2a4      	uxth	r4, r4
 80038d0:	fab4 f484 	clz	r4, r4
 80038d4:	0964      	lsrs	r4, r4, #5
 80038d6:	e7ed      	b.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80038d8:	2000      	movs	r0, #0
}
 80038da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80038de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e2:	4605      	mov	r5, r0
 80038e4:	460e      	mov	r6, r1
 80038e6:	4617      	mov	r7, r2
 80038e8:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ea:	e03d      	b.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038fa:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003900:	2220      	movs	r2, #32
 8003902:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003906:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800390a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800390c:	f042 0204 	orr.w	r2, r2, #4
 8003910:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003912:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003916:	2001      	movs	r0, #1
 8003918:	e034      	b.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391a:	f7fe fe79 	bl	8002610 <HAL_GetTick>
 800391e:	eba0 0008 	sub.w	r0, r0, r8
 8003922:	42b8      	cmp	r0, r7
 8003924:	d800      	bhi.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8003926:	b9ff      	cbnz	r7, 8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	2300      	movs	r3, #0
 800392a:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392c:	2220      	movs	r2, #32
 800392e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003932:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003936:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003938:	f042 0220 	orr.w	r2, r2, #32
 800393c:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800393e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8003942:	2001      	movs	r0, #1
 8003944:	e01e      	b.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003946:	682b      	ldr	r3, [r5, #0]
 8003948:	699c      	ldr	r4, [r3, #24]
 800394a:	ea26 0404 	bic.w	r4, r6, r4
 800394e:	b2a4      	uxth	r4, r4
 8003950:	3c00      	subs	r4, #0
 8003952:	bf18      	it	ne
 8003954:	2401      	movne	r4, #1
 8003956:	b1a4      	cbz	r4, 8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003960:	d1c4      	bne.n	80038ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003962:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003966:	d1d8      	bne.n	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003968:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800396c:	2b01      	cmp	r3, #1
 800396e:	d1ea      	bne.n	8003946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	695c      	ldr	r4, [r3, #20]
 8003974:	ea26 0404 	bic.w	r4, r6, r4
 8003978:	b2a4      	uxth	r4, r4
 800397a:	3c00      	subs	r4, #0
 800397c:	bf18      	it	ne
 800397e:	2401      	movne	r4, #1
 8003980:	e7e9      	b.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8003982:	2000      	movs	r0, #0
}
 8003984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003988 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4604      	mov	r4, r0
 800398c:	460d      	mov	r5, r1
 800398e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003998:	d11c      	bne.n	80039d4 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800399a:	4620      	mov	r0, r4
 800399c:	f7ff ff4c 	bl	8003838 <I2C_IsAcknowledgeFailed>
 80039a0:	b9d0      	cbnz	r0, 80039d8 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80039a6:	d0f3      	beq.n	8003990 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a8:	f7fe fe32 	bl	8002610 <HAL_GetTick>
 80039ac:	1b80      	subs	r0, r0, r6
 80039ae:	42a8      	cmp	r0, r5
 80039b0:	d801      	bhi.n	80039b6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	d1ec      	bne.n	8003990 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ba:	2220      	movs	r2, #32
 80039bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80039d0:	2001      	movs	r0, #1
 80039d2:	e000      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80039d4:	2000      	movs	r0, #0
}
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80039d8:	2001      	movs	r0, #1
 80039da:	e7fc      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080039dc <I2C_RequestMemoryWrite>:
{
 80039dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039e0:	b085      	sub	sp, #20
 80039e2:	4604      	mov	r4, r0
 80039e4:	460d      	mov	r5, r1
 80039e6:	4691      	mov	r9, r2
 80039e8:	461f      	mov	r7, r3
 80039ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80039ee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f0:	6803      	ldr	r3, [r0, #0]
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80039f8:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039fa:	9600      	str	r6, [sp, #0]
 80039fc:	4643      	mov	r3, r8
 80039fe:	2200      	movs	r2, #0
 8003a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a04:	f7ff ff31 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8003a08:	b960      	cbnz	r0, 8003a24 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003a10:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a12:	4633      	mov	r3, r6
 8003a14:	4642      	mov	r2, r8
 8003a16:	4926      	ldr	r1, [pc, #152]	; (8003ab0 <I2C_RequestMemoryWrite+0xd4>)
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f7ff ff60 	bl	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1e:	b168      	cbz	r0, 8003a3c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8003a20:	2001      	movs	r0, #1
 8003a22:	e008      	b.n	8003a36 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a2c:	d002      	beq.n	8003a34 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a32:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003a34:	2003      	movs	r0, #3
}
 8003a36:	b005      	add	sp, #20
 8003a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9303      	str	r3, [sp, #12]
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	9203      	str	r2, [sp, #12]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	9303      	str	r3, [sp, #12]
 8003a4a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	4641      	mov	r1, r8
 8003a50:	4620      	mov	r0, r4
 8003a52:	f7ff ff99 	bl	8003988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a56:	b930      	cbnz	r0, 8003a66 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a58:	2f01      	cmp	r7, #1
 8003a5a:	d10f      	bne.n	8003a7c <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	fa5f f689 	uxtb.w	r6, r9
 8003a62:	611e      	str	r6, [r3, #16]
 8003a64:	e7e7      	b.n	8003a36 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d001      	beq.n	8003a70 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	e7e2      	b.n	8003a36 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e7f7      	b.n	8003a6c <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8003a82:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a84:	4632      	mov	r2, r6
 8003a86:	4641      	mov	r1, r8
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff ff7d 	bl	8003988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8e:	b920      	cbnz	r0, 8003a9a <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	fa5f f689 	uxtb.w	r6, r9
 8003a96:	611e      	str	r6, [r3, #16]
 8003a98:	e7cd      	b.n	8003a36 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d001      	beq.n	8003aa4 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	e7c8      	b.n	8003a36 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e7f7      	b.n	8003aa0 <I2C_RequestMemoryWrite+0xc4>
 8003ab0:	00010002 	.word	0x00010002

08003ab4 <I2C_RequestMemoryRead>:
{
 8003ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	4604      	mov	r4, r0
 8003abc:	460d      	mov	r5, r1
 8003abe:	4616      	mov	r6, r2
 8003ac0:	4699      	mov	r9, r3
 8003ac2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8003ac4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac8:	6802      	ldr	r2, [r0, #0]
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad2:	6803      	ldr	r3, [r0, #0]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003ada:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003adc:	f8cd 8000 	str.w	r8, [sp]
 8003ae0:	463b      	mov	r3, r7
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ae8:	f7ff febf 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8003aec:	b970      	cbnz	r0, 8003b0c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aee:	fa5f fa85 	uxtb.w	sl, r5
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003af8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003afa:	4643      	mov	r3, r8
 8003afc:	463a      	mov	r2, r7
 8003afe:	4941      	ldr	r1, [pc, #260]	; (8003c04 <I2C_RequestMemoryRead+0x150>)
 8003b00:	4620      	mov	r0, r4
 8003b02:	f7ff feec 	bl	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b06:	b168      	cbz	r0, 8003b24 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8003b08:	2001      	movs	r0, #1
 8003b0a:	e008      	b.n	8003b1e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b14:	d002      	beq.n	8003b1c <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b1a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003b1c:	2003      	movs	r0, #3
}
 8003b1e:	b004      	add	sp, #16
 8003b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b24:	2300      	movs	r3, #0
 8003b26:	9303      	str	r3, [sp, #12]
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	9203      	str	r2, [sp, #12]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	9303      	str	r3, [sp, #12]
 8003b32:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b34:	4642      	mov	r2, r8
 8003b36:	4639      	mov	r1, r7
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f7ff ff25 	bl	8003988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b3e:	b980      	cbnz	r0, 8003b62 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b40:	f1b9 0f01 	cmp.w	r9, #1
 8003b44:	d118      	bne.n	8003b78 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	b2f6      	uxtb	r6, r6
 8003b4a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	4639      	mov	r1, r7
 8003b50:	4620      	mov	r0, r4
 8003b52:	f7ff ff19 	bl	8003988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b56:	b368      	cbz	r0, 8003bb4 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d024      	beq.n	8003ba8 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
 8003b60:	e7dd      	b.n	8003b1e <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d001      	beq.n	8003b6c <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8003b68:	2001      	movs	r0, #1
 8003b6a:	e7d8      	b.n	8003b1e <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	6822      	ldr	r2, [r4, #0]
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e7f7      	b.n	8003b68 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	0a32      	lsrs	r2, r6, #8
 8003b7c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7e:	4642      	mov	r2, r8
 8003b80:	4639      	mov	r1, r7
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7ff ff00 	bl	8003988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b88:	b918      	cbnz	r0, 8003b92 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	b2f6      	uxtb	r6, r6
 8003b8e:	611e      	str	r6, [r3, #16]
 8003b90:	e7dc      	b.n	8003b4c <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d001      	beq.n	8003b9c <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8003b98:	2001      	movs	r0, #1
 8003b9a:	e7c0      	b.n	8003b1e <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e7f7      	b.n	8003b98 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e7d4      	b.n	8003b5e <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	f8cd 8000 	str.w	r8, [sp]
 8003bc2:	463b      	mov	r3, r7
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7ff fe4d 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8003bd0:	b968      	cbnz	r0, 8003bee <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	f04a 0301 	orr.w	r3, sl, #1
 8003bd8:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bda:	4643      	mov	r3, r8
 8003bdc:	463a      	mov	r2, r7
 8003bde:	4909      	ldr	r1, [pc, #36]	; (8003c04 <I2C_RequestMemoryRead+0x150>)
 8003be0:	4620      	mov	r0, r4
 8003be2:	f7ff fe7c 	bl	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d099      	beq.n	8003b1e <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8003bea:	2001      	movs	r0, #1
 8003bec:	e797      	b.n	8003b1e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bf6:	d002      	beq.n	8003bfe <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bfc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003bfe:	2003      	movs	r0, #3
 8003c00:	e78d      	b.n	8003b1e <I2C_RequestMemoryRead+0x6a>
 8003c02:	bf00      	nop
 8003c04:	00010002 	.word	0x00010002

08003c08 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	460d      	mov	r5, r1
 8003c0e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f013 0f04 	tst.w	r3, #4
 8003c18:	d11c      	bne.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff fe0c 	bl	8003838 <I2C_IsAcknowledgeFailed>
 8003c20:	b9d0      	cbnz	r0, 8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c26:	d0f3      	beq.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe fcf2 	bl	8002610 <HAL_GetTick>
 8003c2c:	1b80      	subs	r0, r0, r6
 8003c2e:	42a8      	cmp	r0, r5
 8003c30:	d801      	bhi.n	8003c36 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003c32:	2d00      	cmp	r5, #0
 8003c34:	d1ec      	bne.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c46:	f042 0220 	orr.w	r2, r2, #32
 8003c4a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003c50:	2001      	movs	r0, #1
 8003c52:	e000      	b.n	8003c56 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003c54:	2000      	movs	r0, #0
}
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003c58:	2001      	movs	r0, #1
 8003c5a:	e7fc      	b.n	8003c56 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003c5c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4605      	mov	r5, r0
 8003c60:	460c      	mov	r4, r1
 8003c62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	6959      	ldr	r1, [r3, #20]
 8003c68:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003c6c:	d129      	bne.n	8003cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c6e:	6959      	ldr	r1, [r3, #20]
 8003c70:	f011 0f10 	tst.w	r1, #16
 8003c74:	d115      	bne.n	8003ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fe fccb 	bl	8002610 <HAL_GetTick>
 8003c7a:	1b80      	subs	r0, r0, r6
 8003c7c:	42a0      	cmp	r0, r4
 8003c7e:	d801      	bhi.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8003c80:	2c00      	cmp	r4, #0
 8003c82:	d1ef      	bne.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c92:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003c94:	f042 0220 	orr.w	r2, r2, #32
 8003c98:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c9a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003c9e:	2001      	movs	r0, #1
}
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca2:	f06f 0210 	mvn.w	r2, #16
 8003ca6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	2220      	movs	r2, #32
 8003cae:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cb6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003cb8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003cba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	e7ee      	b.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e7ec      	b.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08003cc8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	f000 80cc 	beq.w	8003e66 <HAL_I2C_Init+0x19e>
{
 8003cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d077      	beq.n	8003dca <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cda:	2324      	movs	r3, #36	; 0x24
 8003cdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003ce0:	6822      	ldr	r2, [r4, #0]
 8003ce2:	6813      	ldr	r3, [r2, #0]
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cfc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cfe:	f001 f865 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d02:	6862      	ldr	r2, [r4, #4]
 8003d04:	4b5a      	ldr	r3, [pc, #360]	; (8003e70 <HAL_I2C_Init+0x1a8>)
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d864      	bhi.n	8003dd4 <HAL_I2C_Init+0x10c>
 8003d0a:	4b5a      	ldr	r3, [pc, #360]	; (8003e74 <HAL_I2C_Init+0x1ac>)
 8003d0c:	4298      	cmp	r0, r3
 8003d0e:	bf8c      	ite	hi
 8003d10:	2300      	movhi	r3, #0
 8003d12:	2301      	movls	r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 80a8 	bne.w	8003e6a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8003d1a:	4d57      	ldr	r5, [pc, #348]	; (8003e78 <HAL_I2C_Init+0x1b0>)
 8003d1c:	fba5 3500 	umull	r3, r5, r5, r0
 8003d20:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d22:	6826      	ldr	r6, [r4, #0]
 8003d24:	6871      	ldr	r1, [r6, #4]
 8003d26:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003d2a:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8003d2e:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d30:	6821      	ldr	r1, [r4, #0]
 8003d32:	6a0b      	ldr	r3, [r1, #32]
 8003d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d38:	6865      	ldr	r5, [r4, #4]
 8003d3a:	4a4d      	ldr	r2, [pc, #308]	; (8003e70 <HAL_I2C_Init+0x1a8>)
 8003d3c:	4295      	cmp	r5, r2
 8003d3e:	d84f      	bhi.n	8003de0 <HAL_I2C_Init+0x118>
 8003d40:	1c7a      	adds	r2, r7, #1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d46:	6825      	ldr	r5, [r4, #0]
 8003d48:	69e9      	ldr	r1, [r5, #28]
 8003d4a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003d4e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003d52:	6863      	ldr	r3, [r4, #4]
 8003d54:	4a46      	ldr	r2, [pc, #280]	; (8003e70 <HAL_I2C_Init+0x1a8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d84c      	bhi.n	8003df4 <HAL_I2C_Init+0x12c>
 8003d5a:	3801      	subs	r0, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d62:	3001      	adds	r0, #1
 8003d64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d68:	4218      	tst	r0, r3
 8003d6a:	d078      	beq.n	8003e5e <HAL_I2C_Init+0x196>
 8003d6c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003d70:	430b      	orrs	r3, r1
 8003d72:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d74:	6821      	ldr	r1, [r4, #0]
 8003d76:	680b      	ldr	r3, [r1, #0]
 8003d78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d7c:	69e2      	ldr	r2, [r4, #28]
 8003d7e:	6a20      	ldr	r0, [r4, #32]
 8003d80:	4302      	orrs	r2, r0
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d86:	6821      	ldr	r1, [r4, #0]
 8003d88:	688b      	ldr	r3, [r1, #8]
 8003d8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d92:	6922      	ldr	r2, [r4, #16]
 8003d94:	68e0      	ldr	r0, [r4, #12]
 8003d96:	4302      	orrs	r2, r0
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d9c:	6821      	ldr	r1, [r4, #0]
 8003d9e:	68cb      	ldr	r3, [r1, #12]
 8003da0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003da4:	6962      	ldr	r2, [r4, #20]
 8003da6:	69a0      	ldr	r0, [r4, #24]
 8003da8:	4302      	orrs	r2, r0
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	2000      	movs	r0, #0
 8003dba:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	2320      	movs	r3, #32
 8003dbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003dca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003dce:	f7fe f8f1 	bl	8001fb4 <HAL_I2C_MspInit>
 8003dd2:	e782      	b.n	8003cda <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_I2C_Init+0x1b4>)
 8003dd6:	4298      	cmp	r0, r3
 8003dd8:	bf8c      	ite	hi
 8003dda:	2300      	movhi	r3, #0
 8003ddc:	2301      	movls	r3, #1
 8003dde:	e799      	b.n	8003d14 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003de0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003de4:	fb02 f207 	mul.w	r2, r2, r7
 8003de8:	4d25      	ldr	r5, [pc, #148]	; (8003e80 <HAL_I2C_Init+0x1b8>)
 8003dea:	fba5 5202 	umull	r5, r2, r5, r2
 8003dee:	0992      	lsrs	r2, r2, #6
 8003df0:	3201      	adds	r2, #1
 8003df2:	e7a6      	b.n	8003d42 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df4:	68a2      	ldr	r2, [r4, #8]
 8003df6:	b9ba      	cbnz	r2, 8003e28 <HAL_I2C_Init+0x160>
 8003df8:	1e46      	subs	r6, r0, #1
 8003dfa:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003dfe:	fbb6 f6f7 	udiv	r6, r6, r7
 8003e02:	3601      	adds	r6, #1
 8003e04:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003e08:	fab6 f686 	clz	r6, r6
 8003e0c:	0976      	lsrs	r6, r6, #5
 8003e0e:	bb46      	cbnz	r6, 8003e62 <HAL_I2C_Init+0x19a>
 8003e10:	b9c2      	cbnz	r2, 8003e44 <HAL_I2C_Init+0x17c>
 8003e12:	1e42      	subs	r2, r0, #1
 8003e14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e1c:	3201      	adds	r2, #1
 8003e1e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003e22:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003e26:	e7a3      	b.n	8003d70 <HAL_I2C_Init+0xa8>
 8003e28:	1e46      	subs	r6, r0, #1
 8003e2a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003e2e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003e32:	fbb6 f6f7 	udiv	r6, r6, r7
 8003e36:	3601      	adds	r6, #1
 8003e38:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003e3c:	fab6 f686 	clz	r6, r6
 8003e40:	0976      	lsrs	r6, r6, #5
 8003e42:	e7e4      	b.n	8003e0e <HAL_I2C_Init+0x146>
 8003e44:	1e42      	subs	r2, r0, #1
 8003e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e52:	3201      	adds	r2, #1
 8003e54:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003e58:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003e5c:	e788      	b.n	8003d70 <HAL_I2C_Init+0xa8>
 8003e5e:	2304      	movs	r3, #4
 8003e60:	e786      	b.n	8003d70 <HAL_I2C_Init+0xa8>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e784      	b.n	8003d70 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8003e66:	2001      	movs	r0, #1
}
 8003e68:	4770      	bx	lr
    return HAL_ERROR;
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	e7ac      	b.n	8003dc8 <HAL_I2C_Init+0x100>
 8003e6e:	bf00      	nop
 8003e70:	000186a0 	.word	0x000186a0
 8003e74:	001e847f 	.word	0x001e847f
 8003e78:	431bde83 	.word	0x431bde83
 8003e7c:	003d08ff 	.word	0x003d08ff
 8003e80:	10624dd3 	.word	0x10624dd3

08003e84 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8003e84:	b1a8      	cbz	r0, 8003eb2 <HAL_I2C_DeInit+0x2e>
{
 8003e86:	b510      	push	{r4, lr}
 8003e88:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8a:	2324      	movs	r3, #36	; 0x24
 8003e8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003e90:	6802      	ldr	r2, [r0, #0]
 8003e92:	6813      	ldr	r3, [r2, #0]
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003e9a:	f7fe f8e1 	bl	8002060 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003ea2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ea6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ea8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 8003eac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003eb0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003eb2:	2001      	movs	r0, #1
}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_I2C_Mem_Write>:
{
 8003eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	460f      	mov	r7, r1
 8003ec2:	4690      	mov	r8, r2
 8003ec4:	4699      	mov	r9, r3
 8003ec6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003ec8:	f7fe fba2 	bl	8002610 <HAL_GetTick>
 8003ecc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ece:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003ed2:	b2c0      	uxtb	r0, r0
 8003ed4:	2820      	cmp	r0, #32
 8003ed6:	d003      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8003ed8:	2002      	movs	r0, #2
}
 8003eda:	b003      	add	sp, #12
 8003edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee0:	9500      	str	r5, [sp, #0]
 8003ee2:	2319      	movs	r3, #25
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	494b      	ldr	r1, [pc, #300]	; (8004014 <HAL_I2C_Mem_Write+0x15c>)
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f7ff fcbe 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	f040 8089 	bne.w	8004006 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8003ef4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f000 8086 	beq.w	800400a <HAL_I2C_Mem_Write+0x152>
 8003efe:	2301      	movs	r3, #1
 8003f00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f012 0f01 	tst.w	r2, #1
 8003f0c:	d103      	bne.n	8003f16 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	6813      	ldr	r3, [r2, #0]
 8003f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f1e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f20:	2321      	movs	r3, #33	; 0x21
 8003f22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f26:	2340      	movs	r3, #64	; 0x40
 8003f28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f32:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f34:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003f38:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f3c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_I2C_Mem_Write+0x160>)
 8003f40:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f42:	9501      	str	r5, [sp, #4]
 8003f44:	9600      	str	r6, [sp, #0]
 8003f46:	464b      	mov	r3, r9
 8003f48:	4642      	mov	r2, r8
 8003f4a:	4639      	mov	r1, r7
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7ff fd45 	bl	80039dc <I2C_RequestMemoryWrite>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d15b      	bne.n	800400e <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8003f56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d035      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5c:	462a      	mov	r2, r5
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4620      	mov	r0, r4
 8003f62:	f7ff fd11 	bl	8003988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f66:	bb20      	cbnz	r0, 8003fb2 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f72:	1c4b      	adds	r3, r1, #1
 8003f74:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003f76:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003f78:	3a01      	subs	r2, #1
 8003f7a:	b292      	uxth	r2, r2
 8003f7c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003f7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	6958      	ldr	r0, [r3, #20]
 8003f8c:	f010 0f04 	tst.w	r0, #4
 8003f90:	d0e1      	beq.n	8003f56 <HAL_I2C_Mem_Write+0x9e>
 8003f92:	2a00      	cmp	r2, #0
 8003f94:	d0df      	beq.n	8003f56 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f96:	784a      	ldrb	r2, [r1, #1]
 8003f98:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003fa0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003fa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003fb0:	e7d1      	b.n	8003f56 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8003fb8:	2001      	movs	r0, #1
 8003fba:	e78e      	b.n	8003eda <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	6822      	ldr	r2, [r4, #0]
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e7f7      	b.n	8003fb8 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc8:	462a      	mov	r2, r5
 8003fca:	4631      	mov	r1, r6
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff fe1b 	bl	8003c08 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fd2:	b150      	cbz	r0, 8003fea <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e77d      	b.n	8003eda <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	6813      	ldr	r3, [r2, #0]
 8003fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	e7f7      	b.n	8003fda <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	6813      	ldr	r3, [r2, #0]
 8003fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004000:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004004:	e769      	b.n	8003eda <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8004006:	2002      	movs	r0, #2
 8004008:	e767      	b.n	8003eda <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 800400a:	2002      	movs	r0, #2
 800400c:	e765      	b.n	8003eda <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800400e:	2001      	movs	r0, #1
 8004010:	e763      	b.n	8003eda <HAL_I2C_Mem_Write+0x22>
 8004012:	bf00      	nop
 8004014:	00100002 	.word	0x00100002
 8004018:	ffff0000 	.word	0xffff0000

0800401c <HAL_I2C_Mem_Read>:
{
 800401c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004020:	b087      	sub	sp, #28
 8004022:	4604      	mov	r4, r0
 8004024:	460f      	mov	r7, r1
 8004026:	4690      	mov	r8, r2
 8004028:	4699      	mov	r9, r3
 800402a:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7fe faf0 	bl	8002610 <HAL_GetTick>
 8004030:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004032:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004036:	b2c0      	uxtb	r0, r0
 8004038:	2820      	cmp	r0, #32
 800403a:	d004      	beq.n	8004046 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 800403c:	2702      	movs	r7, #2
}
 800403e:	4638      	mov	r0, r7
 8004040:	b007      	add	sp, #28
 8004042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004046:	9500      	str	r5, [sp, #0]
 8004048:	2319      	movs	r3, #25
 800404a:	2201      	movs	r2, #1
 800404c:	499d      	ldr	r1, [pc, #628]	; (80042c4 <HAL_I2C_Mem_Read+0x2a8>)
 800404e:	4620      	mov	r0, r4
 8004050:	f7ff fc0b 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8004054:	2800      	cmp	r0, #0
 8004056:	f040 8144 	bne.w	80042e2 <HAL_I2C_Mem_Read+0x2c6>
    __HAL_LOCK(hi2c);
 800405a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800405e:	2b01      	cmp	r3, #1
 8004060:	f000 8141 	beq.w	80042e6 <HAL_I2C_Mem_Read+0x2ca>
 8004064:	2301      	movs	r3, #1
 8004066:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f012 0f01 	tst.w	r2, #1
 8004072:	d103      	bne.n	800407c <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004084:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004086:	2322      	movs	r3, #34	; 0x22
 8004088:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800408c:	2340      	movs	r3, #64	; 0x40
 800408e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004092:	2300      	movs	r3, #0
 8004094:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004098:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800409a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800409e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040a2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a4:	4b88      	ldr	r3, [pc, #544]	; (80042c8 <HAL_I2C_Mem_Read+0x2ac>)
 80040a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a8:	9501      	str	r5, [sp, #4]
 80040aa:	9600      	str	r6, [sp, #0]
 80040ac:	464b      	mov	r3, r9
 80040ae:	4642      	mov	r2, r8
 80040b0:	4639      	mov	r1, r7
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7ff fcfe 	bl	8003ab4 <I2C_RequestMemoryRead>
 80040b8:	4607      	mov	r7, r0
 80040ba:	2800      	cmp	r0, #0
 80040bc:	f040 8115 	bne.w	80042ea <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 80040c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80040c2:	b95b      	cbnz	r3, 80040dc <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c4:	9302      	str	r3, [sp, #8]
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	9202      	str	r2, [sp, #8]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	9202      	str	r2, [sp, #8]
 80040d0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e098      	b.n	800420e <HAL_I2C_Mem_Read+0x1f2>
    else if (hi2c->XferSize == 1U)
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d00a      	beq.n	80040f6 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d01a      	beq.n	800411a <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e4:	2300      	movs	r3, #0
 80040e6:	9305      	str	r3, [sp, #20]
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	9205      	str	r2, [sp, #20]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	9305      	str	r3, [sp, #20]
 80040f2:	9b05      	ldr	r3, [sp, #20]
 80040f4:	e08b      	b.n	800420e <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	6822      	ldr	r2, [r4, #0]
 80040f8:	6813      	ldr	r3, [r2, #0]
 80040fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fe:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004100:	2300      	movs	r3, #0
 8004102:	9303      	str	r3, [sp, #12]
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	9203      	str	r2, [sp, #12]
 800410a:	699a      	ldr	r2, [r3, #24]
 800410c:	9203      	str	r2, [sp, #12]
 800410e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e079      	b.n	800420e <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004122:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800412c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	9304      	str	r3, [sp, #16]
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	9204      	str	r2, [sp, #16]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	9b04      	ldr	r3, [sp, #16]
 800413e:	e066      	b.n	800420e <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004140:	462a      	mov	r2, r5
 8004142:	4631      	mov	r1, r6
 8004144:	4620      	mov	r0, r4
 8004146:	f7ff fd89 	bl	8003c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800414a:	2800      	cmp	r0, #0
 800414c:	f040 80cf 	bne.w	80042ee <HAL_I2C_Mem_Read+0x2d2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004156:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800415a:	3301      	adds	r3, #1
 800415c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800415e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004164:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800416e:	e04e      	b.n	800420e <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004170:	9500      	str	r5, [sp, #0]
 8004172:	4633      	mov	r3, r6
 8004174:	2200      	movs	r2, #0
 8004176:	4955      	ldr	r1, [pc, #340]	; (80042cc <HAL_I2C_Mem_Read+0x2b0>)
 8004178:	4620      	mov	r0, r4
 800417a:	f7ff fb76 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 800417e:	2800      	cmp	r0, #0
 8004180:	f040 80b7 	bne.w	80042f2 <HAL_I2C_Mem_Read+0x2d6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	6822      	ldr	r2, [r4, #0]
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004194:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004196:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004198:	1c53      	adds	r3, r2, #1
 800419a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800419c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800419e:	3b01      	subs	r3, #1
 80041a0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80041b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041b4:	3301      	adds	r3, #1
 80041b6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80041c8:	e021      	b.n	800420e <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	6813      	ldr	r3, [r2, #0]
 80041ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041de:	1c53      	adds	r3, r2, #1
 80041e0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80041f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041fa:	3301      	adds	r3, #1
 80041fc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004204:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29b      	uxth	r3, r3
 800420c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800420e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	d05d      	beq.n	80042d0 <HAL_I2C_Mem_Read+0x2b4>
      if (hi2c->XferSize <= 3U)
 8004214:	2b03      	cmp	r3, #3
 8004216:	d82b      	bhi.n	8004270 <HAL_I2C_Mem_Read+0x254>
        if (hi2c->XferSize == 1U)
 8004218:	2b01      	cmp	r3, #1
 800421a:	d091      	beq.n	8004140 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 800421c:	2b02      	cmp	r3, #2
 800421e:	d0a7      	beq.n	8004170 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004220:	9500      	str	r5, [sp, #0]
 8004222:	4633      	mov	r3, r6
 8004224:	2200      	movs	r2, #0
 8004226:	4929      	ldr	r1, [pc, #164]	; (80042cc <HAL_I2C_Mem_Read+0x2b0>)
 8004228:	4620      	mov	r0, r4
 800422a:	f7ff fb1e 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 800422e:	2800      	cmp	r0, #0
 8004230:	d161      	bne.n	80042f6 <HAL_I2C_Mem_Read+0x2da>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	6813      	ldr	r3, [r2, #0]
 8004236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004242:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004246:	3301      	adds	r3, #1
 8004248:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800424a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004250:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800425a:	9500      	str	r5, [sp, #0]
 800425c:	4633      	mov	r3, r6
 800425e:	2200      	movs	r2, #0
 8004260:	491a      	ldr	r1, [pc, #104]	; (80042cc <HAL_I2C_Mem_Read+0x2b0>)
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff fb01 	bl	800386a <I2C_WaitOnFlagUntilTimeout>
 8004268:	2800      	cmp	r0, #0
 800426a:	d0ae      	beq.n	80041ca <HAL_I2C_Mem_Read+0x1ae>
            return HAL_ERROR;
 800426c:	2701      	movs	r7, #1
 800426e:	e6e6      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004270:	462a      	mov	r2, r5
 8004272:	4631      	mov	r1, r6
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff fcf1 	bl	8003c5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800427a:	2800      	cmp	r0, #0
 800427c:	d13d      	bne.n	80042fa <HAL_I2C_Mem_Read+0x2de>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004284:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004286:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004288:	1c53      	adds	r3, r2, #1
 800428a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800428c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29b      	uxth	r3, r3
 800429a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	6959      	ldr	r1, [r3, #20]
 80042a0:	f011 0f04 	tst.w	r1, #4
 80042a4:	d0b3      	beq.n	800420e <HAL_I2C_Mem_Read+0x1f2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80042aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042ac:	3301      	adds	r3, #1
 80042ae:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80042b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80042b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	8563      	strh	r3, [r4, #42]	; 0x2a
 80042c0:	e7a5      	b.n	800420e <HAL_I2C_Mem_Read+0x1f2>
 80042c2:	bf00      	nop
 80042c4:	00100002 	.word	0x00100002
 80042c8:	ffff0000 	.word	0xffff0000
 80042cc:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	2320      	movs	r3, #32
 80042d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80042dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80042e0:	e6ad      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 80042e2:	2702      	movs	r7, #2
 80042e4:	e6ab      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80042e6:	2702      	movs	r7, #2
 80042e8:	e6a9      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80042ea:	2701      	movs	r7, #1
 80042ec:	e6a7      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80042ee:	2701      	movs	r7, #1
 80042f0:	e6a5      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80042f2:	2701      	movs	r7, #1
 80042f4:	e6a3      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 80042f6:	2701      	movs	r7, #1
 80042f8:	e6a1      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 80042fa:	2701      	movs	r7, #1
 80042fc:	e69f      	b.n	800403e <HAL_I2C_Mem_Read+0x22>
 80042fe:	bf00      	nop

08004300 <HAL_I2C_GetState>:
  return hi2c->State;
 8004300:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004304:	4770      	bx	lr

08004306 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004306:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b20      	cmp	r3, #32
 800430e:	d001      	beq.n	8004314 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004310:	2002      	movs	r0, #2
  }
}
 8004312:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004314:	2324      	movs	r3, #36	; 0x24
 8004316:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800431a:	6802      	ldr	r2, [r0, #0]
 800431c:	6813      	ldr	r3, [r2, #0]
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004324:	6802      	ldr	r2, [r0, #0]
 8004326:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004328:	f023 0310 	bic.w	r3, r3, #16
 800432c:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 800432e:	6802      	ldr	r2, [r0, #0]
 8004330:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004332:	4319      	orrs	r1, r3
 8004334:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8004336:	6802      	ldr	r2, [r0, #0]
 8004338:	6813      	ldr	r3, [r2, #0]
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	2320      	movs	r3, #32
 8004342:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8004346:	2000      	movs	r0, #0
 8004348:	4770      	bx	lr

0800434a <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b20      	cmp	r3, #32
 8004352:	d001      	beq.n	8004358 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004354:	2002      	movs	r0, #2
  }
}
 8004356:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004358:	2324      	movs	r3, #36	; 0x24
 800435a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800435e:	6802      	ldr	r2, [r0, #0]
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 8004368:	6802      	ldr	r2, [r0, #0]
 800436a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800436c:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 800436e:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8004372:	4319      	orrs	r1, r3
 8004374:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8004376:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8004378:	6802      	ldr	r2, [r0, #0]
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004382:	2320      	movs	r3, #32
 8004384:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8004388:	2000      	movs	r0, #0
 800438a:	4770      	bx	lr

0800438c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800438c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800438e:	684e      	ldr	r6, [r1, #4]
 8004390:	6805      	ldr	r5, [r0, #0]
 8004392:	68eb      	ldr	r3, [r5, #12]
 8004394:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8004398:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800439a:	01d4      	lsls	r4, r2, #7
 800439c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80043a0:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80043a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80043a8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80043ac:	680b      	ldr	r3, [r1, #0]
 80043ae:	6805      	ldr	r5, [r0, #0]
 80043b0:	68ef      	ldr	r7, [r5, #12]
 80043b2:	f3c7 470b 	ubfx	r7, r7, #16, #12
 80043b6:	443b      	add	r3, r7
 80043b8:	3301      	adds	r3, #1
 80043ba:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80043be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80043c2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80043c6:	68ce      	ldr	r6, [r1, #12]
 80043c8:	6805      	ldr	r5, [r0, #0]
 80043ca:	68eb      	ldr	r3, [r5, #12]
 80043cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d0:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80043d2:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80043d6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80043da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80043de:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80043e2:	688b      	ldr	r3, [r1, #8]
 80043e4:	6805      	ldr	r5, [r0, #0]
 80043e6:	68ef      	ldr	r7, [r5, #12]
 80043e8:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80043ec:	443b      	add	r3, r7
 80043ee:	3301      	adds	r3, #1
 80043f0:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80043f4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80043f8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043fc:	6803      	ldr	r3, [r0, #0]
 80043fe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004402:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 8004406:	f025 0507 	bic.w	r5, r5, #7
 800440a:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800440e:	6803      	ldr	r3, [r0, #0]
 8004410:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004414:	690d      	ldr	r5, [r1, #16]
 8004416:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800441a:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800441e:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004422:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004424:	6806      	ldr	r6, [r0, #0]
 8004426:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 800442a:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 800442e:	2500      	movs	r5, #0
 8004430:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004434:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8004438:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800443c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8004440:	6806      	ldr	r6, [r0, #0]
 8004442:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8004446:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800444a:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800444e:	6803      	ldr	r3, [r0, #0]
 8004450:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004454:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8004458:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 800445c:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004460:	6803      	ldr	r3, [r0, #0]
 8004462:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004466:	694e      	ldr	r6, [r1, #20]
 8004468:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800446c:	6803      	ldr	r3, [r0, #0]
 800446e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004472:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8004476:	f426 66e0 	bic.w	r6, r6, #1792	; 0x700
 800447a:	f026 0607 	bic.w	r6, r6, #7
 800447e:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004482:	69ce      	ldr	r6, [r1, #28]
 8004484:	6a0f      	ldr	r7, [r1, #32]
 8004486:	6803      	ldr	r3, [r0, #0]
 8004488:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800448c:	433e      	orrs	r6, r7
 800448e:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004492:	6803      	ldr	r3, [r0, #0]
 8004494:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8004498:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 800449c:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80044a0:	6803      	ldr	r3, [r0, #0]
 80044a2:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 80044a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80044a8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80044ac:	690b      	ldr	r3, [r1, #16]
 80044ae:	b16b      	cbz	r3, 80044cc <LTDC_SetConfig+0x140>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d03b      	beq.n	800452c <LTDC_SetConfig+0x1a0>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d03b      	beq.n	8004530 <LTDC_SetConfig+0x1a4>
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d008      	beq.n	80044ce <LTDC_SetConfig+0x142>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d039      	beq.n	8004534 <LTDC_SetConfig+0x1a8>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044c0:	2b07      	cmp	r3, #7
 80044c2:	d001      	beq.n	80044c8 <LTDC_SetConfig+0x13c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e002      	b.n	80044ce <LTDC_SetConfig+0x142>
    tmp = 2U;
 80044c8:	2302      	movs	r3, #2
 80044ca:	e000      	b.n	80044ce <LTDC_SetConfig+0x142>
    tmp = 4U;
 80044cc:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80044ce:	6802      	ldr	r2, [r0, #0]
 80044d0:	4422      	add	r2, r4
 80044d2:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 80044d6:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80044da:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044de:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80044e0:	fb03 f502 	mul.w	r5, r3, r2
 80044e4:	684a      	ldr	r2, [r1, #4]
 80044e6:	680e      	ldr	r6, [r1, #0]
 80044e8:	1b92      	subs	r2, r2, r6
 80044ea:	fb03 f302 	mul.w	r3, r3, r2
 80044ee:	3303      	adds	r3, #3
 80044f0:	6802      	ldr	r2, [r0, #0]
 80044f2:	4422      	add	r2, r4
 80044f4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80044f8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044fc:	6803      	ldr	r3, [r0, #0]
 80044fe:	4423      	add	r3, r4
 8004500:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004504:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8004508:	f022 0207 	bic.w	r2, r2, #7
 800450c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004510:	6803      	ldr	r3, [r0, #0]
 8004512:	4423      	add	r3, r4
 8004514:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004516:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800451a:	6803      	ldr	r3, [r0, #0]
 800451c:	441c      	add	r4, r3
 800451e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 800452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800452c:	2303      	movs	r3, #3
 800452e:	e7ce      	b.n	80044ce <LTDC_SetConfig+0x142>
    tmp = 2U;
 8004530:	2302      	movs	r3, #2
 8004532:	e7cc      	b.n	80044ce <LTDC_SetConfig+0x142>
 8004534:	2302      	movs	r3, #2
 8004536:	e7ca      	b.n	80044ce <LTDC_SetConfig+0x142>

08004538 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8004538:	2800      	cmp	r0, #0
 800453a:	d072      	beq.n	8004622 <HAL_LTDC_Init+0xea>
{
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004540:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d067      	beq.n	8004618 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004548:	2302      	movs	r3, #2
 800454a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	6993      	ldr	r3, [r2, #24]
 8004552:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004556:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004558:	6821      	ldr	r1, [r4, #0]
 800455a:	698a      	ldr	r2, [r1, #24]
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	68a0      	ldr	r0, [r4, #8]
 8004560:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004562:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004564:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004566:	6920      	ldr	r0, [r4, #16]
 8004568:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800456a:	4313      	orrs	r3, r2
 800456c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	688a      	ldr	r2, [r1, #8]
 8004572:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <HAL_LTDC_Init+0xf0>)
 8004574:	401a      	ands	r2, r3
 8004576:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004578:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	6882      	ldr	r2, [r0, #8]
 800457e:	69a1      	ldr	r1, [r4, #24]
 8004580:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004584:	430a      	orrs	r2, r1
 8004586:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004588:	6821      	ldr	r1, [r4, #0]
 800458a:	68ca      	ldr	r2, [r1, #12]
 800458c:	401a      	ands	r2, r3
 800458e:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004590:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	68c2      	ldr	r2, [r0, #12]
 8004596:	6a21      	ldr	r1, [r4, #32]
 8004598:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800459c:	430a      	orrs	r2, r1
 800459e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80045a0:	6821      	ldr	r1, [r4, #0]
 80045a2:	690a      	ldr	r2, [r1, #16]
 80045a4:	401a      	ands	r2, r3
 80045a6:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80045a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	6902      	ldr	r2, [r0, #16]
 80045ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80045b0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80045b4:	430a      	orrs	r2, r1
 80045b6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80045b8:	6821      	ldr	r1, [r4, #0]
 80045ba:	694a      	ldr	r2, [r1, #20]
 80045bc:	4013      	ands	r3, r2
 80045be:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80045c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	694b      	ldr	r3, [r1, #20]
 80045c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80045c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80045cc:	4313      	orrs	r3, r2
 80045ce:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80045d0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80045d4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80045d8:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80045da:	6821      	ldr	r1, [r4, #0]
 80045dc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80045de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80045e2:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80045e4:	6821      	ldr	r1, [r4, #0]
 80045e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80045e8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80045ec:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80045f0:	4303      	orrs	r3, r0
 80045f2:	4313      	orrs	r3, r2
 80045f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80045fa:	f043 0306 	orr.w	r3, r3, #6
 80045fe:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004600:	6822      	ldr	r2, [r4, #0]
 8004602:	6993      	ldr	r3, [r2, #24]
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800460a:	2000      	movs	r0, #0
 800460c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004610:	2301      	movs	r3, #1
 8004612:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004616:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8004618:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800461c:	f7fd fd3e 	bl	800209c <HAL_LTDC_MspInit>
 8004620:	e792      	b.n	8004548 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8004622:	2001      	movs	r0, #1
}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	f000f800 	.word	0xf000f800

0800462c <HAL_LTDC_ErrorCallback>:
}
 800462c:	4770      	bx	lr

0800462e <HAL_LTDC_LineEventCallback>:
}
 800462e:	4770      	bx	lr

08004630 <HAL_LTDC_ReloadEventCallback>:
}
 8004630:	4770      	bx	lr

08004632 <HAL_LTDC_IRQHandler>:
{
 8004632:	b570      	push	{r4, r5, r6, lr}
 8004634:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004636:	6803      	ldr	r3, [r0, #0]
 8004638:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800463a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800463c:	f015 0f04 	tst.w	r5, #4
 8004640:	d002      	beq.n	8004648 <HAL_LTDC_IRQHandler+0x16>
 8004642:	f016 0f04 	tst.w	r6, #4
 8004646:	d112      	bne.n	800466e <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004648:	f015 0f02 	tst.w	r5, #2
 800464c:	d002      	beq.n	8004654 <HAL_LTDC_IRQHandler+0x22>
 800464e:	f016 0f02 	tst.w	r6, #2
 8004652:	d121      	bne.n	8004698 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004654:	f015 0f01 	tst.w	r5, #1
 8004658:	d002      	beq.n	8004660 <HAL_LTDC_IRQHandler+0x2e>
 800465a:	f016 0f01 	tst.w	r6, #1
 800465e:	d132      	bne.n	80046c6 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004660:	f015 0f08 	tst.w	r5, #8
 8004664:	d002      	beq.n	800466c <HAL_LTDC_IRQHandler+0x3a>
 8004666:	f016 0f08 	tst.w	r6, #8
 800466a:	d13d      	bne.n	80046e8 <HAL_LTDC_IRQHandler+0xb6>
}
 800466c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800466e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004670:	f022 0204 	bic.w	r2, r2, #4
 8004674:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004676:	6803      	ldr	r3, [r0, #0]
 8004678:	2204      	movs	r2, #4
 800467a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800467c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004688:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800468c:	2300      	movs	r3, #0
 800468e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004692:	f7ff ffcb 	bl	800462c <HAL_LTDC_ErrorCallback>
 8004696:	e7d7      	b.n	8004648 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800469c:	f023 0302 	bic.w	r3, r3, #2
 80046a0:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	2202      	movs	r2, #2
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80046a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80046b2:	2304      	movs	r3, #4
 80046b4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80046b8:	2300      	movs	r3, #0
 80046ba:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80046be:	4620      	mov	r0, r4
 80046c0:	f7ff ffb4 	bl	800462c <HAL_LTDC_ErrorCallback>
 80046c4:	e7c6      	b.n	8004654 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80046d0:	6822      	ldr	r2, [r4, #0]
 80046d2:	2301      	movs	r3, #1
 80046d4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80046d6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80046da:	2300      	movs	r3, #0
 80046dc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80046e0:	4620      	mov	r0, r4
 80046e2:	f7ff ffa4 	bl	800462e <HAL_LTDC_LineEventCallback>
 80046e6:	e7bb      	b.n	8004660 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80046ec:	f023 0308 	bic.w	r3, r3, #8
 80046f0:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	2208      	movs	r2, #8
 80046f6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80046fe:	2300      	movs	r3, #0
 8004700:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004704:	4620      	mov	r0, r4
 8004706:	f7ff ff93 	bl	8004630 <HAL_LTDC_ReloadEventCallback>
}
 800470a:	e7af      	b.n	800466c <HAL_LTDC_IRQHandler+0x3a>

0800470c <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 800470c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004710:	2b01      	cmp	r3, #1
 8004712:	d027      	beq.n	8004764 <HAL_LTDC_ConfigLayer+0x58>
{
 8004714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	4606      	mov	r6, r0
 800471a:	460f      	mov	r7, r1
 800471c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800471e:	f04f 0801 	mov.w	r8, #1
 8004722:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004726:	2302      	movs	r3, #2
 8004728:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800472c:	2434      	movs	r4, #52	; 0x34
 800472e:	fb04 0402 	mla	r4, r4, r2, r0
 8004732:	3438      	adds	r4, #56	; 0x38
 8004734:	460d      	mov	r5, r1
 8004736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800473a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800473c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800473e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004742:	682b      	ldr	r3, [r5, #0]
 8004744:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004746:	4662      	mov	r2, ip
 8004748:	4639      	mov	r1, r7
 800474a:	4630      	mov	r0, r6
 800474c:	f7ff fe1e 	bl	800438c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004756:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800475a:	2000      	movs	r0, #0
 800475c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8004764:	2002      	movs	r0, #2
}
 8004766:	4770      	bx	lr

08004768 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8004768:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800476c:	2b01      	cmp	r3, #1
 800476e:	d011      	beq.n	8004794 <HAL_LTDC_EnableDither+0x2c>
 8004770:	2201      	movs	r2, #1
 8004772:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800477c:	4906      	ldr	r1, [pc, #24]	; (8004798 <HAL_LTDC_EnableDither+0x30>)
 800477e:	698b      	ldr	r3, [r1, #24]
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	618b      	str	r3, [r1, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004786:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800478a:	2300      	movs	r3, #0
 800478c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8004790:	4618      	mov	r0, r3
 8004792:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8004794:	2002      	movs	r0, #2
}
 8004796:	4770      	bx	lr
 8004798:	40016800 	.word	0x40016800

0800479c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800479c:	2800      	cmp	r0, #0
 800479e:	f000 81df 	beq.w	8004b60 <HAL_RCC_OscConfig+0x3c4>
{
 80047a2:	b570      	push	{r4, r5, r6, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a8:	6803      	ldr	r3, [r0, #0]
 80047aa:	f013 0f01 	tst.w	r3, #1
 80047ae:	d03b      	beq.n	8004828 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b0:	4ba6      	ldr	r3, [pc, #664]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d02c      	beq.n	8004816 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047bc:	4ba3      	ldr	r3, [pc, #652]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d021      	beq.n	800480c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ce:	d04f      	beq.n	8004870 <HAL_RCC_OscConfig+0xd4>
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d4:	d052      	beq.n	800487c <HAL_RCC_OscConfig+0xe0>
 80047d6:	4b9d      	ldr	r3, [pc, #628]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047e8:	6863      	ldr	r3, [r4, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d050      	beq.n	8004890 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fd ff0f 	bl	8002610 <HAL_GetTick>
 80047f2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f4:	4b95      	ldr	r3, [pc, #596]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80047fc:	d114      	bne.n	8004828 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047fe:	f7fd ff07 	bl	8002610 <HAL_GetTick>
 8004802:	1b40      	subs	r0, r0, r5
 8004804:	2864      	cmp	r0, #100	; 0x64
 8004806:	d9f5      	bls.n	80047f4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004808:	2003      	movs	r0, #3
 800480a:	e1b0      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480c:	4b8f      	ldr	r3, [pc, #572]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004814:	d0d8      	beq.n	80047c8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004816:	4b8d      	ldr	r3, [pc, #564]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800481e:	d003      	beq.n	8004828 <HAL_RCC_OscConfig+0x8c>
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 819e 	beq.w	8004b64 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	f013 0f02 	tst.w	r3, #2
 800482e:	d054      	beq.n	80048da <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004830:	4b86      	ldr	r3, [pc, #536]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f013 0f0c 	tst.w	r3, #12
 8004838:	d03e      	beq.n	80048b8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483a:	4b84      	ldr	r3, [pc, #528]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004842:	2b08      	cmp	r3, #8
 8004844:	d033      	beq.n	80048ae <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d067      	beq.n	800491c <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b80      	ldr	r3, [pc, #512]	; (8004a50 <HAL_RCC_OscConfig+0x2b4>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fd fedd 	bl	8002610 <HAL_GetTick>
 8004856:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f013 0f02 	tst.w	r3, #2
 8004860:	d153      	bne.n	800490a <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004862:	f7fd fed5 	bl	8002610 <HAL_GetTick>
 8004866:	1b40      	subs	r0, r0, r5
 8004868:	2802      	cmp	r0, #2
 800486a:	d9f5      	bls.n	8004858 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800486c:	2003      	movs	r0, #3
 800486e:	e17e      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004870:	4a76      	ldr	r2, [pc, #472]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e7b5      	b.n	80047e8 <HAL_RCC_OscConfig+0x4c>
 800487c:	4b73      	ldr	r3, [pc, #460]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e7ab      	b.n	80047e8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004890:	f7fd febe 	bl	8002610 <HAL_GetTick>
 8004894:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004896:	4b6d      	ldr	r3, [pc, #436]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800489e:	d0c3      	beq.n	8004828 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fd feb6 	bl	8002610 <HAL_GetTick>
 80048a4:	1b40      	subs	r0, r0, r5
 80048a6:	2864      	cmp	r0, #100	; 0x64
 80048a8:	d9f5      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80048aa:	2003      	movs	r0, #3
 80048ac:	e15f      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ae:	4b67      	ldr	r3, [pc, #412]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80048b6:	d1c6      	bne.n	8004846 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b8:	4b64      	ldr	r3, [pc, #400]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f013 0f02 	tst.w	r3, #2
 80048c0:	d003      	beq.n	80048ca <HAL_RCC_OscConfig+0x12e>
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	f040 814f 	bne.w	8004b68 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4a60      	ldr	r2, [pc, #384]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80048cc:	6813      	ldr	r3, [r2, #0]
 80048ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80048d2:	6921      	ldr	r1, [r4, #16]
 80048d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048d8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f013 0f08 	tst.w	r3, #8
 80048e0:	d040      	beq.n	8004964 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048e2:	6963      	ldr	r3, [r4, #20]
 80048e4:	b363      	cbz	r3, 8004940 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b5b      	ldr	r3, [pc, #364]	; (8004a54 <HAL_RCC_OscConfig+0x2b8>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fd fe90 	bl	8002610 <HAL_GetTick>
 80048f0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	4b56      	ldr	r3, [pc, #344]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	f013 0f02 	tst.w	r3, #2
 80048fa:	d133      	bne.n	8004964 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048fc:	f7fd fe88 	bl	8002610 <HAL_GetTick>
 8004900:	1b40      	subs	r0, r0, r5
 8004902:	2802      	cmp	r0, #2
 8004904:	d9f5      	bls.n	80048f2 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8004906:	2003      	movs	r0, #3
 8004908:	e131      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490a:	4a50      	ldr	r2, [pc, #320]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800490c:	6813      	ldr	r3, [r2, #0]
 800490e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004912:	6921      	ldr	r1, [r4, #16]
 8004914:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	e7de      	b.n	80048da <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800491c:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <HAL_RCC_OscConfig+0x2b4>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004922:	f7fd fe75 	bl	8002610 <HAL_GetTick>
 8004926:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004928:	4b48      	ldr	r3, [pc, #288]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f013 0f02 	tst.w	r3, #2
 8004930:	d0d3      	beq.n	80048da <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004932:	f7fd fe6d 	bl	8002610 <HAL_GetTick>
 8004936:	1b40      	subs	r0, r0, r5
 8004938:	2802      	cmp	r0, #2
 800493a:	d9f5      	bls.n	8004928 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 800493c:	2003      	movs	r0, #3
 800493e:	e116      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004940:	4b44      	ldr	r3, [pc, #272]	; (8004a54 <HAL_RCC_OscConfig+0x2b8>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004946:	f7fd fe63 	bl	8002610 <HAL_GetTick>
 800494a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	4b3f      	ldr	r3, [pc, #252]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004950:	f013 0f02 	tst.w	r3, #2
 8004954:	d006      	beq.n	8004964 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004956:	f7fd fe5b 	bl	8002610 <HAL_GetTick>
 800495a:	1b40      	subs	r0, r0, r5
 800495c:	2802      	cmp	r0, #2
 800495e:	d9f5      	bls.n	800494c <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8004960:	2003      	movs	r0, #3
 8004962:	e104      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	f013 0f04 	tst.w	r3, #4
 800496a:	d078      	beq.n	8004a5e <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496c:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004974:	d10d      	bne.n	8004992 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	4b34      	ldr	r3, [pc, #208]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 800497c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800498e:	2501      	movs	r5, #1
 8004990:	e000      	b.n	8004994 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8004992:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	4b30      	ldr	r3, [pc, #192]	; (8004a58 <HAL_RCC_OscConfig+0x2bc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f413 7f80 	tst.w	r3, #256	; 0x100
 800499c:	d021      	beq.n	80049e2 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499e:	68a3      	ldr	r3, [r4, #8]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d032      	beq.n	8004a0a <HAL_RCC_OscConfig+0x26e>
 80049a4:	2b05      	cmp	r3, #5
 80049a6:	d036      	beq.n	8004a16 <HAL_RCC_OscConfig+0x27a>
 80049a8:	4b28      	ldr	r3, [pc, #160]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80049aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	671a      	str	r2, [r3, #112]	; 0x70
 80049b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049b4:	f022 0204 	bic.w	r2, r2, #4
 80049b8:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d034      	beq.n	8004a2a <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fd fe26 	bl	8002610 <HAL_GetTick>
 80049c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c6:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	f013 0f02 	tst.w	r3, #2
 80049ce:	d145      	bne.n	8004a5c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fd fe1e 	bl	8002610 <HAL_GetTick>
 80049d4:	1b80      	subs	r0, r0, r6
 80049d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80049da:	4298      	cmp	r0, r3
 80049dc:	d9f3      	bls.n	80049c6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80049de:	2003      	movs	r0, #3
 80049e0:	e0c5      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e2:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <HAL_RCC_OscConfig+0x2bc>)
 80049e4:	6813      	ldr	r3, [r2, #0]
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80049ec:	f7fd fe10 	bl	8002610 <HAL_GetTick>
 80049f0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f2:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <HAL_RCC_OscConfig+0x2bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049fa:	d1d0      	bne.n	800499e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fc:	f7fd fe08 	bl	8002610 <HAL_GetTick>
 8004a00:	1b80      	subs	r0, r0, r6
 8004a02:	2802      	cmp	r0, #2
 8004a04:	d9f5      	bls.n	80049f2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8004a06:	2003      	movs	r0, #3
 8004a08:	e0b1      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0a:	4a10      	ldr	r2, [pc, #64]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 8004a0c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
 8004a14:	e7d1      	b.n	80049ba <HAL_RCC_OscConfig+0x21e>
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 8004a18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a1a:	f042 0204 	orr.w	r2, r2, #4
 8004a1e:	671a      	str	r2, [r3, #112]	; 0x70
 8004a20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	671a      	str	r2, [r3, #112]	; 0x70
 8004a28:	e7c7      	b.n	80049ba <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7fd fdf1 	bl	8002610 <HAL_GetTick>
 8004a2e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	f013 0f02 	tst.w	r3, #2
 8004a38:	d010      	beq.n	8004a5c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd fde9 	bl	8002610 <HAL_GetTick>
 8004a3e:	1b80      	subs	r0, r0, r6
 8004a40:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a44:	4298      	cmp	r0, r3
 8004a46:	d9f3      	bls.n	8004a30 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8004a48:	2003      	movs	r0, #3
 8004a4a:	e090      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	42470000 	.word	0x42470000
 8004a54:	42470e80 	.word	0x42470e80
 8004a58:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a5c:	b9ed      	cbnz	r5, 8004a9a <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a5e:	69a3      	ldr	r3, [r4, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8083 	beq.w	8004b6c <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a66:	4a49      	ldr	r2, [pc, #292]	; (8004b8c <HAL_RCC_OscConfig+0x3f0>)
 8004a68:	6892      	ldr	r2, [r2, #8]
 8004a6a:	f002 020c 	and.w	r2, r2, #12
 8004a6e:	2a08      	cmp	r2, #8
 8004a70:	d051      	beq.n	8004b16 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d017      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b46      	ldr	r3, [pc, #280]	; (8004b90 <HAL_RCC_OscConfig+0x3f4>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fdc8 	bl	8002610 <HAL_GetTick>
 8004a80:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	4b42      	ldr	r3, [pc, #264]	; (8004b8c <HAL_RCC_OscConfig+0x3f0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004a8a:	d042      	beq.n	8004b12 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fd fdc0 	bl	8002610 <HAL_GetTick>
 8004a90:	1b00      	subs	r0, r0, r4
 8004a92:	2802      	cmp	r0, #2
 8004a94:	d9f5      	bls.n	8004a82 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004a96:	2003      	movs	r0, #3
 8004a98:	e069      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9a:	4a3c      	ldr	r2, [pc, #240]	; (8004b8c <HAL_RCC_OscConfig+0x3f0>)
 8004a9c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa4:	e7db      	b.n	8004a5e <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b3a      	ldr	r3, [pc, #232]	; (8004b90 <HAL_RCC_OscConfig+0x3f4>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004aac:	f7fd fdb0 	bl	8002610 <HAL_GetTick>
 8004ab0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <HAL_RCC_OscConfig+0x3f0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004aba:	d006      	beq.n	8004aca <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd fda8 	bl	8002610 <HAL_GetTick>
 8004ac0:	1b40      	subs	r0, r0, r5
 8004ac2:	2802      	cmp	r0, #2
 8004ac4:	d9f5      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8004ac6:	2003      	movs	r0, #3
 8004ac8:	e051      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aca:	69e3      	ldr	r3, [r4, #28]
 8004acc:	6a22      	ldr	r2, [r4, #32]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ad2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004ad6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ad8:	0852      	lsrs	r2, r2, #1
 8004ada:	3a01      	subs	r2, #1
 8004adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ae2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ae6:	4a29      	ldr	r2, [pc, #164]	; (8004b8c <HAL_RCC_OscConfig+0x3f0>)
 8004ae8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004aea:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_RCC_OscConfig+0x3f4>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004af0:	f7fd fd8e 	bl	8002610 <HAL_GetTick>
 8004af4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <HAL_RCC_OscConfig+0x3f0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004afe:	d106      	bne.n	8004b0e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fd fd86 	bl	8002610 <HAL_GetTick>
 8004b04:	1b00      	subs	r0, r0, r4
 8004b06:	2802      	cmp	r0, #2
 8004b08:	d9f5      	bls.n	8004af6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004b0a:	2003      	movs	r0, #3
 8004b0c:	e02f      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e02d      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e02b      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d02b      	beq.n	8004b72 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8004b1a:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <HAL_RCC_OscConfig+0x3f0>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8004b22:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b24:	4291      	cmp	r1, r2
 8004b26:	d126      	bne.n	8004b76 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b2c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	428a      	cmp	r2, r1
 8004b30:	d123      	bne.n	8004b7a <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b32:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b34:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004b38:	401a      	ands	r2, r3
 8004b3a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004b3e:	d11e      	bne.n	8004b7e <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b40:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004b44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004b46:	0852      	lsrs	r2, r2, #1
 8004b48:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b4a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004b4e:	d118      	bne.n	8004b82 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b50:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004b54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b56:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004b5a:	d114      	bne.n	8004b86 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	e006      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8004b60:	2001      	movs	r0, #1
}
 8004b62:	4770      	bx	lr
        return HAL_ERROR;
 8004b64:	2001      	movs	r0, #1
 8004b66:	e002      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8004b68:	2001      	movs	r0, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8004b6c:	2000      	movs	r0, #0
}
 8004b6e:	b002      	add	sp, #8
 8004b70:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004b72:	2001      	movs	r0, #1
 8004b74:	e7fb      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8004b76:	2001      	movs	r0, #1
 8004b78:	e7f9      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	e7f7      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
 8004b7e:	2001      	movs	r0, #1
 8004b80:	e7f5      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
 8004b82:	2001      	movs	r0, #1
 8004b84:	e7f3      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
 8004b86:	2001      	movs	r0, #1
 8004b88:	e7f1      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	42470060 	.word	0x42470060

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b96:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d053      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0xb6>
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d153      	bne.n	8004c4e <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba6:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004bbe:	0158      	lsls	r0, r3, #5
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	1ac0      	subs	r0, r0, r3
 8004bc4:	f161 0100 	sbc.w	r1, r1, #0
 8004bc8:	018e      	lsls	r6, r1, #6
 8004bca:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8004bce:	0187      	lsls	r7, r0, #6
 8004bd0:	1a3c      	subs	r4, r7, r0
 8004bd2:	eb66 0501 	sbc.w	r5, r6, r1
 8004bd6:	00e9      	lsls	r1, r5, #3
 8004bd8:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8004bdc:	00e0      	lsls	r0, r4, #3
 8004bde:	18c0      	adds	r0, r0, r3
 8004be0:	f141 0100 	adc.w	r1, r1, #0
 8004be4:	024b      	lsls	r3, r1, #9
 8004be6:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004bea:	0244      	lsls	r4, r0, #9
 8004bec:	4620      	mov	r0, r4
 8004bee:	4619      	mov	r1, r3
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f7fb fb4d 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bf6:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004bfe:	3301      	adds	r3, #1
 8004c00:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004c02:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004c06:	e023      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004c10:	015c      	lsls	r4, r3, #5
 8004c12:	2500      	movs	r5, #0
 8004c14:	1ae4      	subs	r4, r4, r3
 8004c16:	f165 0500 	sbc.w	r5, r5, #0
 8004c1a:	01ae      	lsls	r6, r5, #6
 8004c1c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8004c20:	01a7      	lsls	r7, r4, #6
 8004c22:	1b38      	subs	r0, r7, r4
 8004c24:	eb66 0105 	sbc.w	r1, r6, r5
 8004c28:	00cc      	lsls	r4, r1, #3
 8004c2a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8004c2e:	00c5      	lsls	r5, r0, #3
 8004c30:	18e8      	adds	r0, r5, r3
 8004c32:	f144 0100 	adc.w	r1, r4, #0
 8004c36:	028b      	lsls	r3, r1, #10
 8004c38:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004c3c:	0284      	lsls	r4, r0, #10
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4619      	mov	r1, r3
 8004c42:	2300      	movs	r3, #0
 8004c44:	f7fb fb24 	bl	8000290 <__aeabi_uldivmod>
 8004c48:	e7d5      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8004c4a:	4803      	ldr	r0, [pc, #12]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c4c:	e000      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c4e:	4803      	ldr	r0, [pc, #12]	; (8004c5c <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	00f42400 	.word	0x00f42400

08004c60 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004c60:	2800      	cmp	r0, #0
 8004c62:	f000 809b 	beq.w	8004d9c <HAL_RCC_ClockConfig+0x13c>
{
 8004c66:	b570      	push	{r4, r5, r6, lr}
 8004c68:	460d      	mov	r5, r1
 8004c6a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b4f      	ldr	r3, [pc, #316]	; (8004dac <HAL_RCC_ClockConfig+0x14c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	428b      	cmp	r3, r1
 8004c76:	d208      	bcs.n	8004c8a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c78:	b2cb      	uxtb	r3, r1
 8004c7a:	4a4c      	ldr	r2, [pc, #304]	; (8004dac <HAL_RCC_ClockConfig+0x14c>)
 8004c7c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7e:	6813      	ldr	r3, [r2, #0]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	428b      	cmp	r3, r1
 8004c86:	f040 808b 	bne.w	8004da0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	f013 0f02 	tst.w	r3, #2
 8004c90:	d017      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c92:	f013 0f04 	tst.w	r3, #4
 8004c96:	d004      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c98:	4a45      	ldr	r2, [pc, #276]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004c9a:	6893      	ldr	r3, [r2, #8]
 8004c9c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ca0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f013 0f08 	tst.w	r3, #8
 8004ca8:	d004      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004caa:	4a41      	ldr	r2, [pc, #260]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004cac:	6893      	ldr	r3, [r2, #8]
 8004cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cb2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	4a3e      	ldr	r2, [pc, #248]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004cb6:	6893      	ldr	r3, [r2, #8]
 8004cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cbc:	68a1      	ldr	r1, [r4, #8]
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	f013 0f01 	tst.w	r3, #1
 8004cc8:	d032      	beq.n	8004d30 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d021      	beq.n	8004d14 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd0:	1e9a      	subs	r2, r3, #2
 8004cd2:	2a01      	cmp	r2, #1
 8004cd4:	d925      	bls.n	8004d22 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	4a36      	ldr	r2, [pc, #216]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	f012 0f02 	tst.w	r2, #2
 8004cde:	d061      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce0:	4933      	ldr	r1, [pc, #204]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004ce2:	688a      	ldr	r2, [r1, #8]
 8004ce4:	f022 0203 	bic.w	r2, r2, #3
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004cec:	f7fd fc90 	bl	8002610 <HAL_GetTick>
 8004cf0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf2:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
 8004cfa:	6862      	ldr	r2, [r4, #4]
 8004cfc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004d00:	d016      	beq.n	8004d30 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d02:	f7fd fc85 	bl	8002610 <HAL_GetTick>
 8004d06:	1b80      	subs	r0, r0, r6
 8004d08:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	d9f0      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8004d10:	2003      	movs	r0, #3
 8004d12:	e042      	b.n	8004d9a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d14:	4a26      	ldr	r2, [pc, #152]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004d1c:	d1e0      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8004d1e:	2001      	movs	r0, #1
 8004d20:	e03b      	b.n	8004d9a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d22:	4a23      	ldr	r2, [pc, #140]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004d2a:	d1d9      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	e034      	b.n	8004d9a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d30:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <HAL_RCC_ClockConfig+0x14c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	d907      	bls.n	8004d4c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3c:	b2ea      	uxtb	r2, r5
 8004d3e:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_RCC_ClockConfig+0x14c>)
 8004d40:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	d12d      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	f013 0f04 	tst.w	r3, #4
 8004d52:	d006      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d54:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004d56:	6893      	ldr	r3, [r2, #8]
 8004d58:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004d5c:	68e1      	ldr	r1, [r4, #12]
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	f013 0f08 	tst.w	r3, #8
 8004d68:	d007      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6a:	4a11      	ldr	r2, [pc, #68]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004d6c:	6893      	ldr	r3, [r2, #8]
 8004d6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004d72:	6921      	ldr	r1, [r4, #16]
 8004d74:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d78:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d7a:	f7ff ff0b 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCC_ClockConfig+0x150>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d86:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <HAL_RCC_ClockConfig+0x154>)
 8004d88:	5cd3      	ldrb	r3, [r2, r3]
 8004d8a:	40d8      	lsrs	r0, r3
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCC_ClockConfig+0x158>)
 8004d8e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <HAL_RCC_ClockConfig+0x15c>)
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	f7fd fb5a 	bl	800244c <HAL_InitTick>
  return HAL_OK;
 8004d98:	2000      	movs	r0, #0
}
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004d9c:	2001      	movs	r0, #1
}
 8004d9e:	4770      	bx	lr
      return HAL_ERROR;
 8004da0:	2001      	movs	r0, #1
 8004da2:	e7fa      	b.n	8004d9a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8004da4:	2001      	movs	r0, #1
 8004da6:	e7f8      	b.n	8004d9a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8004da8:	2001      	movs	r0, #1
 8004daa:	e7f6      	b.n	8004d9a <HAL_RCC_ClockConfig+0x13a>
 8004dac:	40023c00 	.word	0x40023c00
 8004db0:	40023800 	.word	0x40023800
 8004db4:	0800ac80 	.word	0x0800ac80
 8004db8:	20000078 	.word	0x20000078
 8004dbc:	20000080 	.word	0x20000080

08004dc0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004dc0:	4b01      	ldr	r3, [pc, #4]	; (8004dc8 <HAL_RCC_GetHCLKFreq+0x8>)
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20000078 	.word	0x20000078

08004dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dcc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dce:	f7ff fff7 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004dd2:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004dda:	4a03      	ldr	r2, [pc, #12]	; (8004de8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ddc:	5cd3      	ldrb	r3, [r2, r3]
}
 8004dde:	40d8      	lsrs	r0, r3
 8004de0:	bd08      	pop	{r3, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	0800ac90 	.word	0x0800ac90

08004dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dee:	f7ff ffe7 	bl	8004dc0 <HAL_RCC_GetHCLKFreq>
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004dfa:	4a03      	ldr	r2, [pc, #12]	; (8004e08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004dfc:	5cd3      	ldrb	r3, [r2, r3]
}
 8004dfe:	40d8      	lsrs	r0, r3
 8004e00:	bd08      	pop	{r3, pc}
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800
 8004e08:	0800ac90 	.word	0x0800ac90

08004e0c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e0c:	230f      	movs	r3, #15
 8004e0e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_GetClockConfig+0x34>)
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	f002 0203 	and.w	r2, r2, #3
 8004e18:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004e20:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004e28:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	08db      	lsrs	r3, r3, #3
 8004e2e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004e32:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_RCC_GetClockConfig+0x38>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	600b      	str	r3, [r1, #0]
}
 8004e3e:	4770      	bx	lr
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40023c00 	.word	0x40023c00

08004e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e48:	b530      	push	{r4, r5, lr}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e4e:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e50:	f013 0f43 	tst.w	r3, #67	; 0x43
 8004e54:	d114      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x38>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	f013 0f0c 	tst.w	r3, #12
 8004e5c:	d169      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xea>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	f013 0f20 	tst.w	r3, #32
 8004e64:	f040 80be 	bne.w	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	f013 0f10 	tst.w	r3, #16
 8004e6e:	f000 8120 	beq.w	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e72:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8004e76:	4b90      	ldr	r3, [pc, #576]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004e78:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004e7a:	2000      	movs	r0, #0
}
 8004e7c:	b003      	add	sp, #12
 8004e7e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8004e80:	4b8e      	ldr	r3, [pc, #568]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004e86:	f7fd fbc3 	bl	8002610 <HAL_GetTick>
 8004e8a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e8c:	4b8c      	ldr	r3, [pc, #560]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004e94:	d006      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e96:	f7fd fbbb 	bl	8002610 <HAL_GetTick>
 8004e9a:	1b43      	subs	r3, r0, r5
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d9f5      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	e7eb      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	f013 0f01 	tst.w	r3, #1
 8004eaa:	d007      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004eac:	6862      	ldr	r2, [r4, #4]
 8004eae:	68a3      	ldr	r3, [r4, #8]
 8004eb0:	071b      	lsls	r3, r3, #28
 8004eb2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004eb6:	4a82      	ldr	r2, [pc, #520]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004eb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	f013 0f02 	tst.w	r3, #2
 8004ec2:	d015      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ec4:	4a7e      	ldr	r2, [pc, #504]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004ec6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004eca:	6860      	ldr	r0, [r4, #4]
 8004ecc:	68e3      	ldr	r3, [r4, #12]
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004ed4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ede:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004ee2:	f023 031f 	bic.w	r3, r3, #31
 8004ee6:	69e1      	ldr	r1, [r4, #28]
 8004ee8:	3901      	subs	r1, #1
 8004eea:	430b      	orrs	r3, r1
 8004eec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef8:	6862      	ldr	r2, [r4, #4]
 8004efa:	68e3      	ldr	r3, [r4, #12]
 8004efc:	061b      	lsls	r3, r3, #24
 8004efe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004f02:	68a2      	ldr	r2, [r4, #8]
 8004f04:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004f08:	4a6d      	ldr	r2, [pc, #436]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004f0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004f0e:	4b6b      	ldr	r3, [pc, #428]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004f14:	f7fd fb7c 	bl	8002610 <HAL_GetTick>
 8004f18:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f1a:	4b69      	ldr	r3, [pc, #420]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004f22:	d198      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f24:	f7fd fb74 	bl	8002610 <HAL_GetTick>
 8004f28:	1b40      	subs	r0, r0, r5
 8004f2a:	2802      	cmp	r0, #2
 8004f2c:	d9f5      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        return HAL_TIMEOUT;
 8004f2e:	2003      	movs	r0, #3
 8004f30:	e7a4      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE();
 8004f32:	4b64      	ldr	r3, [pc, #400]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004f38:	f7fd fb6a 	bl	8002610 <HAL_GetTick>
 8004f3c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f3e:	4b60      	ldr	r3, [pc, #384]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004f46:	d006      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f48:	f7fd fb62 	bl	8002610 <HAL_GetTick>
 8004f4c:	1b43      	subs	r3, r0, r5
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d9f5      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xf6>
        return HAL_TIMEOUT;
 8004f52:	2003      	movs	r0, #3
 8004f54:	e792      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f013 0f04 	tst.w	r3, #4
 8004f5c:	d016      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x144>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f5e:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004f60:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f64:	6920      	ldr	r0, [r4, #16]
 8004f66:	6963      	ldr	r3, [r4, #20]
 8004f68:	061b      	lsls	r3, r3, #24
 8004f6a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f6e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004f72:	430b      	orrs	r3, r1
 8004f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004f7c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004f80:	6a21      	ldr	r1, [r4, #32]
 8004f82:	3901      	subs	r1, #1
 8004f84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	f013 0f08 	tst.w	r3, #8
 8004f92:	d014      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f94:	4a4a      	ldr	r2, [pc, #296]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004f96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f9a:	6921      	ldr	r1, [r4, #16]
 8004f9c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004fa0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004fa4:	69a1      	ldr	r1, [r4, #24]
 8004fa6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004faa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004fae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004fb2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004fb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8004fbe:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004fc4:	f7fd fb24 	bl	8002610 <HAL_GetTick>
 8004fc8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fca:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004fd2:	f47f af44 	bne.w	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fd6:	f7fd fb1b 	bl	8002610 <HAL_GetTick>
 8004fda:	1b40      	subs	r0, r0, r5
 8004fdc:	2802      	cmp	r0, #2
 8004fde:	d9f4      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x182>
        return HAL_TIMEOUT;
 8004fe0:	2003      	movs	r0, #3
 8004fe2:	e74b      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	4b35      	ldr	r3, [pc, #212]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004ffc:	4a32      	ldr	r2, [pc, #200]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005006:	f7fd fb03 	bl	8002610 <HAL_GetTick>
 800500a:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800500c:	4b2e      	ldr	r3, [pc, #184]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005014:	d106      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005016:	f7fd fafb 	bl	8002610 <HAL_GetTick>
 800501a:	1b40      	subs	r0, r0, r5
 800501c:	2802      	cmp	r0, #2
 800501e:	d9f5      	bls.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        return HAL_TIMEOUT;
 8005020:	2003      	movs	r0, #3
 8005022:	e72b      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005024:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005028:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800502c:	d012      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800502e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005030:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005034:	429a      	cmp	r2, r3
 8005036:	d00d      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800503a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800503c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005040:	4922      	ldr	r1, [pc, #136]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005042:	2001      	movs	r0, #1
 8005044:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005046:	2000      	movs	r0, #0
 8005048:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800504a:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	f013 0f01 	tst.w	r3, #1
 8005052:	d112      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005054:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005056:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800505a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800505e:	d01d      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005060:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005062:	6893      	ldr	r3, [r2, #8]
 8005064:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005068:	6093      	str	r3, [r2, #8]
 800506a:	4915      	ldr	r1, [pc, #84]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800506c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800506e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005070:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005074:	4313      	orrs	r3, r2
 8005076:	670b      	str	r3, [r1, #112]	; 0x70
 8005078:	e6f6      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 800507a:	f7fd fac9 	bl	8002610 <HAL_GetTick>
 800507e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	f013 0f02 	tst.w	r3, #2
 8005088:	d1e4      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800508a:	f7fd fac1 	bl	8002610 <HAL_GetTick>
 800508e:	1b40      	subs	r0, r0, r5
 8005090:	f241 3388 	movw	r3, #5000	; 0x1388
 8005094:	4298      	cmp	r0, r3
 8005096:	d9f3      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x238>
            return HAL_TIMEOUT;
 8005098:	2003      	movs	r0, #3
 800509a:	e6ef      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800509c:	4908      	ldr	r1, [pc, #32]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800509e:	688a      	ldr	r2, [r1, #8]
 80050a0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80050a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ac:	4313      	orrs	r3, r2
 80050ae:	608b      	str	r3, [r1, #8]
 80050b0:	e7db      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x222>
  return HAL_OK;
 80050b2:	2000      	movs	r0, #0
 80050b4:	e6e2      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
 80050b6:	bf00      	nop
 80050b8:	424711e0 	.word	0x424711e0
 80050bc:	42470068 	.word	0x42470068
 80050c0:	40023800 	.word	0x40023800
 80050c4:	42470070 	.word	0x42470070
 80050c8:	40007000 	.word	0x40007000
 80050cc:	42470e40 	.word	0x42470e40

080050d0 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80050d0:	b1e0      	cbz	r0, 800510c <HAL_SDRAM_Init+0x3c>
{   
 80050d2:	b538      	push	{r3, r4, r5, lr}
 80050d4:	460d      	mov	r5, r1
 80050d6:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80050d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80050dc:	b18b      	cbz	r3, 8005102 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050de:	2302      	movs	r3, #2
 80050e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80050e4:	4621      	mov	r1, r4
 80050e6:	f851 0b04 	ldr.w	r0, [r1], #4
 80050ea:	f000 ff98 	bl	800601e <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80050ee:	6862      	ldr	r2, [r4, #4]
 80050f0:	4629      	mov	r1, r5
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	f000 ffcf 	bl	8006096 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 80050fe:	2000      	movs	r0, #0
}
 8005100:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005102:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005106:	f7fd f99d 	bl	8002444 <HAL_SDRAM_MspInit>
 800510a:	e7e8      	b.n	80050de <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800510c:	2001      	movs	r0, #1
}
 800510e:	4770      	bx	lr

08005110 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005114:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8005118:	b2c0      	uxtb	r0, r0
 800511a:	2802      	cmp	r0, #2
 800511c:	d00d      	beq.n	800513a <HAL_SDRAM_SendCommand+0x2a>
 800511e:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005120:	2302      	movs	r3, #2
 8005122:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005126:	6820      	ldr	r0, [r4, #0]
 8005128:	f001 f800 	bl	800612c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d004      	beq.n	800513c <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005132:	2301      	movs	r3, #1
 8005134:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005138:	2000      	movs	r0, #0
}
 800513a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800513c:	2305      	movs	r3, #5
 800513e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8005142:	2000      	movs	r0, #0
 8005144:	e7f9      	b.n	800513a <HAL_SDRAM_SendCommand+0x2a>

08005146 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005146:	b510      	push	{r4, lr}
 8005148:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800514a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800514e:	b2c0      	uxtb	r0, r0
 8005150:	2802      	cmp	r0, #2
 8005152:	d009      	beq.n	8005168 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005154:	2302      	movs	r3, #2
 8005156:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800515a:	6820      	ldr	r0, [r4, #0]
 800515c:	f001 f80e 	bl	800617c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005160:	2301      	movs	r3, #1
 8005162:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8005166:	2000      	movs	r0, #0
}
 8005168:	bd10      	pop	{r4, pc}
	...

0800516c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	4605      	mov	r5, r0
 8005174:	4688      	mov	r8, r1
 8005176:	4617      	mov	r7, r2
 8005178:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800517a:	f7fd fa49 	bl	8002610 <HAL_GetTick>
 800517e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005180:	1a1b      	subs	r3, r3, r0
 8005182:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8005186:	f7fd fa43 	bl	8002610 <HAL_GetTick>
 800518a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800518c:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005194:	fb09 f303 	mul.w	r3, r9, r3
 8005198:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800519a:	682b      	ldr	r3, [r5, #0]
 800519c:	689c      	ldr	r4, [r3, #8]
 800519e:	ea38 0304 	bics.w	r3, r8, r4
 80051a2:	bf0c      	ite	eq
 80051a4:	2401      	moveq	r4, #1
 80051a6:	2400      	movne	r4, #0
 80051a8:	42bc      	cmp	r4, r7
 80051aa:	d040      	beq.n	800522e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 80051b0:	d0f3      	beq.n	800519a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b2:	f7fd fa2d 	bl	8002610 <HAL_GetTick>
 80051b6:	eba0 000a 	sub.w	r0, r0, sl
 80051ba:	4548      	cmp	r0, r9
 80051bc:	d20a      	bcs.n	80051d4 <SPI_WaitFlagStateUntilTimeout+0x68>
 80051be:	f1b9 0f00 	cmp.w	r9, #0
 80051c2:	d007      	beq.n	80051d4 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80051c4:	9a01      	ldr	r2, [sp, #4]
 80051c6:	b102      	cbz	r2, 80051ca <SPI_WaitFlagStateUntilTimeout+0x5e>
 80051c8:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80051ca:	9b01      	ldr	r3, [sp, #4]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	4691      	mov	r9, r2
 80051d2:	e7e2      	b.n	800519a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d4:	682a      	ldr	r2, [r5, #0]
 80051d6:	6853      	ldr	r3, [r2, #4]
 80051d8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80051dc:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051de:	686b      	ldr	r3, [r5, #4]
 80051e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e4:	d00b      	beq.n	80051fe <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ec:	d014      	beq.n	8005218 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80051f4:	2300      	movs	r3, #0
 80051f6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80051fa:	2003      	movs	r0, #3
 80051fc:	e018      	b.n	8005230 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051fe:	68ab      	ldr	r3, [r5, #8]
 8005200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005204:	d002      	beq.n	800520c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d1ec      	bne.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800520c:	682a      	ldr	r2, [r5, #0]
 800520e:	6813      	ldr	r3, [r2, #0]
 8005210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	e7e6      	b.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8005218:	682a      	ldr	r2, [r5, #0]
 800521a:	6813      	ldr	r3, [r2, #0]
 800521c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	682a      	ldr	r2, [r5, #0]
 8005224:	6813      	ldr	r3, [r2, #0]
 8005226:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	e7df      	b.n	80051ee <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800522e:	2000      	movs	r0, #0
}
 8005230:	b002      	add	sp, #8
 8005232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005236:	bf00      	nop
 8005238:	20000078 	.word	0x20000078

0800523c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b530      	push	{r4, r5, lr}
 800523e:	b085      	sub	sp, #20
 8005240:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005242:	4b16      	ldr	r3, [pc, #88]	; (800529c <SPI_EndRxTxTransaction+0x60>)
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <SPI_EndRxTxTransaction+0x64>)
 8005248:	fba3 3000 	umull	r3, r0, r3, r0
 800524c:	0d40      	lsrs	r0, r0, #21
 800524e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005252:	fb05 f000 	mul.w	r0, r5, r0
 8005256:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005258:	6863      	ldr	r3, [r4, #4]
 800525a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800525e:	d00b      	beq.n	8005278 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	b1bb      	cbz	r3, 8005294 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	3b01      	subs	r3, #1
 8005268:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005272:	d1f5      	bne.n	8005260 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8005274:	2000      	movs	r0, #0
 8005276:	e00e      	b.n	8005296 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005278:	9200      	str	r2, [sp, #0]
 800527a:	460b      	mov	r3, r1
 800527c:	2200      	movs	r2, #0
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff ff73 	bl	800516c <SPI_WaitFlagStateUntilTimeout>
 8005286:	b130      	cbz	r0, 8005296 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005288:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800528a:	f043 0320 	orr.w	r3, r3, #32
 800528e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005290:	2003      	movs	r0, #3
 8005292:	e000      	b.n	8005296 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8005294:	2000      	movs	r0, #0
}
 8005296:	b005      	add	sp, #20
 8005298:	bd30      	pop	{r4, r5, pc}
 800529a:	bf00      	nop
 800529c:	20000078 	.word	0x20000078
 80052a0:	165e9f81 	.word	0x165e9f81

080052a4 <SPI_EndRxTransaction>:
{
 80052a4:	b510      	push	{r4, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	4604      	mov	r4, r0
 80052aa:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ac:	6841      	ldr	r1, [r0, #4]
 80052ae:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80052b2:	d014      	beq.n	80052de <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052b4:	6861      	ldr	r1, [r4, #4]
 80052b6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80052ba:	d12a      	bne.n	8005312 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052bc:	68a1      	ldr	r1, [r4, #8]
 80052be:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052c2:	d019      	beq.n	80052f8 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c4:	9200      	str	r2, [sp, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff ff4e 	bl	800516c <SPI_WaitFlagStateUntilTimeout>
 80052d0:	b330      	cbz	r0, 8005320 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052d4:	f043 0320 	orr.w	r3, r3, #32
 80052d8:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80052da:	2003      	movs	r0, #3
 80052dc:	e020      	b.n	8005320 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052de:	6881      	ldr	r1, [r0, #8]
 80052e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80052e4:	d002      	beq.n	80052ec <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052ea:	d1e3      	bne.n	80052b4 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80052ec:	6820      	ldr	r0, [r4, #0]
 80052ee:	6801      	ldr	r1, [r0, #0]
 80052f0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80052f4:	6001      	str	r1, [r0, #0]
 80052f6:	e7dd      	b.n	80052b4 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052f8:	9200      	str	r2, [sp, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	2101      	movs	r1, #1
 80052fe:	4620      	mov	r0, r4
 8005300:	f7ff ff34 	bl	800516c <SPI_WaitFlagStateUntilTimeout>
 8005304:	b160      	cbz	r0, 8005320 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005306:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005308:	f043 0320 	orr.w	r3, r3, #32
 800530c:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800530e:	2003      	movs	r0, #3
 8005310:	e006      	b.n	8005320 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005312:	9200      	str	r2, [sp, #0]
 8005314:	2200      	movs	r2, #0
 8005316:	2101      	movs	r1, #1
 8005318:	4620      	mov	r0, r4
 800531a:	f7ff ff27 	bl	800516c <SPI_WaitFlagStateUntilTimeout>
 800531e:	b908      	cbnz	r0, 8005324 <SPI_EndRxTransaction+0x80>
}
 8005320:	b002      	add	sp, #8
 8005322:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005324:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005326:	f043 0320 	orr.w	r3, r3, #32
 800532a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800532c:	2003      	movs	r0, #3
 800532e:	e7f7      	b.n	8005320 <SPI_EndRxTransaction+0x7c>

08005330 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005330:	2800      	cmp	r0, #0
 8005332:	d05a      	beq.n	80053ea <HAL_SPI_Init+0xba>
{
 8005334:	b510      	push	{r4, lr}
 8005336:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005338:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800533a:	b933      	cbnz	r3, 800534a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800533c:	6843      	ldr	r3, [r0, #4]
 800533e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005342:	d005      	beq.n	8005350 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005344:	2300      	movs	r3, #0
 8005346:	61c3      	str	r3, [r0, #28]
 8005348:	e002      	b.n	8005350 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800534a:	2300      	movs	r3, #0
 800534c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800534e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005350:	2300      	movs	r3, #0
 8005352:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005354:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005358:	2b00      	cmp	r3, #0
 800535a:	d040      	beq.n	80053de <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 800535c:	2302      	movs	r3, #2
 800535e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005362:	6822      	ldr	r2, [r4, #0]
 8005364:	6813      	ldr	r3, [r2, #0]
 8005366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005372:	68a2      	ldr	r2, [r4, #8]
 8005374:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8005378:	4313      	orrs	r3, r2
 800537a:	68e2      	ldr	r2, [r4, #12]
 800537c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005380:	4313      	orrs	r3, r2
 8005382:	6922      	ldr	r2, [r4, #16]
 8005384:	f002 0202 	and.w	r2, r2, #2
 8005388:	4313      	orrs	r3, r2
 800538a:	6962      	ldr	r2, [r4, #20]
 800538c:	f002 0201 	and.w	r2, r2, #1
 8005390:	4313      	orrs	r3, r2
 8005392:	69a2      	ldr	r2, [r4, #24]
 8005394:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005398:	4313      	orrs	r3, r2
 800539a:	69e2      	ldr	r2, [r4, #28]
 800539c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80053a0:	4313      	orrs	r3, r2
 80053a2:	6a22      	ldr	r2, [r4, #32]
 80053a4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80053a8:	4313      	orrs	r3, r2
 80053aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80053ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80053b0:	6821      	ldr	r1, [r4, #0]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053b6:	8b63      	ldrh	r3, [r4, #26]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80053be:	f002 0210 	and.w	r2, r2, #16
 80053c2:	6821      	ldr	r1, [r4, #0]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	69d3      	ldr	r3, [r2, #28]
 80053cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d2:	2000      	movs	r0, #0
 80053d4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80053dc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80053de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80053e2:	4620      	mov	r0, r4
 80053e4:	f7fc ff40 	bl	8002268 <HAL_SPI_MspInit>
 80053e8:	e7b8      	b.n	800535c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80053ea:	2001      	movs	r0, #1
}
 80053ec:	4770      	bx	lr

080053ee <HAL_SPI_DeInit>:
  if (hspi == NULL)
 80053ee:	b190      	cbz	r0, 8005416 <HAL_SPI_DeInit+0x28>
{
 80053f0:	b510      	push	{r4, lr}
 80053f2:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 80053f4:	2302      	movs	r3, #2
 80053f6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80053fa:	6802      	ldr	r2, [r0, #0]
 80053fc:	6813      	ldr	r3, [r2, #0]
 80053fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005402:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8005404:	f7fc ff68 	bl	80022d8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005408:	2000      	movs	r0, #0
 800540a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800540c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005410:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 8005414:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005416:	2001      	movs	r0, #1
}
 8005418:	4770      	bx	lr

0800541a <HAL_SPI_Transmit>:
{
 800541a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800541e:	b083      	sub	sp, #12
 8005420:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005422:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005426:	2b01      	cmp	r3, #1
 8005428:	f000 80cc 	beq.w	80055c4 <HAL_SPI_Transmit+0x1aa>
 800542c:	4604      	mov	r4, r0
 800542e:	4688      	mov	r8, r1
 8005430:	4691      	mov	r9, r2
 8005432:	2301      	movs	r3, #1
 8005434:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005438:	f7fd f8ea 	bl	8002610 <HAL_GetTick>
 800543c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800543e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8005442:	b2f6      	uxtb	r6, r6
 8005444:	2e01      	cmp	r6, #1
 8005446:	f040 80aa 	bne.w	800559e <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 800544a:	f1b8 0f00 	cmp.w	r8, #0
 800544e:	f000 80a7 	beq.w	80055a0 <HAL_SPI_Transmit+0x186>
 8005452:	f1b9 0f00 	cmp.w	r9, #0
 8005456:	f000 80a3 	beq.w	80055a0 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800545a:	2303      	movs	r3, #3
 800545c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005460:	2300      	movs	r3, #0
 8005462:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005464:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005468:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800546c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005470:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005472:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005474:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005476:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005478:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005480:	d01e      	beq.n	80054c0 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f012 0f40 	tst.w	r2, #64	; 0x40
 800548a:	d103      	bne.n	8005494 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005492:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005494:	68e3      	ldr	r3, [r4, #12]
 8005496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549a:	d01c      	beq.n	80054d6 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800549c:	6863      	ldr	r3, [r4, #4]
 800549e:	b113      	cbz	r3, 80054a6 <HAL_SPI_Transmit+0x8c>
 80054a0:	f1b9 0f01 	cmp.w	r9, #1
 80054a4:	d152      	bne.n	800554c <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	7812      	ldrb	r2, [r2, #0]
 80054ac:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054b0:	3301      	adds	r3, #1
 80054b2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80054b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80054be:	e045      	b.n	800554c <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	6813      	ldr	r3, [r2, #0]
 80054ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e7d5      	b.n	8005482 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d6:	6863      	ldr	r3, [r4, #4]
 80054d8:	b113      	cbz	r3, 80054e0 <HAL_SPI_Transmit+0xc6>
 80054da:	f1b9 0f01 	cmp.w	r9, #1
 80054de:	d116      	bne.n	800550e <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	8812      	ldrh	r2, [r2, #0]
 80054e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054ea:	3302      	adds	r3, #2
 80054ec:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80054ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80054f8:	e009      	b.n	800550e <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fa:	f7fd f889 	bl	8002610 <HAL_GetTick>
 80054fe:	1bc0      	subs	r0, r0, r7
 8005500:	42a8      	cmp	r0, r5
 8005502:	d302      	bcc.n	800550a <HAL_SPI_Transmit+0xf0>
 8005504:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005508:	d154      	bne.n	80055b4 <HAL_SPI_Transmit+0x19a>
 800550a:	2d00      	cmp	r5, #0
 800550c:	d054      	beq.n	80055b8 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 800550e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02e      	beq.n	8005574 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	f012 0f02 	tst.w	r2, #2
 800551e:	d0ec      	beq.n	80054fa <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005520:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005522:	8812      	ldrh	r2, [r2, #0]
 8005524:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005526:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005528:	3302      	adds	r3, #2
 800552a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800552c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29b      	uxth	r3, r3
 8005534:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005536:	e7ea      	b.n	800550e <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005538:	f7fd f86a 	bl	8002610 <HAL_GetTick>
 800553c:	1bc0      	subs	r0, r0, r7
 800553e:	42a8      	cmp	r0, r5
 8005540:	d302      	bcc.n	8005548 <HAL_SPI_Transmit+0x12e>
 8005542:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005546:	d139      	bne.n	80055bc <HAL_SPI_Transmit+0x1a2>
 8005548:	2d00      	cmp	r5, #0
 800554a:	d039      	beq.n	80055c0 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 800554c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800554e:	b29b      	uxth	r3, r3
 8005550:	b183      	cbz	r3, 8005574 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	f012 0f02 	tst.w	r2, #2
 800555a:	d0ed      	beq.n	8005538 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800555c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005562:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005564:	3301      	adds	r3, #1
 8005566:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005568:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800556a:	b292      	uxth	r2, r2
 800556c:	3a01      	subs	r2, #1
 800556e:	b292      	uxth	r2, r2
 8005570:	86e2      	strh	r2, [r4, #54]	; 0x36
 8005572:	e7eb      	b.n	800554c <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005574:	463a      	mov	r2, r7
 8005576:	4629      	mov	r1, r5
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fe5f 	bl	800523c <SPI_EndRxTxTransaction>
 800557e:	b108      	cbz	r0, 8005584 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005580:	2320      	movs	r3, #32
 8005582:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	b933      	cbnz	r3, 8005596 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	9201      	str	r2, [sp, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005596:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005598:	b913      	cbnz	r3, 80055a0 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800559a:	2600      	movs	r6, #0
 800559c:	e000      	b.n	80055a0 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 800559e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80055a0:	2301      	movs	r3, #1
 80055a2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055a6:	2300      	movs	r3, #0
 80055a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80055ac:	4630      	mov	r0, r6
 80055ae:	b003      	add	sp, #12
 80055b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80055b4:	2603      	movs	r6, #3
 80055b6:	e7f3      	b.n	80055a0 <HAL_SPI_Transmit+0x186>
 80055b8:	2603      	movs	r6, #3
 80055ba:	e7f1      	b.n	80055a0 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 80055bc:	2603      	movs	r6, #3
 80055be:	e7ef      	b.n	80055a0 <HAL_SPI_Transmit+0x186>
 80055c0:	2603      	movs	r6, #3
 80055c2:	e7ed      	b.n	80055a0 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 80055c4:	2602      	movs	r6, #2
 80055c6:	e7f1      	b.n	80055ac <HAL_SPI_Transmit+0x192>

080055c8 <HAL_SPI_TransmitReceive>:
{
 80055c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055cc:	b083      	sub	sp, #12
 80055ce:	461f      	mov	r7, r3
 80055d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80055d2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	f000 8110 	beq.w	80057fc <HAL_SPI_TransmitReceive+0x234>
 80055dc:	4604      	mov	r4, r0
 80055de:	4688      	mov	r8, r1
 80055e0:	4691      	mov	r9, r2
 80055e2:	2301      	movs	r3, #1
 80055e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80055e8:	f7fd f812 	bl	8002610 <HAL_GetTick>
 80055ec:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80055ee:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80055f2:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80055f4:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d00a      	beq.n	8005610 <HAL_SPI_TransmitReceive+0x48>
 80055fa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80055fe:	f040 80e3 	bne.w	80057c8 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005602:	68a2      	ldr	r2, [r4, #8]
 8005604:	2a00      	cmp	r2, #0
 8005606:	f040 80e9 	bne.w	80057dc <HAL_SPI_TransmitReceive+0x214>
 800560a:	2b04      	cmp	r3, #4
 800560c:	f040 80e8 	bne.w	80057e0 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005610:	f1b8 0f00 	cmp.w	r8, #0
 8005614:	f000 80e6 	beq.w	80057e4 <HAL_SPI_TransmitReceive+0x21c>
 8005618:	f1b9 0f00 	cmp.w	r9, #0
 800561c:	f000 80e4 	beq.w	80057e8 <HAL_SPI_TransmitReceive+0x220>
 8005620:	2f00      	cmp	r7, #0
 8005622:	f000 80e3 	beq.w	80057ec <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005626:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b04      	cmp	r3, #4
 800562e:	d002      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005630:	2305      	movs	r3, #5
 8005632:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005636:	2300      	movs	r3, #0
 8005638:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800563a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800563e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005640:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005642:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005646:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005648:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800564a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800564c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005656:	d103      	bne.n	8005660 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005660:	68e3      	ldr	r3, [r4, #12]
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005666:	d011      	beq.n	800568c <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005668:	6863      	ldr	r3, [r4, #4]
 800566a:	b10b      	cbz	r3, 8005670 <HAL_SPI_TransmitReceive+0xa8>
 800566c:	2f01      	cmp	r7, #1
 800566e:	d10b      	bne.n	8005688 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005670:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	7812      	ldrb	r2, [r2, #0]
 8005676:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800567a:	3301      	adds	r3, #1
 800567c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800567e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29b      	uxth	r3, r3
 8005686:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005688:	2701      	movs	r7, #1
 800568a:	e06b      	b.n	8005764 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	b10b      	cbz	r3, 8005694 <HAL_SPI_TransmitReceive+0xcc>
 8005690:	2f01      	cmp	r7, #1
 8005692:	d10b      	bne.n	80056ac <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005694:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	8812      	ldrh	r2, [r2, #0]
 800569a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800569c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800569e:	3302      	adds	r3, #2
 80056a0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80056a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80056ac:	2701      	movs	r7, #1
 80056ae:	e01c      	b.n	80056ea <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	f012 0f01 	tst.w	r2, #1
 80056b8:	d00e      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x110>
 80056ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80056bc:	b292      	uxth	r2, r2
 80056be:	b15a      	cbz	r2, 80056d8 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056c8:	3302      	adds	r3, #2
 80056ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80056cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80056d6:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056d8:	f7fc ff9a 	bl	8002610 <HAL_GetTick>
 80056dc:	1b80      	subs	r0, r0, r6
 80056de:	42a8      	cmp	r0, r5
 80056e0:	d303      	bcc.n	80056ea <HAL_SPI_TransmitReceive+0x122>
 80056e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80056e6:	f040 8083 	bne.w	80057f0 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	b91b      	cbnz	r3, 80056f8 <HAL_SPI_TransmitReceive+0x130>
 80056f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d053      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	f012 0f02 	tst.w	r2, #2
 8005700:	d0d6      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0xe8>
 8005702:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005704:	b292      	uxth	r2, r2
 8005706:	2a00      	cmp	r2, #0
 8005708:	d0d2      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0xe8>
 800570a:	2f00      	cmp	r7, #0
 800570c:	d0d0      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800570e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005710:	8812      	ldrh	r2, [r2, #0]
 8005712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005716:	3302      	adds	r3, #2
 8005718:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800571a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29b      	uxth	r3, r3
 8005722:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005724:	2700      	movs	r7, #0
 8005726:	e7c3      	b.n	80056b0 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	f012 0f01 	tst.w	r2, #1
 8005730:	d00e      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x188>
 8005732:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005734:	b292      	uxth	r2, r2
 8005736:	b15a      	cbz	r2, 8005750 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800573c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800573e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005740:	3301      	adds	r3, #1
 8005742:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005744:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29b      	uxth	r3, r3
 800574c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800574e:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005750:	f7fc ff5e 	bl	8002610 <HAL_GetTick>
 8005754:	1b83      	subs	r3, r0, r6
 8005756:	42ab      	cmp	r3, r5
 8005758:	d302      	bcc.n	8005760 <HAL_SPI_TransmitReceive+0x198>
 800575a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800575e:	d149      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x22c>
 8005760:	2d00      	cmp	r5, #0
 8005762:	d049      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005764:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005766:	b29b      	uxth	r3, r3
 8005768:	b913      	cbnz	r3, 8005770 <HAL_SPI_TransmitReceive+0x1a8>
 800576a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800576c:	b29b      	uxth	r3, r3
 800576e:	b1bb      	cbz	r3, 80057a0 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	f012 0f02 	tst.w	r2, #2
 8005778:	d0d6      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x160>
 800577a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800577c:	b292      	uxth	r2, r2
 800577e:	2a00      	cmp	r2, #0
 8005780:	d0d2      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x160>
 8005782:	2f00      	cmp	r7, #0
 8005784:	d0d0      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005786:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800578c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800578e:	3301      	adds	r3, #1
 8005790:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005792:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29b      	uxth	r3, r3
 800579a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800579c:	2700      	movs	r7, #0
 800579e:	e7c3      	b.n	8005728 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a0:	4632      	mov	r2, r6
 80057a2:	4629      	mov	r1, r5
 80057a4:	4620      	mov	r0, r4
 80057a6:	f7ff fd49 	bl	800523c <SPI_EndRxTxTransaction>
 80057aa:	b948      	cbnz	r0, 80057c0 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	b963      	cbnz	r3, 80057ca <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	9201      	str	r2, [sp, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	9b01      	ldr	r3, [sp, #4]
 80057be:	e004      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c0:	2320      	movs	r3, #32
 80057c2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80057c4:	2001      	movs	r0, #1
    goto error;
 80057c6:	e000      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 80057c8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057d0:	2300      	movs	r3, #0
 80057d2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80057d6:	b003      	add	sp, #12
 80057d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80057dc:	2002      	movs	r0, #2
 80057de:	e7f4      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
 80057e0:	2002      	movs	r0, #2
 80057e2:	e7f2      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80057e4:	2001      	movs	r0, #1
 80057e6:	e7f0      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
 80057e8:	2001      	movs	r0, #1
 80057ea:	e7ee      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
 80057ec:	2001      	movs	r0, #1
 80057ee:	e7ec      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80057f0:	2003      	movs	r0, #3
 80057f2:	e7ea      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80057f4:	2003      	movs	r0, #3
 80057f6:	e7e8      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
 80057f8:	2003      	movs	r0, #3
 80057fa:	e7e6      	b.n	80057ca <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80057fc:	2002      	movs	r0, #2
 80057fe:	e7ea      	b.n	80057d6 <HAL_SPI_TransmitReceive+0x20e>

08005800 <HAL_SPI_Receive>:
{
 8005800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005804:	b083      	sub	sp, #12
 8005806:	4604      	mov	r4, r0
 8005808:	4688      	mov	r8, r1
 800580a:	4691      	mov	r9, r2
 800580c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800580e:	6843      	ldr	r3, [r0, #4]
 8005810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005814:	d038      	beq.n	8005888 <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8005816:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800581a:	2b01      	cmp	r3, #1
 800581c:	f000 80a8 	beq.w	8005970 <HAL_SPI_Receive+0x170>
 8005820:	2301      	movs	r3, #1
 8005822:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005826:	f7fc fef3 	bl	8002610 <HAL_GetTick>
 800582a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800582c:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8005830:	b2f6      	uxtb	r6, r6
 8005832:	2e01      	cmp	r6, #1
 8005834:	f040 8089 	bne.w	800594a <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8005838:	f1b8 0f00 	cmp.w	r8, #0
 800583c:	f000 8086 	beq.w	800594c <HAL_SPI_Receive+0x14c>
 8005840:	f1b9 0f00 	cmp.w	r9, #0
 8005844:	f000 8082 	beq.w	800594c <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005848:	2304      	movs	r3, #4
 800584a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800584e:	2300      	movs	r3, #0
 8005850:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005852:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005856:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800585a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800585e:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005860:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005862:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005864:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005866:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005868:	68a3      	ldr	r3, [r4, #8]
 800586a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586e:	d018      	beq.n	80058a2 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005878:	d103      	bne.n	8005882 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005880:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005882:	68e3      	ldr	r3, [r4, #12]
 8005884:	b313      	cbz	r3, 80058cc <HAL_SPI_Receive+0xcc>
 8005886:	e040      	b.n	800590a <HAL_SPI_Receive+0x10a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005888:	6883      	ldr	r3, [r0, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1c3      	bne.n	8005816 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800588e:	2304      	movs	r3, #4
 8005890:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005894:	9500      	str	r5, [sp, #0]
 8005896:	4613      	mov	r3, r2
 8005898:	460a      	mov	r2, r1
 800589a:	f7ff fe95 	bl	80055c8 <HAL_SPI_TransmitReceive>
 800589e:	4606      	mov	r6, r0
 80058a0:	e05a      	b.n	8005958 <HAL_SPI_Receive+0x158>
    __HAL_SPI_DISABLE(hspi);
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	6813      	ldr	r3, [r2, #0]
 80058a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058aa:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e7db      	b.n	8005870 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b8:	f7fc feaa 	bl	8002610 <HAL_GetTick>
 80058bc:	1bc0      	subs	r0, r0, r7
 80058be:	42a8      	cmp	r0, r5
 80058c0:	d302      	bcc.n	80058c8 <HAL_SPI_Receive+0xc8>
 80058c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80058c6:	d14b      	bne.n	8005960 <HAL_SPI_Receive+0x160>
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	d04b      	beq.n	8005964 <HAL_SPI_Receive+0x164>
    while (hspi->RxXferCount > 0U)
 80058cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d02e      	beq.n	8005932 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	f012 0f01 	tst.w	r2, #1
 80058dc:	d0ec      	beq.n	80058b8 <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058e0:	7b1b      	ldrb	r3, [r3, #12]
 80058e2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058e6:	3301      	adds	r3, #1
 80058e8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80058ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80058f4:	e7ea      	b.n	80058cc <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f6:	f7fc fe8b 	bl	8002610 <HAL_GetTick>
 80058fa:	1bc0      	subs	r0, r0, r7
 80058fc:	42a8      	cmp	r0, r5
 80058fe:	d302      	bcc.n	8005906 <HAL_SPI_Receive+0x106>
 8005900:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005904:	d130      	bne.n	8005968 <HAL_SPI_Receive+0x168>
 8005906:	2d00      	cmp	r5, #0
 8005908:	d030      	beq.n	800596c <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 800590a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	b183      	cbz	r3, 8005932 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	f012 0f01 	tst.w	r2, #1
 8005918:	d0ed      	beq.n	80058f6 <HAL_SPI_Receive+0xf6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800591e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005922:	3302      	adds	r3, #2
 8005924:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005926:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005928:	b292      	uxth	r2, r2
 800592a:	3a01      	subs	r2, #1
 800592c:	b292      	uxth	r2, r2
 800592e:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8005930:	e7eb      	b.n	800590a <HAL_SPI_Receive+0x10a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005932:	463a      	mov	r2, r7
 8005934:	4629      	mov	r1, r5
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff fcb4 	bl	80052a4 <SPI_EndRxTransaction>
 800593c:	b108      	cbz	r0, 8005942 <HAL_SPI_Receive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800593e:	2320      	movs	r3, #32
 8005940:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005942:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005944:	b913      	cbnz	r3, 800594c <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005946:	2600      	movs	r6, #0
 8005948:	e000      	b.n	800594c <HAL_SPI_Receive+0x14c>
    errorcode = HAL_BUSY;
 800594a:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800594c:	2301      	movs	r3, #1
 800594e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005952:	2300      	movs	r3, #0
 8005954:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005958:	4630      	mov	r0, r6
 800595a:	b003      	add	sp, #12
 800595c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8005960:	2603      	movs	r6, #3
 8005962:	e7f3      	b.n	800594c <HAL_SPI_Receive+0x14c>
 8005964:	2603      	movs	r6, #3
 8005966:	e7f1      	b.n	800594c <HAL_SPI_Receive+0x14c>
          errorcode = HAL_TIMEOUT;
 8005968:	2603      	movs	r6, #3
 800596a:	e7ef      	b.n	800594c <HAL_SPI_Receive+0x14c>
 800596c:	2603      	movs	r6, #3
 800596e:	e7ed      	b.n	800594c <HAL_SPI_Receive+0x14c>
  __HAL_LOCK(hspi);
 8005970:	2602      	movs	r6, #2
 8005972:	e7f1      	b.n	8005958 <HAL_SPI_Receive+0x158>

08005974 <HAL_SPI_GetState>:
  return hspi->State;
 8005974:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8005978:	4770      	bx	lr

0800597a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800597a:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800597c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800597e:	6a05      	ldr	r5, [r0, #32]
 8005980:	f025 0501 	bic.w	r5, r5, #1
 8005984:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005986:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005988:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800598c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005990:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005994:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005996:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8005998:	6203      	str	r3, [r0, #32]
}
 800599a:	bc30      	pop	{r4, r5}
 800599c:	4770      	bx	lr

0800599e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599e:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a0:	6a05      	ldr	r5, [r0, #32]
 80059a2:	f025 0510 	bic.w	r5, r5, #16
 80059a6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80059aa:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059ac:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059b0:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80059b8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059bc:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80059be:	6203      	str	r3, [r0, #32]
}
 80059c0:	bc30      	pop	{r4, r5}
 80059c2:	4770      	bx	lr

080059c4 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059c4:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ca:	430b      	orrs	r3, r1
 80059cc:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d0:	6083      	str	r3, [r0, #8]
}
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80059d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d137      	bne.n	8005a4e <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 80059de:	2302      	movs	r3, #2
 80059e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e4:	6802      	ldr	r2, [r0, #0]
 80059e6:	68d3      	ldr	r3, [r2, #12]
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ee:	6803      	ldr	r3, [r0, #0]
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <HAL_TIM_Base_Start_IT+0x84>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d020      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x64>
 80059f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fa:	d01d      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x64>
 80059fc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d019      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x64>
 8005a04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d015      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x64>
 8005a0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d011      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x64>
 8005a14:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00d      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x64>
 8005a1c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d009      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x64>
 8005a24:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d005      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a34:	2000      	movs	r0, #0
 8005a36:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	2a06      	cmp	r2, #6
 8005a40:	d007      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	f042 0201 	orr.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	4770      	bx	lr
    return HAL_ERROR;
 8005a4e:	2001      	movs	r0, #1
 8005a50:	4770      	bx	lr
  return HAL_OK;
 8005a52:	2000      	movs	r0, #0
}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40010000 	.word	0x40010000

08005a5c <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_IC_CaptureCallback>:
}
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005a60:	4770      	bx	lr

08005a62 <HAL_TIM_TriggerCallback>:
}
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_IRQHandler>:
{
 8005a64:	b510      	push	{r4, lr}
 8005a66:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a68:	6803      	ldr	r3, [r0, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	f012 0f02 	tst.w	r2, #2
 8005a70:	d011      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	f012 0f02 	tst.w	r2, #2
 8005a78:	d00d      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a7a:	f06f 0202 	mvn.w	r2, #2
 8005a7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a80:	2301      	movs	r3, #1
 8005a82:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a84:	6803      	ldr	r3, [r0, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f013 0f03 	tst.w	r3, #3
 8005a8c:	d070      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	f7ff ffe6 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	2300      	movs	r3, #0
 8005a94:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	f012 0f04 	tst.w	r2, #4
 8005a9e:	d012      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	f012 0f04 	tst.w	r2, #4
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aa8:	f06f 0204 	mvn.w	r2, #4
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005aba:	d05f      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7ff ffce 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	f012 0f08 	tst.w	r2, #8
 8005ace:	d012      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	f012 0f08 	tst.w	r2, #8
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad8:	f06f 0208 	mvn.w	r2, #8
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ade:	2304      	movs	r3, #4
 8005ae0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f013 0f03 	tst.w	r3, #3
 8005aea:	d04e      	beq.n	8005b8a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005aec:	4620      	mov	r0, r4
 8005aee:	f7ff ffb6 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	2300      	movs	r3, #0
 8005af4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	f012 0f10 	tst.w	r2, #16
 8005afe:	d012      	beq.n	8005b26 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	f012 0f10 	tst.w	r2, #16
 8005b06:	d00e      	beq.n	8005b26 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b08:	f06f 0210 	mvn.w	r2, #16
 8005b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b0e:	2308      	movs	r3, #8
 8005b10:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005b1a:	d03d      	beq.n	8005b98 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7ff ff9e 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b22:	2300      	movs	r3, #0
 8005b24:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	f012 0f01 	tst.w	r2, #1
 8005b2e:	d003      	beq.n	8005b38 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	f012 0f01 	tst.w	r2, #1
 8005b36:	d136      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b48:	d134      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	691a      	ldr	r2, [r3, #16]
 8005b4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b52:	d003      	beq.n	8005b5c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b5a:	d132      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	f012 0f20 	tst.w	r2, #32
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	f012 0f20 	tst.w	r2, #32
 8005b6c:	d130      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x16c>
}
 8005b6e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b70:	f7ff ff74 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7ff ff73 	bl	8005a60 <HAL_TIM_PWM_PulseFinishedCallback>
 8005b7a:	e78a      	b.n	8005a92 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f7ff ff6d 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7ff ff6c 	bl	8005a60 <HAL_TIM_PWM_PulseFinishedCallback>
 8005b88:	e79b      	b.n	8005ac2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f7ff ff66 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b90:	4620      	mov	r0, r4
 8005b92:	f7ff ff65 	bl	8005a60 <HAL_TIM_PWM_PulseFinishedCallback>
 8005b96:	e7ac      	b.n	8005af2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f7ff ff5f 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f7ff ff5e 	bl	8005a60 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ba4:	e7bd      	b.n	8005b22 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ba6:	f06f 0201 	mvn.w	r2, #1
 8005baa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bac:	4620      	mov	r0, r4
 8005bae:	f7fb ff47 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
 8005bb2:	e7c1      	b.n	8005b38 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 f971 	bl	8005ea2 <HAL_TIMEx_BreakCallback>
 8005bc0:	e7c3      	b.n	8005b4a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bc6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7ff ff4a 	bl	8005a62 <HAL_TIM_TriggerCallback>
 8005bce:	e7c5      	b.n	8005b5c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd0:	f06f 0220 	mvn.w	r2, #32
 8005bd4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f000 f962 	bl	8005ea0 <HAL_TIMEx_CommutCallback>
}
 8005bdc:	e7c7      	b.n	8005b6e <HAL_TIM_IRQHandler+0x10a>
	...

08005be0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005be0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be2:	4a30      	ldr	r2, [pc, #192]	; (8005ca4 <TIM_Base_SetConfig+0xc4>)
 8005be4:	4290      	cmp	r0, r2
 8005be6:	d012      	beq.n	8005c0e <TIM_Base_SetConfig+0x2e>
 8005be8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005bec:	d00f      	beq.n	8005c0e <TIM_Base_SetConfig+0x2e>
 8005bee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005bf2:	4290      	cmp	r0, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_Base_SetConfig+0x2e>
 8005bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bfa:	4290      	cmp	r0, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_Base_SetConfig+0x2e>
 8005bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c02:	4290      	cmp	r0, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_Base_SetConfig+0x2e>
 8005c06:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005c0a:	4290      	cmp	r0, r2
 8005c0c:	d103      	bne.n	8005c16 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c12:	684a      	ldr	r2, [r1, #4]
 8005c14:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c16:	4a23      	ldr	r2, [pc, #140]	; (8005ca4 <TIM_Base_SetConfig+0xc4>)
 8005c18:	4290      	cmp	r0, r2
 8005c1a:	d02a      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c20:	d027      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c22:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005c26:	4290      	cmp	r0, r2
 8005c28:	d023      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c2e:	4290      	cmp	r0, r2
 8005c30:	d01f      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c36:	4290      	cmp	r0, r2
 8005c38:	d01b      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c3a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005c3e:	4290      	cmp	r0, r2
 8005c40:	d017      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c42:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005c46:	4290      	cmp	r0, r2
 8005c48:	d013      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c4e:	4290      	cmp	r0, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c56:	4290      	cmp	r0, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c5a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005c5e:	4290      	cmp	r0, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c66:	4290      	cmp	r0, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_Base_SetConfig+0x92>
 8005c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c6e:	4290      	cmp	r0, r2
 8005c70:	d103      	bne.n	8005c7a <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c76:	68ca      	ldr	r2, [r1, #12]
 8005c78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	694a      	ldr	r2, [r1, #20]
 8005c80:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c82:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c84:	688b      	ldr	r3, [r1, #8]
 8005c86:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c88:	680b      	ldr	r3, [r1, #0]
 8005c8a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <TIM_Base_SetConfig+0xc4>)
 8005c8e:	4298      	cmp	r0, r3
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0xba>
 8005c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c96:	4298      	cmp	r0, r3
 8005c98:	d101      	bne.n	8005c9e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	6143      	str	r3, [r0, #20]
}
 8005ca2:	4770      	bx	lr
 8005ca4:	40010000 	.word	0x40010000

08005ca8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005ca8:	b340      	cbz	r0, 8005cfc <HAL_TIM_Base_Init+0x54>
{
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cb2:	b1f3      	cbz	r3, 8005cf2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cba:	4621      	mov	r1, r4
 8005cbc:	f851 0b04 	ldr.w	r0, [r1], #4
 8005cc0:	f7ff ff8e 	bl	8005be0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005cce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cd6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005cea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005cee:	2000      	movs	r0, #0
}
 8005cf0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005cf2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005cf6:	f7fc fb07 	bl	8002308 <HAL_TIM_Base_MspInit>
 8005cfa:	e7db      	b.n	8005cb4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005cfc:	2001      	movs	r0, #1
}
 8005cfe:	4770      	bx	lr

08005d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d00:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d02:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d04:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d08:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d10:	6082      	str	r2, [r0, #8]
}
 8005d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005d18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d078      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0xfa>
{
 8005d20:	b510      	push	{r4, lr}
 8005d22:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005d24:	2301      	movs	r3, #1
 8005d26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005d30:	6802      	ldr	r2, [r0, #0]
 8005d32:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005d3c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005d3e:	680b      	ldr	r3, [r1, #0]
 8005d40:	2b60      	cmp	r3, #96	; 0x60
 8005d42:	d04c      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0xc6>
 8005d44:	d829      	bhi.n	8005d9a <HAL_TIM_ConfigClockSource+0x82>
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d054      	beq.n	8005df4 <HAL_TIM_ConfigClockSource+0xdc>
 8005d4a:	d90c      	bls.n	8005d66 <HAL_TIM_ConfigClockSource+0x4e>
 8005d4c:	2b50      	cmp	r3, #80	; 0x50
 8005d4e:	d122      	bne.n	8005d96 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d50:	68ca      	ldr	r2, [r1, #12]
 8005d52:	6849      	ldr	r1, [r1, #4]
 8005d54:	6800      	ldr	r0, [r0, #0]
 8005d56:	f7ff fe10 	bl	800597a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d5a:	2150      	movs	r1, #80	; 0x50
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	f7ff fe31 	bl	80059c4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005d62:	2000      	movs	r0, #0
      break;
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d00d      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x6e>
 8005d6a:	d909      	bls.n	8005d80 <HAL_TIM_ConfigClockSource+0x68>
 8005d6c:	2b30      	cmp	r3, #48	; 0x30
 8005d6e:	d00a      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8005d70:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005d7e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8005d80:	b10b      	cbz	r3, 8005d86 <HAL_TIM_ConfigClockSource+0x6e>
 8005d82:	2b10      	cmp	r3, #16
 8005d84:	d105      	bne.n	8005d92 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d86:	4619      	mov	r1, r3
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	f7ff fe1b 	bl	80059c4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2000      	movs	r0, #0
      break;
 8005d90:	e7ef      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005d92:	2001      	movs	r0, #1
 8005d94:	e7ed      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
 8005d96:	2001      	movs	r0, #1
 8005d98:	e7eb      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9e:	d034      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0xf2>
 8005da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da4:	d10c      	bne.n	8005dc0 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005da6:	68cb      	ldr	r3, [r1, #12]
 8005da8:	684a      	ldr	r2, [r1, #4]
 8005daa:	6889      	ldr	r1, [r1, #8]
 8005dac:	6800      	ldr	r0, [r0, #0]
 8005dae:	f7ff ffa7 	bl	8005d00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005db2:	6822      	ldr	r2, [r4, #0]
 8005db4:	6893      	ldr	r3, [r2, #8]
 8005db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dba:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbc:	2000      	movs	r0, #0
      break;
 8005dbe:	e7d8      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005dc0:	2b70      	cmp	r3, #112	; 0x70
 8005dc2:	d124      	bne.n	8005e0e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005dc4:	68cb      	ldr	r3, [r1, #12]
 8005dc6:	684a      	ldr	r2, [r1, #4]
 8005dc8:	6889      	ldr	r1, [r1, #8]
 8005dca:	6800      	ldr	r0, [r0, #0]
 8005dcc:	f7ff ff98 	bl	8005d00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005dd8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	2000      	movs	r0, #0
      break;
 8005ddc:	e7c9      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dde:	68ca      	ldr	r2, [r1, #12]
 8005de0:	6849      	ldr	r1, [r1, #4]
 8005de2:	6800      	ldr	r0, [r0, #0]
 8005de4:	f7ff fddb 	bl	800599e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005de8:	2160      	movs	r1, #96	; 0x60
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	f7ff fdea 	bl	80059c4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2000      	movs	r0, #0
      break;
 8005df2:	e7be      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df4:	68ca      	ldr	r2, [r1, #12]
 8005df6:	6849      	ldr	r1, [r1, #4]
 8005df8:	6800      	ldr	r0, [r0, #0]
 8005dfa:	f7ff fdbe 	bl	800597a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dfe:	2140      	movs	r1, #64	; 0x40
 8005e00:	6820      	ldr	r0, [r4, #0]
 8005e02:	f7ff fddf 	bl	80059c4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2000      	movs	r0, #0
      break;
 8005e08:	e7b3      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e7b1      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005e0e:	2001      	movs	r0, #1
 8005e10:	e7af      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8005e12:	2002      	movs	r0, #2
}
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d03b      	beq.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8005e20:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005e22:	2301      	movs	r3, #1
 8005e24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e2e:	6803      	ldr	r3, [r0, #0]
 8005e30:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e32:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e34:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e38:	680a      	ldr	r2, [r1, #0]
 8005e3a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3e:	6803      	ldr	r3, [r0, #0]
 8005e40:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01a      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4a:	d017      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005e4c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d013      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005e54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00f      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005e5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005e64:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005e6c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005e74:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e7c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e80:	684a      	ldr	r2, [r1, #4]
 8005e82:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e84:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005e92:	4618      	mov	r0, r3
}
 8005e94:	bc30      	pop	{r4, r5}
 8005e96:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e98:	2002      	movs	r0, #2
}
 8005e9a:	4770      	bx	lr
 8005e9c:	40010000 	.word	0x40010000

08005ea0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ea2:	4770      	bx	lr

08005ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea8:	6802      	ldr	r2, [r0, #0]
 8005eaa:	6913      	ldr	r3, [r2, #16]
 8005eac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005eb0:	68c1      	ldr	r1, [r0, #12]
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eb6:	6883      	ldr	r3, [r0, #8]
 8005eb8:	6902      	ldr	r2, [r0, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	6942      	ldr	r2, [r0, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	69c2      	ldr	r2, [r0, #28]
 8005ec2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005ec4:	6801      	ldr	r1, [r0, #0]
 8005ec6:	68cb      	ldr	r3, [r1, #12]
 8005ec8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ecc:	f023 030c 	bic.w	r3, r3, #12
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ed4:	6802      	ldr	r2, [r0, #0]
 8005ed6:	6953      	ldr	r3, [r2, #20]
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005edc:	6981      	ldr	r1, [r0, #24]
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee2:	6803      	ldr	r3, [r0, #0]
 8005ee4:	4a34      	ldr	r2, [pc, #208]	; (8005fb8 <UART_SetConfig+0x114>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d006      	beq.n	8005ef8 <UART_SetConfig+0x54>
 8005eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d002      	beq.n	8005ef8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ef2:	f7fe ff6b 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 8005ef6:	e001      	b.n	8005efc <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ef8:	f7fe ff78 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efc:	69e3      	ldr	r3, [r4, #28]
 8005efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f02:	d02a      	beq.n	8005f5a <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f04:	2600      	movs	r6, #0
 8005f06:	1805      	adds	r5, r0, r0
 8005f08:	eb46 0106 	adc.w	r1, r6, r6
 8005f0c:	182d      	adds	r5, r5, r0
 8005f0e:	eb46 0101 	adc.w	r1, r6, r1
 8005f12:	00cb      	lsls	r3, r1, #3
 8005f14:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005f18:	00ea      	lsls	r2, r5, #3
 8005f1a:	4615      	mov	r5, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	009a      	lsls	r2, r3, #2
 8005f22:	0f9b      	lsrs	r3, r3, #30
 8005f24:	1828      	adds	r0, r5, r0
 8005f26:	eb46 0101 	adc.w	r1, r6, r1
 8005f2a:	f7fa f9b1 	bl	8000290 <__aeabi_uldivmod>
 8005f2e:	4d23      	ldr	r5, [pc, #140]	; (8005fbc <UART_SetConfig+0x118>)
 8005f30:	fba5 3200 	umull	r3, r2, r5, r0
 8005f34:	0951      	lsrs	r1, r2, #5
 8005f36:	2364      	movs	r3, #100	; 0x64
 8005f38:	fb03 0311 	mls	r3, r3, r1, r0
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	3332      	adds	r3, #50	; 0x32
 8005f40:	fba5 2303 	umull	r2, r3, r5, r3
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f4a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	6821      	ldr	r1, [r4, #0]
 8005f54:	4413      	add	r3, r2
 8005f56:	608b      	str	r3, [r1, #8]
  }
}
 8005f58:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	1805      	adds	r5, r0, r0
 8005f5e:	eb46 0106 	adc.w	r1, r6, r6
 8005f62:	182d      	adds	r5, r5, r0
 8005f64:	eb46 0101 	adc.w	r1, r6, r1
 8005f68:	00cb      	lsls	r3, r1, #3
 8005f6a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005f6e:	00ea      	lsls	r2, r5, #3
 8005f70:	4615      	mov	r5, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	6862      	ldr	r2, [r4, #4]
 8005f76:	4633      	mov	r3, r6
 8005f78:	1892      	adds	r2, r2, r2
 8005f7a:	eb46 0303 	adc.w	r3, r6, r3
 8005f7e:	1828      	adds	r0, r5, r0
 8005f80:	eb46 0101 	adc.w	r1, r6, r1
 8005f84:	f7fa f984 	bl	8000290 <__aeabi_uldivmod>
 8005f88:	4d0c      	ldr	r5, [pc, #48]	; (8005fbc <UART_SetConfig+0x118>)
 8005f8a:	fba5 3200 	umull	r3, r2, r5, r0
 8005f8e:	0951      	lsrs	r1, r2, #5
 8005f90:	2364      	movs	r3, #100	; 0x64
 8005f92:	fb03 0311 	mls	r3, r3, r1, r0
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	3332      	adds	r3, #50	; 0x32
 8005f9a:	fba5 2303 	umull	r2, r3, r5, r3
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	005a      	lsls	r2, r3, #1
 8005fa2:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005fa6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	608b      	str	r3, [r1, #8]
 8005fb4:	e7d0      	b.n	8005f58 <UART_SetConfig+0xb4>
 8005fb6:	bf00      	nop
 8005fb8:	40011000 	.word	0x40011000
 8005fbc:	51eb851f 	.word	0x51eb851f

08005fc0 <HAL_UART_Init>:
  if (huart == NULL)
 8005fc0:	b358      	cbz	r0, 800601a <HAL_UART_Init+0x5a>
{
 8005fc2:	b510      	push	{r4, lr}
 8005fc4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005fca:	b30b      	cbz	r3, 8006010 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005fcc:	2324      	movs	r3, #36	; 0x24
 8005fce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005fd2:	6822      	ldr	r2, [r4, #0]
 8005fd4:	68d3      	ldr	r3, [r2, #12]
 8005fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fda:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f7ff ff61 	bl	8005ea4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	6913      	ldr	r3, [r2, #16]
 8005fe6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005fea:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	6953      	ldr	r3, [r2, #20]
 8005ff0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005ff4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	68d3      	ldr	r3, [r2, #12]
 8005ffa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ffe:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	2000      	movs	r0, #0
 8006002:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006004:	2320      	movs	r3, #32
 8006006:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800600a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800600e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006010:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006014:	f7fc f990 	bl	8002338 <HAL_UART_MspInit>
 8006018:	e7d8      	b.n	8005fcc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800601a:	2001      	movs	r0, #1
}
 800601c:	4770      	bx	lr

0800601e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800601e:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006020:	680b      	ldr	r3, [r1, #0]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d01a      	beq.n	800605c <FMC_SDRAM_Init+0x3e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006026:	6802      	ldr	r2, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006028:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800602c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006030:	684b      	ldr	r3, [r1, #4]
                                               Init->RowBitsNumber      |\
 8006032:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006034:	4323      	orrs	r3, r4
                                               Init->MemoryDataWidth    |\
 8006036:	68cc      	ldr	r4, [r1, #12]
                                               Init->RowBitsNumber      |\
 8006038:	4323      	orrs	r3, r4
                                               Init->InternalBankNumber |\
 800603a:	690c      	ldr	r4, [r1, #16]
                                               Init->MemoryDataWidth    |\
 800603c:	4323      	orrs	r3, r4
                                               Init->CASLatency         |\
 800603e:	694c      	ldr	r4, [r1, #20]
                                               Init->InternalBankNumber |\
 8006040:	4323      	orrs	r3, r4
                                               Init->WriteProtection    |\
 8006042:	698c      	ldr	r4, [r1, #24]
                                               Init->CASLatency         |\
 8006044:	4323      	orrs	r3, r4
                                               Init->SDClockPeriod      |\
 8006046:	69cc      	ldr	r4, [r1, #28]
                                               Init->WriteProtection    |\
 8006048:	4323      	orrs	r3, r4
                                               Init->ReadBurst          |\
 800604a:	6a0c      	ldr	r4, [r1, #32]
                                               Init->SDClockPeriod      |\
 800604c:	4323      	orrs	r3, r4
                                               Init->ReadPipeDelay
 800604e:	6a49      	ldr	r1, [r1, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006050:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006052:	4313      	orrs	r3, r2
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006054:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8006056:	2000      	movs	r0, #0
 8006058:	bc30      	pop	{r4, r5}
 800605a:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800605c:	6802      	ldr	r2, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800605e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006062:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8006064:	6a0c      	ldr	r4, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006066:	431c      	orrs	r4, r3
                        Init->ReadPipeDelay);  
 8006068:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800606a:	431c      	orrs	r4, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800606c:	4314      	orrs	r4, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800606e:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006070:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006074:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006078:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber      |\
 800607a:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800607c:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth    |\
 800607e:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber      |\
 8006080:	432b      	orrs	r3, r5
                       Init->InternalBankNumber |\
 8006082:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth    |\
 8006084:	432b      	orrs	r3, r5
                       Init->CASLatency         |\
 8006086:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber |\
 8006088:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 800608a:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency         |\
 800608c:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800608e:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006090:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006092:	6043      	str	r3, [r0, #4]
 8006094:	e7df      	b.n	8006056 <FMC_SDRAM_Init+0x38>

08006096 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006096:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006098:	2a01      	cmp	r2, #1
 800609a:	d021      	beq.n	80060e0 <FMC_SDRAM_Timing_Init+0x4a>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800609c:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800609e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80060a2:	680b      	ldr	r3, [r1, #0]
 80060a4:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80060a6:	684c      	ldr	r4, [r1, #4]
 80060a8:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80060aa:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80060ae:	688c      	ldr	r4, [r1, #8]
 80060b0:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80060b2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80060b6:	68cc      	ldr	r4, [r1, #12]
 80060b8:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80060ba:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80060be:	690c      	ldr	r4, [r1, #16]
 80060c0:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80060c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80060c6:	694c      	ldr	r4, [r1, #20]
 80060c8:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80060ca:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 80060ce:	6989      	ldr	r1, [r1, #24]
 80060d0:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80060d2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80060d6:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80060d8:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 80060da:	2000      	movs	r0, #0
 80060dc:	bc30      	pop	{r4, r5}
 80060de:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80060e0:	6884      	ldr	r4, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80060e2:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 80060e6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80060ea:	68ca      	ldr	r2, [r1, #12]
 80060ec:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 80060ee:	694b      	ldr	r3, [r1, #20]
 80060f0:	1e5a      	subs	r2, r3, #1
 80060f2:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80060f4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80060f8:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80060fa:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80060fc:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006100:	680b      	ldr	r3, [r1, #0]
 8006102:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006104:	684d      	ldr	r5, [r1, #4]
 8006106:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006108:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800610c:	688d      	ldr	r5, [r1, #8]
 800610e:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006110:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006114:	690d      	ldr	r5, [r1, #16]
 8006116:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006118:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800611c:	6989      	ldr	r1, [r1, #24]
 800611e:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006120:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006124:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006126:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006128:	60c3      	str	r3, [r0, #12]
 800612a:	e7d6      	b.n	80060da <FMC_SDRAM_Timing_Init+0x44>

0800612c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	4604      	mov	r4, r0
 8006132:	4615      	mov	r5, r2
  __IO uint32_t tmpr = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	9301      	str	r3, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006138:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 800613a:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800613c:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800613e:	688a      	ldr	r2, [r1, #8]
 8006140:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8006142:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9U)
 8006146:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006148:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800614c:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	6103      	str	r3, [r0, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006152:	f7fc fa5d 	bl	8002610 <HAL_GetTick>
 8006156:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006158:	69a3      	ldr	r3, [r4, #24]
 800615a:	f013 0f20 	tst.w	r3, #32
 800615e:	d00a      	beq.n	8006176 <FMC_SDRAM_SendCommand+0x4a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006160:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006164:	d0f8      	beq.n	8006158 <FMC_SDRAM_SendCommand+0x2c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006166:	b125      	cbz	r5, 8006172 <FMC_SDRAM_SendCommand+0x46>
 8006168:	f7fc fa52 	bl	8002610 <HAL_GetTick>
 800616c:	1b80      	subs	r0, r0, r6
 800616e:	42a8      	cmp	r0, r5
 8006170:	d9f2      	bls.n	8006158 <FMC_SDRAM_SendCommand+0x2c>
      {
        return HAL_TIMEOUT;
 8006172:	2003      	movs	r0, #3
 8006174:	e000      	b.n	8006178 <FMC_SDRAM_SendCommand+0x4c>
      }
    }
  }

  return HAL_OK;
 8006176:	2000      	movs	r0, #0
}
 8006178:	b002      	add	sp, #8
 800617a:	bd70      	pop	{r4, r5, r6, pc}

0800617c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800617c:	6943      	ldr	r3, [r0, #20]
 800617e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006182:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 8006184:	2000      	movs	r0, #0
 8006186:	4770      	bx	lr

08006188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006188:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	3301      	adds	r3, #1
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <USB_CoreReset+0x48>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d814      	bhi.n	80061c4 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800619a:	6903      	ldr	r3, [r0, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	daf6      	bge.n	800618e <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061a4:	6903      	ldr	r3, [r0, #16]
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80061ac:	9b01      	ldr	r3, [sp, #4]
 80061ae:	3301      	adds	r3, #1
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	4a07      	ldr	r2, [pc, #28]	; (80061d0 <USB_CoreReset+0x48>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d808      	bhi.n	80061ca <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061b8:	6903      	ldr	r3, [r0, #16]
 80061ba:	f013 0f01 	tst.w	r3, #1
 80061be:	d1f5      	bne.n	80061ac <USB_CoreReset+0x24>

  return HAL_OK;
 80061c0:	2000      	movs	r0, #0
 80061c2:	e000      	b.n	80061c6 <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 80061c4:	2003      	movs	r0, #3
}
 80061c6:	b002      	add	sp, #8
 80061c8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80061ca:	2003      	movs	r0, #3
 80061cc:	e7fb      	b.n	80061c6 <USB_CoreReset+0x3e>
 80061ce:	bf00      	nop
 80061d0:	00030d40 	.word	0x00030d40

080061d4 <USB_CoreInit>:
{
 80061d4:	b084      	sub	sp, #16
 80061d6:	b510      	push	{r4, lr}
 80061d8:	4604      	mov	r4, r0
 80061da:	a803      	add	r0, sp, #12
 80061dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d11f      	bne.n	8006226 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ec:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f8:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061fa:	68e3      	ldr	r3, [r4, #12]
 80061fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006200:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8006202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d009      	beq.n	800621c <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8006208:	4620      	mov	r0, r4
 800620a:	f7ff ffbd 	bl	8006188 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800620e:	9b06      	ldr	r3, [sp, #24]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d01b      	beq.n	800624c <USB_CoreInit+0x78>
}
 8006214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006218:	b004      	add	sp, #16
 800621a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800621c:	68e3      	ldr	r3, [r4, #12]
 800621e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006222:	60e3      	str	r3, [r4, #12]
 8006224:	e7f0      	b.n	8006208 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800622c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800622e:	4620      	mov	r0, r4
 8006230:	f7ff ffaa 	bl	8006188 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006236:	b923      	cbnz	r3, 8006242 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800623a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006240:	e7e5      	b.n	800620e <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006242:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006248:	63a3      	str	r3, [r4, #56]	; 0x38
 800624a:	e7e0      	b.n	800620e <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800624c:	68a3      	ldr	r3, [r4, #8]
 800624e:	f043 0306 	orr.w	r3, r3, #6
 8006252:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006254:	68a3      	ldr	r3, [r4, #8]
 8006256:	f043 0320 	orr.w	r3, r3, #32
 800625a:	60a3      	str	r3, [r4, #8]
 800625c:	e7da      	b.n	8006214 <USB_CoreInit+0x40>

0800625e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800625e:	6883      	ldr	r3, [r0, #8]
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	6083      	str	r3, [r0, #8]
}
 8006266:	2000      	movs	r0, #0
 8006268:	4770      	bx	lr
	...

0800626c <USB_FlushTxFifo>:
{
 800626c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006272:	0189      	lsls	r1, r1, #6
 8006274:	f041 0120 	orr.w	r1, r1, #32
 8006278:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800627a:	9b01      	ldr	r3, [sp, #4]
 800627c:	3301      	adds	r3, #1
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	4a05      	ldr	r2, [pc, #20]	; (8006298 <USB_FlushTxFifo+0x2c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d805      	bhi.n	8006292 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006286:	6903      	ldr	r3, [r0, #16]
 8006288:	f013 0f20 	tst.w	r3, #32
 800628c:	d1f5      	bne.n	800627a <USB_FlushTxFifo+0xe>
  return HAL_OK;
 800628e:	2000      	movs	r0, #0
 8006290:	e000      	b.n	8006294 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8006292:	2003      	movs	r0, #3
}
 8006294:	b002      	add	sp, #8
 8006296:	4770      	bx	lr
 8006298:	00030d40 	.word	0x00030d40

0800629c <USB_FlushRxFifo>:
{
 800629c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062a2:	2310      	movs	r3, #16
 80062a4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	3301      	adds	r3, #1
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	4a05      	ldr	r2, [pc, #20]	; (80062c4 <USB_FlushRxFifo+0x28>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d805      	bhi.n	80062be <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062b2:	6903      	ldr	r3, [r0, #16]
 80062b4:	f013 0f10 	tst.w	r3, #16
 80062b8:	d1f5      	bne.n	80062a6 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 80062ba:	2000      	movs	r0, #0
 80062bc:	e000      	b.n	80062c0 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 80062be:	2003      	movs	r0, #3
}
 80062c0:	b002      	add	sp, #8
 80062c2:	4770      	bx	lr
 80062c4:	00030d40 	.word	0x00030d40

080062c8 <USB_ReadPacket>:
{
 80062c8:	b4f0      	push	{r4, r5, r6, r7}
 80062ca:	b082      	sub	sp, #8
 80062cc:	4607      	mov	r7, r0
 80062ce:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d0:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 80062d2:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 80062d4:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 80062d8:	2300      	movs	r3, #0
 80062da:	42ab      	cmp	r3, r5
 80062dc:	d206      	bcs.n	80062ec <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062de:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 80062e2:	6824      	ldr	r4, [r4, #0]
 80062e4:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 80062e8:	3301      	adds	r3, #1
 80062ea:	e7f6      	b.n	80062da <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 80062ec:	b17a      	cbz	r2, 800630e <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062ee:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	9301      	str	r3, [sp, #4]
    i = 0U;
 80062f6:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062f8:	b2eb      	uxtb	r3, r5
 80062fa:	00dc      	lsls	r4, r3, #3
 80062fc:	9b01      	ldr	r3, [sp, #4]
 80062fe:	40e3      	lsrs	r3, r4
 8006300:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8006304:	3501      	adds	r5, #1
      remaining_bytes--;
 8006306:	3a01      	subs	r2, #1
 8006308:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800630a:	2a00      	cmp	r2, #0
 800630c:	d1f4      	bne.n	80062f8 <USB_ReadPacket+0x30>
}
 800630e:	b002      	add	sp, #8
 8006310:	bcf0      	pop	{r4, r5, r6, r7}
 8006312:	4770      	bx	lr

08006314 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006314:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006316:	6980      	ldr	r0, [r0, #24]
}
 8006318:	4010      	ands	r0, r2
 800631a:	4770      	bx	lr

0800631c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800631c:	6940      	ldr	r0, [r0, #20]
}
 800631e:	f000 0001 	and.w	r0, r0, #1
 8006322:	4770      	bx	lr

08006324 <USB_SetCurrentMode>:
{
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006328:	68c3      	ldr	r3, [r0, #12]
 800632a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800632e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006330:	2901      	cmp	r1, #1
 8006332:	d013      	beq.n	800635c <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8006334:	bb19      	cbnz	r1, 800637e <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006336:	68c3      	ldr	r3, [r0, #12]
 8006338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800633c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800633e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8006340:	2001      	movs	r0, #1
 8006342:	f7fc f96b 	bl	800261c <HAL_Delay>
      ms++;
 8006346:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006348:	4628      	mov	r0, r5
 800634a:	f7ff ffe7 	bl	800631c <USB_GetMode>
 800634e:	b108      	cbz	r0, 8006354 <USB_SetCurrentMode+0x30>
 8006350:	2c31      	cmp	r4, #49	; 0x31
 8006352:	d9f5      	bls.n	8006340 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8006354:	2c32      	cmp	r4, #50	; 0x32
 8006356:	d014      	beq.n	8006382 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8006358:	2000      	movs	r0, #0
}
 800635a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800635c:	68c3      	ldr	r3, [r0, #12]
 800635e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006362:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8006364:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8006366:	2001      	movs	r0, #1
 8006368:	f7fc f958 	bl	800261c <HAL_Delay>
      ms++;
 800636c:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800636e:	4628      	mov	r0, r5
 8006370:	f7ff ffd4 	bl	800631c <USB_GetMode>
 8006374:	2801      	cmp	r0, #1
 8006376:	d0ed      	beq.n	8006354 <USB_SetCurrentMode+0x30>
 8006378:	2c31      	cmp	r4, #49	; 0x31
 800637a:	d9f4      	bls.n	8006366 <USB_SetCurrentMode+0x42>
 800637c:	e7ea      	b.n	8006354 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 800637e:	2001      	movs	r0, #1
 8006380:	e7eb      	b.n	800635a <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8006382:	2001      	movs	r0, #1
 8006384:	e7e9      	b.n	800635a <USB_SetCurrentMode+0x36>
	...

08006388 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006388:	b084      	sub	sp, #16
 800638a:	b538      	push	{r3, r4, r5, lr}
 800638c:	4604      	mov	r4, r0
 800638e:	a805      	add	r0, sp, #20
 8006390:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006394:	4625      	mov	r5, r4
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800639c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800639e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063a2:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80063aa:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b2:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80063b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80063ba:	d010      	beq.n	80063de <USB_HostInit+0x56>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d006      	beq.n	80063d0 <USB_HostInit+0x48>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063c2:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80063c6:	f023 0304 	bic.w	r3, r3, #4
 80063ca:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80063ce:	e00c      	b.n	80063ea <USB_HostInit+0x62>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80063d0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80063d4:	f043 0304 	orr.w	r3, r3, #4
 80063d8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80063dc:	e005      	b.n	80063ea <USB_HostInit+0x62>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063de:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80063e2:	f023 0304 	bic.w	r3, r3, #4
 80063e6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80063ea:	2110      	movs	r1, #16
 80063ec:	4620      	mov	r0, r4
 80063ee:	f7ff ff3d 	bl	800626c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80063f2:	4620      	mov	r0, r4
 80063f4:	f7ff ff52 	bl	800629c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063f8:	2200      	movs	r2, #0
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d90a      	bls.n	8006416 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006400:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 8006404:	f04f 31ff 	mov.w	r1, #4294967295
 8006408:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 800640c:	2100      	movs	r1, #0
 800640e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8006412:	3201      	adds	r2, #1
 8006414:	e7f1      	b.n	80063fa <USB_HostInit+0x72>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006422:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006426:	d017      	beq.n	8006458 <USB_HostInit+0xd0>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800642e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8006432:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <USB_HostInit+0xe4>)
 8006436:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800643a:	9b08      	ldr	r3, [sp, #32]
 800643c:	b91b      	cbnz	r3, 8006446 <USB_HostInit+0xbe>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800643e:	69a3      	ldr	r3, [r4, #24]
 8006440:	f043 0310 	orr.w	r3, r3, #16
 8006444:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006446:	69a2      	ldr	r2, [r4, #24]
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <USB_HostInit+0xe8>)
 800644a:	4313      	orrs	r3, r2
 800644c:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 800644e:	2000      	movs	r0, #0
 8006450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006454:	b004      	add	sp, #16
 8006456:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800645c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8006460:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <USB_HostInit+0xec>)
 8006464:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006468:	e7e7      	b.n	800643a <USB_HostInit+0xb2>
 800646a:	bf00      	nop
 800646c:	00e00300 	.word	0x00e00300
 8006470:	a3200008 	.word	0xa3200008
 8006474:	004000e0 	.word	0x004000e0

08006478 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006478:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800647a:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800647e:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800648a:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800648e:	f001 0203 	and.w	r2, r1, #3
 8006492:	4313      	orrs	r3, r2
 8006494:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8006498:	2901      	cmp	r1, #1
 800649a:	d005      	beq.n	80064a8 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800649c:	2902      	cmp	r1, #2
 800649e:	d007      	beq.n	80064b0 <USB_InitFSLSPClkSel+0x38>
  {
    /* ... */
  }

  return HAL_OK;
}
 80064a0:	2000      	movs	r0, #0
 80064a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064a6:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 80064a8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80064ac:	6063      	str	r3, [r4, #4]
 80064ae:	e7f7      	b.n	80064a0 <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 80064b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80064b4:	6063      	str	r3, [r4, #4]
 80064b6:	e7f3      	b.n	80064a0 <USB_InitFSLSPClkSel+0x28>

080064b8 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064b8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80064bc:	6940      	ldr	r0, [r0, #20]
}
 80064be:	b280      	uxth	r0, r0
 80064c0:	4770      	bx	lr

080064c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064c2:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064c4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80064c8:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 80064cc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80064d0:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064d4:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064d8:	6885      	ldr	r5, [r0, #8]
 80064da:	f015 0f20 	tst.w	r5, #32
 80064de:	d002      	beq.n	80064e6 <USB_HC_Halt+0x24>
 80064e0:	0fe4      	lsrs	r4, r4, #31
 80064e2:	2c00      	cmp	r4, #0
 80064e4:	d055      	beq.n	8006592 <USB_HC_Halt+0xd0>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064e6:	b333      	cbz	r3, 8006536 <USB_HC_Halt+0x74>
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d024      	beq.n	8006536 <USB_HC_Halt+0x74>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064ec:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80064f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064f4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80064f8:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80064fc:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8006500:	d14a      	bne.n	8006598 <USB_HC_Halt+0xd6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006502:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8006506:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800650a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800650e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8006512:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006516:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800651a:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800651e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8006522:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      do
      {
        if (++count > 1000U)
 8006526:	3301      	adds	r3, #1
 8006528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800652c:	d831      	bhi.n	8006592 <USB_HC_Halt+0xd0>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800652e:	6811      	ldr	r1, [r2, #0]
 8006530:	2900      	cmp	r1, #0
 8006532:	dbf8      	blt.n	8006526 <USB_HC_Halt+0x64>
 8006534:	e02d      	b.n	8006592 <USB_HC_Halt+0xd0>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006536:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800653a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006542:	6883      	ldr	r3, [r0, #8]
 8006544:	f013 0f20 	tst.w	r3, #32
 8006548:	d123      	bne.n	8006592 <USB_HC_Halt+0xd0>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800654a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800654c:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8006550:	d119      	bne.n	8006586 <USB_HC_Halt+0xc4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006552:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8006556:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800655a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800655e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8006562:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006566:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800656a:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800656e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8006572:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
          if (++count > 1000U)
 8006576:	3301      	adds	r3, #1
 8006578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800657c:	d809      	bhi.n	8006592 <USB_HC_Halt+0xd0>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800657e:	6811      	ldr	r1, [r2, #0]
 8006580:	2900      	cmp	r1, #0
 8006582:	dbf8      	blt.n	8006576 <USB_HC_Halt+0xb4>
 8006584:	e005      	b.n	8006592 <USB_HC_Halt+0xd0>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006586:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800658a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800658e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8006592:	2000      	movs	r0, #0
 8006594:	bc30      	pop	{r4, r5}
 8006596:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006598:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800659c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80065a4:	e7f5      	b.n	8006592 <USB_HC_Halt+0xd0>

080065a6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a6:	f100 0308 	add.w	r3, r0, #8
 80065aa:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065ba:	4770      	bx	lr

080065bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065c0:	4770      	bx	lr

080065c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80065c2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065ca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065cc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065ce:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80065d0:	6803      	ldr	r3, [r0, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	6003      	str	r3, [r0, #0]
}
 80065d6:	4770      	bx	lr

080065d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065d8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065da:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80065e0:	d011      	beq.n	8006606 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065e2:	f100 0308 	add.w	r3, r0, #8
 80065e6:	461c      	mov	r4, r3
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	42aa      	cmp	r2, r5
 80065ee:	d9fa      	bls.n	80065e6 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065f4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065f6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80065f8:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065fa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80065fc:	6803      	ldr	r3, [r0, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	6003      	str	r3, [r0, #0]
}
 8006602:	bc30      	pop	{r4, r5}
 8006604:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006606:	6904      	ldr	r4, [r0, #16]
 8006608:	e7f2      	b.n	80065f0 <vListInsert+0x18>

0800660a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800660a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800660c:	6841      	ldr	r1, [r0, #4]
 800660e:	6882      	ldr	r2, [r0, #8]
 8006610:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006612:	6841      	ldr	r1, [r0, #4]
 8006614:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	4282      	cmp	r2, r0
 800661a:	d006      	beq.n	800662a <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800661c:	2200      	movs	r2, #0
 800661e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	3a01      	subs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006626:	6818      	ldr	r0, [r3, #0]
}
 8006628:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800662a:	6882      	ldr	r2, [r0, #8]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	e7f5      	b.n	800661c <uxListRemove+0x12>

08006630 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006630:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006632:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006634:	b118      	cbz	r0, 800663e <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800663e:	4770      	bx	lr

08006640 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006640:	b510      	push	{r4, lr}
 8006642:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006644:	f001 f8a6 	bl	8007794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006648:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800664a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800664c:	429a      	cmp	r2, r3
 800664e:	d004      	beq.n	800665a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8006650:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8006652:	f001 f8c1 	bl	80077d8 <vPortExitCritical>

	return xReturn;
}
 8006656:	4620      	mov	r0, r4
 8006658:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800665a:	2401      	movs	r4, #1
 800665c:	e7f9      	b.n	8006652 <prvIsQueueFull+0x12>

0800665e <prvIsQueueEmpty>:
{
 800665e:	b510      	push	{r4, lr}
 8006660:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006662:	f001 f897 	bl	8007794 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006668:	b923      	cbnz	r3, 8006674 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800666a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800666c:	f001 f8b4 	bl	80077d8 <vPortExitCritical>
}
 8006670:	4620      	mov	r0, r4
 8006672:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8006674:	2400      	movs	r4, #0
 8006676:	e7f9      	b.n	800666c <prvIsQueueEmpty+0xe>

08006678 <prvCopyDataToQueue>:
{
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	4604      	mov	r4, r0
 800667c:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800667e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006680:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006682:	b95a      	cbnz	r2, 800669c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006684:	6803      	ldr	r3, [r0, #0]
 8006686:	b11b      	cbz	r3, 8006690 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8006688:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800668a:	3601      	adds	r6, #1
 800668c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800668e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006690:	6880      	ldr	r0, [r0, #8]
 8006692:	f000 ff51 	bl	8007538 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	60a3      	str	r3, [r4, #8]
 800669a:	e7f6      	b.n	800668a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800669c:	b96d      	cbnz	r5, 80066ba <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800669e:	6840      	ldr	r0, [r0, #4]
 80066a0:	f001 faf0 	bl	8007c84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	4413      	add	r3, r2
 80066aa:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ac:	68a2      	ldr	r2, [r4, #8]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d319      	bcc.n	80066e6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80066b6:	4628      	mov	r0, r5
 80066b8:	e7e7      	b.n	800668a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066ba:	68c0      	ldr	r0, [r0, #12]
 80066bc:	f001 fae2 	bl	8007c84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80066c2:	4251      	negs	r1, r2
 80066c4:	68e3      	ldr	r3, [r4, #12]
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d202      	bcs.n	80066d6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066d0:	68a3      	ldr	r3, [r4, #8]
 80066d2:	440b      	add	r3, r1
 80066d4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80066d6:	2d02      	cmp	r5, #2
 80066d8:	d001      	beq.n	80066de <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80066da:	2000      	movs	r0, #0
 80066dc:	e7d5      	b.n	800668a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066de:	b126      	cbz	r6, 80066ea <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80066e0:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80066e2:	2000      	movs	r0, #0
 80066e4:	e7d1      	b.n	800668a <prvCopyDataToQueue+0x12>
 80066e6:	4628      	mov	r0, r5
 80066e8:	e7cf      	b.n	800668a <prvCopyDataToQueue+0x12>
 80066ea:	2000      	movs	r0, #0
 80066ec:	e7cd      	b.n	800668a <prvCopyDataToQueue+0x12>

080066ee <prvUnlockQueue>:
{
 80066ee:	b538      	push	{r3, r4, r5, lr}
 80066f0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80066f2:	f001 f84f 	bl	8007794 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80066f6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80066fa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066fc:	e003      	b.n	8006706 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80066fe:	f000 feaf 	bl	8007460 <vTaskMissedYield>
			--cTxLock;
 8006702:	3c01      	subs	r4, #1
 8006704:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006706:	2c00      	cmp	r4, #0
 8006708:	dd08      	ble.n	800671c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800670a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800670c:	b133      	cbz	r3, 800671c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800670e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006712:	f000 fe11 	bl	8007338 <xTaskRemoveFromEventList>
 8006716:	2800      	cmp	r0, #0
 8006718:	d0f3      	beq.n	8006702 <prvUnlockQueue+0x14>
 800671a:	e7f0      	b.n	80066fe <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800671c:	23ff      	movs	r3, #255	; 0xff
 800671e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006722:	f001 f859 	bl	80077d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006726:	f001 f835 	bl	8007794 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800672a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800672e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006730:	e003      	b.n	800673a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8006732:	f000 fe95 	bl	8007460 <vTaskMissedYield>
				--cRxLock;
 8006736:	3c01      	subs	r4, #1
 8006738:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800673a:	2c00      	cmp	r4, #0
 800673c:	dd08      	ble.n	8006750 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800673e:	692b      	ldr	r3, [r5, #16]
 8006740:	b133      	cbz	r3, 8006750 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006742:	f105 0010 	add.w	r0, r5, #16
 8006746:	f000 fdf7 	bl	8007338 <xTaskRemoveFromEventList>
 800674a:	2800      	cmp	r0, #0
 800674c:	d0f3      	beq.n	8006736 <prvUnlockQueue+0x48>
 800674e:	e7f0      	b.n	8006732 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8006750:	23ff      	movs	r3, #255	; 0xff
 8006752:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006756:	f001 f83f 	bl	80077d8 <vPortExitCritical>
}
 800675a:	bd38      	pop	{r3, r4, r5, pc}

0800675c <xQueueGenericReset>:
{
 800675c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800675e:	b1e0      	cbz	r0, 800679a <xQueueGenericReset+0x3e>
 8006760:	460d      	mov	r5, r1
 8006762:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006764:	f001 f816 	bl	8007794 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006768:	6821      	ldr	r1, [r4, #0]
 800676a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800676c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800676e:	fb03 1002 	mla	r0, r3, r2, r1
 8006772:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006774:	2000      	movs	r0, #0
 8006776:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006778:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800677a:	3a01      	subs	r2, #1
 800677c:	fb02 1303 	mla	r3, r2, r3, r1
 8006780:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006782:	23ff      	movs	r3, #255	; 0xff
 8006784:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006788:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800678c:	b9ed      	cbnz	r5, 80067ca <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	b963      	cbnz	r3, 80067ac <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8006792:	f001 f821 	bl	80077d8 <vPortExitCritical>
}
 8006796:	2001      	movs	r0, #1
 8006798:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80067aa:	e7fe      	b.n	80067aa <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ac:	f104 0010 	add.w	r0, r4, #16
 80067b0:	f000 fdc2 	bl	8007338 <xTaskRemoveFromEventList>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d0ec      	beq.n	8006792 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80067b8:	4b08      	ldr	r3, [pc, #32]	; (80067dc <xQueueGenericReset+0x80>)
 80067ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	e7e3      	b.n	8006792 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067ca:	f104 0010 	add.w	r0, r4, #16
 80067ce:	f7ff feea 	bl	80065a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067d6:	f7ff fee6 	bl	80065a6 <vListInitialise>
 80067da:	e7da      	b.n	8006792 <xQueueGenericReset+0x36>
 80067dc:	e000ed04 	.word	0xe000ed04

080067e0 <prvInitialiseNewQueue>:
{
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4603      	mov	r3, r0
 80067e4:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80067e6:	460c      	mov	r4, r1
 80067e8:	b931      	cbnz	r1, 80067f8 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067ea:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80067ec:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067ee:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067f0:	2101      	movs	r1, #1
 80067f2:	f7ff ffb3 	bl	800675c <xQueueGenericReset>
}
 80067f6:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067f8:	6002      	str	r2, [r0, #0]
 80067fa:	e7f7      	b.n	80067ec <prvInitialiseNewQueue+0xc>

080067fc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067fc:	b940      	cbnz	r0, 8006810 <xQueueGenericCreate+0x14>
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	e7fe      	b.n	800680e <xQueueGenericCreate+0x12>
	{
 8006810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006812:	b083      	sub	sp, #12
 8006814:	460d      	mov	r5, r1
 8006816:	4616      	mov	r6, r2
 8006818:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800681e:	3048      	adds	r0, #72	; 0x48
 8006820:	f001 f940 	bl	8007aa4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006824:	4604      	mov	r4, r0
 8006826:	b150      	cbz	r0, 800683e <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006828:	2300      	movs	r3, #0
 800682a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800682e:	9000      	str	r0, [sp, #0]
 8006830:	4633      	mov	r3, r6
 8006832:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8006836:	4629      	mov	r1, r5
 8006838:	4638      	mov	r0, r7
 800683a:	f7ff ffd1 	bl	80067e0 <prvInitialiseNewQueue>
	}
 800683e:	4620      	mov	r0, r4
 8006840:	b003      	add	sp, #12
 8006842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006844 <xQueueGenericSend>:
{
 8006844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006846:	b085      	sub	sp, #20
 8006848:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800684a:	b188      	cbz	r0, 8006870 <xQueueGenericSend+0x2c>
 800684c:	460e      	mov	r6, r1
 800684e:	461d      	mov	r5, r3
 8006850:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006852:	b1b1      	cbz	r1, 8006882 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006854:	2d02      	cmp	r5, #2
 8006856:	d120      	bne.n	800689a <xQueueGenericSend+0x56>
 8006858:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d01d      	beq.n	800689a <xQueueGenericSend+0x56>
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	e7fe      	b.n	800686e <xQueueGenericSend+0x2a>
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006880:	e7fe      	b.n	8006880 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006882:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0e5      	beq.n	8006854 <xQueueGenericSend+0x10>
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	e7fe      	b.n	8006898 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800689a:	f000 fde7 	bl	800746c <xTaskGetSchedulerState>
 800689e:	4607      	mov	r7, r0
 80068a0:	b958      	cbnz	r0, 80068ba <xQueueGenericSend+0x76>
 80068a2:	9b01      	ldr	r3, [sp, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d044      	beq.n	8006932 <xQueueGenericSend+0xee>
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	e7fe      	b.n	80068b8 <xQueueGenericSend+0x74>
 80068ba:	2700      	movs	r7, #0
 80068bc:	e039      	b.n	8006932 <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068be:	462a      	mov	r2, r5
 80068c0:	4631      	mov	r1, r6
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff fed8 	bl	8006678 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068ca:	b96a      	cbnz	r2, 80068e8 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 80068cc:	b138      	cbz	r0, 80068de <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 80068ce:	4b3c      	ldr	r3, [pc, #240]	; (80069c0 <xQueueGenericSend+0x17c>)
 80068d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80068de:	f000 ff7b 	bl	80077d8 <vPortExitCritical>
				return pdPASS;
 80068e2:	2001      	movs	r0, #1
}
 80068e4:	b005      	add	sp, #20
 80068e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80068ec:	f000 fd24 	bl	8007338 <xTaskRemoveFromEventList>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d0f4      	beq.n	80068de <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 80068f4:	4b32      	ldr	r3, [pc, #200]	; (80069c0 <xQueueGenericSend+0x17c>)
 80068f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	e7eb      	b.n	80068de <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 8006906:	f000 ff67 	bl	80077d8 <vPortExitCritical>
					return errQUEUE_FULL;
 800690a:	2000      	movs	r0, #0
 800690c:	e7ea      	b.n	80068e4 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800690e:	a802      	add	r0, sp, #8
 8006910:	f000 fd58 	bl	80073c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006914:	2701      	movs	r7, #1
 8006916:	e019      	b.n	800694c <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 8006918:	2300      	movs	r3, #0
 800691a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800691e:	e021      	b.n	8006964 <xQueueGenericSend+0x120>
 8006920:	2300      	movs	r3, #0
 8006922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006926:	e023      	b.n	8006970 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 8006928:	4620      	mov	r0, r4
 800692a:	f7ff fee0 	bl	80066ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800692e:	f000 fbe5 	bl	80070fc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006932:	f000 ff2f 	bl	8007794 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800693a:	429a      	cmp	r2, r3
 800693c:	d3bf      	bcc.n	80068be <xQueueGenericSend+0x7a>
 800693e:	2d02      	cmp	r5, #2
 8006940:	d0bd      	beq.n	80068be <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006942:	9b01      	ldr	r3, [sp, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0de      	beq.n	8006906 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 8006948:	2f00      	cmp	r7, #0
 800694a:	d0e0      	beq.n	800690e <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 800694c:	f000 ff44 	bl	80077d8 <vPortExitCritical>
		vTaskSuspendAll();
 8006950:	f000 fb40 	bl	8006fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006954:	f000 ff1e 	bl	8007794 <vPortEnterCritical>
 8006958:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800695c:	b25b      	sxtb	r3, r3
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d0d9      	beq.n	8006918 <xQueueGenericSend+0xd4>
 8006964:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006968:	b25b      	sxtb	r3, r3
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d0d7      	beq.n	8006920 <xQueueGenericSend+0xdc>
 8006970:	f000 ff32 	bl	80077d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006974:	a901      	add	r1, sp, #4
 8006976:	a802      	add	r0, sp, #8
 8006978:	f000 fd30 	bl	80073dc <xTaskCheckForTimeOut>
 800697c:	b9c8      	cbnz	r0, 80069b2 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff fe5e 	bl	8006640 <prvIsQueueFull>
 8006984:	2800      	cmp	r0, #0
 8006986:	d0cf      	beq.n	8006928 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006988:	9901      	ldr	r1, [sp, #4]
 800698a:	f104 0010 	add.w	r0, r4, #16
 800698e:	f000 fcbb 	bl	8007308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff feab 	bl	80066ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006998:	f000 fbb0 	bl	80070fc <xTaskResumeAll>
 800699c:	2800      	cmp	r0, #0
 800699e:	d1c8      	bne.n	8006932 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <xQueueGenericSend+0x17c>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	e7bf      	b.n	8006932 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 80069b2:	4620      	mov	r0, r4
 80069b4:	f7ff fe9b 	bl	80066ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069b8:	f000 fba0 	bl	80070fc <xTaskResumeAll>
			return errQUEUE_FULL;
 80069bc:	2000      	movs	r0, #0
 80069be:	e791      	b.n	80068e4 <xQueueGenericSend+0xa0>
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <xQueueSemaphoreTake>:
{
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80069ca:	b158      	cbz	r0, 80069e4 <xQueueSemaphoreTake+0x20>
 80069cc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80069ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80069d0:	b18b      	cbz	r3, 80069f6 <xQueueSemaphoreTake+0x32>
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	e7fe      	b.n	80069e2 <xQueueSemaphoreTake+0x1e>
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80069f4:	e7fe      	b.n	80069f4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f6:	f000 fd39 	bl	800746c <xTaskGetSchedulerState>
 80069fa:	4606      	mov	r6, r0
 80069fc:	b950      	cbnz	r0, 8006a14 <xQueueSemaphoreTake+0x50>
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	b15b      	cbz	r3, 8006a1a <xQueueSemaphoreTake+0x56>
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	e7fe      	b.n	8006a12 <xQueueSemaphoreTake+0x4e>
 8006a14:	2500      	movs	r5, #0
 8006a16:	462e      	mov	r6, r5
 8006a18:	e053      	b.n	8006ac2 <xQueueSemaphoreTake+0xfe>
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	e051      	b.n	8006ac2 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	b13b      	cbz	r3, 8006a36 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	b94b      	cbnz	r3, 8006a3e <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8006a2a:	f000 fed5 	bl	80077d8 <vPortExitCritical>
				return pdPASS;
 8006a2e:	2501      	movs	r5, #1
}
 8006a30:	4628      	mov	r0, r5
 8006a32:	b004      	add	sp, #16
 8006a34:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a36:	f000 fe35 	bl	80076a4 <pvTaskIncrementMutexHeldCount>
 8006a3a:	60a0      	str	r0, [r4, #8]
 8006a3c:	e7f3      	b.n	8006a26 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a3e:	f104 0010 	add.w	r0, r4, #16
 8006a42:	f000 fc79 	bl	8007338 <xTaskRemoveFromEventList>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d0ef      	beq.n	8006a2a <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8006a4a:	4b46      	ldr	r3, [pc, #280]	; (8006b64 <xQueueSemaphoreTake+0x1a0>)
 8006a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	e7e6      	b.n	8006a2a <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a5c:	b145      	cbz	r5, 8006a70 <xQueueSemaphoreTake+0xac>
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	e7fe      	b.n	8006a6e <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 8006a70:	f000 feb2 	bl	80077d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006a74:	e7dc      	b.n	8006a30 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a76:	a802      	add	r0, sp, #8
 8006a78:	f000 fca4 	bl	80073c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a7c:	2601      	movs	r6, #1
 8006a7e:	e02a      	b.n	8006ad6 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 8006a80:	2300      	movs	r3, #0
 8006a82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006a86:	e032      	b.n	8006aee <xQueueSemaphoreTake+0x12a>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a8e:	e034      	b.n	8006afa <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 8006a90:	f000 fe80 	bl	8007794 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a94:	68a0      	ldr	r0, [r4, #8]
 8006a96:	f000 fcf9 	bl	800748c <xTaskPriorityInherit>
 8006a9a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8006a9c:	f000 fe9c 	bl	80077d8 <vPortExitCritical>
 8006aa0:	e03b      	b.n	8006b1a <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff fe23 	bl	80066ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aa8:	f000 fb28 	bl	80070fc <xTaskResumeAll>
 8006aac:	e009      	b.n	8006ac2 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f7ff fe1d 	bl	80066ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ab4:	f000 fb22 	bl	80070fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7ff fdd0 	bl	800665e <prvIsQueueEmpty>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d140      	bne.n	8006b44 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 8006ac2:	f000 fe67 	bl	8007794 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1a8      	bne.n	8006a1e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0c4      	beq.n	8006a5c <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8006ad2:	2e00      	cmp	r6, #0
 8006ad4:	d0cf      	beq.n	8006a76 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 8006ad6:	f000 fe7f 	bl	80077d8 <vPortExitCritical>
		vTaskSuspendAll();
 8006ada:	f000 fa7b 	bl	8006fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ade:	f000 fe59 	bl	8007794 <vPortEnterCritical>
 8006ae2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d0c8      	beq.n	8006a80 <xQueueSemaphoreTake+0xbc>
 8006aee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d0c6      	beq.n	8006a88 <xQueueSemaphoreTake+0xc4>
 8006afa:	f000 fe6d 	bl	80077d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006afe:	a901      	add	r1, sp, #4
 8006b00:	a802      	add	r0, sp, #8
 8006b02:	f000 fc6b 	bl	80073dc <xTaskCheckForTimeOut>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d1d1      	bne.n	8006aae <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f7ff fda7 	bl	800665e <prvIsQueueEmpty>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d0c6      	beq.n	8006aa2 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0ba      	beq.n	8006a90 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b1a:	9901      	ldr	r1, [sp, #4]
 8006b1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006b20:	f000 fbf2 	bl	8007308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7ff fde2 	bl	80066ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b2a:	f000 fae7 	bl	80070fc <xTaskResumeAll>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d1c7      	bne.n	8006ac2 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <xQueueSemaphoreTake+0x1a0>)
 8006b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	e7be      	b.n	8006ac2 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8006b44:	b90d      	cbnz	r5, 8006b4a <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 8006b46:	2500      	movs	r5, #0
 8006b48:	e772      	b.n	8006a30 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8006b4a:	f000 fe23 	bl	8007794 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f7ff fd6e 	bl	8006630 <prvGetDisinheritPriorityAfterTimeout>
 8006b54:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b56:	68a0      	ldr	r0, [r4, #8]
 8006b58:	f000 fd48 	bl	80075ec <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006b5c:	f000 fe3c 	bl	80077d8 <vPortExitCritical>
 8006b60:	e7f1      	b.n	8006b46 <xQueueSemaphoreTake+0x182>
 8006b62:	bf00      	nop
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b68:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <prvResetNextTaskUnblockTime+0x24>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	b923      	cbnz	r3, 8006b7a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <prvResetNextTaskUnblockTime+0x28>)
 8006b72:	f04f 32ff 	mov.w	r2, #4294967295
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7a:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <prvResetNextTaskUnblockTime+0x24>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <prvResetNextTaskUnblockTime+0x28>)
 8006b86:	601a      	str	r2, [r3, #0]
	}
}
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20000448 	.word	0x20000448
 8006b90:	20000518 	.word	0x20000518

08006b94 <prvInitialiseNewTask>:
{
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	4680      	mov	r8, r0
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	4617      	mov	r7, r2
 8006b9e:	4699      	mov	r9, r3
 8006ba0:	9e08      	ldr	r6, [sp, #32]
 8006ba2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006ba6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ba8:	0092      	lsls	r2, r2, #2
 8006baa:	21a5      	movs	r1, #165	; 0xa5
 8006bac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006bae:	f001 f877 	bl	8007ca0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bb4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8006bb8:	3a01      	subs	r2, #1
 8006bba:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bbe:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8006bc2:	b38d      	cbz	r5, 8006c28 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2a0f      	cmp	r2, #15
 8006bc8:	d807      	bhi.n	8006bda <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bca:	5ca9      	ldrb	r1, [r5, r2]
 8006bcc:	18a3      	adds	r3, r4, r2
 8006bce:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8006bd2:	5cab      	ldrb	r3, [r5, r2]
 8006bd4:	b10b      	cbz	r3, 8006bda <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd6:	3201      	adds	r2, #1
 8006bd8:	e7f5      	b.n	8006bc6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006be0:	2e06      	cmp	r6, #6
 8006be2:	d900      	bls.n	8006be6 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006be4:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8006be6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006be8:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bea:	2500      	movs	r5, #0
 8006bec:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bee:	1d20      	adds	r0, r4, #4
 8006bf0:	f7ff fce4 	bl	80065bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bf4:	f104 0018 	add.w	r0, r4, #24
 8006bf8:	f7ff fce0 	bl	80065bc <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bfc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfe:	f1c6 0607 	rsb	r6, r6, #7
 8006c02:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c04:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8006c06:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8006c08:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c0a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c0e:	464a      	mov	r2, r9
 8006c10:	4641      	mov	r1, r8
 8006c12:	4638      	mov	r0, r7
 8006c14:	f000 fd92 	bl	800773c <pxPortInitialiseStack>
 8006c18:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006c1a:	f1ba 0f00 	cmp.w	sl, #0
 8006c1e:	d001      	beq.n	8006c24 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c20:	f8ca 4000 	str.w	r4, [sl]
}
 8006c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8006c2e:	e7d7      	b.n	8006be0 <prvInitialiseNewTask+0x4c>

08006c30 <prvInitialiseTaskLists>:
{
 8006c30:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c32:	2400      	movs	r4, #0
 8006c34:	e007      	b.n	8006c46 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c36:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006c3a:	0093      	lsls	r3, r2, #2
 8006c3c:	480e      	ldr	r0, [pc, #56]	; (8006c78 <prvInitialiseTaskLists+0x48>)
 8006c3e:	4418      	add	r0, r3
 8006c40:	f7ff fcb1 	bl	80065a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c44:	3401      	adds	r4, #1
 8006c46:	2c06      	cmp	r4, #6
 8006c48:	d9f5      	bls.n	8006c36 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006c4a:	4d0c      	ldr	r5, [pc, #48]	; (8006c7c <prvInitialiseTaskLists+0x4c>)
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f7ff fcaa 	bl	80065a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c52:	4c0b      	ldr	r4, [pc, #44]	; (8006c80 <prvInitialiseTaskLists+0x50>)
 8006c54:	4620      	mov	r0, r4
 8006c56:	f7ff fca6 	bl	80065a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c5a:	480a      	ldr	r0, [pc, #40]	; (8006c84 <prvInitialiseTaskLists+0x54>)
 8006c5c:	f7ff fca3 	bl	80065a6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006c60:	4809      	ldr	r0, [pc, #36]	; (8006c88 <prvInitialiseTaskLists+0x58>)
 8006c62:	f7ff fca0 	bl	80065a6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006c66:	4809      	ldr	r0, [pc, #36]	; (8006c8c <prvInitialiseTaskLists+0x5c>)
 8006c68:	f7ff fc9d 	bl	80065a6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c6c:	4b08      	ldr	r3, [pc, #32]	; (8006c90 <prvInitialiseTaskLists+0x60>)
 8006c6e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c70:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <prvInitialiseTaskLists+0x64>)
 8006c72:	601c      	str	r4, [r3, #0]
}
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	bf00      	nop
 8006c78:	20000450 	.word	0x20000450
 8006c7c:	200004f0 	.word	0x200004f0
 8006c80:	20000504 	.word	0x20000504
 8006c84:	20000524 	.word	0x20000524
 8006c88:	20000550 	.word	0x20000550
 8006c8c:	2000053c 	.word	0x2000053c
 8006c90:	20000448 	.word	0x20000448
 8006c94:	2000044c 	.word	0x2000044c

08006c98 <prvAddNewTaskToReadyList>:
{
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006c9c:	f000 fd7a 	bl	8007794 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006ca0:	4a20      	ldr	r2, [pc, #128]	; (8006d24 <prvAddNewTaskToReadyList+0x8c>)
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ca8:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <prvAddNewTaskToReadyList+0x90>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	b15b      	cbz	r3, 8006cc6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8006cae:	4b1f      	ldr	r3, [pc, #124]	; (8006d2c <prvAddNewTaskToReadyList+0x94>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	b96b      	cbnz	r3, 8006cd0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cb4:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <prvAddNewTaskToReadyList+0x90>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d807      	bhi.n	8006cd0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006cc0:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <prvAddNewTaskToReadyList+0x90>)
 8006cc2:	601c      	str	r4, [r3, #0]
 8006cc4:	e004      	b.n	8006cd0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006cc6:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <prvAddNewTaskToReadyList+0x90>)
 8006cc8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d026      	beq.n	8006d1e <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8006cd0:	4a17      	ldr	r2, [pc, #92]	; (8006d30 <prvAddNewTaskToReadyList+0x98>)
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006cd8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4083      	lsls	r3, r0
 8006cde:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <prvAddNewTaskToReadyList+0x9c>)
 8006ce0:	6811      	ldr	r1, [r2, #0]
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cea:	1d21      	adds	r1, r4, #4
 8006cec:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <prvAddNewTaskToReadyList+0xa0>)
 8006cee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006cf2:	f7ff fc66 	bl	80065c2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006cf6:	f000 fd6f 	bl	80077d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006cfa:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <prvAddNewTaskToReadyList+0x94>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	b16b      	cbz	r3, 8006d1c <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d00:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <prvAddNewTaskToReadyList+0x90>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d207      	bcs.n	8006d1c <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <prvAddNewTaskToReadyList+0xa4>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	f3bf 8f6f 	isb	sy
}
 8006d1c:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006d1e:	f7ff ff87 	bl	8006c30 <prvInitialiseTaskLists>
 8006d22:	e7d5      	b.n	8006cd0 <prvAddNewTaskToReadyList+0x38>
 8006d24:	200004dc 	.word	0x200004dc
 8006d28:	20000444 	.word	0x20000444
 8006d2c:	20000538 	.word	0x20000538
 8006d30:	200004e8 	.word	0x200004e8
 8006d34:	200004ec 	.word	0x200004ec
 8006d38:	20000450 	.word	0x20000450
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <prvDeleteTCB>:
	{
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d44:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8006d48:	b163      	cbz	r3, 8006d64 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d011      	beq.n	8006d72 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d00e      	beq.n	8006d70 <prvDeleteTCB+0x30>
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	e7fe      	b.n	8006d62 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006d64:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006d66:	f000 ff25 	bl	8007bb4 <vPortFree>
				vPortFree( pxTCB );
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 ff22 	bl	8007bb4 <vPortFree>
	}
 8006d70:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006d72:	f000 ff1f 	bl	8007bb4 <vPortFree>
 8006d76:	e7fb      	b.n	8006d70 <prvDeleteTCB+0x30>

08006d78 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d78:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <prvCheckTasksWaitingTermination+0x40>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	b1d3      	cbz	r3, 8006db4 <prvCheckTasksWaitingTermination+0x3c>
{
 8006d7e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006d80:	f000 fd08 	bl	8007794 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d84:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <prvCheckTasksWaitingTermination+0x44>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d8a:	1d20      	adds	r0, r4, #4
 8006d8c:	f7ff fc3d 	bl	800660a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d90:	4a0b      	ldr	r2, [pc, #44]	; (8006dc0 <prvCheckTasksWaitingTermination+0x48>)
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d98:	4a07      	ldr	r2, [pc, #28]	; (8006db8 <prvCheckTasksWaitingTermination+0x40>)
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006da0:	f000 fd1a 	bl	80077d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7ff ffcb 	bl	8006d40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006daa:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <prvCheckTasksWaitingTermination+0x40>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e6      	bne.n	8006d80 <prvCheckTasksWaitingTermination+0x8>
}
 8006db2:	bd10      	pop	{r4, pc}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	200004e0 	.word	0x200004e0
 8006dbc:	20000550 	.word	0x20000550
 8006dc0:	200004dc 	.word	0x200004dc

08006dc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006dcc:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dce:	4b1d      	ldr	r3, [pc, #116]	; (8006e44 <prvAddCurrentTaskToDelayedList+0x80>)
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	3004      	adds	r0, #4
 8006dd4:	f7ff fc19 	bl	800660a <uxListRemove>
 8006dd8:	b950      	cbnz	r0, 8006df0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006dda:	4b1a      	ldr	r3, [pc, #104]	; (8006e44 <prvAddCurrentTaskToDelayedList+0x80>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	2301      	movs	r3, #1
 8006de2:	fa03 f202 	lsl.w	r2, r3, r2
 8006de6:	4918      	ldr	r1, [pc, #96]	; (8006e48 <prvAddCurrentTaskToDelayedList+0x84>)
 8006de8:	680b      	ldr	r3, [r1, #0]
 8006dea:	ea23 0302 	bic.w	r3, r3, r2
 8006dee:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006df0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006df4:	d00d      	beq.n	8006e12 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006df6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006df8:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <prvAddCurrentTaskToDelayedList+0x80>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006dfe:	42a6      	cmp	r6, r4
 8006e00:	d910      	bls.n	8006e24 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <prvAddCurrentTaskToDelayedList+0x88>)
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <prvAddCurrentTaskToDelayedList+0x80>)
 8006e08:	6819      	ldr	r1, [r3, #0]
 8006e0a:	3104      	adds	r1, #4
 8006e0c:	f7ff fbe4 	bl	80065d8 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e12:	2d00      	cmp	r5, #0
 8006e14:	d0ef      	beq.n	8006df6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <prvAddCurrentTaskToDelayedList+0x80>)
 8006e18:	6819      	ldr	r1, [r3, #0]
 8006e1a:	3104      	adds	r1, #4
 8006e1c:	480c      	ldr	r0, [pc, #48]	; (8006e50 <prvAddCurrentTaskToDelayedList+0x8c>)
 8006e1e:	f7ff fbd0 	bl	80065c2 <vListInsertEnd>
 8006e22:	e7f5      	b.n	8006e10 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <prvAddCurrentTaskToDelayedList+0x80>)
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	3104      	adds	r1, #4
 8006e2e:	f7ff fbd3 	bl	80065d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	d9ea      	bls.n	8006e10 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e3c:	601c      	str	r4, [r3, #0]
}
 8006e3e:	e7e7      	b.n	8006e10 <prvAddCurrentTaskToDelayedList+0x4c>
 8006e40:	20000564 	.word	0x20000564
 8006e44:	20000444 	.word	0x20000444
 8006e48:	200004ec 	.word	0x200004ec
 8006e4c:	2000044c 	.word	0x2000044c
 8006e50:	2000053c 	.word	0x2000053c
 8006e54:	20000448 	.word	0x20000448
 8006e58:	20000518 	.word	0x20000518

08006e5c <prvIdleTask>:
{
 8006e5c:	b508      	push	{r3, lr}
 8006e5e:	e009      	b.n	8006e74 <prvIdleTask+0x18>
				taskYIELD();
 8006e60:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <prvIdleTask+0x28>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8006e70:	f7fa fd04 	bl	800187c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006e74:	f7ff ff80 	bl	8006d78 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e78:	4b03      	ldr	r3, [pc, #12]	; (8006e88 <prvIdleTask+0x2c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d8ef      	bhi.n	8006e60 <prvIdleTask+0x4>
 8006e80:	e7f6      	b.n	8006e70 <prvIdleTask+0x14>
 8006e82:	bf00      	nop
 8006e84:	e000ed04 	.word	0xe000ed04
 8006e88:	20000450 	.word	0x20000450

08006e8c <xTaskCreateStatic>:
	{
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006e92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006e94:	b175      	cbz	r5, 8006eb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e96:	b1b4      	cbz	r4, 8006ec6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e98:	2658      	movs	r6, #88	; 0x58
 8006e9a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e9c:	9e04      	ldr	r6, [sp, #16]
 8006e9e:	2e58      	cmp	r6, #88	; 0x58
 8006ea0:	d01a      	beq.n	8006ed8 <xTaskCreateStatic+0x4c>
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	e7fe      	b.n	8006eb2 <xTaskCreateStatic+0x26>
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006ec4:	e7fe      	b.n	8006ec4 <xTaskCreateStatic+0x38>
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006ed6:	e7fe      	b.n	8006ed6 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ed8:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006eda:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006edc:	2502      	movs	r5, #2
 8006ede:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	9503      	str	r5, [sp, #12]
 8006ee6:	9402      	str	r4, [sp, #8]
 8006ee8:	ad05      	add	r5, sp, #20
 8006eea:	9501      	str	r5, [sp, #4]
 8006eec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006eee:	9500      	str	r5, [sp, #0]
 8006ef0:	f7ff fe50 	bl	8006b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f7ff fecf 	bl	8006c98 <prvAddNewTaskToReadyList>
	}
 8006efa:	9805      	ldr	r0, [sp, #20]
 8006efc:	b006      	add	sp, #24
 8006efe:	bd70      	pop	{r4, r5, r6, pc}

08006f00 <xTaskCreate>:
	{
 8006f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f04:	b085      	sub	sp, #20
 8006f06:	4607      	mov	r7, r0
 8006f08:	4688      	mov	r8, r1
 8006f0a:	4614      	mov	r4, r2
 8006f0c:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f0e:	0090      	lsls	r0, r2, #2
 8006f10:	f000 fdc8 	bl	8007aa4 <pvPortMalloc>
			if( pxStack != NULL )
 8006f14:	b300      	cbz	r0, 8006f58 <xTaskCreate+0x58>
 8006f16:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f18:	2058      	movs	r0, #88	; 0x58
 8006f1a:	f000 fdc3 	bl	8007aa4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006f1e:	4605      	mov	r5, r0
 8006f20:	b1b0      	cbz	r0, 8006f50 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8006f22:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006f26:	b1e5      	cbz	r5, 8006f62 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f2e:	9303      	str	r3, [sp, #12]
 8006f30:	9502      	str	r5, [sp, #8]
 8006f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	4633      	mov	r3, r6
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	4641      	mov	r1, r8
 8006f40:	4638      	mov	r0, r7
 8006f42:	f7ff fe27 	bl	8006b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f46:	4628      	mov	r0, r5
 8006f48:	f7ff fea6 	bl	8006c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	e005      	b.n	8006f5c <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8006f50:	4648      	mov	r0, r9
 8006f52:	f000 fe2f 	bl	8007bb4 <vPortFree>
 8006f56:	e7e6      	b.n	8006f26 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006f5c:	b005      	add	sp, #20
 8006f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006f66:	e7f9      	b.n	8006f5c <xTaskCreate+0x5c>

08006f68 <vTaskStartScheduler>:
{
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f6c:	2400      	movs	r4, #0
 8006f6e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f70:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f72:	aa07      	add	r2, sp, #28
 8006f74:	a906      	add	r1, sp, #24
 8006f76:	a805      	add	r0, sp, #20
 8006f78:	f7fa fc84 	bl	8001884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f7c:	9b05      	ldr	r3, [sp, #20]
 8006f7e:	9302      	str	r3, [sp, #8]
 8006f80:	9b06      	ldr	r3, [sp, #24]
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	9400      	str	r4, [sp, #0]
 8006f86:	4623      	mov	r3, r4
 8006f88:	9a07      	ldr	r2, [sp, #28]
 8006f8a:	490d      	ldr	r1, [pc, #52]	; (8006fc0 <vTaskStartScheduler+0x58>)
 8006f8c:	480d      	ldr	r0, [pc, #52]	; (8006fc4 <vTaskStartScheduler+0x5c>)
 8006f8e:	f7ff ff7d 	bl	8006e8c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006f92:	b190      	cbz	r0, 8006fba <vTaskStartScheduler+0x52>
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fa4:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <vTaskStartScheduler+0x60>)
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006faa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fac:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <vTaskStartScheduler+0x64>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <vTaskStartScheduler+0x68>)
 8006fb4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006fb6:	f000 fc8f 	bl	80078d8 <xPortStartScheduler>
}
 8006fba:	b008      	add	sp, #32
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	bf00      	nop
 8006fc0:	0800ac98 	.word	0x0800ac98
 8006fc4:	08006e5d 	.word	0x08006e5d
 8006fc8:	20000518 	.word	0x20000518
 8006fcc:	20000538 	.word	0x20000538
 8006fd0:	20000564 	.word	0x20000564

08006fd4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006fd4:	4a02      	ldr	r2, [pc, #8]	; (8006fe0 <vTaskSuspendAll+0xc>)
 8006fd6:	6813      	ldr	r3, [r2, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	6013      	str	r3, [r2, #0]
}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	200004e4 	.word	0x200004e4

08006fe4 <xTaskIncrementTick>:
{
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe6:	4b3a      	ldr	r3, [pc, #232]	; (80070d0 <xTaskIncrementTick+0xec>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d169      	bne.n	80070c2 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fee:	4b39      	ldr	r3, [pc, #228]	; (80070d4 <xTaskIncrementTick+0xf0>)
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006ff4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ff6:	b9c5      	cbnz	r5, 800702a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006ff8:	4b37      	ldr	r3, [pc, #220]	; (80070d8 <xTaskIncrementTick+0xf4>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	b143      	cbz	r3, 8007012 <xTaskIncrementTick+0x2e>
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	e7fe      	b.n	8007010 <xTaskIncrementTick+0x2c>
 8007012:	4a31      	ldr	r2, [pc, #196]	; (80070d8 <xTaskIncrementTick+0xf4>)
 8007014:	6811      	ldr	r1, [r2, #0]
 8007016:	4b31      	ldr	r3, [pc, #196]	; (80070dc <xTaskIncrementTick+0xf8>)
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	6010      	str	r0, [r2, #0]
 800701c:	6019      	str	r1, [r3, #0]
 800701e:	4a30      	ldr	r2, [pc, #192]	; (80070e0 <xTaskIncrementTick+0xfc>)
 8007020:	6813      	ldr	r3, [r2, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	f7ff fd9f 	bl	8006b68 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800702a:	4b2e      	ldr	r3, [pc, #184]	; (80070e4 <xTaskIncrementTick+0x100>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	42ab      	cmp	r3, r5
 8007030:	d93d      	bls.n	80070ae <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8007032:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007034:	4b2c      	ldr	r3, [pc, #176]	; (80070e8 <xTaskIncrementTick+0x104>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800703e:	009a      	lsls	r2, r3, #2
 8007040:	4b2a      	ldr	r3, [pc, #168]	; (80070ec <xTaskIncrementTick+0x108>)
 8007042:	589b      	ldr	r3, [r3, r2]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d900      	bls.n	800704a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8007048:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 800704a:	4b29      	ldr	r3, [pc, #164]	; (80070f0 <xTaskIncrementTick+0x10c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03c      	beq.n	80070cc <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8007052:	2401      	movs	r4, #1
	return xSwitchRequired;
 8007054:	e03a      	b.n	80070cc <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8007056:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007058:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <xTaskIncrementTick+0xf4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	b343      	cbz	r3, 80070b2 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007060:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <xTaskIncrementTick+0xf4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007068:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800706a:	429d      	cmp	r5, r3
 800706c:	d326      	bcc.n	80070bc <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800706e:	1d37      	adds	r7, r6, #4
 8007070:	4638      	mov	r0, r7
 8007072:	f7ff faca 	bl	800660a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007076:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007078:	b11b      	cbz	r3, 8007082 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800707a:	f106 0018 	add.w	r0, r6, #24
 800707e:	f7ff fac4 	bl	800660a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007082:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007084:	2201      	movs	r2, #1
 8007086:	409a      	lsls	r2, r3
 8007088:	491a      	ldr	r1, [pc, #104]	; (80070f4 <xTaskIncrementTick+0x110>)
 800708a:	6808      	ldr	r0, [r1, #0]
 800708c:	4302      	orrs	r2, r0
 800708e:	600a      	str	r2, [r1, #0]
 8007090:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007094:	009a      	lsls	r2, r3, #2
 8007096:	4639      	mov	r1, r7
 8007098:	4814      	ldr	r0, [pc, #80]	; (80070ec <xTaskIncrementTick+0x108>)
 800709a:	4410      	add	r0, r2
 800709c:	f7ff fa91 	bl	80065c2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070a0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <xTaskIncrementTick+0x104>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d2d4      	bcs.n	8007056 <xTaskIncrementTick+0x72>
 80070ac:	e7d4      	b.n	8007058 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80070ae:	2400      	movs	r4, #0
 80070b0:	e7d2      	b.n	8007058 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b2:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <xTaskIncrementTick+0x100>)
 80070b4:	f04f 32ff 	mov.w	r2, #4294967295
 80070b8:	601a      	str	r2, [r3, #0]
					break;
 80070ba:	e7bb      	b.n	8007034 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80070bc:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <xTaskIncrementTick+0x100>)
 80070be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070c0:	e7b8      	b.n	8007034 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80070c2:	4a0d      	ldr	r2, [pc, #52]	; (80070f8 <xTaskIncrementTick+0x114>)
 80070c4:	6813      	ldr	r3, [r2, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80070ca:	2400      	movs	r4, #0
}
 80070cc:	4620      	mov	r0, r4
 80070ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d0:	200004e4 	.word	0x200004e4
 80070d4:	20000564 	.word	0x20000564
 80070d8:	20000448 	.word	0x20000448
 80070dc:	2000044c 	.word	0x2000044c
 80070e0:	2000051c 	.word	0x2000051c
 80070e4:	20000518 	.word	0x20000518
 80070e8:	20000444 	.word	0x20000444
 80070ec:	20000450 	.word	0x20000450
 80070f0:	20000568 	.word	0x20000568
 80070f4:	200004ec 	.word	0x200004ec
 80070f8:	20000520 	.word	0x20000520

080070fc <xTaskResumeAll>:
{
 80070fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80070fe:	4b34      	ldr	r3, [pc, #208]	; (80071d0 <xTaskResumeAll+0xd4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	b943      	cbnz	r3, 8007116 <xTaskResumeAll+0x1a>
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	e7fe      	b.n	8007114 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8007116:	f000 fb3d 	bl	8007794 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800711a:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <xTaskResumeAll+0xd4>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	3a01      	subs	r2, #1
 8007120:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d14d      	bne.n	80071c4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007128:	4b2a      	ldr	r3, [pc, #168]	; (80071d4 <xTaskResumeAll+0xd8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	b90b      	cbnz	r3, 8007132 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800712e:	2400      	movs	r4, #0
 8007130:	e049      	b.n	80071c6 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 8007132:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007134:	4b28      	ldr	r3, [pc, #160]	; (80071d8 <xTaskResumeAll+0xdc>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	b31b      	cbz	r3, 8007182 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713a:	4b27      	ldr	r3, [pc, #156]	; (80071d8 <xTaskResumeAll+0xdc>)
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007140:	f104 0018 	add.w	r0, r4, #24
 8007144:	f7ff fa61 	bl	800660a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007148:	1d25      	adds	r5, r4, #4
 800714a:	4628      	mov	r0, r5
 800714c:	f7ff fa5d 	bl	800660a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007150:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007152:	2301      	movs	r3, #1
 8007154:	4083      	lsls	r3, r0
 8007156:	4a21      	ldr	r2, [pc, #132]	; (80071dc <xTaskResumeAll+0xe0>)
 8007158:	6811      	ldr	r1, [r2, #0]
 800715a:	430b      	orrs	r3, r1
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007162:	4629      	mov	r1, r5
 8007164:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <xTaskResumeAll+0xe4>)
 8007166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800716a:	f7ff fa2a 	bl	80065c2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800716e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007170:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <xTaskResumeAll+0xe8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	429a      	cmp	r2, r3
 8007178:	d3dc      	bcc.n	8007134 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800717a:	4b1b      	ldr	r3, [pc, #108]	; (80071e8 <xTaskResumeAll+0xec>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e7d8      	b.n	8007134 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8007182:	b10c      	cbz	r4, 8007188 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8007184:	f7ff fcf0 	bl	8006b68 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007188:	4b18      	ldr	r3, [pc, #96]	; (80071ec <xTaskResumeAll+0xf0>)
 800718a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800718c:	b974      	cbnz	r4, 80071ac <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 800718e:	4b16      	ldr	r3, [pc, #88]	; (80071e8 <xTaskResumeAll+0xec>)
 8007190:	681c      	ldr	r4, [r3, #0]
 8007192:	b1c4      	cbz	r4, 80071c6 <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8007194:	4b16      	ldr	r3, [pc, #88]	; (80071f0 <xTaskResumeAll+0xf4>)
 8007196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80071a4:	2401      	movs	r4, #1
 80071a6:	e00e      	b.n	80071c6 <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071a8:	3c01      	subs	r4, #1
 80071aa:	d007      	beq.n	80071bc <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 80071ac:	f7ff ff1a 	bl	8006fe4 <xTaskIncrementTick>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d0f9      	beq.n	80071a8 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80071b4:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <xTaskResumeAll+0xec>)
 80071b6:	2201      	movs	r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e7f5      	b.n	80071a8 <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 80071bc:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <xTaskResumeAll+0xf0>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e7e4      	b.n	800718e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80071c4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80071c6:	f000 fb07 	bl	80077d8 <vPortExitCritical>
}
 80071ca:	4620      	mov	r0, r4
 80071cc:	bd38      	pop	{r3, r4, r5, pc}
 80071ce:	bf00      	nop
 80071d0:	200004e4 	.word	0x200004e4
 80071d4:	200004dc 	.word	0x200004dc
 80071d8:	20000524 	.word	0x20000524
 80071dc:	200004ec 	.word	0x200004ec
 80071e0:	20000450 	.word	0x20000450
 80071e4:	20000444 	.word	0x20000444
 80071e8:	20000568 	.word	0x20000568
 80071ec:	20000520 	.word	0x20000520
 80071f0:	e000ed04 	.word	0xe000ed04

080071f4 <vTaskDelay>:
	{
 80071f4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071f6:	b1a8      	cbz	r0, 8007224 <vTaskDelay+0x30>
 80071f8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80071fa:	4b0f      	ldr	r3, [pc, #60]	; (8007238 <vTaskDelay+0x44>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	b143      	cbz	r3, 8007212 <vTaskDelay+0x1e>
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	e7fe      	b.n	8007210 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007212:	f7ff fedf 	bl	8006fd4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007216:	2100      	movs	r1, #0
 8007218:	4620      	mov	r0, r4
 800721a:	f7ff fdd3 	bl	8006dc4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800721e:	f7ff ff6d 	bl	80070fc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007222:	b938      	cbnz	r0, 8007234 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <vTaskDelay+0x48>)
 8007226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	f3bf 8f6f 	isb	sy
	}
 8007234:	bd10      	pop	{r4, pc}
 8007236:	bf00      	nop
 8007238:	200004e4 	.word	0x200004e4
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007240:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <vTaskSwitchContext+0xb4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	b11b      	cbz	r3, 800724e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007246:	4b2c      	ldr	r3, [pc, #176]	; (80072f8 <vTaskSwitchContext+0xb8>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	4770      	bx	lr
{
 800724e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8007250:	4b29      	ldr	r3, [pc, #164]	; (80072f8 <vTaskSwitchContext+0xb8>)
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007256:	4b29      	ldr	r3, [pc, #164]	; (80072fc <vTaskSwitchContext+0xbc>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8007262:	d103      	bne.n	800726c <vTaskSwitchContext+0x2c>
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800726a:	d01b      	beq.n	80072a4 <vTaskSwitchContext+0x64>
 800726c:	4b23      	ldr	r3, [pc, #140]	; (80072fc <vTaskSwitchContext+0xbc>)
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	3134      	adds	r1, #52	; 0x34
 8007274:	f7fa fb03 	bl	800187e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007278:	4b21      	ldr	r3, [pc, #132]	; (8007300 <vTaskSwitchContext+0xc0>)
 800727a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800727c:	fab3 f383 	clz	r3, r3
 8007280:	b2db      	uxtb	r3, r3
 8007282:	f1c3 031f 	rsb	r3, r3, #31
 8007286:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800728a:	008a      	lsls	r2, r1, #2
 800728c:	491d      	ldr	r1, [pc, #116]	; (8007304 <vTaskSwitchContext+0xc4>)
 800728e:	588a      	ldr	r2, [r1, r2]
 8007290:	b98a      	cbnz	r2, 80072b6 <vTaskSwitchContext+0x76>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	e7fe      	b.n	80072a2 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80072aa:	d1df      	bne.n	800726c <vTaskSwitchContext+0x2c>
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 80072b2:	d1db      	bne.n	800726c <vTaskSwitchContext+0x2c>
 80072b4:	e7e0      	b.n	8007278 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b6:	4913      	ldr	r1, [pc, #76]	; (8007304 <vTaskSwitchContext+0xc4>)
 80072b8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80072bc:	0082      	lsls	r2, r0, #2
 80072be:	440a      	add	r2, r1
 80072c0:	6850      	ldr	r0, [r2, #4]
 80072c2:	6840      	ldr	r0, [r0, #4]
 80072c4:	6050      	str	r0, [r2, #4]
 80072c6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80072ca:	00a2      	lsls	r2, r4, #2
 80072cc:	4614      	mov	r4, r2
 80072ce:	3208      	adds	r2, #8
 80072d0:	4411      	add	r1, r2
 80072d2:	4288      	cmp	r0, r1
 80072d4:	d009      	beq.n	80072ea <vTaskSwitchContext+0xaa>
 80072d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80072da:	009a      	lsls	r2, r3, #2
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <vTaskSwitchContext+0xc4>)
 80072de:	4413      	add	r3, r2
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <vTaskSwitchContext+0xbc>)
 80072e6:	601a      	str	r2, [r3, #0]
}
 80072e8:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ea:	6840      	ldr	r0, [r0, #4]
 80072ec:	4a05      	ldr	r2, [pc, #20]	; (8007304 <vTaskSwitchContext+0xc4>)
 80072ee:	4422      	add	r2, r4
 80072f0:	6050      	str	r0, [r2, #4]
 80072f2:	e7f0      	b.n	80072d6 <vTaskSwitchContext+0x96>
 80072f4:	200004e4 	.word	0x200004e4
 80072f8:	20000568 	.word	0x20000568
 80072fc:	20000444 	.word	0x20000444
 8007300:	200004ec 	.word	0x200004ec
 8007304:	20000450 	.word	0x20000450

08007308 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007308:	b158      	cbz	r0, 8007322 <vTaskPlaceOnEventList+0x1a>
{
 800730a:	b510      	push	{r4, lr}
 800730c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <vTaskPlaceOnEventList+0x2c>)
 8007310:	6819      	ldr	r1, [r3, #0]
 8007312:	3118      	adds	r1, #24
 8007314:	f7ff f960 	bl	80065d8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007318:	2101      	movs	r1, #1
 800731a:	4620      	mov	r0, r4
 800731c:	f7ff fd52 	bl	8006dc4 <prvAddCurrentTaskToDelayedList>
}
 8007320:	bd10      	pop	{r4, pc}
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007332:	e7fe      	b.n	8007332 <vTaskPlaceOnEventList+0x2a>
 8007334:	20000444 	.word	0x20000444

08007338 <xTaskRemoveFromEventList>:
{
 8007338:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800733a:	68c3      	ldr	r3, [r0, #12]
 800733c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800733e:	b324      	cbz	r4, 800738a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007340:	f104 0518 	add.w	r5, r4, #24
 8007344:	4628      	mov	r0, r5
 8007346:	f7ff f960 	bl	800660a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800734a:	4b18      	ldr	r3, [pc, #96]	; (80073ac <xTaskRemoveFromEventList+0x74>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	bb2b      	cbnz	r3, 800739c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007350:	1d25      	adds	r5, r4, #4
 8007352:	4628      	mov	r0, r5
 8007354:	f7ff f959 	bl	800660a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007358:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800735a:	2301      	movs	r3, #1
 800735c:	4083      	lsls	r3, r0
 800735e:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <xTaskRemoveFromEventList+0x78>)
 8007360:	6811      	ldr	r1, [r2, #0]
 8007362:	430b      	orrs	r3, r1
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800736a:	4629      	mov	r1, r5
 800736c:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <xTaskRemoveFromEventList+0x7c>)
 800736e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007372:	f7ff f926 	bl	80065c2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007376:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007378:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <xTaskRemoveFromEventList+0x80>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	429a      	cmp	r2, r3
 8007380:	d911      	bls.n	80073a6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8007382:	2001      	movs	r0, #1
 8007384:	4b0d      	ldr	r3, [pc, #52]	; (80073bc <xTaskRemoveFromEventList+0x84>)
 8007386:	6018      	str	r0, [r3, #0]
 8007388:	e00e      	b.n	80073a8 <xTaskRemoveFromEventList+0x70>
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800739a:	e7fe      	b.n	800739a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800739c:	4629      	mov	r1, r5
 800739e:	4808      	ldr	r0, [pc, #32]	; (80073c0 <xTaskRemoveFromEventList+0x88>)
 80073a0:	f7ff f90f 	bl	80065c2 <vListInsertEnd>
 80073a4:	e7e7      	b.n	8007376 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80073a6:	2000      	movs	r0, #0
}
 80073a8:	bd38      	pop	{r3, r4, r5, pc}
 80073aa:	bf00      	nop
 80073ac:	200004e4 	.word	0x200004e4
 80073b0:	200004ec 	.word	0x200004ec
 80073b4:	20000450 	.word	0x20000450
 80073b8:	20000444 	.word	0x20000444
 80073bc:	20000568 	.word	0x20000568
 80073c0:	20000524 	.word	0x20000524

080073c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073c4:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <vTaskInternalSetTimeOutState+0x10>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073ca:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <vTaskInternalSetTimeOutState+0x14>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6043      	str	r3, [r0, #4]
}
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	2000051c 	.word	0x2000051c
 80073d8:	20000564 	.word	0x20000564

080073dc <xTaskCheckForTimeOut>:
{
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80073de:	b1c8      	cbz	r0, 8007414 <xTaskCheckForTimeOut+0x38>
 80073e0:	460c      	mov	r4, r1
 80073e2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80073e4:	b1f9      	cbz	r1, 8007426 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80073e6:	f000 f9d5 	bl	8007794 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80073ea:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <xTaskCheckForTimeOut+0x7c>)
 80073ec:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073ee:	686b      	ldr	r3, [r5, #4]
 80073f0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80073f8:	d026      	beq.n	8007448 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073fa:	682f      	ldr	r7, [r5, #0]
 80073fc:	4e17      	ldr	r6, [pc, #92]	; (800745c <xTaskCheckForTimeOut+0x80>)
 80073fe:	6836      	ldr	r6, [r6, #0]
 8007400:	42b7      	cmp	r7, r6
 8007402:	d001      	beq.n	8007408 <xTaskCheckForTimeOut+0x2c>
 8007404:	428b      	cmp	r3, r1
 8007406:	d924      	bls.n	8007452 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007408:	4282      	cmp	r2, r0
 800740a:	d815      	bhi.n	8007438 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007410:	2401      	movs	r4, #1
 8007412:	e01a      	b.n	800744a <xTaskCheckForTimeOut+0x6e>
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007424:	e7fe      	b.n	8007424 <xTaskCheckForTimeOut+0x48>
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007436:	e7fe      	b.n	8007436 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8007438:	1a5b      	subs	r3, r3, r1
 800743a:	4413      	add	r3, r2
 800743c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800743e:	4628      	mov	r0, r5
 8007440:	f7ff ffc0 	bl	80073c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007444:	2400      	movs	r4, #0
 8007446:	e000      	b.n	800744a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8007448:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800744a:	f000 f9c5 	bl	80077d8 <vPortExitCritical>
}
 800744e:	4620      	mov	r0, r4
 8007450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8007452:	2401      	movs	r4, #1
 8007454:	e7f9      	b.n	800744a <xTaskCheckForTimeOut+0x6e>
 8007456:	bf00      	nop
 8007458:	20000564 	.word	0x20000564
 800745c:	2000051c 	.word	0x2000051c

08007460 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007460:	4b01      	ldr	r3, [pc, #4]	; (8007468 <vTaskMissedYield+0x8>)
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]
}
 8007466:	4770      	bx	lr
 8007468:	20000568 	.word	0x20000568

0800746c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800746c:	4b05      	ldr	r3, [pc, #20]	; (8007484 <xTaskGetSchedulerState+0x18>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	b133      	cbz	r3, 8007480 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <xTaskGetSchedulerState+0x1c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	b10b      	cbz	r3, 800747c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8007478:	2000      	movs	r0, #0
	}
 800747a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800747c:	2002      	movs	r0, #2
 800747e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007480:	2001      	movs	r0, #1
 8007482:	4770      	bx	lr
 8007484:	20000538 	.word	0x20000538
 8007488:	200004e4 	.word	0x200004e4

0800748c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800748c:	2800      	cmp	r0, #0
 800748e:	d049      	beq.n	8007524 <xTaskPriorityInherit+0x98>
	{
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007494:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007496:	4a25      	ldr	r2, [pc, #148]	; (800752c <xTaskPriorityInherit+0xa0>)
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800749c:	4293      	cmp	r3, r2
 800749e:	d239      	bcs.n	8007514 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074a0:	6982      	ldr	r2, [r0, #24]
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	db05      	blt.n	80074b2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a6:	4a21      	ldr	r2, [pc, #132]	; (800752c <xTaskPriorityInherit+0xa0>)
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80074ac:	f1c2 0207 	rsb	r2, r2, #7
 80074b0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074b2:	6961      	ldr	r1, [r4, #20]
 80074b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80074b8:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <xTaskPriorityInherit+0xa4>)
 80074ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074be:	4299      	cmp	r1, r3
 80074c0:	d005      	beq.n	80074ce <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074c2:	4b1a      	ldr	r3, [pc, #104]	; (800752c <xTaskPriorityInherit+0xa0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80074ca:	2001      	movs	r0, #1
	}
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ce:	1d25      	adds	r5, r4, #4
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7ff f89a 	bl	800660a <uxListRemove>
 80074d6:	b940      	cbnz	r0, 80074ea <xTaskPriorityInherit+0x5e>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80074d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80074da:	2301      	movs	r3, #1
 80074dc:	fa03 f202 	lsl.w	r2, r3, r2
 80074e0:	4914      	ldr	r1, [pc, #80]	; (8007534 <xTaskPriorityInherit+0xa8>)
 80074e2:	680b      	ldr	r3, [r1, #0]
 80074e4:	ea23 0302 	bic.w	r3, r3, r2
 80074e8:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074ea:	4b10      	ldr	r3, [pc, #64]	; (800752c <xTaskPriorityInherit+0xa0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80074f0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074f2:	2401      	movs	r4, #1
 80074f4:	fa04 f300 	lsl.w	r3, r4, r0
 80074f8:	4a0e      	ldr	r2, [pc, #56]	; (8007534 <xTaskPriorityInherit+0xa8>)
 80074fa:	6811      	ldr	r1, [r2, #0]
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007504:	4629      	mov	r1, r5
 8007506:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <xTaskPriorityInherit+0xa4>)
 8007508:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800750c:	f7ff f859 	bl	80065c2 <vListInsertEnd>
				xReturn = pdTRUE;
 8007510:	4620      	mov	r0, r4
 8007512:	e7db      	b.n	80074cc <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007516:	4b05      	ldr	r3, [pc, #20]	; (800752c <xTaskPriorityInherit+0xa0>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	429a      	cmp	r2, r3
 800751e:	d303      	bcc.n	8007528 <xTaskPriorityInherit+0x9c>
	BaseType_t xReturn = pdFALSE;
 8007520:	2000      	movs	r0, #0
 8007522:	e7d3      	b.n	80074cc <xTaskPriorityInherit+0x40>
 8007524:	2000      	movs	r0, #0
	}
 8007526:	4770      	bx	lr
					xReturn = pdTRUE;
 8007528:	2001      	movs	r0, #1
		return xReturn;
 800752a:	e7cf      	b.n	80074cc <xTaskPriorityInherit+0x40>
 800752c:	20000444 	.word	0x20000444
 8007530:	20000450 	.word	0x20000450
 8007534:	200004ec 	.word	0x200004ec

08007538 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007538:	2800      	cmp	r0, #0
 800753a:	d04c      	beq.n	80075d6 <xTaskPriorityDisinherit+0x9e>
	{
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007540:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <xTaskPriorityDisinherit+0xa8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4283      	cmp	r3, r0
 8007546:	d008      	beq.n	800755a <xTaskPriorityDisinherit+0x22>
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	e7fe      	b.n	8007558 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800755a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800755c:	b943      	cbnz	r3, 8007570 <xTaskPriorityDisinherit+0x38>
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	e7fe      	b.n	800756e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007570:	3b01      	subs	r3, #1
 8007572:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007574:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007576:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007578:	4291      	cmp	r1, r2
 800757a:	d02e      	beq.n	80075da <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800757c:	b10b      	cbz	r3, 8007582 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800757e:	2000      	movs	r0, #0
	}
 8007580:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007582:	1d05      	adds	r5, r0, #4
 8007584:	4628      	mov	r0, r5
 8007586:	f7ff f840 	bl	800660a <uxListRemove>
 800758a:	b970      	cbnz	r0, 80075aa <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800758c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800758e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4913      	ldr	r1, [pc, #76]	; (80075e4 <xTaskPriorityDisinherit+0xac>)
 8007596:	58cb      	ldr	r3, [r1, r3]
 8007598:	b93b      	cbnz	r3, 80075aa <xTaskPriorityDisinherit+0x72>
 800759a:	2301      	movs	r3, #1
 800759c:	fa03 f202 	lsl.w	r2, r3, r2
 80075a0:	4911      	ldr	r1, [pc, #68]	; (80075e8 <xTaskPriorityDisinherit+0xb0>)
 80075a2:	680b      	ldr	r3, [r1, #0]
 80075a4:	ea23 0302 	bic.w	r3, r3, r2
 80075a8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80075ac:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ae:	f1c0 0307 	rsb	r3, r0, #7
 80075b2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80075b4:	2401      	movs	r4, #1
 80075b6:	fa04 f300 	lsl.w	r3, r4, r0
 80075ba:	4a0b      	ldr	r2, [pc, #44]	; (80075e8 <xTaskPriorityDisinherit+0xb0>)
 80075bc:	6811      	ldr	r1, [r2, #0]
 80075be:	430b      	orrs	r3, r1
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80075c6:	4629      	mov	r1, r5
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <xTaskPriorityDisinherit+0xac>)
 80075ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075ce:	f7fe fff8 	bl	80065c2 <vListInsertEnd>
					xReturn = pdTRUE;
 80075d2:	4620      	mov	r0, r4
 80075d4:	e7d4      	b.n	8007580 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80075d6:	2000      	movs	r0, #0
	}
 80075d8:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80075da:	2000      	movs	r0, #0
 80075dc:	e7d0      	b.n	8007580 <xTaskPriorityDisinherit+0x48>
 80075de:	bf00      	nop
 80075e0:	20000444 	.word	0x20000444
 80075e4:	20000450 	.word	0x20000450
 80075e8:	200004ec 	.word	0x200004ec

080075ec <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d051      	beq.n	8007694 <vTaskPriorityDisinheritAfterTimeout+0xa8>
	{
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	460a      	mov	r2, r1
 80075f4:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80075f6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80075f8:	b941      	cbnz	r1, 800760c <vTaskPriorityDisinheritAfterTimeout+0x20>
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	e7fe      	b.n	800760a <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800760c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800760e:	4293      	cmp	r3, r2
 8007610:	d200      	bcs.n	8007614 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007612:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007614:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007616:	429a      	cmp	r2, r3
 8007618:	d001      	beq.n	800761e <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800761a:	2901      	cmp	r1, #1
 800761c:	d000      	beq.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 800761e:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8007620:	491d      	ldr	r1, [pc, #116]	; (8007698 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8007622:	6809      	ldr	r1, [r1, #0]
 8007624:	42a1      	cmp	r1, r4
 8007626:	d02c      	beq.n	8007682 <vTaskPriorityDisinheritAfterTimeout+0x96>
					pxTCB->uxPriority = uxPriorityToUse;
 8007628:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800762a:	69a1      	ldr	r1, [r4, #24]
 800762c:	2900      	cmp	r1, #0
 800762e:	db02      	blt.n	8007636 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007630:	f1c3 0307 	rsb	r3, r3, #7
 8007634:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007636:	6961      	ldr	r1, [r4, #20]
 8007638:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800763c:	4b17      	ldr	r3, [pc, #92]	; (800769c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800763e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007642:	4291      	cmp	r1, r2
 8007644:	d1eb      	bne.n	800761e <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007646:	1d25      	adds	r5, r4, #4
 8007648:	4628      	mov	r0, r5
 800764a:	f7fe ffde 	bl	800660a <uxListRemove>
 800764e:	b940      	cbnz	r0, 8007662 <vTaskPriorityDisinheritAfterTimeout+0x76>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007650:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007652:	2301      	movs	r3, #1
 8007654:	fa03 f202 	lsl.w	r2, r3, r2
 8007658:	4911      	ldr	r1, [pc, #68]	; (80076a0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800765a:	680b      	ldr	r3, [r1, #0]
 800765c:	ea23 0302 	bic.w	r3, r3, r2
 8007660:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8007662:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007664:	2301      	movs	r3, #1
 8007666:	4083      	lsls	r3, r0
 8007668:	4a0d      	ldr	r2, [pc, #52]	; (80076a0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800766a:	6811      	ldr	r1, [r2, #0]
 800766c:	430b      	orrs	r3, r1
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007674:	4629      	mov	r1, r5
 8007676:	4b09      	ldr	r3, [pc, #36]	; (800769c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8007678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800767c:	f7fe ffa1 	bl	80065c2 <vListInsertEnd>
	}
 8007680:	e7cd      	b.n	800761e <vTaskPriorityDisinheritAfterTimeout+0x32>
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8007692:	e7fe      	b.n	8007692 <vTaskPriorityDisinheritAfterTimeout+0xa6>
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20000444 	.word	0x20000444
 800769c:	20000450 	.word	0x20000450
 80076a0:	200004ec 	.word	0x200004ec

080076a4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80076a4:	4b05      	ldr	r3, [pc, #20]	; (80076bc <pvTaskIncrementMutexHeldCount+0x18>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	b123      	cbz	r3, 80076b4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80076aa:	4b04      	ldr	r3, [pc, #16]	; (80076bc <pvTaskIncrementMutexHeldCount+0x18>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80076b0:	3301      	adds	r3, #1
 80076b2:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 80076b4:	4b01      	ldr	r3, [pc, #4]	; (80076bc <pvTaskIncrementMutexHeldCount+0x18>)
 80076b6:	6818      	ldr	r0, [r3, #0]
	}
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20000444 	.word	0x20000444

080076c0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076c0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076c6:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <prvTaskExitError+0x3c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d008      	beq.n	80076e2 <prvTaskExitError+0x22>
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	e7fe      	b.n	80076e0 <prvTaskExitError+0x20>
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076f2:	9b01      	ldr	r3, [sp, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0fc      	beq.n	80076f2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076f8:	b002      	add	sp, #8
 80076fa:	4770      	bx	lr
 80076fc:	20000084 	.word	0x20000084

08007700 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007700:	4808      	ldr	r0, [pc, #32]	; (8007724 <prvPortStartFirstTask+0x24>)
 8007702:	6800      	ldr	r0, [r0, #0]
 8007704:	6800      	ldr	r0, [r0, #0]
 8007706:	f380 8808 	msr	MSP, r0
 800770a:	f04f 0000 	mov.w	r0, #0
 800770e:	f380 8814 	msr	CONTROL, r0
 8007712:	b662      	cpsie	i
 8007714:	b661      	cpsie	f
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	df00      	svc	0
 8007720:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007722:	0000      	.short	0x0000
 8007724:	e000ed08 	.word	0xe000ed08

08007728 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007728:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007738 <vPortEnableVFP+0x10>
 800772c:	6801      	ldr	r1, [r0, #0]
 800772e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007732:	6001      	str	r1, [r0, #0]
 8007734:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007736:	0000      	.short	0x0000
 8007738:	e000ed88 	.word	0xe000ed88

0800773c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800773c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007740:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007744:	f021 0101 	bic.w	r1, r1, #1
 8007748:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <pxPortInitialiseStack+0x28>)
 800774e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007752:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007756:	f06f 0302 	mvn.w	r3, #2
 800775a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800775e:	3844      	subs	r0, #68	; 0x44
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	080076c1 	.word	0x080076c1
	...

08007770 <SVC_Handler>:
	__asm volatile (
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <pxCurrentTCBConst2>)
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	6808      	ldr	r0, [r1, #0]
 8007776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	f380 8809 	msr	PSP, r0
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8811 	msr	BASEPRI, r0
 800778a:	4770      	bx	lr
 800778c:	f3af 8000 	nop.w

08007790 <pxCurrentTCBConst2>:
 8007790:	20000444 	.word	0x20000444

08007794 <vPortEnterCritical>:
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80077a4:	4a0a      	ldr	r2, [pc, #40]	; (80077d0 <vPortEnterCritical+0x3c>)
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d000      	beq.n	80077b2 <vPortEnterCritical+0x1e>
}
 80077b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077b2:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <vPortEnterCritical+0x40>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077ba:	d0f9      	beq.n	80077b0 <vPortEnterCritical+0x1c>
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	e7fe      	b.n	80077cc <vPortEnterCritical+0x38>
 80077ce:	bf00      	nop
 80077d0:	20000084 	.word	0x20000084
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80077d8:	4b09      	ldr	r3, [pc, #36]	; (8007800 <vPortExitCritical+0x28>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	b943      	cbnz	r3, 80077f0 <vPortExitCritical+0x18>
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	e7fe      	b.n	80077ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80077f0:	3b01      	subs	r3, #1
 80077f2:	4a03      	ldr	r2, [pc, #12]	; (8007800 <vPortExitCritical+0x28>)
 80077f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077f6:	b90b      	cbnz	r3, 80077fc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077f8:	f383 8811 	msr	BASEPRI, r3
}
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	20000084 	.word	0x20000084
	...

08007810 <PendSV_Handler>:
	__asm volatile
 8007810:	f3ef 8009 	mrs	r0, PSP
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	4b15      	ldr	r3, [pc, #84]	; (8007870 <pxCurrentTCBConst>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	f01e 0f10 	tst.w	lr, #16
 8007820:	bf08      	it	eq
 8007822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	6010      	str	r0, [r2, #0]
 800782c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007834:	f380 8811 	msr	BASEPRI, r0
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f7ff fcfe 	bl	8007240 <vTaskSwitchContext>
 8007844:	f04f 0000 	mov.w	r0, #0
 8007848:	f380 8811 	msr	BASEPRI, r0
 800784c:	bc09      	pop	{r0, r3}
 800784e:	6819      	ldr	r1, [r3, #0]
 8007850:	6808      	ldr	r0, [r1, #0]
 8007852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007856:	f01e 0f10 	tst.w	lr, #16
 800785a:	bf08      	it	eq
 800785c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007860:	f380 8809 	msr	PSP, r0
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst>:
 8007870:	20000444 	.word	0x20000444

08007874 <SysTick_Handler>:
{
 8007874:	b508      	push	{r3, lr}
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007886:	f7ff fbad 	bl	8006fe4 <xTaskIncrementTick>
 800788a:	b118      	cbz	r0, 8007894 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800788c:	4b03      	ldr	r3, [pc, #12]	; (800789c <SysTick_Handler+0x28>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007894:	2300      	movs	r3, #0
 8007896:	f383 8811 	msr	BASEPRI, r3
}
 800789a:	bd08      	pop	{r3, pc}
 800789c:	e000ed04 	.word	0xe000ed04

080078a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078a0:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <vPortSetupTimerInterrupt+0x24>)
 80078a2:	2300      	movs	r3, #0
 80078a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078a6:	4908      	ldr	r1, [pc, #32]	; (80078c8 <vPortSetupTimerInterrupt+0x28>)
 80078a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078aa:	4b08      	ldr	r3, [pc, #32]	; (80078cc <vPortSetupTimerInterrupt+0x2c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4908      	ldr	r1, [pc, #32]	; (80078d0 <vPortSetupTimerInterrupt+0x30>)
 80078b0:	fba1 1303 	umull	r1, r3, r1, r3
 80078b4:	099b      	lsrs	r3, r3, #6
 80078b6:	3b01      	subs	r3, #1
 80078b8:	4906      	ldr	r1, [pc, #24]	; (80078d4 <vPortSetupTimerInterrupt+0x34>)
 80078ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078bc:	2307      	movs	r3, #7
 80078be:	6013      	str	r3, [r2, #0]
}
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	e000e010 	.word	0xe000e010
 80078c8:	e000e018 	.word	0xe000e018
 80078cc:	20000078 	.word	0x20000078
 80078d0:	10624dd3 	.word	0x10624dd3
 80078d4:	e000e014 	.word	0xe000e014

080078d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078d8:	4b3a      	ldr	r3, [pc, #232]	; (80079c4 <xPortStartScheduler+0xec>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	4b3a      	ldr	r3, [pc, #232]	; (80079c8 <xPortStartScheduler+0xf0>)
 80078de:	429a      	cmp	r2, r3
 80078e0:	d029      	beq.n	8007936 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078e2:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <xPortStartScheduler+0xec>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b39      	ldr	r3, [pc, #228]	; (80079cc <xPortStartScheduler+0xf4>)
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d02d      	beq.n	8007948 <xPortStartScheduler+0x70>
{
 80078ec:	b510      	push	{r4, lr}
 80078ee:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078f0:	4b37      	ldr	r3, [pc, #220]	; (80079d0 <xPortStartScheduler+0xf8>)
 80078f2:	781a      	ldrb	r2, [r3, #0]
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078f8:	22ff      	movs	r2, #255	; 0xff
 80078fa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007904:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007908:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800790c:	4a31      	ldr	r2, [pc, #196]	; (80079d4 <xPortStartScheduler+0xfc>)
 800790e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007910:	4b31      	ldr	r3, [pc, #196]	; (80079d8 <xPortStartScheduler+0x100>)
 8007912:	2207      	movs	r2, #7
 8007914:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007916:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800791a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800791e:	d01c      	beq.n	800795a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8007920:	4a2d      	ldr	r2, [pc, #180]	; (80079d8 <xPortStartScheduler+0x100>)
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007928:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f88d 3003 	strb.w	r3, [sp, #3]
 8007934:	e7ef      	b.n	8007916 <xPortStartScheduler+0x3e>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007946:	e7fe      	b.n	8007946 <xPortStartScheduler+0x6e>
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007958:	e7fe      	b.n	8007958 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800795a:	4b1f      	ldr	r3, [pc, #124]	; (80079d8 <xPortStartScheduler+0x100>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b03      	cmp	r3, #3
 8007960:	d008      	beq.n	8007974 <xPortStartScheduler+0x9c>
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	e7fe      	b.n	8007972 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007974:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800797a:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <xPortStartScheduler+0x100>)
 800797c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800797e:	9b01      	ldr	r3, [sp, #4]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <xPortStartScheduler+0xf8>)
 8007984:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007986:	4b15      	ldr	r3, [pc, #84]	; (80079dc <xPortStartScheduler+0x104>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800798e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007996:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007998:	f7ff ff82 	bl	80078a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800799c:	2400      	movs	r4, #0
 800799e:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <xPortStartScheduler+0x108>)
 80079a0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80079a2:	f7ff fec1 	bl	8007728 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079a6:	4a0f      	ldr	r2, [pc, #60]	; (80079e4 <xPortStartScheduler+0x10c>)
 80079a8:	6813      	ldr	r3, [r2, #0]
 80079aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079ae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80079b0:	f7ff fea6 	bl	8007700 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80079b4:	f7ff fc44 	bl	8007240 <vTaskSwitchContext>
	prvTaskExitError();
 80079b8:	f7ff fe82 	bl	80076c0 <prvTaskExitError>
}
 80079bc:	4620      	mov	r0, r4
 80079be:	b002      	add	sp, #8
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	bf00      	nop
 80079c4:	e000ed00 	.word	0xe000ed00
 80079c8:	410fc271 	.word	0x410fc271
 80079cc:	410fc270 	.word	0x410fc270
 80079d0:	e000e400 	.word	0xe000e400
 80079d4:	2000056c 	.word	0x2000056c
 80079d8:	20000570 	.word	0x20000570
 80079dc:	e000ed20 	.word	0xe000ed20
 80079e0:	20000084 	.word	0x20000084
 80079e4:	e000ef34 	.word	0xe000ef34

080079e8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079e8:	4a12      	ldr	r2, [pc, #72]	; (8007a34 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079ea:	f012 0f07 	tst.w	r2, #7
 80079ee:	d01e      	beq.n	8007a2e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079f0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079f6:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 80079fa:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079fc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079fe:	480e      	ldr	r0, [pc, #56]	; (8007a38 <prvHeapInit+0x50>)
 8007a00:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a02:	2100      	movs	r1, #0
 8007a04:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a06:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007a08:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007a0e:	480b      	ldr	r0, [pc, #44]	; (8007a3c <prvHeapInit+0x54>)
 8007a10:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007a12:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a14:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a16:	1a99      	subs	r1, r3, r2
 8007a18:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a1a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a1c:	4b08      	ldr	r3, [pc, #32]	; (8007a40 <prvHeapInit+0x58>)
 8007a1e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a20:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <prvHeapInit+0x5c>)
 8007a22:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a24:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <prvHeapInit+0x60>)
 8007a26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a2a:	601a      	str	r2, [r3, #0]
}
 8007a2c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a32:	e7e4      	b.n	80079fe <prvHeapInit+0x16>
 8007a34:	20000578 	.word	0x20000578
 8007a38:	2000858c 	.word	0x2000858c
 8007a3c:	20000574 	.word	0x20000574
 8007a40:	20008580 	.word	0x20008580
 8007a44:	2000857c 	.word	0x2000857c
 8007a48:	20008578 	.word	0x20008578

08007a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a4c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <prvInsertBlockIntoFreeList+0x50>)
 8007a50:	461a      	mov	r2, r3
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4283      	cmp	r3, r0
 8007a56:	d3fb      	bcc.n	8007a50 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a58:	6851      	ldr	r1, [r2, #4]
 8007a5a:	1854      	adds	r4, r2, r1
 8007a5c:	4284      	cmp	r4, r0
 8007a5e:	d00a      	beq.n	8007a76 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a60:	6841      	ldr	r1, [r0, #4]
 8007a62:	1844      	adds	r4, r0, r1
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	d00b      	beq.n	8007a80 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a68:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a6a:	4290      	cmp	r0, r2
 8007a6c:	d000      	beq.n	8007a70 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a6e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a74:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a76:	6840      	ldr	r0, [r0, #4]
 8007a78:	4401      	add	r1, r0
 8007a7a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	e7ef      	b.n	8007a60 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a80:	4c07      	ldr	r4, [pc, #28]	; (8007aa0 <prvInsertBlockIntoFreeList+0x54>)
 8007a82:	6824      	ldr	r4, [r4, #0]
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d006      	beq.n	8007a96 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4419      	add	r1, r3
 8007a8c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a8e:	6813      	ldr	r3, [r2, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6003      	str	r3, [r0, #0]
 8007a94:	e7e9      	b.n	8007a6a <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a96:	6004      	str	r4, [r0, #0]
 8007a98:	e7e7      	b.n	8007a6a <prvInsertBlockIntoFreeList+0x1e>
 8007a9a:	bf00      	nop
 8007a9c:	2000858c 	.word	0x2000858c
 8007aa0:	20000574 	.word	0x20000574

08007aa4 <pvPortMalloc>:
{
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007aa8:	f7ff fa94 	bl	8006fd4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007aac:	4b3b      	ldr	r3, [pc, #236]	; (8007b9c <pvPortMalloc+0xf8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	b19b      	cbz	r3, 8007ada <pvPortMalloc+0x36>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ab2:	4b3b      	ldr	r3, [pc, #236]	; (8007ba0 <pvPortMalloc+0xfc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	421c      	tst	r4, r3
 8007ab8:	d112      	bne.n	8007ae0 <pvPortMalloc+0x3c>
			if( xWantedSize > 0 )
 8007aba:	b134      	cbz	r4, 8007aca <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8007abc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007abe:	f014 0f07 	tst.w	r4, #7
 8007ac2:	d002      	beq.n	8007aca <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ac4:	f024 0407 	bic.w	r4, r4, #7
 8007ac8:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aca:	b1d4      	cbz	r4, 8007b02 <pvPortMalloc+0x5e>
 8007acc:	4b35      	ldr	r3, [pc, #212]	; (8007ba4 <pvPortMalloc+0x100>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	d31a      	bcc.n	8007b0a <pvPortMalloc+0x66>
				pxBlock = xStart.pxNextFreeBlock;
 8007ad4:	4b34      	ldr	r3, [pc, #208]	; (8007ba8 <pvPortMalloc+0x104>)
 8007ad6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad8:	e01d      	b.n	8007b16 <pvPortMalloc+0x72>
			prvHeapInit();
 8007ada:	f7ff ff85 	bl	80079e8 <prvHeapInit>
 8007ade:	e7e8      	b.n	8007ab2 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 8007ae0:	f7ff fb0c 	bl	80070fc <xTaskResumeAll>
void *pvReturn = NULL;
 8007ae4:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8007ae6:	f7f9 fecb 	bl	8001880 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aea:	f016 0f07 	tst.w	r6, #7
 8007aee:	d053      	beq.n	8007b98 <pvPortMalloc+0xf4>
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	e7fe      	b.n	8007b00 <pvPortMalloc+0x5c>
	( void ) xTaskResumeAll();
 8007b02:	f7ff fafb 	bl	80070fc <xTaskResumeAll>
void *pvReturn = NULL;
 8007b06:	2600      	movs	r6, #0
 8007b08:	e7ed      	b.n	8007ae6 <pvPortMalloc+0x42>
	( void ) xTaskResumeAll();
 8007b0a:	f7ff faf7 	bl	80070fc <xTaskResumeAll>
void *pvReturn = NULL;
 8007b0e:	2600      	movs	r6, #0
 8007b10:	e7e9      	b.n	8007ae6 <pvPortMalloc+0x42>
					pxPreviousBlock = pxBlock;
 8007b12:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b14:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b16:	686a      	ldr	r2, [r5, #4]
 8007b18:	42a2      	cmp	r2, r4
 8007b1a:	d202      	bcs.n	8007b22 <pvPortMalloc+0x7e>
 8007b1c:	682a      	ldr	r2, [r5, #0]
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	d1f7      	bne.n	8007b12 <pvPortMalloc+0x6e>
				if( pxBlock != pxEnd )
 8007b22:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <pvPortMalloc+0xf8>)
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	42aa      	cmp	r2, r5
 8007b28:	d014      	beq.n	8007b54 <pvPortMalloc+0xb0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b2a:	681e      	ldr	r6, [r3, #0]
 8007b2c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b2e:	682a      	ldr	r2, [r5, #0]
 8007b30:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b32:	686b      	ldr	r3, [r5, #4]
 8007b34:	1b1b      	subs	r3, r3, r4
 8007b36:	2b10      	cmp	r3, #16
 8007b38:	d914      	bls.n	8007b64 <pvPortMalloc+0xc0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b3a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b3c:	f010 0f07 	tst.w	r0, #7
 8007b40:	d00c      	beq.n	8007b5c <pvPortMalloc+0xb8>
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	e7fe      	b.n	8007b52 <pvPortMalloc+0xae>
	( void ) xTaskResumeAll();
 8007b54:	f7ff fad2 	bl	80070fc <xTaskResumeAll>
void *pvReturn = NULL;
 8007b58:	2600      	movs	r6, #0
 8007b5a:	e7c4      	b.n	8007ae6 <pvPortMalloc+0x42>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b5c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b5e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b60:	f7ff ff74 	bl	8007a4c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b64:	686a      	ldr	r2, [r5, #4]
 8007b66:	490f      	ldr	r1, [pc, #60]	; (8007ba4 <pvPortMalloc+0x100>)
 8007b68:	680b      	ldr	r3, [r1, #0]
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b6e:	490f      	ldr	r1, [pc, #60]	; (8007bac <pvPortMalloc+0x108>)
 8007b70:	6809      	ldr	r1, [r1, #0]
 8007b72:	428b      	cmp	r3, r1
 8007b74:	d201      	bcs.n	8007b7a <pvPortMalloc+0xd6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b76:	490d      	ldr	r1, [pc, #52]	; (8007bac <pvPortMalloc+0x108>)
 8007b78:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b7a:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <pvPortMalloc+0xfc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8007b86:	4a0a      	ldr	r2, [pc, #40]	; (8007bb0 <pvPortMalloc+0x10c>)
 8007b88:	6813      	ldr	r3, [r2, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8007b8e:	f7ff fab5 	bl	80070fc <xTaskResumeAll>
		if( pvReturn == NULL )
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d1a9      	bne.n	8007aea <pvPortMalloc+0x46>
 8007b96:	e7a6      	b.n	8007ae6 <pvPortMalloc+0x42>
}
 8007b98:	4630      	mov	r0, r6
 8007b9a:	bd70      	pop	{r4, r5, r6, pc}
 8007b9c:	20000574 	.word	0x20000574
 8007ba0:	20008578 	.word	0x20008578
 8007ba4:	2000857c 	.word	0x2000857c
 8007ba8:	2000858c 	.word	0x2000858c
 8007bac:	20008580 	.word	0x20008580
 8007bb0:	20008584 	.word	0x20008584

08007bb4 <vPortFree>:
	if( pv != NULL )
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d034      	beq.n	8007c22 <vPortFree+0x6e>
{
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8007bbc:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bc0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007bc4:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <vPortFree+0x70>)
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	4213      	tst	r3, r2
 8007bca:	d108      	bne.n	8007bde <vPortFree+0x2a>
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	e7fe      	b.n	8007bdc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bde:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007be2:	b141      	cbz	r1, 8007bf6 <vPortFree+0x42>
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	e7fe      	b.n	8007bf4 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bf6:	ea23 0302 	bic.w	r3, r3, r2
 8007bfa:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007bfe:	f7ff f9e9 	bl	8006fd4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c02:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007c06:	4a08      	ldr	r2, [pc, #32]	; (8007c28 <vPortFree+0x74>)
 8007c08:	6813      	ldr	r3, [r2, #0]
 8007c0a:	440b      	add	r3, r1
 8007c0c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f7ff ff1c 	bl	8007a4c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c14:	4a05      	ldr	r2, [pc, #20]	; (8007c2c <vPortFree+0x78>)
 8007c16:	6813      	ldr	r3, [r2, #0]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8007c1c:	f7ff fa6e 	bl	80070fc <xTaskResumeAll>
}
 8007c20:	bd38      	pop	{r3, r4, r5, pc}
 8007c22:	4770      	bx	lr
 8007c24:	20008578 	.word	0x20008578
 8007c28:	2000857c 	.word	0x2000857c
 8007c2c:	20008588 	.word	0x20008588

08007c30 <__errno>:
 8007c30:	4b01      	ldr	r3, [pc, #4]	; (8007c38 <__errno+0x8>)
 8007c32:	6818      	ldr	r0, [r3, #0]
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000088 	.word	0x20000088

08007c3c <__libc_init_array>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	4d0d      	ldr	r5, [pc, #52]	; (8007c74 <__libc_init_array+0x38>)
 8007c40:	4c0d      	ldr	r4, [pc, #52]	; (8007c78 <__libc_init_array+0x3c>)
 8007c42:	1b64      	subs	r4, r4, r5
 8007c44:	10a4      	asrs	r4, r4, #2
 8007c46:	2600      	movs	r6, #0
 8007c48:	42a6      	cmp	r6, r4
 8007c4a:	d109      	bne.n	8007c60 <__libc_init_array+0x24>
 8007c4c:	4d0b      	ldr	r5, [pc, #44]	; (8007c7c <__libc_init_array+0x40>)
 8007c4e:	4c0c      	ldr	r4, [pc, #48]	; (8007c80 <__libc_init_array+0x44>)
 8007c50:	f000 fc82 	bl	8008558 <_init>
 8007c54:	1b64      	subs	r4, r4, r5
 8007c56:	10a4      	asrs	r4, r4, #2
 8007c58:	2600      	movs	r6, #0
 8007c5a:	42a6      	cmp	r6, r4
 8007c5c:	d105      	bne.n	8007c6a <__libc_init_array+0x2e>
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}
 8007c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c64:	4798      	blx	r3
 8007c66:	3601      	adds	r6, #1
 8007c68:	e7ee      	b.n	8007c48 <__libc_init_array+0xc>
 8007c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6e:	4798      	blx	r3
 8007c70:	3601      	adds	r6, #1
 8007c72:	e7f2      	b.n	8007c5a <__libc_init_array+0x1e>
 8007c74:	0800ad3c 	.word	0x0800ad3c
 8007c78:	0800ad3c 	.word	0x0800ad3c
 8007c7c:	0800ad3c 	.word	0x0800ad3c
 8007c80:	0800ad40 	.word	0x0800ad40

08007c84 <memcpy>:
 8007c84:	440a      	add	r2, r1
 8007c86:	4291      	cmp	r1, r2
 8007c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c8c:	d100      	bne.n	8007c90 <memcpy+0xc>
 8007c8e:	4770      	bx	lr
 8007c90:	b510      	push	{r4, lr}
 8007c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c9a:	4291      	cmp	r1, r2
 8007c9c:	d1f9      	bne.n	8007c92 <memcpy+0xe>
 8007c9e:	bd10      	pop	{r4, pc}

08007ca0 <memset>:
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d100      	bne.n	8007caa <memset+0xa>
 8007ca8:	4770      	bx	lr
 8007caa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cae:	e7f9      	b.n	8007ca4 <memset+0x4>

08007cb0 <sniprintf>:
 8007cb0:	b40c      	push	{r2, r3}
 8007cb2:	b530      	push	{r4, r5, lr}
 8007cb4:	4b17      	ldr	r3, [pc, #92]	; (8007d14 <sniprintf+0x64>)
 8007cb6:	1e0c      	subs	r4, r1, #0
 8007cb8:	681d      	ldr	r5, [r3, #0]
 8007cba:	b09d      	sub	sp, #116	; 0x74
 8007cbc:	da08      	bge.n	8007cd0 <sniprintf+0x20>
 8007cbe:	238b      	movs	r3, #139	; 0x8b
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc6:	b01d      	add	sp, #116	; 0x74
 8007cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ccc:	b002      	add	sp, #8
 8007cce:	4770      	bx	lr
 8007cd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007cd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007cd8:	bf14      	ite	ne
 8007cda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007cde:	4623      	moveq	r3, r4
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	9307      	str	r3, [sp, #28]
 8007ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ce8:	9002      	str	r0, [sp, #8]
 8007cea:	9006      	str	r0, [sp, #24]
 8007cec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007cf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cf2:	ab21      	add	r3, sp, #132	; 0x84
 8007cf4:	a902      	add	r1, sp, #8
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	f000 f8e5 	bl	8007ec8 <_svfiprintf_r>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	bfbc      	itt	lt
 8007d02:	238b      	movlt	r3, #139	; 0x8b
 8007d04:	602b      	strlt	r3, [r5, #0]
 8007d06:	2c00      	cmp	r4, #0
 8007d08:	d0dd      	beq.n	8007cc6 <sniprintf+0x16>
 8007d0a:	9b02      	ldr	r3, [sp, #8]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	e7d9      	b.n	8007cc6 <sniprintf+0x16>
 8007d12:	bf00      	nop
 8007d14:	20000088 	.word	0x20000088

08007d18 <siprintf>:
 8007d18:	b40e      	push	{r1, r2, r3}
 8007d1a:	b500      	push	{lr}
 8007d1c:	b09c      	sub	sp, #112	; 0x70
 8007d1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d20:	9002      	str	r0, [sp, #8]
 8007d22:	9006      	str	r0, [sp, #24]
 8007d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d28:	4809      	ldr	r0, [pc, #36]	; (8007d50 <siprintf+0x38>)
 8007d2a:	9107      	str	r1, [sp, #28]
 8007d2c:	9104      	str	r1, [sp, #16]
 8007d2e:	4909      	ldr	r1, [pc, #36]	; (8007d54 <siprintf+0x3c>)
 8007d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d34:	9105      	str	r1, [sp, #20]
 8007d36:	6800      	ldr	r0, [r0, #0]
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	a902      	add	r1, sp, #8
 8007d3c:	f000 f8c4 	bl	8007ec8 <_svfiprintf_r>
 8007d40:	9b02      	ldr	r3, [sp, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	b01c      	add	sp, #112	; 0x70
 8007d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d4c:	b003      	add	sp, #12
 8007d4e:	4770      	bx	lr
 8007d50:	20000088 	.word	0x20000088
 8007d54:	ffff0208 	.word	0xffff0208

08007d58 <__retarget_lock_acquire_recursive>:
 8007d58:	4770      	bx	lr

08007d5a <__retarget_lock_release_recursive>:
 8007d5a:	4770      	bx	lr

08007d5c <_malloc_r>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	1ccd      	adds	r5, r1, #3
 8007d60:	f025 0503 	bic.w	r5, r5, #3
 8007d64:	3508      	adds	r5, #8
 8007d66:	2d0c      	cmp	r5, #12
 8007d68:	bf38      	it	cc
 8007d6a:	250c      	movcc	r5, #12
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	4606      	mov	r6, r0
 8007d70:	db01      	blt.n	8007d76 <_malloc_r+0x1a>
 8007d72:	42a9      	cmp	r1, r5
 8007d74:	d903      	bls.n	8007d7e <_malloc_r+0x22>
 8007d76:	230c      	movs	r3, #12
 8007d78:	6033      	str	r3, [r6, #0]
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7e:	f000 fb61 	bl	8008444 <__malloc_lock>
 8007d82:	4921      	ldr	r1, [pc, #132]	; (8007e08 <_malloc_r+0xac>)
 8007d84:	680a      	ldr	r2, [r1, #0]
 8007d86:	4614      	mov	r4, r2
 8007d88:	b99c      	cbnz	r4, 8007db2 <_malloc_r+0x56>
 8007d8a:	4f20      	ldr	r7, [pc, #128]	; (8007e0c <_malloc_r+0xb0>)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	b923      	cbnz	r3, 8007d9a <_malloc_r+0x3e>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 fb2c 	bl	80083f0 <_sbrk_r>
 8007d98:	6038      	str	r0, [r7, #0]
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 fb27 	bl	80083f0 <_sbrk_r>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d123      	bne.n	8007dee <_malloc_r+0x92>
 8007da6:	230c      	movs	r3, #12
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 fb50 	bl	8008450 <__malloc_unlock>
 8007db0:	e7e3      	b.n	8007d7a <_malloc_r+0x1e>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	1b5b      	subs	r3, r3, r5
 8007db6:	d417      	bmi.n	8007de8 <_malloc_r+0x8c>
 8007db8:	2b0b      	cmp	r3, #11
 8007dba:	d903      	bls.n	8007dc4 <_malloc_r+0x68>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	441c      	add	r4, r3
 8007dc0:	6025      	str	r5, [r4, #0]
 8007dc2:	e004      	b.n	8007dce <_malloc_r+0x72>
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	42a2      	cmp	r2, r4
 8007dc8:	bf0c      	ite	eq
 8007dca:	600b      	streq	r3, [r1, #0]
 8007dcc:	6053      	strne	r3, [r2, #4]
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 fb3e 	bl	8008450 <__malloc_unlock>
 8007dd4:	f104 000b 	add.w	r0, r4, #11
 8007dd8:	1d23      	adds	r3, r4, #4
 8007dda:	f020 0007 	bic.w	r0, r0, #7
 8007dde:	1ac2      	subs	r2, r0, r3
 8007de0:	d0cc      	beq.n	8007d7c <_malloc_r+0x20>
 8007de2:	1a1b      	subs	r3, r3, r0
 8007de4:	50a3      	str	r3, [r4, r2]
 8007de6:	e7c9      	b.n	8007d7c <_malloc_r+0x20>
 8007de8:	4622      	mov	r2, r4
 8007dea:	6864      	ldr	r4, [r4, #4]
 8007dec:	e7cc      	b.n	8007d88 <_malloc_r+0x2c>
 8007dee:	1cc4      	adds	r4, r0, #3
 8007df0:	f024 0403 	bic.w	r4, r4, #3
 8007df4:	42a0      	cmp	r0, r4
 8007df6:	d0e3      	beq.n	8007dc0 <_malloc_r+0x64>
 8007df8:	1a21      	subs	r1, r4, r0
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 faf8 	bl	80083f0 <_sbrk_r>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d1dd      	bne.n	8007dc0 <_malloc_r+0x64>
 8007e04:	e7cf      	b.n	8007da6 <_malloc_r+0x4a>
 8007e06:	bf00      	nop
 8007e08:	20008594 	.word	0x20008594
 8007e0c:	20008598 	.word	0x20008598

08007e10 <__ssputs_r>:
 8007e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e14:	688e      	ldr	r6, [r1, #8]
 8007e16:	429e      	cmp	r6, r3
 8007e18:	4682      	mov	sl, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	4690      	mov	r8, r2
 8007e1e:	461f      	mov	r7, r3
 8007e20:	d838      	bhi.n	8007e94 <__ssputs_r+0x84>
 8007e22:	898a      	ldrh	r2, [r1, #12]
 8007e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e28:	d032      	beq.n	8007e90 <__ssputs_r+0x80>
 8007e2a:	6825      	ldr	r5, [r4, #0]
 8007e2c:	6909      	ldr	r1, [r1, #16]
 8007e2e:	eba5 0901 	sub.w	r9, r5, r1
 8007e32:	6965      	ldr	r5, [r4, #20]
 8007e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	444b      	add	r3, r9
 8007e40:	106d      	asrs	r5, r5, #1
 8007e42:	429d      	cmp	r5, r3
 8007e44:	bf38      	it	cc
 8007e46:	461d      	movcc	r5, r3
 8007e48:	0553      	lsls	r3, r2, #21
 8007e4a:	d531      	bpl.n	8007eb0 <__ssputs_r+0xa0>
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	f7ff ff85 	bl	8007d5c <_malloc_r>
 8007e52:	4606      	mov	r6, r0
 8007e54:	b950      	cbnz	r0, 8007e6c <__ssputs_r+0x5c>
 8007e56:	230c      	movs	r3, #12
 8007e58:	f8ca 3000 	str.w	r3, [sl]
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e62:	81a3      	strh	r3, [r4, #12]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6c:	6921      	ldr	r1, [r4, #16]
 8007e6e:	464a      	mov	r2, r9
 8007e70:	f7ff ff08 	bl	8007c84 <memcpy>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	6126      	str	r6, [r4, #16]
 8007e82:	6165      	str	r5, [r4, #20]
 8007e84:	444e      	add	r6, r9
 8007e86:	eba5 0509 	sub.w	r5, r5, r9
 8007e8a:	6026      	str	r6, [r4, #0]
 8007e8c:	60a5      	str	r5, [r4, #8]
 8007e8e:	463e      	mov	r6, r7
 8007e90:	42be      	cmp	r6, r7
 8007e92:	d900      	bls.n	8007e96 <__ssputs_r+0x86>
 8007e94:	463e      	mov	r6, r7
 8007e96:	4632      	mov	r2, r6
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	f000 fab8 	bl	8008410 <memmove>
 8007ea0:	68a3      	ldr	r3, [r4, #8]
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	1b9b      	subs	r3, r3, r6
 8007ea6:	4432      	add	r2, r6
 8007ea8:	60a3      	str	r3, [r4, #8]
 8007eaa:	6022      	str	r2, [r4, #0]
 8007eac:	2000      	movs	r0, #0
 8007eae:	e7db      	b.n	8007e68 <__ssputs_r+0x58>
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	f000 fb23 	bl	80084fc <_realloc_r>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1e1      	bne.n	8007e80 <__ssputs_r+0x70>
 8007ebc:	6921      	ldr	r1, [r4, #16]
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	f000 facc 	bl	800845c <_free_r>
 8007ec4:	e7c7      	b.n	8007e56 <__ssputs_r+0x46>
	...

08007ec8 <_svfiprintf_r>:
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	4698      	mov	r8, r3
 8007ece:	898b      	ldrh	r3, [r1, #12]
 8007ed0:	061b      	lsls	r3, r3, #24
 8007ed2:	b09d      	sub	sp, #116	; 0x74
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	4614      	mov	r4, r2
 8007eda:	d50e      	bpl.n	8007efa <_svfiprintf_r+0x32>
 8007edc:	690b      	ldr	r3, [r1, #16]
 8007ede:	b963      	cbnz	r3, 8007efa <_svfiprintf_r+0x32>
 8007ee0:	2140      	movs	r1, #64	; 0x40
 8007ee2:	f7ff ff3b 	bl	8007d5c <_malloc_r>
 8007ee6:	6028      	str	r0, [r5, #0]
 8007ee8:	6128      	str	r0, [r5, #16]
 8007eea:	b920      	cbnz	r0, 8007ef6 <_svfiprintf_r+0x2e>
 8007eec:	230c      	movs	r3, #12
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e0d1      	b.n	800809a <_svfiprintf_r+0x1d2>
 8007ef6:	2340      	movs	r3, #64	; 0x40
 8007ef8:	616b      	str	r3, [r5, #20]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9309      	str	r3, [sp, #36]	; 0x24
 8007efe:	2320      	movs	r3, #32
 8007f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f08:	2330      	movs	r3, #48	; 0x30
 8007f0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080b4 <_svfiprintf_r+0x1ec>
 8007f0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f12:	f04f 0901 	mov.w	r9, #1
 8007f16:	4623      	mov	r3, r4
 8007f18:	469a      	mov	sl, r3
 8007f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f1e:	b10a      	cbz	r2, 8007f24 <_svfiprintf_r+0x5c>
 8007f20:	2a25      	cmp	r2, #37	; 0x25
 8007f22:	d1f9      	bne.n	8007f18 <_svfiprintf_r+0x50>
 8007f24:	ebba 0b04 	subs.w	fp, sl, r4
 8007f28:	d00b      	beq.n	8007f42 <_svfiprintf_r+0x7a>
 8007f2a:	465b      	mov	r3, fp
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7ff ff6d 	bl	8007e10 <__ssputs_r>
 8007f36:	3001      	adds	r0, #1
 8007f38:	f000 80aa 	beq.w	8008090 <_svfiprintf_r+0x1c8>
 8007f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f3e:	445a      	add	r2, fp
 8007f40:	9209      	str	r2, [sp, #36]	; 0x24
 8007f42:	f89a 3000 	ldrb.w	r3, [sl]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80a2 	beq.w	8008090 <_svfiprintf_r+0x1c8>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f56:	f10a 0a01 	add.w	sl, sl, #1
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f62:	931a      	str	r3, [sp, #104]	; 0x68
 8007f64:	4654      	mov	r4, sl
 8007f66:	2205      	movs	r2, #5
 8007f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6c:	4851      	ldr	r0, [pc, #324]	; (80080b4 <_svfiprintf_r+0x1ec>)
 8007f6e:	f7f8 f93f 	bl	80001f0 <memchr>
 8007f72:	9a04      	ldr	r2, [sp, #16]
 8007f74:	b9d8      	cbnz	r0, 8007fae <_svfiprintf_r+0xe6>
 8007f76:	06d0      	lsls	r0, r2, #27
 8007f78:	bf44      	itt	mi
 8007f7a:	2320      	movmi	r3, #32
 8007f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f80:	0711      	lsls	r1, r2, #28
 8007f82:	bf44      	itt	mi
 8007f84:	232b      	movmi	r3, #43	; 0x2b
 8007f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f90:	d015      	beq.n	8007fbe <_svfiprintf_r+0xf6>
 8007f92:	9a07      	ldr	r2, [sp, #28]
 8007f94:	4654      	mov	r4, sl
 8007f96:	2000      	movs	r0, #0
 8007f98:	f04f 0c0a 	mov.w	ip, #10
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fa2:	3b30      	subs	r3, #48	; 0x30
 8007fa4:	2b09      	cmp	r3, #9
 8007fa6:	d94e      	bls.n	8008046 <_svfiprintf_r+0x17e>
 8007fa8:	b1b0      	cbz	r0, 8007fd8 <_svfiprintf_r+0x110>
 8007faa:	9207      	str	r2, [sp, #28]
 8007fac:	e014      	b.n	8007fd8 <_svfiprintf_r+0x110>
 8007fae:	eba0 0308 	sub.w	r3, r0, r8
 8007fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	46a2      	mov	sl, r4
 8007fbc:	e7d2      	b.n	8007f64 <_svfiprintf_r+0x9c>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	1d19      	adds	r1, r3, #4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	9103      	str	r1, [sp, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bfbb      	ittet	lt
 8007fca:	425b      	neglt	r3, r3
 8007fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007fd0:	9307      	strge	r3, [sp, #28]
 8007fd2:	9307      	strlt	r3, [sp, #28]
 8007fd4:	bfb8      	it	lt
 8007fd6:	9204      	strlt	r2, [sp, #16]
 8007fd8:	7823      	ldrb	r3, [r4, #0]
 8007fda:	2b2e      	cmp	r3, #46	; 0x2e
 8007fdc:	d10c      	bne.n	8007ff8 <_svfiprintf_r+0x130>
 8007fde:	7863      	ldrb	r3, [r4, #1]
 8007fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe2:	d135      	bne.n	8008050 <_svfiprintf_r+0x188>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	1d1a      	adds	r2, r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	9203      	str	r2, [sp, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfb8      	it	lt
 8007ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ff4:	3402      	adds	r4, #2
 8007ff6:	9305      	str	r3, [sp, #20]
 8007ff8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080c4 <_svfiprintf_r+0x1fc>
 8007ffc:	7821      	ldrb	r1, [r4, #0]
 8007ffe:	2203      	movs	r2, #3
 8008000:	4650      	mov	r0, sl
 8008002:	f7f8 f8f5 	bl	80001f0 <memchr>
 8008006:	b140      	cbz	r0, 800801a <_svfiprintf_r+0x152>
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	eba0 000a 	sub.w	r0, r0, sl
 800800e:	fa03 f000 	lsl.w	r0, r3, r0
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	4303      	orrs	r3, r0
 8008016:	3401      	adds	r4, #1
 8008018:	9304      	str	r3, [sp, #16]
 800801a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800801e:	4826      	ldr	r0, [pc, #152]	; (80080b8 <_svfiprintf_r+0x1f0>)
 8008020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008024:	2206      	movs	r2, #6
 8008026:	f7f8 f8e3 	bl	80001f0 <memchr>
 800802a:	2800      	cmp	r0, #0
 800802c:	d038      	beq.n	80080a0 <_svfiprintf_r+0x1d8>
 800802e:	4b23      	ldr	r3, [pc, #140]	; (80080bc <_svfiprintf_r+0x1f4>)
 8008030:	bb1b      	cbnz	r3, 800807a <_svfiprintf_r+0x1b2>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	3307      	adds	r3, #7
 8008036:	f023 0307 	bic.w	r3, r3, #7
 800803a:	3308      	adds	r3, #8
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	4433      	add	r3, r6
 8008042:	9309      	str	r3, [sp, #36]	; 0x24
 8008044:	e767      	b.n	8007f16 <_svfiprintf_r+0x4e>
 8008046:	fb0c 3202 	mla	r2, ip, r2, r3
 800804a:	460c      	mov	r4, r1
 800804c:	2001      	movs	r0, #1
 800804e:	e7a5      	b.n	8007f9c <_svfiprintf_r+0xd4>
 8008050:	2300      	movs	r3, #0
 8008052:	3401      	adds	r4, #1
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	4619      	mov	r1, r3
 8008058:	f04f 0c0a 	mov.w	ip, #10
 800805c:	4620      	mov	r0, r4
 800805e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008062:	3a30      	subs	r2, #48	; 0x30
 8008064:	2a09      	cmp	r2, #9
 8008066:	d903      	bls.n	8008070 <_svfiprintf_r+0x1a8>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0c5      	beq.n	8007ff8 <_svfiprintf_r+0x130>
 800806c:	9105      	str	r1, [sp, #20]
 800806e:	e7c3      	b.n	8007ff8 <_svfiprintf_r+0x130>
 8008070:	fb0c 2101 	mla	r1, ip, r1, r2
 8008074:	4604      	mov	r4, r0
 8008076:	2301      	movs	r3, #1
 8008078:	e7f0      	b.n	800805c <_svfiprintf_r+0x194>
 800807a:	ab03      	add	r3, sp, #12
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	462a      	mov	r2, r5
 8008080:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <_svfiprintf_r+0x1f8>)
 8008082:	a904      	add	r1, sp, #16
 8008084:	4638      	mov	r0, r7
 8008086:	f3af 8000 	nop.w
 800808a:	1c42      	adds	r2, r0, #1
 800808c:	4606      	mov	r6, r0
 800808e:	d1d6      	bne.n	800803e <_svfiprintf_r+0x176>
 8008090:	89ab      	ldrh	r3, [r5, #12]
 8008092:	065b      	lsls	r3, r3, #25
 8008094:	f53f af2c 	bmi.w	8007ef0 <_svfiprintf_r+0x28>
 8008098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800809a:	b01d      	add	sp, #116	; 0x74
 800809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a0:	ab03      	add	r3, sp, #12
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	462a      	mov	r2, r5
 80080a6:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <_svfiprintf_r+0x1f8>)
 80080a8:	a904      	add	r1, sp, #16
 80080aa:	4638      	mov	r0, r7
 80080ac:	f000 f87a 	bl	80081a4 <_printf_i>
 80080b0:	e7eb      	b.n	800808a <_svfiprintf_r+0x1c2>
 80080b2:	bf00      	nop
 80080b4:	0800ad00 	.word	0x0800ad00
 80080b8:	0800ad0a 	.word	0x0800ad0a
 80080bc:	00000000 	.word	0x00000000
 80080c0:	08007e11 	.word	0x08007e11
 80080c4:	0800ad06 	.word	0x0800ad06

080080c8 <_printf_common>:
 80080c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	4616      	mov	r6, r2
 80080ce:	4699      	mov	r9, r3
 80080d0:	688a      	ldr	r2, [r1, #8]
 80080d2:	690b      	ldr	r3, [r1, #16]
 80080d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080d8:	4293      	cmp	r3, r2
 80080da:	bfb8      	it	lt
 80080dc:	4613      	movlt	r3, r2
 80080de:	6033      	str	r3, [r6, #0]
 80080e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080e4:	4607      	mov	r7, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	b10a      	cbz	r2, 80080ee <_printf_common+0x26>
 80080ea:	3301      	adds	r3, #1
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	0699      	lsls	r1, r3, #26
 80080f2:	bf42      	ittt	mi
 80080f4:	6833      	ldrmi	r3, [r6, #0]
 80080f6:	3302      	addmi	r3, #2
 80080f8:	6033      	strmi	r3, [r6, #0]
 80080fa:	6825      	ldr	r5, [r4, #0]
 80080fc:	f015 0506 	ands.w	r5, r5, #6
 8008100:	d106      	bne.n	8008110 <_printf_common+0x48>
 8008102:	f104 0a19 	add.w	sl, r4, #25
 8008106:	68e3      	ldr	r3, [r4, #12]
 8008108:	6832      	ldr	r2, [r6, #0]
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	42ab      	cmp	r3, r5
 800810e:	dc26      	bgt.n	800815e <_printf_common+0x96>
 8008110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008114:	1e13      	subs	r3, r2, #0
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	bf18      	it	ne
 800811a:	2301      	movne	r3, #1
 800811c:	0692      	lsls	r2, r2, #26
 800811e:	d42b      	bmi.n	8008178 <_printf_common+0xb0>
 8008120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008124:	4649      	mov	r1, r9
 8008126:	4638      	mov	r0, r7
 8008128:	47c0      	blx	r8
 800812a:	3001      	adds	r0, #1
 800812c:	d01e      	beq.n	800816c <_printf_common+0xa4>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	68e5      	ldr	r5, [r4, #12]
 8008132:	6832      	ldr	r2, [r6, #0]
 8008134:	f003 0306 	and.w	r3, r3, #6
 8008138:	2b04      	cmp	r3, #4
 800813a:	bf08      	it	eq
 800813c:	1aad      	subeq	r5, r5, r2
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	6922      	ldr	r2, [r4, #16]
 8008142:	bf0c      	ite	eq
 8008144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008148:	2500      	movne	r5, #0
 800814a:	4293      	cmp	r3, r2
 800814c:	bfc4      	itt	gt
 800814e:	1a9b      	subgt	r3, r3, r2
 8008150:	18ed      	addgt	r5, r5, r3
 8008152:	2600      	movs	r6, #0
 8008154:	341a      	adds	r4, #26
 8008156:	42b5      	cmp	r5, r6
 8008158:	d11a      	bne.n	8008190 <_printf_common+0xc8>
 800815a:	2000      	movs	r0, #0
 800815c:	e008      	b.n	8008170 <_printf_common+0xa8>
 800815e:	2301      	movs	r3, #1
 8008160:	4652      	mov	r2, sl
 8008162:	4649      	mov	r1, r9
 8008164:	4638      	mov	r0, r7
 8008166:	47c0      	blx	r8
 8008168:	3001      	adds	r0, #1
 800816a:	d103      	bne.n	8008174 <_printf_common+0xac>
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008174:	3501      	adds	r5, #1
 8008176:	e7c6      	b.n	8008106 <_printf_common+0x3e>
 8008178:	18e1      	adds	r1, r4, r3
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	2030      	movs	r0, #48	; 0x30
 800817e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008182:	4422      	add	r2, r4
 8008184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800818c:	3302      	adds	r3, #2
 800818e:	e7c7      	b.n	8008120 <_printf_common+0x58>
 8008190:	2301      	movs	r3, #1
 8008192:	4622      	mov	r2, r4
 8008194:	4649      	mov	r1, r9
 8008196:	4638      	mov	r0, r7
 8008198:	47c0      	blx	r8
 800819a:	3001      	adds	r0, #1
 800819c:	d0e6      	beq.n	800816c <_printf_common+0xa4>
 800819e:	3601      	adds	r6, #1
 80081a0:	e7d9      	b.n	8008156 <_printf_common+0x8e>
	...

080081a4 <_printf_i>:
 80081a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	4691      	mov	r9, r2
 80081ac:	7e27      	ldrb	r7, [r4, #24]
 80081ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081b0:	2f78      	cmp	r7, #120	; 0x78
 80081b2:	4680      	mov	r8, r0
 80081b4:	469a      	mov	sl, r3
 80081b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ba:	d807      	bhi.n	80081cc <_printf_i+0x28>
 80081bc:	2f62      	cmp	r7, #98	; 0x62
 80081be:	d80a      	bhi.n	80081d6 <_printf_i+0x32>
 80081c0:	2f00      	cmp	r7, #0
 80081c2:	f000 80d8 	beq.w	8008376 <_printf_i+0x1d2>
 80081c6:	2f58      	cmp	r7, #88	; 0x58
 80081c8:	f000 80a3 	beq.w	8008312 <_printf_i+0x16e>
 80081cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081d4:	e03a      	b.n	800824c <_printf_i+0xa8>
 80081d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081da:	2b15      	cmp	r3, #21
 80081dc:	d8f6      	bhi.n	80081cc <_printf_i+0x28>
 80081de:	a001      	add	r0, pc, #4	; (adr r0, 80081e4 <_printf_i+0x40>)
 80081e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081e4:	0800823d 	.word	0x0800823d
 80081e8:	08008251 	.word	0x08008251
 80081ec:	080081cd 	.word	0x080081cd
 80081f0:	080081cd 	.word	0x080081cd
 80081f4:	080081cd 	.word	0x080081cd
 80081f8:	080081cd 	.word	0x080081cd
 80081fc:	08008251 	.word	0x08008251
 8008200:	080081cd 	.word	0x080081cd
 8008204:	080081cd 	.word	0x080081cd
 8008208:	080081cd 	.word	0x080081cd
 800820c:	080081cd 	.word	0x080081cd
 8008210:	0800835d 	.word	0x0800835d
 8008214:	08008281 	.word	0x08008281
 8008218:	0800833f 	.word	0x0800833f
 800821c:	080081cd 	.word	0x080081cd
 8008220:	080081cd 	.word	0x080081cd
 8008224:	0800837f 	.word	0x0800837f
 8008228:	080081cd 	.word	0x080081cd
 800822c:	08008281 	.word	0x08008281
 8008230:	080081cd 	.word	0x080081cd
 8008234:	080081cd 	.word	0x080081cd
 8008238:	08008347 	.word	0x08008347
 800823c:	680b      	ldr	r3, [r1, #0]
 800823e:	1d1a      	adds	r2, r3, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	600a      	str	r2, [r1, #0]
 8008244:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800824c:	2301      	movs	r3, #1
 800824e:	e0a3      	b.n	8008398 <_printf_i+0x1f4>
 8008250:	6825      	ldr	r5, [r4, #0]
 8008252:	6808      	ldr	r0, [r1, #0]
 8008254:	062e      	lsls	r6, r5, #24
 8008256:	f100 0304 	add.w	r3, r0, #4
 800825a:	d50a      	bpl.n	8008272 <_printf_i+0xce>
 800825c:	6805      	ldr	r5, [r0, #0]
 800825e:	600b      	str	r3, [r1, #0]
 8008260:	2d00      	cmp	r5, #0
 8008262:	da03      	bge.n	800826c <_printf_i+0xc8>
 8008264:	232d      	movs	r3, #45	; 0x2d
 8008266:	426d      	negs	r5, r5
 8008268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800826c:	485e      	ldr	r0, [pc, #376]	; (80083e8 <_printf_i+0x244>)
 800826e:	230a      	movs	r3, #10
 8008270:	e019      	b.n	80082a6 <_printf_i+0x102>
 8008272:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008276:	6805      	ldr	r5, [r0, #0]
 8008278:	600b      	str	r3, [r1, #0]
 800827a:	bf18      	it	ne
 800827c:	b22d      	sxthne	r5, r5
 800827e:	e7ef      	b.n	8008260 <_printf_i+0xbc>
 8008280:	680b      	ldr	r3, [r1, #0]
 8008282:	6825      	ldr	r5, [r4, #0]
 8008284:	1d18      	adds	r0, r3, #4
 8008286:	6008      	str	r0, [r1, #0]
 8008288:	0628      	lsls	r0, r5, #24
 800828a:	d501      	bpl.n	8008290 <_printf_i+0xec>
 800828c:	681d      	ldr	r5, [r3, #0]
 800828e:	e002      	b.n	8008296 <_printf_i+0xf2>
 8008290:	0669      	lsls	r1, r5, #25
 8008292:	d5fb      	bpl.n	800828c <_printf_i+0xe8>
 8008294:	881d      	ldrh	r5, [r3, #0]
 8008296:	4854      	ldr	r0, [pc, #336]	; (80083e8 <_printf_i+0x244>)
 8008298:	2f6f      	cmp	r7, #111	; 0x6f
 800829a:	bf0c      	ite	eq
 800829c:	2308      	moveq	r3, #8
 800829e:	230a      	movne	r3, #10
 80082a0:	2100      	movs	r1, #0
 80082a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082a6:	6866      	ldr	r6, [r4, #4]
 80082a8:	60a6      	str	r6, [r4, #8]
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	bfa2      	ittt	ge
 80082ae:	6821      	ldrge	r1, [r4, #0]
 80082b0:	f021 0104 	bicge.w	r1, r1, #4
 80082b4:	6021      	strge	r1, [r4, #0]
 80082b6:	b90d      	cbnz	r5, 80082bc <_printf_i+0x118>
 80082b8:	2e00      	cmp	r6, #0
 80082ba:	d04d      	beq.n	8008358 <_printf_i+0x1b4>
 80082bc:	4616      	mov	r6, r2
 80082be:	fbb5 f1f3 	udiv	r1, r5, r3
 80082c2:	fb03 5711 	mls	r7, r3, r1, r5
 80082c6:	5dc7      	ldrb	r7, [r0, r7]
 80082c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082cc:	462f      	mov	r7, r5
 80082ce:	42bb      	cmp	r3, r7
 80082d0:	460d      	mov	r5, r1
 80082d2:	d9f4      	bls.n	80082be <_printf_i+0x11a>
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d10b      	bne.n	80082f0 <_printf_i+0x14c>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	07df      	lsls	r7, r3, #31
 80082dc:	d508      	bpl.n	80082f0 <_printf_i+0x14c>
 80082de:	6923      	ldr	r3, [r4, #16]
 80082e0:	6861      	ldr	r1, [r4, #4]
 80082e2:	4299      	cmp	r1, r3
 80082e4:	bfde      	ittt	le
 80082e6:	2330      	movle	r3, #48	; 0x30
 80082e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082f0:	1b92      	subs	r2, r2, r6
 80082f2:	6122      	str	r2, [r4, #16]
 80082f4:	f8cd a000 	str.w	sl, [sp]
 80082f8:	464b      	mov	r3, r9
 80082fa:	aa03      	add	r2, sp, #12
 80082fc:	4621      	mov	r1, r4
 80082fe:	4640      	mov	r0, r8
 8008300:	f7ff fee2 	bl	80080c8 <_printf_common>
 8008304:	3001      	adds	r0, #1
 8008306:	d14c      	bne.n	80083a2 <_printf_i+0x1fe>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	b004      	add	sp, #16
 800830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008312:	4835      	ldr	r0, [pc, #212]	; (80083e8 <_printf_i+0x244>)
 8008314:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	680e      	ldr	r6, [r1, #0]
 800831c:	061f      	lsls	r7, r3, #24
 800831e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008322:	600e      	str	r6, [r1, #0]
 8008324:	d514      	bpl.n	8008350 <_printf_i+0x1ac>
 8008326:	07d9      	lsls	r1, r3, #31
 8008328:	bf44      	itt	mi
 800832a:	f043 0320 	orrmi.w	r3, r3, #32
 800832e:	6023      	strmi	r3, [r4, #0]
 8008330:	b91d      	cbnz	r5, 800833a <_printf_i+0x196>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	f023 0320 	bic.w	r3, r3, #32
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	2310      	movs	r3, #16
 800833c:	e7b0      	b.n	80082a0 <_printf_i+0xfc>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	f043 0320 	orr.w	r3, r3, #32
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	2378      	movs	r3, #120	; 0x78
 8008348:	4828      	ldr	r0, [pc, #160]	; (80083ec <_printf_i+0x248>)
 800834a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800834e:	e7e3      	b.n	8008318 <_printf_i+0x174>
 8008350:	065e      	lsls	r6, r3, #25
 8008352:	bf48      	it	mi
 8008354:	b2ad      	uxthmi	r5, r5
 8008356:	e7e6      	b.n	8008326 <_printf_i+0x182>
 8008358:	4616      	mov	r6, r2
 800835a:	e7bb      	b.n	80082d4 <_printf_i+0x130>
 800835c:	680b      	ldr	r3, [r1, #0]
 800835e:	6826      	ldr	r6, [r4, #0]
 8008360:	6960      	ldr	r0, [r4, #20]
 8008362:	1d1d      	adds	r5, r3, #4
 8008364:	600d      	str	r5, [r1, #0]
 8008366:	0635      	lsls	r5, r6, #24
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	d501      	bpl.n	8008370 <_printf_i+0x1cc>
 800836c:	6018      	str	r0, [r3, #0]
 800836e:	e002      	b.n	8008376 <_printf_i+0x1d2>
 8008370:	0671      	lsls	r1, r6, #25
 8008372:	d5fb      	bpl.n	800836c <_printf_i+0x1c8>
 8008374:	8018      	strh	r0, [r3, #0]
 8008376:	2300      	movs	r3, #0
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	4616      	mov	r6, r2
 800837c:	e7ba      	b.n	80082f4 <_printf_i+0x150>
 800837e:	680b      	ldr	r3, [r1, #0]
 8008380:	1d1a      	adds	r2, r3, #4
 8008382:	600a      	str	r2, [r1, #0]
 8008384:	681e      	ldr	r6, [r3, #0]
 8008386:	6862      	ldr	r2, [r4, #4]
 8008388:	2100      	movs	r1, #0
 800838a:	4630      	mov	r0, r6
 800838c:	f7f7 ff30 	bl	80001f0 <memchr>
 8008390:	b108      	cbz	r0, 8008396 <_printf_i+0x1f2>
 8008392:	1b80      	subs	r0, r0, r6
 8008394:	6060      	str	r0, [r4, #4]
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	2300      	movs	r3, #0
 800839c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a0:	e7a8      	b.n	80082f4 <_printf_i+0x150>
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	4632      	mov	r2, r6
 80083a6:	4649      	mov	r1, r9
 80083a8:	4640      	mov	r0, r8
 80083aa:	47d0      	blx	sl
 80083ac:	3001      	adds	r0, #1
 80083ae:	d0ab      	beq.n	8008308 <_printf_i+0x164>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	079b      	lsls	r3, r3, #30
 80083b4:	d413      	bmi.n	80083de <_printf_i+0x23a>
 80083b6:	68e0      	ldr	r0, [r4, #12]
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	4298      	cmp	r0, r3
 80083bc:	bfb8      	it	lt
 80083be:	4618      	movlt	r0, r3
 80083c0:	e7a4      	b.n	800830c <_printf_i+0x168>
 80083c2:	2301      	movs	r3, #1
 80083c4:	4632      	mov	r2, r6
 80083c6:	4649      	mov	r1, r9
 80083c8:	4640      	mov	r0, r8
 80083ca:	47d0      	blx	sl
 80083cc:	3001      	adds	r0, #1
 80083ce:	d09b      	beq.n	8008308 <_printf_i+0x164>
 80083d0:	3501      	adds	r5, #1
 80083d2:	68e3      	ldr	r3, [r4, #12]
 80083d4:	9903      	ldr	r1, [sp, #12]
 80083d6:	1a5b      	subs	r3, r3, r1
 80083d8:	42ab      	cmp	r3, r5
 80083da:	dcf2      	bgt.n	80083c2 <_printf_i+0x21e>
 80083dc:	e7eb      	b.n	80083b6 <_printf_i+0x212>
 80083de:	2500      	movs	r5, #0
 80083e0:	f104 0619 	add.w	r6, r4, #25
 80083e4:	e7f5      	b.n	80083d2 <_printf_i+0x22e>
 80083e6:	bf00      	nop
 80083e8:	0800ad11 	.word	0x0800ad11
 80083ec:	0800ad22 	.word	0x0800ad22

080083f0 <_sbrk_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d06      	ldr	r5, [pc, #24]	; (800840c <_sbrk_r+0x1c>)
 80083f4:	2300      	movs	r3, #0
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	602b      	str	r3, [r5, #0]
 80083fc:	f7fa f88a 	bl	8002514 <_sbrk>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_sbrk_r+0x1a>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_sbrk_r+0x1a>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	20008bb8 	.word	0x20008bb8

08008410 <memmove>:
 8008410:	4288      	cmp	r0, r1
 8008412:	b510      	push	{r4, lr}
 8008414:	eb01 0402 	add.w	r4, r1, r2
 8008418:	d902      	bls.n	8008420 <memmove+0x10>
 800841a:	4284      	cmp	r4, r0
 800841c:	4623      	mov	r3, r4
 800841e:	d807      	bhi.n	8008430 <memmove+0x20>
 8008420:	1e43      	subs	r3, r0, #1
 8008422:	42a1      	cmp	r1, r4
 8008424:	d008      	beq.n	8008438 <memmove+0x28>
 8008426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800842a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800842e:	e7f8      	b.n	8008422 <memmove+0x12>
 8008430:	4402      	add	r2, r0
 8008432:	4601      	mov	r1, r0
 8008434:	428a      	cmp	r2, r1
 8008436:	d100      	bne.n	800843a <memmove+0x2a>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800843e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008442:	e7f7      	b.n	8008434 <memmove+0x24>

08008444 <__malloc_lock>:
 8008444:	4801      	ldr	r0, [pc, #4]	; (800844c <__malloc_lock+0x8>)
 8008446:	f7ff bc87 	b.w	8007d58 <__retarget_lock_acquire_recursive>
 800844a:	bf00      	nop
 800844c:	20008bb0 	.word	0x20008bb0

08008450 <__malloc_unlock>:
 8008450:	4801      	ldr	r0, [pc, #4]	; (8008458 <__malloc_unlock+0x8>)
 8008452:	f7ff bc82 	b.w	8007d5a <__retarget_lock_release_recursive>
 8008456:	bf00      	nop
 8008458:	20008bb0 	.word	0x20008bb0

0800845c <_free_r>:
 800845c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800845e:	2900      	cmp	r1, #0
 8008460:	d048      	beq.n	80084f4 <_free_r+0x98>
 8008462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008466:	9001      	str	r0, [sp, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f1a1 0404 	sub.w	r4, r1, #4
 800846e:	bfb8      	it	lt
 8008470:	18e4      	addlt	r4, r4, r3
 8008472:	f7ff ffe7 	bl	8008444 <__malloc_lock>
 8008476:	4a20      	ldr	r2, [pc, #128]	; (80084f8 <_free_r+0x9c>)
 8008478:	9801      	ldr	r0, [sp, #4]
 800847a:	6813      	ldr	r3, [r2, #0]
 800847c:	4615      	mov	r5, r2
 800847e:	b933      	cbnz	r3, 800848e <_free_r+0x32>
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	6014      	str	r4, [r2, #0]
 8008484:	b003      	add	sp, #12
 8008486:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800848a:	f7ff bfe1 	b.w	8008450 <__malloc_unlock>
 800848e:	42a3      	cmp	r3, r4
 8008490:	d90b      	bls.n	80084aa <_free_r+0x4e>
 8008492:	6821      	ldr	r1, [r4, #0]
 8008494:	1862      	adds	r2, r4, r1
 8008496:	4293      	cmp	r3, r2
 8008498:	bf04      	itt	eq
 800849a:	681a      	ldreq	r2, [r3, #0]
 800849c:	685b      	ldreq	r3, [r3, #4]
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	bf04      	itt	eq
 80084a2:	1852      	addeq	r2, r2, r1
 80084a4:	6022      	streq	r2, [r4, #0]
 80084a6:	602c      	str	r4, [r5, #0]
 80084a8:	e7ec      	b.n	8008484 <_free_r+0x28>
 80084aa:	461a      	mov	r2, r3
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	b10b      	cbz	r3, 80084b4 <_free_r+0x58>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d9fa      	bls.n	80084aa <_free_r+0x4e>
 80084b4:	6811      	ldr	r1, [r2, #0]
 80084b6:	1855      	adds	r5, r2, r1
 80084b8:	42a5      	cmp	r5, r4
 80084ba:	d10b      	bne.n	80084d4 <_free_r+0x78>
 80084bc:	6824      	ldr	r4, [r4, #0]
 80084be:	4421      	add	r1, r4
 80084c0:	1854      	adds	r4, r2, r1
 80084c2:	42a3      	cmp	r3, r4
 80084c4:	6011      	str	r1, [r2, #0]
 80084c6:	d1dd      	bne.n	8008484 <_free_r+0x28>
 80084c8:	681c      	ldr	r4, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	6053      	str	r3, [r2, #4]
 80084ce:	4421      	add	r1, r4
 80084d0:	6011      	str	r1, [r2, #0]
 80084d2:	e7d7      	b.n	8008484 <_free_r+0x28>
 80084d4:	d902      	bls.n	80084dc <_free_r+0x80>
 80084d6:	230c      	movs	r3, #12
 80084d8:	6003      	str	r3, [r0, #0]
 80084da:	e7d3      	b.n	8008484 <_free_r+0x28>
 80084dc:	6825      	ldr	r5, [r4, #0]
 80084de:	1961      	adds	r1, r4, r5
 80084e0:	428b      	cmp	r3, r1
 80084e2:	bf04      	itt	eq
 80084e4:	6819      	ldreq	r1, [r3, #0]
 80084e6:	685b      	ldreq	r3, [r3, #4]
 80084e8:	6063      	str	r3, [r4, #4]
 80084ea:	bf04      	itt	eq
 80084ec:	1949      	addeq	r1, r1, r5
 80084ee:	6021      	streq	r1, [r4, #0]
 80084f0:	6054      	str	r4, [r2, #4]
 80084f2:	e7c7      	b.n	8008484 <_free_r+0x28>
 80084f4:	b003      	add	sp, #12
 80084f6:	bd30      	pop	{r4, r5, pc}
 80084f8:	20008594 	.word	0x20008594

080084fc <_realloc_r>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	4607      	mov	r7, r0
 8008500:	4614      	mov	r4, r2
 8008502:	460e      	mov	r6, r1
 8008504:	b921      	cbnz	r1, 8008510 <_realloc_r+0x14>
 8008506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800850a:	4611      	mov	r1, r2
 800850c:	f7ff bc26 	b.w	8007d5c <_malloc_r>
 8008510:	b922      	cbnz	r2, 800851c <_realloc_r+0x20>
 8008512:	f7ff ffa3 	bl	800845c <_free_r>
 8008516:	4625      	mov	r5, r4
 8008518:	4628      	mov	r0, r5
 800851a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851c:	f000 f814 	bl	8008548 <_malloc_usable_size_r>
 8008520:	42a0      	cmp	r0, r4
 8008522:	d20f      	bcs.n	8008544 <_realloc_r+0x48>
 8008524:	4621      	mov	r1, r4
 8008526:	4638      	mov	r0, r7
 8008528:	f7ff fc18 	bl	8007d5c <_malloc_r>
 800852c:	4605      	mov	r5, r0
 800852e:	2800      	cmp	r0, #0
 8008530:	d0f2      	beq.n	8008518 <_realloc_r+0x1c>
 8008532:	4631      	mov	r1, r6
 8008534:	4622      	mov	r2, r4
 8008536:	f7ff fba5 	bl	8007c84 <memcpy>
 800853a:	4631      	mov	r1, r6
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ff8d 	bl	800845c <_free_r>
 8008542:	e7e9      	b.n	8008518 <_realloc_r+0x1c>
 8008544:	4635      	mov	r5, r6
 8008546:	e7e7      	b.n	8008518 <_realloc_r+0x1c>

08008548 <_malloc_usable_size_r>:
 8008548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854c:	1f18      	subs	r0, r3, #4
 800854e:	2b00      	cmp	r3, #0
 8008550:	bfbc      	itt	lt
 8008552:	580b      	ldrlt	r3, [r1, r0]
 8008554:	18c0      	addlt	r0, r0, r3
 8008556:	4770      	bx	lr

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr
