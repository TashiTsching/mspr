
V4_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007494  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000278c  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd0  08009dd0  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd8  08009dd8  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08009de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          00008a68  200000c4  200000c4  000200c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008b2c  20008b2c  000200c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035e27  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000593d  00000000  00000000  00055f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000224f3  00000000  00000000  0005b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002070  00000000  00000000  0007dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000020a8  00000000  00000000  0007fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a6ce  00000000  00000000  00081e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000331ad  00000000  00000000  000ac536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f4589  00000000  00000000  000df6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001d3c6c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006378  00000000  00000000  001d3cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800762c 	.word	0x0800762c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	0800762c 	.word	0x0800762c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HeartbeatTask>:
		}

	}
}

static void HeartbeatTask(__attribute__ ((unused)) void *pvParameters) {
 8000588:	b510      	push	{r4, lr}
 800058a:	e008      	b.n	800059e <HeartbeatTask+0x16>

	while (1) {
		while (BSP_PB_GetState(BUTTON_KEY)) {
			for (uint8_t i = 0; i < 4; ++i) {
				HAL_GPIO_TogglePin(LD_GPIO_PORT, LD4_RED);
 800058c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <HeartbeatTask+0x38>)
 8000592:	f002 f94e 	bl	8002832 <HAL_GPIO_TogglePin>
			for (uint8_t i = 0; i < 4; ++i) {
 8000596:	3401      	adds	r4, #1
 8000598:	b2e4      	uxtb	r4, r4
 800059a:	2c03      	cmp	r4, #3
 800059c:	d9f6      	bls.n	800058c <HeartbeatTask+0x4>
		while (BSP_PB_GetState(BUTTON_KEY)) {
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fb18 	bl	8000bd4 <BSP_PB_GetState>
 80005a4:	b108      	cbz	r0, 80005aa <HeartbeatTask+0x22>
			for (uint8_t i = 0; i < 4; ++i) {
 80005a6:	2400      	movs	r4, #0
 80005a8:	e7f7      	b.n	800059a <HeartbeatTask+0x12>
			}
		}
		HAL_GPIO_TogglePin(LD_GPIO_PORT, LD4_RED);
 80005aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <HeartbeatTask+0x38>)
 80005b0:	f002 f93f 	bl	8002832 <HAL_GPIO_TogglePin>
		vTaskDelay(300);
 80005b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005b8:	f005 fe6c 	bl	8006294 <vTaskDelay>
		while (BSP_PB_GetState(BUTTON_KEY)) {
 80005bc:	e7ef      	b.n	800059e <HeartbeatTask+0x16>
 80005be:	bf00      	nop
 80005c0:	40021800 	.word	0x40021800

080005c4 <CounterTask>:
static void CounterTask(__attribute__ ((unused)) void *pvParameters) {
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	b086      	sub	sp, #24
	int semaphore_take_errors = 0;
 80005c8:	2500      	movs	r5, #0
	int n = 0;
 80005ca:	462c      	mov	r4, r5
 80005cc:	e014      	b.n	80005f8 <CounterTask+0x34>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80005ce:	4820      	ldr	r0, [pc, #128]	; (8000650 <CounterTask+0x8c>)
 80005d0:	f000 fc5a 	bl	8000e88 <BSP_LCD_SetTextColor>
			snprintf(text, sizeof(text), "ST-Error = %d",
 80005d4:	1c6e      	adds	r6, r5, #1
 80005d6:	462b      	mov	r3, r5
 80005d8:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <CounterTask+0x90>)
 80005da:	2114      	movs	r1, #20
 80005dc:	a801      	add	r0, sp, #4
 80005de:	f006 fbb7 	bl	8006d50 <sniprintf>
			BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, text,
 80005e2:	f000 fbff 	bl	8000de4 <BSP_LCD_GetYSize>
 80005e6:	0841      	lsrs	r1, r0, #1
 80005e8:	3114      	adds	r1, #20
 80005ea:	2301      	movs	r3, #1
 80005ec:	aa01      	add	r2, sp, #4
 80005ee:	b289      	uxth	r1, r1
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fd61 	bl	80010b8 <BSP_LCD_DisplayStringAt>
			snprintf(text, sizeof(text), "ST-Error = %d",
 80005f6:	4635      	mov	r5, r6
		HAL_GPIO_TogglePin(LD_GPIO_PORT, LD3_GREEN);
 80005f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <CounterTask+0x94>)
 80005fe:	f002 f918 	bl	8002832 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8000602:	2064      	movs	r0, #100	; 0x64
 8000604:	f005 fe46 	bl	8006294 <vTaskDelay>
		if (xSemaphoreTake(LCDSemaphore,( TickType_t ) 10) == pdTRUE) {
 8000608:	210a      	movs	r1, #10
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <CounterTask+0x98>)
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	f005 fa29 	bl	8005a64 <xQueueSemaphoreTake>
 8000612:	2801      	cmp	r0, #1
 8000614:	d1db      	bne.n	80005ce <CounterTask+0xa>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000616:	f1a0 1001 	sub.w	r0, r0, #65537	; 0x10001
 800061a:	f000 fc35 	bl	8000e88 <BSP_LCD_SetTextColor>
			snprintf(text, sizeof(text), "Counter = %d", n++);
 800061e:	1c66      	adds	r6, r4, #1
 8000620:	4623      	mov	r3, r4
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <CounterTask+0x9c>)
 8000624:	2114      	movs	r1, #20
 8000626:	a801      	add	r0, sp, #4
 8000628:	f006 fb92 	bl	8006d50 <sniprintf>
			BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, text,
 800062c:	f000 fbda 	bl	8000de4 <BSP_LCD_GetYSize>
 8000630:	2301      	movs	r3, #1
 8000632:	aa01      	add	r2, sp, #4
 8000634:	f3c0 014f 	ubfx	r1, r0, #1, #16
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fd3d 	bl	80010b8 <BSP_LCD_DisplayStringAt>
			xSemaphoreGive(LCDSemaphore);
 800063e:	2300      	movs	r3, #0
 8000640:	461a      	mov	r2, r3
 8000642:	4619      	mov	r1, r3
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <CounterTask+0x98>)
 8000646:	6800      	ldr	r0, [r0, #0]
 8000648:	f005 f934 	bl	80058b4 <xQueueGenericSend>
			snprintf(text, sizeof(text), "Counter = %d", n++);
 800064c:	4634      	mov	r4, r6
 800064e:	e7d3      	b.n	80005f8 <CounterTask+0x34>
 8000650:	ffff0000 	.word	0xffff0000
 8000654:	08007654 	.word	0x08007654
 8000658:	40021800 	.word	0x40021800
 800065c:	20008560 	.word	0x20008560
 8000660:	08007644 	.word	0x08007644

08000664 <app_main>:
void app_main(void) {
 8000664:	b500      	push	{lr}
 8000666:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(LD_GPIO_PORT, LD3_GREEN, RESET);
 8000668:	4c1e      	ldr	r4, [pc, #120]	; (80006e4 <app_main+0x80>)
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4620      	mov	r0, r4
 8000672:	f002 f8d8 	bl	8002826 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_GPIO_PORT, LD4_RED, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067c:	4620      	mov	r0, r4
 800067e:	f002 f8d2 	bl	8002826 <HAL_GPIO_WritePin>
	BSP_LCD_Init();
 8000682:	f000 fc47 	bl	8000f14 <BSP_LCD_Init>
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8000686:	2100      	movs	r1, #0
 8000688:	4608      	mov	r0, r1
 800068a:	f000 fa65 	bl	8000b58 <BSP_PB_Init>
	LCDSemaphore = xSemaphoreCreateMutex();
 800068e:	2001      	movs	r0, #1
 8000690:	f005 f9dc 	bl	8005a4c <xQueueCreateMutex>
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <app_main+0x84>)
 8000696:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(LCDSemaphore);
 8000698:	2300      	movs	r3, #0
 800069a:	461a      	mov	r2, r3
 800069c:	4619      	mov	r1, r3
 800069e:	f005 f909 	bl	80058b4 <xQueueGenericSend>
	xTaskCreate(CounterTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80006a2:	4d12      	ldr	r5, [pc, #72]	; (80006ec <app_main+0x88>)
 80006a4:	2400      	movs	r4, #0
 80006a6:	9401      	str	r4, [sp, #4]
 80006a8:	2303      	movs	r3, #3
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4623      	mov	r3, r4
 80006ae:	22d0      	movs	r2, #208	; 0xd0
 80006b0:	4629      	mov	r1, r5
 80006b2:	480f      	ldr	r0, [pc, #60]	; (80006f0 <app_main+0x8c>)
 80006b4:	f005 fc74 	bl	8005fa0 <xTaskCreate>
	xTaskCreate(HeartbeatTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80006b8:	9401      	str	r4, [sp, #4]
 80006ba:	2302      	movs	r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	4623      	mov	r3, r4
 80006c0:	22d0      	movs	r2, #208	; 0xd0
 80006c2:	4629      	mov	r1, r5
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <app_main+0x90>)
 80006c6:	f005 fc6b 	bl	8005fa0 <xTaskCreate>
	xTaskCreate(WorkerTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80006ca:	9401      	str	r4, [sp, #4]
 80006cc:	2301      	movs	r3, #1
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	4623      	mov	r3, r4
 80006d2:	22d0      	movs	r2, #208	; 0xd0
 80006d4:	4629      	mov	r1, r5
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <app_main+0x94>)
 80006d8:	f005 fc62 	bl	8005fa0 <xTaskCreate>
	vTaskStartScheduler();
 80006dc:	f005 fc94 	bl	8006008 <vTaskStartScheduler>
	for (;;)
 80006e0:	e7fe      	b.n	80006e0 <app_main+0x7c>
 80006e2:	bf00      	nop
 80006e4:	40021800 	.word	0x40021800
 80006e8:	20008560 	.word	0x20008560
 80006ec:	08007664 	.word	0x08007664
 80006f0:	080005c5 	.word	0x080005c5
 80006f4:	08000589 	.word	0x08000589
 80006f8:	08000751 	.word	0x08000751

080006fc <lcd_printf>:
		vTaskDelay(100);
	}
}
#endif

void lcd_printf(uint16_t line, uint32_t color, const char *fmt, ...) {
 80006fc:	b40c      	push	{r2, r3}
 80006fe:	b510      	push	{r4, lr}
 8000700:	b08e      	sub	sp, #56	; 0x38
 8000702:	4604      	mov	r4, r0
	va_list ap;
	char text[50];
	BSP_LCD_SetTextColor(color);
 8000704:	4608      	mov	r0, r1
 8000706:	f000 fbbf 	bl	8000e88 <BSP_LCD_SetTextColor>

	if (xSemaphoreTake(LCDSemaphore, ( TickType_t ) 10) == pdTRUE) {
 800070a:	210a      	movs	r1, #10
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <lcd_printf+0x50>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	f005 f9a8 	bl	8005a64 <xQueueSemaphoreTake>
 8000714:	2801      	cmp	r0, #1
 8000716:	d004      	beq.n	8000722 <lcd_printf+0x26>

		BSP_LCD_DisplayStringAt(0, line, text, LEFT_MODE);
		xSemaphoreGive(LCDSemaphore);
	}

}
 8000718:	b00e      	add	sp, #56	; 0x38
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800071e:	b002      	add	sp, #8
 8000720:	4770      	bx	lr
		va_start(ap, fmt);
 8000722:	ab11      	add	r3, sp, #68	; 0x44
 8000724:	930d      	str	r3, [sp, #52]	; 0x34
		vsnprintf(text, sizeof(text), fmt, ap);
 8000726:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000728:	2132      	movs	r1, #50	; 0x32
 800072a:	4668      	mov	r0, sp
 800072c:	f006 fb70 	bl	8006e10 <vsniprintf>
		BSP_LCD_DisplayStringAt(0, line, text, LEFT_MODE);
 8000730:	2303      	movs	r3, #3
 8000732:	466a      	mov	r2, sp
 8000734:	4621      	mov	r1, r4
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fcbe 	bl	80010b8 <BSP_LCD_DisplayStringAt>
		xSemaphoreGive(LCDSemaphore);
 800073c:	2300      	movs	r3, #0
 800073e:	461a      	mov	r2, r3
 8000740:	4619      	mov	r1, r3
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <lcd_printf+0x50>)
 8000744:	6800      	ldr	r0, [r0, #0]
 8000746:	f005 f8b5 	bl	80058b4 <xQueueGenericSend>
}
 800074a:	e7e5      	b.n	8000718 <lcd_printf+0x1c>
 800074c:	20008560 	.word	0x20008560

08000750 <WorkerTask>:
static void WorkerTask(__attribute__ ((unused)) void *pvParameters) {
 8000750:	b508      	push	{r3, lr}
		lcd_printf(0, LCD_COLOR_BLUE, "Hello from Worker Task");
 8000752:	4a03      	ldr	r2, [pc, #12]	; (8000760 <WorkerTask+0x10>)
 8000754:	4903      	ldr	r1, [pc, #12]	; (8000764 <WorkerTask+0x14>)
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ffd0 	bl	80006fc <lcd_printf>
	while (1) {
 800075c:	e7f9      	b.n	8000752 <WorkerTask+0x2>
 800075e:	bf00      	nop
 8000760:	0800766c 	.word	0x0800766c
 8000764:	ff0000ff 	.word	0xff0000ff

08000768 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8000768:	20f0      	movs	r0, #240	; 0xf0
 800076a:	4770      	bx	lr

0800076c <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 800076c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000770:	4770      	bx	lr

08000772 <ili9341_WriteReg>:
{
 8000772:	b508      	push	{r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8000774:	f000 fab8 	bl	8000ce8 <LCD_IO_WriteReg>
}
 8000778:	bd08      	pop	{r3, pc}

0800077a <ili9341_DisplayOn>:
{
 800077a:	b508      	push	{r3, lr}
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800077c:	2029      	movs	r0, #41	; 0x29
 800077e:	f7ff fff8 	bl	8000772 <ili9341_WriteReg>
}
 8000782:	bd08      	pop	{r3, pc}

08000784 <ili9341_DisplayOff>:
{
 8000784:	b508      	push	{r3, lr}
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000786:	2028      	movs	r0, #40	; 0x28
 8000788:	f7ff fff3 	bl	8000772 <ili9341_WriteReg>
}
 800078c:	bd08      	pop	{r3, pc}

0800078e <ili9341_WriteData>:
{
 800078e:	b508      	push	{r3, lr}
  LCD_IO_WriteData(RegValue);
 8000790:	f000 fa8e 	bl	8000cb0 <LCD_IO_WriteData>
}
 8000794:	bd08      	pop	{r3, pc}

08000796 <ili9341_Init>:
{
 8000796:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000798:	f000 fa26 	bl	8000be8 <LCD_IO_Init>
  ili9341_WriteReg(0xCA);
 800079c:	20ca      	movs	r0, #202	; 0xca
 800079e:	f7ff ffe8 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80007a2:	20c3      	movs	r0, #195	; 0xc3
 80007a4:	f7ff fff3 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80007a8:	2008      	movs	r0, #8
 80007aa:	f7ff fff0 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80007ae:	2050      	movs	r0, #80	; 0x50
 80007b0:	f7ff ffed 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80007b4:	20cf      	movs	r0, #207	; 0xcf
 80007b6:	f7ff ffdc 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ffe7 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80007c0:	20c1      	movs	r0, #193	; 0xc1
 80007c2:	f7ff ffe4 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80007c6:	2030      	movs	r0, #48	; 0x30
 80007c8:	f7ff ffe1 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80007cc:	20ed      	movs	r0, #237	; 0xed
 80007ce:	f7ff ffd0 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80007d2:	2064      	movs	r0, #100	; 0x64
 80007d4:	f7ff ffdb 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80007d8:	2003      	movs	r0, #3
 80007da:	f7ff ffd8 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80007de:	2012      	movs	r0, #18
 80007e0:	f7ff ffd5 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80007e4:	2081      	movs	r0, #129	; 0x81
 80007e6:	f7ff ffd2 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80007ea:	20e8      	movs	r0, #232	; 0xe8
 80007ec:	f7ff ffc1 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80007f0:	2085      	movs	r0, #133	; 0x85
 80007f2:	f7ff ffcc 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff ffc9 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80007fc:	2078      	movs	r0, #120	; 0x78
 80007fe:	f7ff ffc6 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000802:	20cb      	movs	r0, #203	; 0xcb
 8000804:	f7ff ffb5 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000808:	2039      	movs	r0, #57	; 0x39
 800080a:	f7ff ffc0 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800080e:	202c      	movs	r0, #44	; 0x2c
 8000810:	f7ff ffbd 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ffba 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800081a:	2034      	movs	r0, #52	; 0x34
 800081c:	f7ff ffb7 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff ffb4 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000826:	20f7      	movs	r0, #247	; 0xf7
 8000828:	f7ff ffa3 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800082c:	2020      	movs	r0, #32
 800082e:	f7ff ffae 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000832:	20ea      	movs	r0, #234	; 0xea
 8000834:	f7ff ff9d 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ffa8 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800083e:	2000      	movs	r0, #0
 8000840:	f7ff ffa5 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000844:	20b1      	movs	r0, #177	; 0xb1
 8000846:	f7ff ff94 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ff9f 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000850:	201b      	movs	r0, #27
 8000852:	f7ff ff9c 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000856:	20b6      	movs	r0, #182	; 0xb6
 8000858:	f7ff ff8b 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800085c:	200a      	movs	r0, #10
 800085e:	f7ff ff96 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000862:	20a2      	movs	r0, #162	; 0xa2
 8000864:	f7ff ff93 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000868:	20c0      	movs	r0, #192	; 0xc0
 800086a:	f7ff ff82 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800086e:	2010      	movs	r0, #16
 8000870:	f7ff ff8d 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000874:	20c1      	movs	r0, #193	; 0xc1
 8000876:	f7ff ff7c 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800087a:	2010      	movs	r0, #16
 800087c:	f7ff ff87 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000880:	20c5      	movs	r0, #197	; 0xc5
 8000882:	f7ff ff76 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000886:	2045      	movs	r0, #69	; 0x45
 8000888:	f7ff ff81 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800088c:	2015      	movs	r0, #21
 800088e:	f7ff ff7e 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000892:	20c7      	movs	r0, #199	; 0xc7
 8000894:	f7ff ff6d 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000898:	2090      	movs	r0, #144	; 0x90
 800089a:	f7ff ff78 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800089e:	2036      	movs	r0, #54	; 0x36
 80008a0:	f7ff ff67 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80008a4:	20c8      	movs	r0, #200	; 0xc8
 80008a6:	f7ff ff72 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80008aa:	20f2      	movs	r0, #242	; 0xf2
 80008ac:	f7ff ff61 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ff6c 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80008b6:	20b0      	movs	r0, #176	; 0xb0
 80008b8:	f7ff ff5b 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80008bc:	20c2      	movs	r0, #194	; 0xc2
 80008be:	f7ff ff66 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80008c2:	20b6      	movs	r0, #182	; 0xb6
 80008c4:	f7ff ff55 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f7ff ff60 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80008ce:	20a7      	movs	r0, #167	; 0xa7
 80008d0:	f7ff ff5d 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80008d4:	2027      	movs	r0, #39	; 0x27
 80008d6:	f7ff ff5a 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80008da:	2004      	movs	r0, #4
 80008dc:	f7ff ff57 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80008e0:	202a      	movs	r0, #42	; 0x2a
 80008e2:	f7ff ff46 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ff51 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff ff4e 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff4b 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80008f8:	20ef      	movs	r0, #239	; 0xef
 80008fa:	f7ff ff48 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80008fe:	202b      	movs	r0, #43	; 0x2b
 8000900:	f7ff ff37 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff ff42 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff3f 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff3c 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000916:	203f      	movs	r0, #63	; 0x3f
 8000918:	f7ff ff39 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800091c:	20f6      	movs	r0, #246	; 0xf6
 800091e:	f7ff ff28 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff ff33 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff ff30 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800092e:	2006      	movs	r0, #6
 8000930:	f7ff ff2d 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_GRAM);
 8000934:	202c      	movs	r0, #44	; 0x2c
 8000936:	f7ff ff1c 	bl	8000772 <ili9341_WriteReg>
  LCD_Delay(200);
 800093a:	20c8      	movs	r0, #200	; 0xc8
 800093c:	f000 fa18 	bl	8000d70 <LCD_Delay>
  ili9341_WriteReg(LCD_GAMMA);
 8000940:	2026      	movs	r0, #38	; 0x26
 8000942:	f7ff ff16 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff ff21 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_PGAMMA);
 800094c:	20e0      	movs	r0, #224	; 0xe0
 800094e:	f7ff ff10 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000952:	200f      	movs	r0, #15
 8000954:	f7ff ff1b 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000958:	2029      	movs	r0, #41	; 0x29
 800095a:	f7ff ff18 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800095e:	2024      	movs	r0, #36	; 0x24
 8000960:	f7ff ff15 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000964:	200c      	movs	r0, #12
 8000966:	f7ff ff12 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800096a:	200e      	movs	r0, #14
 800096c:	f7ff ff0f 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000970:	2009      	movs	r0, #9
 8000972:	f7ff ff0c 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000976:	204e      	movs	r0, #78	; 0x4e
 8000978:	f7ff ff09 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800097c:	2078      	movs	r0, #120	; 0x78
 800097e:	f7ff ff06 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000982:	203c      	movs	r0, #60	; 0x3c
 8000984:	f7ff ff03 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000988:	2009      	movs	r0, #9
 800098a:	f7ff ff00 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800098e:	2013      	movs	r0, #19
 8000990:	f7ff fefd 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000994:	2005      	movs	r0, #5
 8000996:	f7ff fefa 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800099a:	2017      	movs	r0, #23
 800099c:	f7ff fef7 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80009a0:	2011      	movs	r0, #17
 80009a2:	f7ff fef4 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fef1 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80009ac:	20e1      	movs	r0, #225	; 0xe1
 80009ae:	f7ff fee0 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff feeb 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80009b8:	2016      	movs	r0, #22
 80009ba:	f7ff fee8 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80009be:	201b      	movs	r0, #27
 80009c0:	f7ff fee5 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80009c4:	2004      	movs	r0, #4
 80009c6:	f7ff fee2 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80009ca:	2011      	movs	r0, #17
 80009cc:	f7ff fedf 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80009d0:	2007      	movs	r0, #7
 80009d2:	f7ff fedc 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80009d6:	2031      	movs	r0, #49	; 0x31
 80009d8:	f7ff fed9 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80009dc:	2033      	movs	r0, #51	; 0x33
 80009de:	f7ff fed6 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80009e2:	2042      	movs	r0, #66	; 0x42
 80009e4:	f7ff fed3 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80009e8:	2005      	movs	r0, #5
 80009ea:	f7ff fed0 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80009ee:	200c      	movs	r0, #12
 80009f0:	f7ff fecd 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f7ff feca 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80009fa:	2028      	movs	r0, #40	; 0x28
 80009fc:	f7ff fec7 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000a00:	202f      	movs	r0, #47	; 0x2f
 8000a02:	f7ff fec4 	bl	800078e <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f7ff fec1 	bl	800078e <ili9341_WriteData>
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000a0c:	2011      	movs	r0, #17
 8000a0e:	f7ff feb0 	bl	8000772 <ili9341_WriteReg>
  LCD_Delay(200);
 8000a12:	20c8      	movs	r0, #200	; 0xc8
 8000a14:	f000 f9ac 	bl	8000d70 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000a18:	2029      	movs	r0, #41	; 0x29
 8000a1a:	f7ff feaa 	bl	8000772 <ili9341_WriteReg>
  ili9341_WriteReg(LCD_GRAM);
 8000a1e:	202c      	movs	r0, #44	; 0x2c
 8000a20:	f7ff fea7 	bl	8000772 <ili9341_WriteReg>
}
 8000a24:	bd08      	pop	{r3, pc}

08000a26 <ili9341_ReadData>:
{
 8000a26:	b508      	push	{r3, lr}
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000a28:	f000 f97a 	bl	8000d20 <LCD_IO_ReadData>
}
 8000a2c:	bd08      	pop	{r3, pc}

08000a2e <ili9341_ReadID>:
{
 8000a2e:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000a30:	f000 f8da 	bl	8000be8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000a34:	2103      	movs	r1, #3
 8000a36:	20d3      	movs	r0, #211	; 0xd3
 8000a38:	f7ff fff5 	bl	8000a26 <ili9341_ReadData>
}
 8000a3c:	b280      	uxth	r0, r0
 8000a3e:	bd08      	pop	{r3, pc}

08000a40 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000a40:	b500      	push	{lr}
 8000a42:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000a44:	2100      	movs	r1, #0
 8000a46:	9101      	str	r1, [sp, #4]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <SPIx_MspInit+0x54>)
 8000a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a50:	645a      	str	r2, [r3, #68]	; 0x44
 8000a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000a58:	9201      	str	r2, [sp, #4]
 8000a5a:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000a5c:	9102      	str	r1, [sp, #8]
 8000a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a60:	f042 0220 	orr.w	r2, r2, #32
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f003 0320 	and.w	r3, r3, #32
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000a70:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a74:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000a7a:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000a80:	2305      	movs	r3, #5
 8000a82:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000a84:	a903      	add	r1, sp, #12
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <SPIx_MspInit+0x58>)
 8000a88:	f001 fd28 	bl	80024dc <HAL_GPIO_Init>
}
 8000a8c:	b009      	add	sp, #36	; 0x24
 8000a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021400 	.word	0x40021400

08000a9c <SPIx_Init>:
{
 8000a9c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000a9e:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <SPIx_Init+0x44>)
 8000aa0:	f003 ffa0 	bl	80049e4 <HAL_SPI_GetState>
 8000aa4:	b100      	cbz	r0, 8000aa8 <SPIx_Init+0xc>
}
 8000aa6:	bd10      	pop	{r4, pc}
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000aa8:	4c0d      	ldr	r4, [pc, #52]	; (8000ae0 <SPIx_Init+0x44>)
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <SPIx_Init+0x48>)
 8000aac:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000aae:	2318      	movs	r3, #24
 8000ab0:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60a3      	str	r3, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000ab6:	6163      	str	r3, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000ab8:	6123      	str	r3, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000aba:	62a3      	str	r3, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000abc:	2207      	movs	r2, #7
 8000abe:	62e2      	str	r2, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000ac0:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000ac2:	6223      	str	r3, [r4, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac8:	61a2      	str	r2, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000aca:	6263      	str	r3, [r4, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000acc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000ad0:	6063      	str	r3, [r4, #4]
    SPIx_MspInit(&SpiHandle);
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f7ff ffb4 	bl	8000a40 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f003 fc61 	bl	80043a0 <HAL_SPI_Init>
}
 8000ade:	e7e2      	b.n	8000aa6 <SPIx_Init+0xa>
 8000ae0:	200000e4 	.word	0x200000e4
 8000ae4:	40015000 	.word	0x40015000

08000ae8 <SPIx_Error>:
{
 8000ae8:	b508      	push	{r3, lr}
  HAL_SPI_DeInit(&SpiHandle);
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <SPIx_Error+0x10>)
 8000aec:	f003 fcb7 	bl	800445e <HAL_SPI_DeInit>
  SPIx_Init();
 8000af0:	f7ff ffd4 	bl	8000a9c <SPIx_Init>
}
 8000af4:	bd08      	pop	{r3, pc}
 8000af6:	bf00      	nop
 8000af8:	200000e4 	.word	0x200000e4

08000afc <SPIx_Write>:
{
 8000afc:	b500      	push	{lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <SPIx_Write+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f10d 0106 	add.w	r1, sp, #6
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <SPIx_Write+0x2c>)
 8000b10:	f003 fcbb 	bl	800448a <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8000b14:	b910      	cbnz	r0, 8000b1c <SPIx_Write+0x20>
}
 8000b16:	b003      	add	sp, #12
 8000b18:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 8000b1c:	f7ff ffe4 	bl	8000ae8 <SPIx_Error>
}
 8000b20:	e7f9      	b.n	8000b16 <SPIx_Write+0x1a>
 8000b22:	bf00      	nop
 8000b24:	2000004c 	.word	0x2000004c
 8000b28:	200000e4 	.word	0x200000e4

08000b2c <SPIx_Read>:
{
 8000b2c:	b500      	push	{lr}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	4602      	mov	r2, r0
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <SPIx_Read+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	a901      	add	r1, sp, #4
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <SPIx_Read+0x28>)
 8000b3a:	f003 fe99 	bl	8004870 <HAL_SPI_Receive>
  if(status != HAL_OK)
 8000b3e:	b918      	cbnz	r0, 8000b48 <SPIx_Read+0x1c>
}
 8000b40:	9801      	ldr	r0, [sp, #4]
 8000b42:	b003      	add	sp, #12
 8000b44:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 8000b48:	f7ff ffce 	bl	8000ae8 <SPIx_Error>
 8000b4c:	e7f8      	b.n	8000b40 <SPIx_Read+0x14>
 8000b4e:	bf00      	nop
 8000b50:	2000004c 	.word	0x2000004c
 8000b54:	200000e4 	.word	0x200000e4

08000b58 <BSP_PB_Init>:
{
 8000b58:	b530      	push	{r4, r5, lr}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	460c      	mov	r4, r1
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000b5e:	4605      	mov	r5, r0
 8000b60:	b958      	cbnz	r0, 8000b7a <BSP_PB_Init+0x22>
 8000b62:	2300      	movs	r3, #0
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <BSP_PB_Init+0x74>)
 8000b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b6a:	f042 0201 	orr.w	r2, r2, #1
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	9b00      	ldr	r3, [sp, #0]
  if (ButtonMode == BUTTON_MODE_GPIO)
 8000b7a:	b11c      	cbz	r4, 8000b84 <BSP_PB_Init+0x2c>
  if (ButtonMode == BUTTON_MODE_EXTI)
 8000b7c:	2c01      	cmp	r4, #1
 8000b7e:	d00f      	beq.n	8000ba0 <BSP_PB_Init+0x48>
}
 8000b80:	b007      	add	sp, #28
 8000b82:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000b84:	2301      	movs	r3, #1
 8000b86:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b90:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000b92:	a901      	add	r1, sp, #4
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <BSP_PB_Init+0x78>)
 8000b96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000b9a:	f001 fc9f 	bl	80024dc <HAL_GPIO_Init>
 8000b9e:	e7ed      	b.n	8000b7c <BSP_PB_Init+0x24>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8000ba8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bac:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000bae:	a901      	add	r1, sp, #4
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <BSP_PB_Init+0x78>)
 8000bb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000bb6:	f001 fc91 	bl	80024dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000bba:	4622      	mov	r2, r4
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	2006      	movs	r0, #6
 8000bc0:	f001 fa0a 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	f001 fa3b 	bl	8002040 <HAL_NVIC_EnableIRQ>
}
 8000bca:	e7d9      	b.n	8000b80 <BSP_PB_Init+0x28>
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	20000048 	.word	0x20000048

08000bd4 <BSP_PB_GetState>:
{
 8000bd4:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <BSP_PB_GetState+0x10>)
 8000bda:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000bde:	f001 fe1b 	bl	8002818 <HAL_GPIO_ReadPin>
}
 8000be2:	bd08      	pop	{r3, pc}
 8000be4:	20000048 	.word	0x20000048

08000be8 <LCD_IO_Init>:
  */
void LCD_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <LCD_IO_Init+0xbc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b103      	cbz	r3, 8000bf0 <LCD_IO_Init+0x8>
 8000bee:	4770      	bx	lr
{
 8000bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf4:	b088      	sub	sp, #32
  {
    Is_LCD_IO_Initialized = 1; 
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <LCD_IO_Init+0xbc>)
 8000bfa:	701e      	strb	r6, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	9500      	str	r5, [sp, #0]
 8000c00:	4c29      	ldr	r4, [pc, #164]	; (8000ca8 <LCD_IO_Init+0xc0>)
 8000c02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6323      	str	r3, [r4, #48]	; 0x30
 8000c0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c0c:	f003 0308 	and.w	r3, r3, #8
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c18:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000c1a:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000c1c:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000c1e:	f04f 0802 	mov.w	r8, #2
 8000c22:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000c26:	4f21      	ldr	r7, [pc, #132]	; (8000cac <LCD_IO_Init+0xc4>)
 8000c28:	a903      	add	r1, sp, #12
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	f001 fc56 	bl	80024dc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000c30:	9501      	str	r5, [sp, #4]
 8000c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6323      	str	r3, [r4, #48]	; 0x30
 8000c3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000c4a:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000c4c:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000c4e:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000c52:	a903      	add	r1, sp, #12
 8000c54:	4638      	mov	r0, r7
 8000c56:	f001 fc41 	bl	80024dc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000c5a:	9502      	str	r5, [sp, #8]
 8000c5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6323      	str	r3, [r4, #48]	; 0x30
 8000c64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	9b02      	ldr	r3, [sp, #8]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000c6e:	2704      	movs	r7, #4
 8000c70:	9703      	str	r7, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000c72:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000c74:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000c76:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000c7a:	f5a4 5440 	sub.w	r4, r4, #12288	; 0x3000
 8000c7e:	a903      	add	r1, sp, #12
 8000c80:	4620      	mov	r0, r4
 8000c82:	f001 fc2b 	bl	80024dc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000c86:	462a      	mov	r2, r5
 8000c88:	4639      	mov	r1, r7
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f001 fdcb 	bl	8002826 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000c90:	4632      	mov	r2, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	4620      	mov	r0, r4
 8000c96:	f001 fdc6 	bl	8002826 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000c9a:	f7ff feff 	bl	8000a9c <SPIx_Init>
  }
}
 8000c9e:	b008      	add	sp, #32
 8000ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ca4:	200000e0 	.word	0x200000e0
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020c00 	.word	0x40020c00

08000cb0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	4604      	mov	r4, r0
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <LCD_IO_WriteData+0x30>)
 8000cbc:	f001 fdb3 	bl	8002826 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000cc0:	4d08      	ldr	r5, [pc, #32]	; (8000ce4 <LCD_IO_WriteData+0x34>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f001 fdad 	bl	8002826 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff ff15 	bl	8000afc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	f001 fda5 	bl	8002826 <HAL_GPIO_WritePin>
}
 8000cdc:	bd38      	pop	{r3, r4, r5, pc}
 8000cde:	bf00      	nop
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40020800 	.word	0x40020800

08000ce8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4604      	mov	r4, r0
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <LCD_IO_WriteReg+0x30>)
 8000cf4:	f001 fd97 	bl	8002826 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000cf8:	4d08      	ldr	r5, [pc, #32]	; (8000d1c <LCD_IO_WriteReg+0x34>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f001 fd91 	bl	8002826 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000d04:	4620      	mov	r0, r4
 8000d06:	f7ff fef9 	bl	8000afc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f001 fd89 	bl	8002826 <HAL_GPIO_WritePin>
}
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	40020800 	.word	0x40020800

08000d20 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d22:	4605      	mov	r5, r0
 8000d24:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000d26:	4e10      	ldr	r6, [pc, #64]	; (8000d68 <LCD_IO_ReadData+0x48>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	f001 fd7a 	bl	8002826 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000d32:	4f0e      	ldr	r7, [pc, #56]	; (8000d6c <LCD_IO_ReadData+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	f001 fd73 	bl	8002826 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000d40:	4628      	mov	r0, r5
 8000d42:	f7ff fedb 	bl	8000afc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff fef0 	bl	8000b2c <SPIx_Read>
 8000d4c:	4604      	mov	r4, r0

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d54:	4638      	mov	r0, r7
 8000d56:	f001 fd66 	bl	8002826 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f001 fd61 	bl	8002826 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8000d64:	4620      	mov	r0, r4
 8000d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40020c00 	.word	0x40020c00

08000d70 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000d70:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8000d72:	f001 f90b 	bl	8001f8c <HAL_Delay>
}
 8000d76:	bd08      	pop	{r3, pc}

08000d78 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460d      	mov	r5, r1
 8000d80:	4616      	mov	r6, r2
 8000d82:	461f      	mov	r7, r3
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000d84:	4811      	ldr	r0, [pc, #68]	; (8000dcc <FillBuffer+0x54>)
 8000d86:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d8a:	6043      	str	r3, [r0, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	6083      	str	r3, [r0, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8000d90:	9b08      	ldr	r3, [sp, #32]
 8000d92:	60c3      	str	r3, [r0, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <FillBuffer+0x58>)
 8000d96:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000d98:	f001 f9b5 	bl	8002106 <HAL_DMA2D_Init>
 8000d9c:	b108      	cbz	r0, 8000da2 <FillBuffer+0x2a>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
      }
    }
  } 
}
 8000d9e:	b003      	add	sp, #12
 8000da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8000da2:	4621      	mov	r1, r4
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <FillBuffer+0x54>)
 8000da6:	f001 fb37 	bl	8002418 <HAL_DMA2D_ConfigLayer>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d1f7      	bne.n	8000d9e <FillBuffer+0x26>
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000dae:	9700      	str	r7, [sp, #0]
 8000db0:	4633      	mov	r3, r6
 8000db2:	462a      	mov	r2, r5
 8000db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <FillBuffer+0x54>)
 8000db8:	f001 f9d2 	bl	8002160 <HAL_DMA2D_Start>
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d1ee      	bne.n	8000d9e <FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000dc0:	210a      	movs	r1, #10
 8000dc2:	4802      	ldr	r0, [pc, #8]	; (8000dcc <FillBuffer+0x54>)
 8000dc4:	f001 f9e8 	bl	8002198 <HAL_DMA2D_PollForTransfer>
}
 8000dc8:	e7e9      	b.n	8000d9e <FillBuffer+0x26>
 8000dca:	bf00      	nop
 8000dcc:	20000140 	.word	0x20000140
 8000dd0:	4002b000 	.word	0x4002b000

08000dd4 <BSP_LCD_GetXSize>:
{
 8000dd4:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8000dd6:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <BSP_LCD_GetXSize+0xc>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	4798      	blx	r3
}
 8000dde:	bd08      	pop	{r3, pc}
 8000de0:	20008564 	.word	0x20008564

08000de4 <BSP_LCD_GetYSize>:
{
 8000de4:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8000de6:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <BSP_LCD_GetYSize+0xc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	4798      	blx	r3
}
 8000dee:	bd08      	pop	{r3, pc}
 8000df0:	20008564 	.word	0x20008564

08000df4 <BSP_LCD_LayerDefaultInit>:
{     
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	4604      	mov	r4, r0
 8000dfa:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 8000dfc:	2500      	movs	r5, #0
 8000dfe:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000e00:	f7ff ffe8 	bl	8000dd4 <BSP_LCD_GetXSize>
 8000e04:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 8000e06:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000e08:	f7ff ffec 	bl	8000de4 <BSP_LCD_GetYSize>
 8000e0c:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e0e:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 8000e10:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 8000e12:	23ff      	movs	r3, #255	; 0xff
 8000e14:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 8000e16:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8000e18:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8000e1c:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8000e20:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e28:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000e2e:	f7ff ffd1 	bl	8000dd4 <BSP_LCD_GetXSize>
 8000e32:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000e34:	f7ff ffd6 	bl	8000de4 <BSP_LCD_GetYSize>
 8000e38:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 8000e3a:	4d0d      	ldr	r5, [pc, #52]	; (8000e70 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000e3c:	4622      	mov	r2, r4
 8000e3e:	a901      	add	r1, sp, #4
 8000e40:	4628      	mov	r0, r5
 8000e42:	f002 fc9b 	bl	800377c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <BSP_LCD_LayerDefaultInit+0x80>)
 8000e48:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000e4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <BSP_LCD_LayerDefaultInit+0x84>)
 8000e58:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000e5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e5e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000e62:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  HAL_LTDC_EnableDither(&hltdc);
 8000e66:	4628      	mov	r0, r5
 8000e68:	f002 fcb6 	bl	80037d8 <HAL_LTDC_EnableDither>
}
 8000e6c:	b00e      	add	sp, #56	; 0x38
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	20008620 	.word	0x20008620
 8000e74:	20000180 	.word	0x20000180
 8000e78:	20000008 	.word	0x20000008

08000e7c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000e7c:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <BSP_LCD_SelectLayer+0x8>)
 8000e7e:	6018      	str	r0, [r3, #0]
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2000013c 	.word	0x2000013c

08000e88 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <BSP_LCD_SetTextColor+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e90:	4a02      	ldr	r2, [pc, #8]	; (8000e9c <BSP_LCD_SetTextColor+0x14>)
 8000e92:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000e96:	4770      	bx	lr
 8000e98:	2000013c 	.word	0x2000013c
 8000e9c:	20000180 	.word	0x20000180

08000ea0 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <BSP_LCD_SetBackColor+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ea8:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <BSP_LCD_SetBackColor+0x18>)
 8000eaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000eae:	6058      	str	r0, [r3, #4]
}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	2000013c 	.word	0x2000013c
 8000eb8:	20000180 	.word	0x20000180

08000ebc <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <BSP_LCD_SetFont+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ec4:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <BSP_LCD_SetFont+0x18>)
 8000ec6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000eca:	6098      	str	r0, [r3, #8]
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2000013c 	.word	0x2000013c
 8000ed4:	20000180 	.word	0x20000180

08000ed8 <BSP_LCD_Clear>:
{ 
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	b083      	sub	sp, #12
 8000edc:	4605      	mov	r5, r0
  FillBuffer(ActiveLayer, (uint32_t *)(hltdc.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <BSP_LCD_Clear+0x34>)
 8000ee0:	681e      	ldr	r6, [r3, #0]
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <BSP_LCD_Clear+0x38>)
 8000ee4:	2334      	movs	r3, #52	; 0x34
 8000ee6:	fb03 2306 	mla	r3, r3, r6, r2
 8000eea:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8000eec:	f7ff ff72 	bl	8000dd4 <BSP_LCD_GetXSize>
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	f7ff ff77 	bl	8000de4 <BSP_LCD_GetYSize>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	9501      	str	r5, [sp, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	9200      	str	r2, [sp, #0]
 8000efe:	4622      	mov	r2, r4
 8000f00:	4639      	mov	r1, r7
 8000f02:	4630      	mov	r0, r6
 8000f04:	f7ff ff38 	bl	8000d78 <FillBuffer>
}
 8000f08:	b003      	add	sp, #12
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0c:	2000013c 	.word	0x2000013c
 8000f10:	20008620 	.word	0x20008620

08000f14 <BSP_LCD_Init>:
{ 
 8000f14:	b508      	push	{r3, lr}
    LcdDrv = &ili9341_drv;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <BSP_LCD_Init+0x4c>)
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <BSP_LCD_Init+0x50>)
 8000f1a:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4798      	blx	r3
    BSP_SDRAM_Init();
 8000f20:	f000 f97c 	bl	800121c <BSP_SDRAM_Init>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000f24:	4810      	ldr	r0, [pc, #64]	; (8000f68 <BSP_LCD_Init+0x54>)
 8000f26:	f7ff ffc9 	bl	8000ebc <BSP_LCD_SetFont>
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8000f2a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f7ff ff60 	bl	8000df4 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff ffa1 	bl	8000e7c <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3e:	f7ff ffcb 	bl	8000ed8 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f42:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f46:	f7ff ff9f 	bl	8000e88 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4e:	f7ff ffa7 	bl	8000ea0 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font16);
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <BSP_LCD_Init+0x58>)
 8000f54:	f7ff ffb2 	bl	8000ebc <BSP_LCD_SetFont>
    HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	; 0x64
 8000f5a:	f001 f817 	bl	8001f8c <HAL_Delay>
}  
 8000f5e:	bd08      	pop	{r3, pc}
 8000f60:	20000010 	.word	0x20000010
 8000f64:	20008564 	.word	0x20008564
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000000 	.word	0x20000000

08000f70 <BSP_LCD_DrawPixel>:
{
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	4606      	mov	r6, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	4615      	mov	r5, r2
  *(__IO uint32_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <BSP_LCD_DrawPixel+0x24>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <BSP_LCD_DrawPixel+0x28>)
 8000f7e:	2134      	movs	r1, #52	; 0x34
 8000f80:	fb01 2303 	mla	r3, r1, r3, r2
 8000f84:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8000f86:	f7ff ff25 	bl	8000dd4 <BSP_LCD_GetXSize>
 8000f8a:	fb00 6004 	mla	r0, r0, r4, r6
 8000f8e:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8000f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f94:	2000013c 	.word	0x2000013c
 8000f98:	20008620 	.word	0x20008620

08000f9c <DrawChar>:
{
 8000f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	460e      	mov	r6, r1
 8000fa6:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8000fa8:	4b34      	ldr	r3, [pc, #208]	; (800107c <DrawChar+0xe0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fb0:	4a33      	ldr	r2, [pc, #204]	; (8001080 <DrawChar+0xe4>)
 8000fb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	88da      	ldrh	r2, [r3, #6]
 8000fba:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000fbc:	889d      	ldrh	r5, [r3, #4]
  offset = 8 *((width + 7)/8) -  width ;
 8000fbe:	f105 0b07 	add.w	fp, r5, #7
 8000fc2:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8000fc6:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8000fca:	fa5f f888 	uxtb.w	r8, r8
 8000fce:	b2eb      	uxtb	r3, r5
 8000fd0:	eba8 0803 	sub.w	r8, r8, r3
 8000fd4:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8000fd8:	f04f 0a00 	mov.w	sl, #0
 8000fdc:	e034      	b.n	8001048 <DrawChar+0xac>
      line =  pchar[0];      
 8000fde:	9a00      	ldr	r2, [sp, #0]
 8000fe0:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	e014      	b.n	8001010 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];
 8000fe6:	9900      	ldr	r1, [sp, #0]
 8000fe8:	5ccb      	ldrb	r3, [r1, r3]
 8000fea:	7857      	ldrb	r7, [r2, #1]
 8000fec:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 8000ff0:	e7f7      	b.n	8000fe2 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <DrawChar+0xe0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ffa:	4a21      	ldr	r2, [pc, #132]	; (8001080 <DrawChar+0xe4>)
 8000ffc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001000:	eb09 0004 	add.w	r0, r9, r4
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	4631      	mov	r1, r6
 8001008:	b280      	uxth	r0, r0
 800100a:	f7ff ffb1 	bl	8000f70 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800100e:	3401      	adds	r4, #1
 8001010:	42a5      	cmp	r5, r4
 8001012:	d915      	bls.n	8001040 <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 8001014:	1b2b      	subs	r3, r5, r4
 8001016:	4443      	add	r3, r8
 8001018:	3b01      	subs	r3, #1
 800101a:	2201      	movs	r2, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	423b      	tst	r3, r7
 8001022:	d0e6      	beq.n	8000ff2 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <DrawChar+0xe0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800102c:	eb09 0004 	add.w	r0, r9, r4
 8001030:	4a13      	ldr	r2, [pc, #76]	; (8001080 <DrawChar+0xe4>)
 8001032:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001036:	4631      	mov	r1, r6
 8001038:	b280      	uxth	r0, r0
 800103a:	f7ff ff99 	bl	8000f70 <BSP_LCD_DrawPixel>
 800103e:	e7e6      	b.n	800100e <DrawChar+0x72>
    Ypos++;
 8001040:	3601      	adds	r6, #1
 8001042:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 8001044:	f10a 0a01 	add.w	sl, sl, #1
 8001048:	9b01      	ldr	r3, [sp, #4]
 800104a:	4553      	cmp	r3, sl
 800104c:	d912      	bls.n	8001074 <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800104e:	fb0a f30b 	mul.w	r3, sl, fp
 8001052:	9a00      	ldr	r2, [sp, #0]
 8001054:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8001056:	f1bb 0f01 	cmp.w	fp, #1
 800105a:	d0c0      	beq.n	8000fde <DrawChar+0x42>
 800105c:	f1bb 0f02 	cmp.w	fp, #2
 8001060:	d0c1      	beq.n	8000fe6 <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001062:	9900      	ldr	r1, [sp, #0]
 8001064:	5ccb      	ldrb	r3, [r1, r3]
 8001066:	7857      	ldrb	r7, [r2, #1]
 8001068:	023f      	lsls	r7, r7, #8
 800106a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 800106e:	7893      	ldrb	r3, [r2, #2]
 8001070:	431f      	orrs	r7, r3
      break;
 8001072:	e7b6      	b.n	8000fe2 <DrawChar+0x46>
}
 8001074:	b003      	add	sp, #12
 8001076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800107a:	bf00      	nop
 800107c:	2000013c 	.word	0x2000013c
 8001080:	20000180 	.word	0x20000180

08001084 <BSP_LCD_DisplayChar>:
{
 8001084:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <BSP_LCD_DisplayChar+0x2c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800108e:	4c09      	ldr	r4, [pc, #36]	; (80010b4 <BSP_LCD_DisplayChar+0x30>)
 8001090:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001094:	689c      	ldr	r4, [r3, #8]
 8001096:	6825      	ldr	r5, [r4, #0]
 8001098:	3a20      	subs	r2, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800109a:	88e3      	ldrh	r3, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800109c:	fb03 f202 	mul.w	r2, r3, r2
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80010a0:	88a3      	ldrh	r3, [r4, #4]
 80010a2:	3307      	adds	r3, #7
 80010a4:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010a6:	fb03 5202 	mla	r2, r3, r2, r5
 80010aa:	f7ff ff77 	bl	8000f9c <DrawChar>
}
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
 80010b0:	2000013c 	.word	0x2000013c
 80010b4:	20000180 	.word	0x20000180

080010b8 <BSP_LCD_DisplayStringAt>:
{
 80010b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010bc:	4606      	mov	r6, r0
 80010be:	460f      	mov	r7, r1
 80010c0:	4615      	mov	r5, r2
 80010c2:	4698      	mov	r8, r3
  uint32_t size = 0, xsize = 0; 
 80010c4:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 80010c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80010ca:	b109      	cbz	r1, 80010d0 <BSP_LCD_DisplayStringAt+0x18>
 80010cc:	3401      	adds	r4, #1
 80010ce:	e7fa      	b.n	80010c6 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80010d0:	f7ff fe80 	bl	8000dd4 <BSP_LCD_GetXSize>
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <BSP_LCD_DisplayStringAt+0xbc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80010dc:	4a26      	ldr	r2, [pc, #152]	; (8001178 <BSP_LCD_DisplayStringAt+0xc0>)
 80010de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	889b      	ldrh	r3, [r3, #4]
 80010e6:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (mode)
 80010ea:	f1b8 0f01 	cmp.w	r8, #1
 80010ee:	d030      	beq.n	8001152 <BSP_LCD_DisplayStringAt+0x9a>
 80010f0:	f1b8 0f02 	cmp.w	r8, #2
 80010f4:	d035      	beq.n	8001162 <BSP_LCD_DisplayStringAt+0xaa>
  while (*ptr++) size ++ ;
 80010f6:	2400      	movs	r4, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80010f8:	f895 8000 	ldrb.w	r8, [r5]
 80010fc:	f7ff fe6a 	bl	8000dd4 <BSP_LCD_GetXSize>
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <BSP_LCD_DisplayStringAt+0xbc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <BSP_LCD_DisplayStringAt+0xc0>)
 800110a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	889a      	ldrh	r2, [r3, #4]
 8001112:	fb02 0314 	mls	r3, r2, r4, r0
 8001116:	b29b      	uxth	r3, r3
 8001118:	4293      	cmp	r3, r2
 800111a:	bf34      	ite	cc
 800111c:	2300      	movcc	r3, #0
 800111e:	2301      	movcs	r3, #1
 8001120:	f1b8 0f00 	cmp.w	r8, #0
 8001124:	bf08      	it	eq
 8001126:	2300      	moveq	r3, #0
 8001128:	b313      	cbz	r3, 8001170 <BSP_LCD_DisplayStringAt+0xb8>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800112a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800112e:	4639      	mov	r1, r7
 8001130:	4630      	mov	r0, r6
 8001132:	f7ff ffa7 	bl	8001084 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <BSP_LCD_DisplayStringAt+0xbc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <BSP_LCD_DisplayStringAt+0xc0>)
 8001140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	8898      	ldrh	r0, [r3, #4]
 8001148:	4406      	add	r6, r0
 800114a:	b2b6      	uxth	r6, r6
    i++;
 800114c:	3401      	adds	r4, #1
 800114e:	b2a4      	uxth	r4, r4
 8001150:	e7d2      	b.n	80010f8 <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001152:	1b00      	subs	r0, r0, r4
 8001154:	fb00 f303 	mul.w	r3, r0, r3
 8001158:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800115c:	441e      	add	r6, r3
 800115e:	b2b6      	uxth	r6, r6
      break;
 8001160:	e7c9      	b.n	80010f6 <BSP_LCD_DisplayStringAt+0x3e>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001162:	1b00      	subs	r0, r0, r4
 8001164:	fb10 f003 	smulbb	r0, r0, r3
 8001168:	fa16 f680 	uxtah	r6, r6, r0
 800116c:	b2b6      	uxth	r6, r6
      break;
 800116e:	e7c2      	b.n	80010f6 <BSP_LCD_DisplayStringAt+0x3e>
}
 8001170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001174:	2000013c 	.word	0x2000013c
 8001178:	20000180 	.word	0x20000180

0800117c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd =0;
 8001184:	f04f 0800 	mov.w	r8, #0
 8001188:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800118c:	4c21      	ldr	r4, [pc, #132]	; (8001214 <BSP_SDRAM_Initialization_sequence+0x98>)
 800118e:	2601      	movs	r6, #1
 8001190:	6026      	str	r6, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001192:	2708      	movs	r7, #8
 8001194:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 8001196:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8001198:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800119c:	4d1e      	ldr	r5, [pc, #120]	; (8001218 <BSP_SDRAM_Initialization_sequence+0x9c>)
 800119e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a2:	4621      	mov	r1, r4
 80011a4:	4628      	mov	r0, r5
 80011a6:	f002 ffeb 	bl	8004180 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80011aa:	4630      	mov	r0, r6
 80011ac:	f000 feee 	bl	8001f8c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80011b0:	2302      	movs	r3, #2
 80011b2:	6023      	str	r3, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80011b4:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80011b6:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80011b8:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c0:	4621      	mov	r1, r4
 80011c2:	4628      	mov	r0, r5
 80011c4:	f002 ffdc 	bl	8004180 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80011c8:	2303      	movs	r3, #3
 80011ca:	6023      	str	r3, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80011cc:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 4;
 80011ce:	f04f 0a04 	mov.w	sl, #4
 80011d2:	f8c4 a008 	str.w	sl, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80011d6:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011de:	4621      	mov	r1, r4
 80011e0:	4628      	mov	r0, r5
 80011e2:	f002 ffcd 	bl	8004180 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80011e6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80011ea:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80011ec:	f8c4 a000 	str.w	sl, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80011f0:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80011f2:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80011f4:	9b01      	ldr	r3, [sp, #4]
 80011f6:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fc:	4621      	mov	r1, r4
 80011fe:	4628      	mov	r0, r5
 8001200:	f002 ffbe 	bl	8004180 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8001204:	4649      	mov	r1, r9
 8001206:	4628      	mov	r0, r5
 8001208:	f002 ffd5 	bl	80041b6 <HAL_SDRAM_ProgramRefreshRate>
}
 800120c:	b002      	add	sp, #8
 800120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001212:	bf00      	nop
 8001214:	20000198 	.word	0x20000198
 8001218:	20008a9c 	.word	0x20008a9c

0800121c <BSP_SDRAM_Init>:
{
 800121c:	b508      	push	{r3, lr}
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800121e:	f240 506a 	movw	r0, #1386	; 0x56a
 8001222:	f7ff ffab 	bl	800117c <BSP_SDRAM_Initialization_sequence>
}
 8001226:	2000      	movs	r0, #0
 8001228:	bd08      	pop	{r3, pc}

0800122a <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800122a:	4770      	bx	lr

0800122c <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800122c:	4770      	bx	lr

0800122e <vApplicationMallocFailedHook>:
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800122e:	4770      	bx	lr

08001230 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <vApplicationGetIdleTaskMemory+0x10>)
 8001232:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <vApplicationGetIdleTaskMemory+0x14>)
 8001236:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200003a8 	.word	0x200003a8
 8001244:	200001a8 	.word	0x200001a8

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800124c:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	2400      	movs	r4, #0
 8001250:	9409      	str	r4, [sp, #36]	; 0x24
 8001252:	940a      	str	r4, [sp, #40]	; 0x28
 8001254:	940b      	str	r4, [sp, #44]	; 0x2c
 8001256:	940c      	str	r4, [sp, #48]	; 0x30
 8001258:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	9401      	str	r4, [sp, #4]
 800125c:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <MX_GPIO_Init+0x18c>)
 800125e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001260:	f042 0204 	orr.w	r2, r2, #4
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
 8001266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001268:	f002 0204 	and.w	r2, r2, #4
 800126c:	9201      	str	r2, [sp, #4]
 800126e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001270:	9402      	str	r4, [sp, #8]
 8001272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001274:	f042 0220 	orr.w	r2, r2, #32
 8001278:	631a      	str	r2, [r3, #48]	; 0x30
 800127a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127c:	f002 0220 	and.w	r2, r2, #32
 8001280:	9202      	str	r2, [sp, #8]
 8001282:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001284:	9403      	str	r4, [sp, #12]
 8001286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001288:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
 800128e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001290:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001294:	9203      	str	r2, [sp, #12]
 8001296:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	9404      	str	r4, [sp, #16]
 800129a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129c:	f042 0201 	orr.w	r2, r2, #1
 80012a0:	631a      	str	r2, [r3, #48]	; 0x30
 80012a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a4:	f002 0201 	and.w	r2, r2, #1
 80012a8:	9204      	str	r2, [sp, #16]
 80012aa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	9405      	str	r4, [sp, #20]
 80012ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b0:	f042 0202 	orr.w	r2, r2, #2
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
 80012b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b8:	f002 0202 	and.w	r2, r2, #2
 80012bc:	9205      	str	r2, [sp, #20]
 80012be:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c0:	9406      	str	r4, [sp, #24]
 80012c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
 80012ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80012d0:	9206      	str	r2, [sp, #24]
 80012d2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d4:	9407      	str	r4, [sp, #28]
 80012d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d8:	f042 0210 	orr.w	r2, r2, #16
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
 80012de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e0:	f002 0210 	and.w	r2, r2, #16
 80012e4:	9207      	str	r2, [sp, #28]
 80012e6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	9408      	str	r4, [sp, #32]
 80012ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ec:	f042 0208 	orr.w	r2, r2, #8
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	9308      	str	r3, [sp, #32]
 80012fa:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80012fc:	4f36      	ldr	r7, [pc, #216]	; (80013d8 <MX_GPIO_Init+0x190>)
 80012fe:	4622      	mov	r2, r4
 8001300:	2116      	movs	r1, #22
 8001302:	4638      	mov	r0, r7
 8001304:	f001 fa8f 	bl	8002826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001308:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80013e4 <MX_GPIO_Init+0x19c>
 800130c:	4622      	mov	r2, r4
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	4640      	mov	r0, r8
 8001312:	f001 fa88 	bl	8002826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001316:	4e31      	ldr	r6, [pc, #196]	; (80013dc <MX_GPIO_Init+0x194>)
 8001318:	4622      	mov	r2, r4
 800131a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800131e:	4630      	mov	r0, r6
 8001320:	f001 fa81 	bl	8002826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001324:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80013e8 <MX_GPIO_Init+0x1a0>
 8001328:	4622      	mov	r2, r4
 800132a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800132e:	4648      	mov	r0, r9
 8001330:	f001 fa79 	bl	8002826 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001334:	2316      	movs	r3, #22
 8001336:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2501      	movs	r5, #1
 800133a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	a909      	add	r1, sp, #36	; 0x24
 8001342:	4638      	mov	r0, r7
 8001344:	f001 f8ca 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001348:	f248 0307 	movw	r3, #32775	; 0x8007
 800134c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800134e:	f44f 1a90 	mov.w	sl, #1179648	; 0x120000
 8001352:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	a909      	add	r1, sp, #36	; 0x24
 800135a:	4640      	mov	r0, r8
 800135c:	f001 f8be 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800136a:	a909      	add	r1, sp, #36	; 0x24
 800136c:	4640      	mov	r0, r8
 800136e:	f001 f8b5 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001372:	2320      	movs	r3, #32
 8001374:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001376:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800137c:	a909      	add	r1, sp, #36	; 0x24
 800137e:	4638      	mov	r0, r7
 8001380:	f001 f8ac 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001384:	2304      	movs	r3, #4
 8001386:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800138c:	a909      	add	r1, sp, #36	; 0x24
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <MX_GPIO_Init+0x198>)
 8001390:	f001 f8a4 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001398:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800139e:	a909      	add	r1, sp, #36	; 0x24
 80013a0:	4630      	mov	r0, r6
 80013a2:	f001 f89b 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80013a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013aa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	a909      	add	r1, sp, #36	; 0x24
 80013b4:	4630      	mov	r0, r6
 80013b6:	f001 f891 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80013ba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013be:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c6:	a909      	add	r1, sp, #36	; 0x24
 80013c8:	4648      	mov	r0, r9
 80013ca:	f001 f887 	bl	80024dc <HAL_GPIO_Init>

}
 80013ce:	b00e      	add	sp, #56	; 0x38
 80013d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40021800 	.word	0x40021800

080013ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013ee:	6802      	ldr	r2, [r0, #0]
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013f6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80013f8:	f000 fdb6 	bl	8001f68 <HAL_IncTick>
}
 80013fc:	e7fb      	b.n	80013f6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80013fe:	bf00      	nop
 8001400:	40001000 	.word	0x40001000

08001404 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001406:	e7fe      	b.n	8001406 <Error_Handler+0x2>

08001408 <MX_CRC_Init>:
{
 8001408:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800140a:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_CRC_Init+0x14>)
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <MX_CRC_Init+0x18>)
 800140e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001410:	f000 fe24 	bl	800205c <HAL_CRC_Init>
 8001414:	b900      	cbnz	r0, 8001418 <MX_CRC_Init+0x10>
}
 8001416:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001418:	f7ff fff4 	bl	8001404 <Error_Handler>
 800141c:	20008618 	.word	0x20008618
 8001420:	40023000 	.word	0x40023000

08001424 <MX_DMA2D_Init>:
{
 8001424:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8001426:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_DMA2D_Init+0x34>)
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_DMA2D_Init+0x38>)
 800142a:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800142c:	2300      	movs	r3, #0
 800142e:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001430:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8001432:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001434:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001436:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001438:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800143a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800143c:	f000 fe63 	bl	8002106 <HAL_DMA2D_Init>
 8001440:	b928      	cbnz	r0, 800144e <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001442:	2101      	movs	r1, #1
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_DMA2D_Init+0x34>)
 8001446:	f000 ffe7 	bl	8002418 <HAL_DMA2D_ConfigLayer>
 800144a:	b910      	cbnz	r0, 8001452 <MX_DMA2D_Init+0x2e>
}
 800144c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800144e:	f7ff ffd9 	bl	8001404 <Error_Handler>
    Error_Handler();
 8001452:	f7ff ffd7 	bl	8001404 <Error_Handler>
 8001456:	bf00      	nop
 8001458:	20008a5c 	.word	0x20008a5c
 800145c:	4002b000 	.word	0x4002b000

08001460 <MX_FMC_Init>:
{
 8001460:	b500      	push	{lr}
 8001462:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001464:	4815      	ldr	r0, [pc, #84]	; (80014bc <MX_FMC_Init+0x5c>)
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_FMC_Init+0x60>)
 8001468:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800146a:	2301      	movs	r3, #1
 800146c:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800146e:	2300      	movs	r3, #0
 8001470:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001472:	2104      	movs	r1, #4
 8001474:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001476:	2210      	movs	r2, #16
 8001478:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800147e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001482:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001484:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800148a:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800148c:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800148e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001492:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8001494:	2302      	movs	r3, #2
 8001496:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001498:	2207      	movs	r2, #7
 800149a:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 800149c:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 800149e:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80014a0:	2203      	movs	r2, #3
 80014a2:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 80014a4:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80014a6:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014a8:	4469      	add	r1, sp
 80014aa:	f002 fe49 	bl	8004140 <HAL_SDRAM_Init>
 80014ae:	b910      	cbnz	r0, 80014b6 <MX_FMC_Init+0x56>
}
 80014b0:	b009      	add	sp, #36	; 0x24
 80014b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80014b6:	f7ff ffa5 	bl	8001404 <Error_Handler>
 80014ba:	bf00      	nop
 80014bc:	20008a9c 	.word	0x20008a9c
 80014c0:	a0000140 	.word	0xa0000140

080014c4 <MX_I2C3_Init>:
{
 80014c4:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 80014c6:	4811      	ldr	r0, [pc, #68]	; (800150c <MX_I2C3_Init+0x48>)
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C3_Init+0x4c>)
 80014ca:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C3_Init+0x50>)
 80014ce:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	2300      	movs	r3, #0
 80014d2:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014d4:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014da:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014dc:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014de:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e0:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014e4:	f001 fe68 	bl	80031b8 <HAL_I2C_Init>
 80014e8:	b950      	cbnz	r0, 8001500 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_I2C3_Init+0x48>)
 80014ee:	f001 ff41 	bl	8003374 <HAL_I2CEx_ConfigAnalogFilter>
 80014f2:	b938      	cbnz	r0, 8001504 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_I2C3_Init+0x48>)
 80014f8:	f001 ff5e 	bl	80033b8 <HAL_I2CEx_ConfigDigitalFilter>
 80014fc:	b920      	cbnz	r0, 8001508 <MX_I2C3_Init+0x44>
}
 80014fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001500:	f7ff ff80 	bl	8001404 <Error_Handler>
    Error_Handler();
 8001504:	f7ff ff7e 	bl	8001404 <Error_Handler>
    Error_Handler();
 8001508:	f7ff ff7c 	bl	8001404 <Error_Handler>
 800150c:	2000856c 	.word	0x2000856c
 8001510:	40005c00 	.word	0x40005c00
 8001514:	000186a0 	.word	0x000186a0

08001518 <MX_LTDC_Init>:
{
 8001518:	b500      	push	{lr}
 800151a:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800151c:	2234      	movs	r2, #52	; 0x34
 800151e:	2100      	movs	r1, #0
 8001520:	a801      	add	r0, sp, #4
 8001522:	f005 fc0d 	bl	8006d40 <memset>
  hltdc.Instance = LTDC;
 8001526:	4827      	ldr	r0, [pc, #156]	; (80015c4 <MX_LTDC_Init+0xac>)
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <MX_LTDC_Init+0xb0>)
 800152a:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800152c:	2300      	movs	r3, #0
 800152e:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001530:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001532:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001534:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 9;
 8001536:	2209      	movs	r2, #9
 8001538:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 1;
 800153a:	2201      	movs	r2, #1
 800153c:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800153e:	221d      	movs	r2, #29
 8001540:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001542:	2203      	movs	r2, #3
 8001544:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001546:	f240 120d 	movw	r2, #269	; 0x10d
 800154a:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800154c:	f240 1243 	movw	r2, #323	; 0x143
 8001550:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001552:	f240 1217 	movw	r2, #279	; 0x117
 8001556:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001558:	f240 1247 	movw	r2, #327	; 0x147
 800155c:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800155e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001562:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001566:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800156a:	f002 f81d 	bl	80035a8 <HAL_LTDC_Init>
 800156e:	bb20      	cbnz	r0, 80015ba <MX_LTDC_Init+0xa2>
  pLayerCfg.WindowX0 = 0;
 8001570:	2200      	movs	r2, #0
 8001572:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 240;
 8001574:	21f0      	movs	r1, #240	; 0xf0
 8001576:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001578:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 320;
 800157a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800157e:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001580:	2002      	movs	r0, #2
 8001582:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001584:	20ff      	movs	r0, #255	; 0xff
 8001586:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001588:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800158a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800158e:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001590:	2007      	movs	r0, #7
 8001592:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001594:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 8001598:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800159a:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800159c:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800159e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015a2:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015a6:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015aa:	a901      	add	r1, sp, #4
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_LTDC_Init+0xac>)
 80015ae:	f002 f8e5 	bl	800377c <HAL_LTDC_ConfigLayer>
 80015b2:	b920      	cbnz	r0, 80015be <MX_LTDC_Init+0xa6>
}
 80015b4:	b00f      	add	sp, #60	; 0x3c
 80015b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015ba:	f7ff ff23 	bl	8001404 <Error_Handler>
    Error_Handler();
 80015be:	f7ff ff21 	bl	8001404 <Error_Handler>
 80015c2:	bf00      	nop
 80015c4:	20008620 	.word	0x20008620
 80015c8:	40016800 	.word	0x40016800

080015cc <MX_SPI5_Init>:
{
 80015cc:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_SPI5_Init+0x38>)
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <MX_SPI5_Init+0x3c>)
 80015d2:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015d4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80015d8:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80015da:	2300      	movs	r3, #0
 80015dc:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80015de:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e0:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e2:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015ea:	2218      	movs	r2, #24
 80015ec:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ee:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80015f4:	230a      	movs	r3, #10
 80015f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80015f8:	f002 fed2 	bl	80043a0 <HAL_SPI_Init>
 80015fc:	b900      	cbnz	r0, 8001600 <MX_SPI5_Init+0x34>
}
 80015fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001600:	f7ff ff00 	bl	8001404 <Error_Handler>
 8001604:	200085c0 	.word	0x200085c0
 8001608:	40015000 	.word	0x40015000

0800160c <MX_TIM1_Init>:
{
 800160c:	b500      	push	{lr}
 800160e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001610:	2300      	movs	r3, #0
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	9303      	str	r3, [sp, #12]
 8001616:	9304      	str	r3, [sp, #16]
 8001618:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 800161e:	4813      	ldr	r0, [pc, #76]	; (800166c <MX_TIM1_Init+0x60>)
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <MX_TIM1_Init+0x64>)
 8001622:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001624:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8001628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001630:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001634:	f003 fb70 	bl	8004d18 <HAL_TIM_Base_Init>
 8001638:	b990      	cbnz	r0, 8001660 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001640:	a902      	add	r1, sp, #8
 8001642:	480a      	ldr	r0, [pc, #40]	; (800166c <MX_TIM1_Init+0x60>)
 8001644:	f003 fba0 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8001648:	b960      	cbnz	r0, 8001664 <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001650:	4669      	mov	r1, sp
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <MX_TIM1_Init+0x60>)
 8001654:	f003 fc18 	bl	8004e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	b930      	cbnz	r0, 8001668 <MX_TIM1_Init+0x5c>
}
 800165a:	b007      	add	sp, #28
 800165c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001660:	f7ff fed0 	bl	8001404 <Error_Handler>
    Error_Handler();
 8001664:	f7ff fece 	bl	8001404 <Error_Handler>
    Error_Handler();
 8001668:	f7ff fecc 	bl	8001404 <Error_Handler>
 800166c:	20008a14 	.word	0x20008a14
 8001670:	40010000 	.word	0x40010000

08001674 <MX_USART1_UART_Init>:
{
 8001674:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <MX_USART1_UART_Init+0x2c>)
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_USART1_UART_Init+0x30>)
 800167a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800167c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001680:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	2300      	movs	r3, #0
 8001684:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001686:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001688:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800168a:	220c      	movs	r2, #12
 800168c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001692:	f003 fccd 	bl	8005030 <HAL_UART_Init>
 8001696:	b900      	cbnz	r0, 800169a <MX_USART1_UART_Init+0x26>
}
 8001698:	bd08      	pop	{r3, pc}
    Error_Handler();
 800169a:	f7ff feb3 	bl	8001404 <Error_Handler>
 800169e:	bf00      	nop
 80016a0:	200086c8 	.word	0x200086c8
 80016a4:	40011000 	.word	0x40011000

080016a8 <MX_USB_OTG_HS_HCD_Init>:
{
 80016a8:	b508      	push	{r3, lr}
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80016aa:	480a      	ldr	r0, [pc, #40]	; (80016d4 <MX_USB_OTG_HS_HCD_Init+0x2c>)
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <MX_USB_OTG_HS_HCD_Init+0x30>)
 80016ae:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80016b0:	230c      	movs	r3, #12
 80016b2:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80016b4:	2301      	movs	r3, #1
 80016b6:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80016bc:	2202      	movs	r2, #2
 80016be:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80016c0:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80016c2:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80016c4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80016c6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80016c8:	f001 f90b 	bl	80028e2 <HAL_HCD_Init>
 80016cc:	b900      	cbnz	r0, 80016d0 <MX_USB_OTG_HS_HCD_Init+0x28>
}
 80016ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016d0:	f7ff fe98 	bl	8001404 <Error_Handler>
 80016d4:	2000870c 	.word	0x2000870c
 80016d8:	40040000 	.word	0x40040000

080016dc <SystemClock_Config>:
{
 80016dc:	b500      	push	{lr}
 80016de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e0:	2230      	movs	r2, #48	; 0x30
 80016e2:	2100      	movs	r1, #0
 80016e4:	a808      	add	r0, sp, #32
 80016e6:	f005 fb2b 	bl	8006d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ea:	2300      	movs	r3, #0
 80016ec:	9303      	str	r3, [sp, #12]
 80016ee:	9304      	str	r3, [sp, #16]
 80016f0:	9305      	str	r3, [sp, #20]
 80016f2:	9306      	str	r3, [sp, #24]
 80016f4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <SystemClock_Config+0xa0>)
 80016fa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80016fc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001700:	6411      	str	r1, [r2, #64]	; 0x40
 8001702:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001704:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <SystemClock_Config+0xa4>)
 8001710:	6813      	ldr	r3, [r2, #0]
 8001712:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	6813      	ldr	r3, [r2, #0]
 800171e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001726:	2301      	movs	r3, #1
 8001728:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001730:	2302      	movs	r3, #2
 8001732:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001734:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001738:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800173a:	2204      	movs	r2, #4
 800173c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800173e:	2248      	movs	r2, #72	; 0x48
 8001740:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001742:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001744:	2303      	movs	r3, #3
 8001746:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	a808      	add	r0, sp, #32
 800174a:	f002 f85f 	bl	800380c <HAL_RCC_OscConfig>
 800174e:	b980      	cbnz	r0, 8001772 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001750:	230f      	movs	r3, #15
 8001752:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001754:	2102      	movs	r1, #2
 8001756:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001760:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001764:	a803      	add	r0, sp, #12
 8001766:	f002 fab3 	bl	8003cd0 <HAL_RCC_ClockConfig>
 800176a:	b920      	cbnz	r0, 8001776 <SystemClock_Config+0x9a>
}
 800176c:	b015      	add	sp, #84	; 0x54
 800176e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001772:	f7ff fe47 	bl	8001404 <Error_Handler>
    Error_Handler();
 8001776:	f7ff fe45 	bl	8001404 <Error_Handler>
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000

08001784 <main>:
{
 8001784:	b508      	push	{r3, lr}
  HAL_Init();
 8001786:	f000 fbd5 	bl	8001f34 <HAL_Init>
  SystemClock_Config();
 800178a:	f7ff ffa7 	bl	80016dc <SystemClock_Config>
  MX_GPIO_Init();
 800178e:	f7ff fd5b 	bl	8001248 <MX_GPIO_Init>
  MX_CRC_Init();
 8001792:	f7ff fe39 	bl	8001408 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001796:	f7ff fe45 	bl	8001424 <MX_DMA2D_Init>
  MX_FMC_Init();
 800179a:	f7ff fe61 	bl	8001460 <MX_FMC_Init>
  MX_I2C3_Init();
 800179e:	f7ff fe91 	bl	80014c4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80017a2:	f7ff feb9 	bl	8001518 <MX_LTDC_Init>
  MX_SPI5_Init();
 80017a6:	f7ff ff11 	bl	80015cc <MX_SPI5_Init>
  MX_TIM1_Init();
 80017aa:	f7ff ff2f 	bl	800160c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80017ae:	f7ff ff61 	bl	8001674 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80017b2:	f7ff ff79 	bl	80016a8 <MX_USB_OTG_HS_HCD_Init>
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017b6:	2300      	movs	r3, #0
 80017b8:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <main+0x44>)
 80017ba:	6013      	str	r3, [r2, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80017bc:	4a03      	ldr	r2, [pc, #12]	; (80017cc <main+0x48>)
 80017be:	6013      	str	r3, [r2, #0]
  app_main();
 80017c0:	f7fe ff50 	bl	8000664 <app_main>
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <main+0x40>
 80017c6:	bf00      	nop
 80017c8:	20008568 	.word	0x20008568
 80017cc:	20008a10 	.word	0x20008a10

080017d0 <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_FMC_MspInit+0xbc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b103      	cbz	r3, 80017d8 <HAL_FMC_MspInit+0x8>
 80017d6:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 80017d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017dc:	b086      	sub	sp, #24
    return;
  }
  FMC_Initialized = 1;
 80017de:	f04f 0801 	mov.w	r8, #1
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <HAL_FMC_MspInit+0xbc>)
 80017e4:	f8c3 8000 	str.w	r8, [r3]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80017e8:	2400      	movs	r4, #0
 80017ea:	9400      	str	r4, [sp, #0]
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <HAL_FMC_MspInit+0xc0>)
 80017ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017f0:	ea42 0208 	orr.w	r2, r2, r8
 80017f4:	639a      	str	r2, [r3, #56]	; 0x38
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	ea03 0308 	and.w	r3, r3, r8
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	9b00      	ldr	r3, [sp, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001800:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001804:	9301      	str	r3, [sp, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2702      	movs	r7, #2
 8001808:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2603      	movs	r6, #3
 800180e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001810:	250c      	movs	r5, #12
 8001812:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001814:	a901      	add	r1, sp, #4
 8001816:	481f      	ldr	r0, [pc, #124]	; (8001894 <HAL_FMC_MspInit+0xc4>)
 8001818:	f000 fe60 	bl	80024dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800181c:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001826:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001828:	a901      	add	r1, sp, #4
 800182a:	481b      	ldr	r0, [pc, #108]	; (8001898 <HAL_FMC_MspInit+0xc8>)
 800182c:	f000 fe56 	bl	80024dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001830:	f248 1333 	movw	r3, #33075	; 0x8133
 8001834:	9301      	str	r3, [sp, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800183c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183e:	a901      	add	r1, sp, #4
 8001840:	4816      	ldr	r0, [pc, #88]	; (800189c <HAL_FMC_MspInit+0xcc>)
 8001842:	f000 fe4b 	bl	80024dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001846:	f64f 7383 	movw	r3, #65411	; 0xff83
 800184a:	9301      	str	r3, [sp, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001852:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001854:	a901      	add	r1, sp, #4
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <HAL_FMC_MspInit+0xd0>)
 8001858:	f000 fe40 	bl	80024dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800185c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001860:	9301      	str	r3, [sp, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001868:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186a:	a901      	add	r1, sp, #4
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <HAL_FMC_MspInit+0xd4>)
 800186e:	f000 fe35 	bl	80024dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001872:	2360      	movs	r3, #96	; 0x60
 8001874:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800187c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	a901      	add	r1, sp, #4
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <HAL_FMC_MspInit+0xd8>)
 8001882:	f000 fe2b 	bl	80024dc <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001886:	b006      	add	sp, #24
 8001888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800188c:	20000400 	.word	0x20000400
 8001890:	40023800 	.word	0x40023800
 8001894:	40021400 	.word	0x40021400
 8001898:	40020800 	.word	0x40020800
 800189c:	40021800 	.word	0x40021800
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40020c00 	.word	0x40020c00
 80018a8:	40020400 	.word	0x40020400

080018ac <HAL_MspInit>:
{
 80018ac:	b500      	push	{lr}
 80018ae:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	2200      	movs	r2, #0
 80018b2:	9200      	str	r2, [sp, #0]
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_MspInit+0x40>)
 80018b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80018b8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80018bc:	6459      	str	r1, [r3, #68]	; 0x44
 80018be:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80018c0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80018c4:	9100      	str	r1, [sp, #0]
 80018c6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	9201      	str	r2, [sp, #4]
 80018ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80018cc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80018d0:	6419      	str	r1, [r3, #64]	; 0x40
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018dc:	210f      	movs	r1, #15
 80018de:	f06f 0001 	mvn.w	r0, #1
 80018e2:	f000 fb79 	bl	8001fd8 <HAL_NVIC_SetPriority>
}
 80018e6:	b003      	add	sp, #12
 80018e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 80018f0:	6802      	ldr	r2, [r0, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_CRC_MspInit+0x28>)
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d000      	beq.n	80018fa <HAL_CRC_MspInit+0xa>
 80018f8:	4770      	bx	lr
{
 80018fa:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_CRC_MspInit+0x2c>)
 8001902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001904:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	9b01      	ldr	r3, [sp, #4]
}
 8001914:	b002      	add	sp, #8
 8001916:	4770      	bx	lr
 8001918:	40023000 	.word	0x40023000
 800191c:	40023800 	.word	0x40023800

08001920 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8001920:	6802      	ldr	r2, [r0, #0]
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_DMA2D_MspInit+0x3c>)
 8001924:	429a      	cmp	r2, r3
 8001926:	d000      	beq.n	800192a <HAL_DMA2D_MspInit+0xa>
 8001928:	4770      	bx	lr
{
 800192a:	b500      	push	{lr}
 800192c:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800192e:	2200      	movs	r2, #0
 8001930:	9201      	str	r2, [sp, #4]
 8001932:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8001936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001938:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800193c:	6319      	str	r1, [r3, #48]	; 0x30
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001948:	2105      	movs	r1, #5
 800194a:	205a      	movs	r0, #90	; 0x5a
 800194c:	f000 fb44 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001950:	205a      	movs	r0, #90	; 0x5a
 8001952:	f000 fb75 	bl	8002040 <HAL_NVIC_EnableIRQ>
}
 8001956:	b003      	add	sp, #12
 8001958:	f85d fb04 	ldr.w	pc, [sp], #4
 800195c:	4002b000 	.word	0x4002b000

08001960 <HAL_I2C_MspInit>:
{
 8001960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001964:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	2300      	movs	r3, #0
 8001968:	9303      	str	r3, [sp, #12]
 800196a:	9304      	str	r3, [sp, #16]
 800196c:	9305      	str	r3, [sp, #20]
 800196e:	9306      	str	r3, [sp, #24]
 8001970:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8001972:	6802      	ldr	r2, [r0, #0]
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_I2C_MspInit+0x9c>)
 8001976:	429a      	cmp	r2, r3
 8001978:	d002      	beq.n	8001980 <HAL_I2C_MspInit+0x20>
}
 800197a:	b008      	add	sp, #32
 800197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	2500      	movs	r5, #0
 8001982:	9500      	str	r5, [sp, #0]
 8001984:	4c1e      	ldr	r4, [pc, #120]	; (8001a00 <HAL_I2C_MspInit+0xa0>)
 8001986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6323      	str	r3, [r4, #48]	; 0x30
 800198e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	9501      	str	r5, [sp, #4]
 800199a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6323      	str	r3, [r4, #48]	; 0x30
 80019a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80019ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b2:	f04f 0812 	mov.w	r8, #18
 80019b6:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ba:	2701      	movs	r7, #1
 80019bc:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019c0:	2604      	movs	r6, #4
 80019c2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80019c4:	a903      	add	r1, sp, #12
 80019c6:	480f      	ldr	r0, [pc, #60]	; (8001a04 <HAL_I2C_MspInit+0xa4>)
 80019c8:	f000 fd88 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80019cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d2:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d6:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019da:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80019dc:	a903      	add	r1, sp, #12
 80019de:	480a      	ldr	r0, [pc, #40]	; (8001a08 <HAL_I2C_MspInit+0xa8>)
 80019e0:	f000 fd7c 	bl	80024dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019e4:	9502      	str	r5, [sp, #8]
 80019e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ec:	6423      	str	r3, [r4, #64]	; 0x40
 80019ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	9b02      	ldr	r3, [sp, #8]
}
 80019f8:	e7bf      	b.n	800197a <HAL_I2C_MspInit+0x1a>
 80019fa:	bf00      	nop
 80019fc:	40005c00 	.word	0x40005c00
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020000 	.word	0x40020000

08001a0c <HAL_LTDC_MspInit>:
{
 8001a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a10:	b098      	sub	sp, #96	; 0x60
 8001a12:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	2100      	movs	r1, #0
 8001a16:	9113      	str	r1, [sp, #76]	; 0x4c
 8001a18:	9114      	str	r1, [sp, #80]	; 0x50
 8001a1a:	9115      	str	r1, [sp, #84]	; 0x54
 8001a1c:	9116      	str	r1, [sp, #88]	; 0x58
 8001a1e:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	2230      	movs	r2, #48	; 0x30
 8001a22:	a807      	add	r0, sp, #28
 8001a24:	f005 f98c 	bl	8006d40 <memset>
  if(hltdc->Instance==LTDC)
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <HAL_LTDC_MspInit+0x1b0>)
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d002      	beq.n	8001a36 <HAL_LTDC_MspInit+0x2a>
}
 8001a30:	b018      	add	sp, #96	; 0x60
 8001a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a36:	2308      	movs	r3, #8
 8001a38:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001a3a:	233c      	movs	r3, #60	; 0x3c
 8001a3c:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a3e:	2305      	movs	r3, #5
 8001a40:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a46:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a48:	a807      	add	r0, sp, #28
 8001a4a:	f002 fa35 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	f040 80b0 	bne.w	8001bb4 <HAL_LTDC_MspInit+0x1a8>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a54:	2400      	movs	r4, #0
 8001a56:	9400      	str	r4, [sp, #0]
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_LTDC_MspInit+0x1b4>)
 8001a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a5c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
 8001a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a64:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6c:	9401      	str	r4, [sp, #4]
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a70:	f042 0220 	orr.w	r2, r2, #32
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
 8001a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a78:	f002 0220 	and.w	r2, r2, #32
 8001a7c:	9201      	str	r2, [sp, #4]
 8001a7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	9402      	str	r4, [sp, #8]
 8001a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a84:	f042 0201 	orr.w	r2, r2, #1
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8c:	f002 0201 	and.w	r2, r2, #1
 8001a90:	9202      	str	r2, [sp, #8]
 8001a92:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	9403      	str	r4, [sp, #12]
 8001a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a98:	f042 0202 	orr.w	r2, r2, #2
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa0:	f002 0202 	and.w	r2, r2, #2
 8001aa4:	9203      	str	r2, [sp, #12]
 8001aa6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa8:	9404      	str	r4, [sp, #16]
 8001aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001ab8:	9204      	str	r2, [sp, #16]
 8001aba:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abc:	9405      	str	r4, [sp, #20]
 8001abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac0:	f042 0204 	orr.w	r2, r2, #4
 8001ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac8:	f002 0204 	and.w	r2, r2, #4
 8001acc:	9205      	str	r2, [sp, #20]
 8001ace:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad0:	9406      	str	r4, [sp, #24]
 8001ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad4:	f042 0208 	orr.w	r2, r2, #8
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	9306      	str	r3, [sp, #24]
 8001ae2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2502      	movs	r5, #2
 8001aec:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001af2:	260e      	movs	r6, #14
 8001af4:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001af6:	a913      	add	r1, sp, #76	; 0x4c
 8001af8:	4832      	ldr	r0, [pc, #200]	; (8001bc4 <HAL_LTDC_MspInit+0x1b8>)
 8001afa:	f000 fcef 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001afe:	f641 0358 	movw	r3, #6232	; 0x1858
 8001b02:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b0a:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	a913      	add	r1, sp, #76	; 0x4c
 8001b0e:	482e      	ldr	r0, [pc, #184]	; (8001bc8 <HAL_LTDC_MspInit+0x1bc>)
 8001b10:	f000 fce4 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001b14:	2303      	movs	r3, #3
 8001b16:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b1e:	f04f 0809 	mov.w	r8, #9
 8001b22:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	4f29      	ldr	r7, [pc, #164]	; (8001bcc <HAL_LTDC_MspInit+0x1c0>)
 8001b28:	a913      	add	r1, sp, #76	; 0x4c
 8001b2a:	4638      	mov	r0, r7
 8001b2c:	f000 fcd6 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b30:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b34:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b3c:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	a913      	add	r1, sp, #76	; 0x4c
 8001b40:	4638      	mov	r0, r7
 8001b42:	f000 fccb 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b46:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001b4a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b52:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b54:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 8001b58:	a913      	add	r1, sp, #76	; 0x4c
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f000 fcbe 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001b60:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001b64:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b6c:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	a913      	add	r1, sp, #76	; 0x4c
 8001b70:	4817      	ldr	r0, [pc, #92]	; (8001bd0 <HAL_LTDC_MspInit+0x1c4>)
 8001b72:	f000 fcb3 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001b76:	2348      	movs	r3, #72	; 0x48
 8001b78:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b80:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	a913      	add	r1, sp, #76	; 0x4c
 8001b84:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <HAL_LTDC_MspInit+0x1c8>)
 8001b86:	f000 fca9 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001b8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b8e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b9a:	a913      	add	r1, sp, #76	; 0x4c
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	f000 fc9d 	bl	80024dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	2058      	movs	r0, #88	; 0x58
 8001ba8:	f000 fa16 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001bac:	2058      	movs	r0, #88	; 0x58
 8001bae:	f000 fa47 	bl	8002040 <HAL_NVIC_EnableIRQ>
}
 8001bb2:	e73d      	b.n	8001a30 <HAL_LTDC_MspInit+0x24>
      Error_Handler();
 8001bb4:	f7ff fc26 	bl	8001404 <Error_Handler>
 8001bb8:	e74c      	b.n	8001a54 <HAL_LTDC_MspInit+0x48>
 8001bba:	bf00      	nop
 8001bbc:	40016800 	.word	0x40016800
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020c00 	.word	0x40020c00

08001bd8 <HAL_SPI_MspInit>:
{
 8001bd8:	b500      	push	{lr}
 8001bda:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9303      	str	r3, [sp, #12]
 8001be0:	9304      	str	r3, [sp, #16]
 8001be2:	9305      	str	r3, [sp, #20]
 8001be4:	9306      	str	r3, [sp, #24]
 8001be6:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI5)
 8001be8:	6802      	ldr	r2, [r0, #0]
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_SPI_MspInit+0x68>)
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d002      	beq.n	8001bf6 <HAL_SPI_MspInit+0x1e>
}
 8001bf0:	b009      	add	sp, #36	; 0x24
 8001bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	9201      	str	r2, [sp, #4]
 8001bfa:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8001bfe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001c04:	6459      	str	r1, [r3, #68]	; 0x44
 8001c06:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c08:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8001c0c:	9101      	str	r1, [sp, #4]
 8001c0e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c10:	9202      	str	r2, [sp, #8]
 8001c12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c14:	f041 0120 	orr.w	r1, r1, #32
 8001c18:	6319      	str	r1, [r3, #48]	; 0x30
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c24:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c32:	2305      	movs	r3, #5
 8001c34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c36:	a903      	add	r1, sp, #12
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <HAL_SPI_MspInit+0x6c>)
 8001c3a:	f000 fc4f 	bl	80024dc <HAL_GPIO_Init>
}
 8001c3e:	e7d7      	b.n	8001bf0 <HAL_SPI_MspInit+0x18>
 8001c40:	40015000 	.word	0x40015000
 8001c44:	40021400 	.word	0x40021400

08001c48 <HAL_SPI_MspDeInit>:
{
 8001c48:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI5)
 8001c4a:	6802      	ldr	r2, [r0, #0]
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_SPI_MspDeInit+0x24>)
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d000      	beq.n	8001c54 <HAL_SPI_MspDeInit+0xc>
}
 8001c52:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_SPI_MspDeInit+0x28>)
 8001c56:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001c58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001c5e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001c62:	4804      	ldr	r0, [pc, #16]	; (8001c74 <HAL_SPI_MspDeInit+0x2c>)
 8001c64:	f000 fd32 	bl	80026cc <HAL_GPIO_DeInit>
}
 8001c68:	e7f3      	b.n	8001c52 <HAL_SPI_MspDeInit+0xa>
 8001c6a:	bf00      	nop
 8001c6c:	40015000 	.word	0x40015000
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40021400 	.word	0x40021400

08001c78 <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 8001c78:	6802      	ldr	r2, [r0, #0]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_TIM_Base_MspInit+0x28>)
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d000      	beq.n	8001c82 <HAL_TIM_Base_MspInit+0xa>
 8001c80:	4770      	bx	lr
{
 8001c82:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_TIM_Base_MspInit+0x2c>)
 8001c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	9b01      	ldr	r3, [sp, #4]
}
 8001c9c:	b002      	add	sp, #8
 8001c9e:	4770      	bx	lr
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_UART_MspInit>:
{
 8001ca8:	b500      	push	{lr}
 8001caa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	2300      	movs	r3, #0
 8001cae:	9303      	str	r3, [sp, #12]
 8001cb0:	9304      	str	r3, [sp, #16]
 8001cb2:	9305      	str	r3, [sp, #20]
 8001cb4:	9306      	str	r3, [sp, #24]
 8001cb6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001cb8:	6802      	ldr	r2, [r0, #0]
 8001cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cbe:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d002      	beq.n	8001ccc <HAL_UART_MspInit+0x24>
}
 8001cc6:	b009      	add	sp, #36	; 0x24
 8001cc8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ccc:	2200      	movs	r2, #0
 8001cce:	9201      	str	r2, [sp, #4]
 8001cd0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001cd4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cd6:	f041 0110 	orr.w	r1, r1, #16
 8001cda:	6459      	str	r1, [r3, #68]	; 0x44
 8001cdc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cde:	f001 0110 	and.w	r1, r1, #16
 8001ce2:	9101      	str	r1, [sp, #4]
 8001ce4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	9202      	str	r2, [sp, #8]
 8001ce8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cea:	f041 0101 	orr.w	r1, r1, #1
 8001cee:	6319      	str	r1, [r3, #48]	; 0x30
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cfe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	a903      	add	r1, sp, #12
 8001d10:	4801      	ldr	r0, [pc, #4]	; (8001d18 <HAL_UART_MspInit+0x70>)
 8001d12:	f000 fbe3 	bl	80024dc <HAL_GPIO_Init>
}
 8001d16:	e7d6      	b.n	8001cc6 <HAL_UART_MspInit+0x1e>
 8001d18:	40020000 	.word	0x40020000

08001d1c <HAL_HCD_MspInit>:
{
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	2300      	movs	r3, #0
 8001d22:	9303      	str	r3, [sp, #12]
 8001d24:	9304      	str	r3, [sp, #16]
 8001d26:	9305      	str	r3, [sp, #20]
 8001d28:	9306      	str	r3, [sp, #24]
 8001d2a:	9307      	str	r3, [sp, #28]
  if(hhcd->Instance==USB_OTG_HS)
 8001d2c:	6802      	ldr	r2, [r0, #0]
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_HCD_MspInit+0x8c>)
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_HCD_MspInit+0x1c>
}
 8001d34:	b008      	add	sp, #32
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	2400      	movs	r4, #0
 8001d3a:	9401      	str	r4, [sp, #4]
 8001d3c:	4d1b      	ldr	r5, [pc, #108]	; (8001dac <HAL_HCD_MspInit+0x90>)
 8001d3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	632b      	str	r3, [r5, #48]	; 0x30
 8001d46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001d50:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001d54:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001d5e:	230c      	movs	r3, #12
 8001d60:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	4e13      	ldr	r6, [pc, #76]	; (8001db0 <HAL_HCD_MspInit+0x94>)
 8001d64:	eb0d 0103 	add.w	r1, sp, r3
 8001d68:	4630      	mov	r0, r6
 8001d6a:	f000 fbb7 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d74:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001d78:	a903      	add	r1, sp, #12
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f000 fbae 	bl	80024dc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001d80:	9402      	str	r4, [sp, #8]
 8001d82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d88:	632b      	str	r3, [r5, #48]	; 0x30
 8001d8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8001d94:	4622      	mov	r2, r4
 8001d96:	2105      	movs	r1, #5
 8001d98:	204d      	movs	r0, #77	; 0x4d
 8001d9a:	f000 f91d 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001d9e:	204d      	movs	r0, #77	; 0x4d
 8001da0:	f000 f94e 	bl	8002040 <HAL_NVIC_EnableIRQ>
}
 8001da4:	e7c6      	b.n	8001d34 <HAL_HCD_MspInit+0x18>
 8001da6:	bf00      	nop
 8001da8:	40040000 	.word	0x40040000
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020400 	.word	0x40020400

08001db4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001db4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001db6:	f7ff fd0b 	bl	80017d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001dba:	bd08      	pop	{r3, pc}

08001dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2036      	movs	r0, #54	; 0x36
 8001dc6:	f000 f907 	bl	8001fd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dca:	2036      	movs	r0, #54	; 0x36
 8001dcc:	f000 f938 	bl	8002040 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	9401      	str	r4, [sp, #4]
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_InitTick+0x6c>)
 8001dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd8:	f042 0210 	orr.w	r2, r2, #16
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de8:	a902      	add	r1, sp, #8
 8001dea:	a803      	add	r0, sp, #12
 8001dec:	f002 f846 	bl	8003e7c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001df0:	f002 f824 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8001df4:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001df6:	480d      	ldr	r0, [pc, #52]	; (8001e2c <HAL_InitTick+0x70>)
 8001df8:	fba0 2303 	umull	r2, r3, r0, r3
 8001dfc:	0c9b      	lsrs	r3, r3, #18
 8001dfe:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <HAL_InitTick+0x74>)
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_InitTick+0x78>)
 8001e04:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e0a:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e0c:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001e0e:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e12:	f002 ff81 	bl	8004d18 <HAL_TIM_Base_Init>
 8001e16:	b110      	cbz	r0, 8001e1e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
}
 8001e1a:	b008      	add	sp, #32
 8001e1c:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e1e:	4804      	ldr	r0, [pc, #16]	; (8001e30 <HAL_InitTick+0x74>)
 8001e20:	f002 fe10 	bl	8004a44 <HAL_TIM_Base_Start_IT>
 8001e24:	e7f9      	b.n	8001e1a <HAL_InitTick+0x5e>
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	431bde83 	.word	0x431bde83
 8001e30:	20008ad0 	.word	0x20008ad0
 8001e34:	40001000 	.word	0x40001000

08001e38 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <NMI_Handler>

08001e3a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler>

08001e3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler>

08001e3e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler>

08001e40 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler>

08001e42 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e42:	4770      	bx	lr

08001e44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e46:	4802      	ldr	r0, [pc, #8]	; (8001e50 <TIM6_DAC_IRQHandler+0xc>)
 8001e48:	f002 fe44 	bl	8004ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e4c:	bd08      	pop	{r3, pc}
 8001e4e:	bf00      	nop
 8001e50:	20008ad0 	.word	0x20008ad0

08001e54 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001e56:	4802      	ldr	r0, [pc, #8]	; (8001e60 <OTG_HS_IRQHandler+0xc>)
 8001e58:	f001 f902 	bl	8003060 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e5c:	bd08      	pop	{r3, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000870c 	.word	0x2000870c

08001e64 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e66:	4802      	ldr	r0, [pc, #8]	; (8001e70 <LTDC_IRQHandler+0xc>)
 8001e68:	f001 fc1b 	bl	80036a2 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001e6c:	bd08      	pop	{r3, pc}
 8001e6e:	bf00      	nop
 8001e70:	20008620 	.word	0x20008620

08001e74 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e76:	4802      	ldr	r0, [pc, #8]	; (8001e80 <DMA2D_IRQHandler+0xc>)
 8001e78:	f000 fa2f 	bl	80022da <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001e7c:	bd08      	pop	{r3, pc}
 8001e7e:	bf00      	nop
 8001e80:	20008a5c 	.word	0x20008a5c

08001e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e88:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <_sbrk+0x38>)
 8001e8a:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <_sbrk+0x40>)
 8001e8e:	6800      	ldr	r0, [r0, #0]
 8001e90:	b140      	cbz	r0, 8001ea4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <_sbrk+0x40>)
 8001e94:	6800      	ldr	r0, [r0, #0]
 8001e96:	4403      	add	r3, r0
 8001e98:	1a52      	subs	r2, r2, r1
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d806      	bhi.n	8001eac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <_sbrk+0x40>)
 8001ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001ea2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ea4:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <_sbrk+0x40>)
 8001ea6:	4c08      	ldr	r4, [pc, #32]	; (8001ec8 <_sbrk+0x44>)
 8001ea8:	6004      	str	r4, [r0, #0]
 8001eaa:	e7f2      	b.n	8001e92 <_sbrk+0xe>
    errno = ENOMEM;
 8001eac:	f004 ff10 	bl	8006cd0 <__errno>
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	e7f3      	b.n	8001ea2 <_sbrk+0x1e>
 8001eba:	bf00      	nop
 8001ebc:	20030000 	.word	0x20030000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	20000404 	.word	0x20000404
 8001ec8:	20008b30 	.word	0x20008b30

08001ecc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <SystemInit+0x10>)
 8001ece:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ed2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ee6:	490e      	ldr	r1, [pc, #56]	; (8001f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001efc:	4c0b      	ldr	r4, [pc, #44]	; (8001f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f0a:	f7ff ffdf 	bl	8001ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f004 fee5 	bl	8006cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f12:	f7ff fc37 	bl	8001784 <main>
  bx  lr    
 8001f16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001f24:	08009de0 	.word	0x08009de0
  ldr r2, =_sbss
 8001f28:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001f2c:	20008b2c 	.word	0x20008b2c

08001f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC_IRQHandler>
	...

08001f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f34:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x30>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f46:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f82f 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff ff30 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fca6 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001f60:	2000      	movs	r0, #0
 8001f62:	bd08      	pop	{r3, pc}
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f68:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <HAL_IncTick+0x10>)
 8001f6a:	6811      	ldr	r1, [r2, #0]
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <HAL_IncTick+0x14>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	440b      	add	r3, r1
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20008b18 	.word	0x20008b18
 8001f7c:	20000054 	.word	0x20000054

08001f80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f80:	4b01      	ldr	r3, [pc, #4]	; (8001f88 <HAL_GetTick+0x8>)
 8001f82:	6818      	ldr	r0, [r3, #0]
}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20008b18 	.word	0x20008b18

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff fff6 	bl	8001f80 <HAL_GetTick>
 8001f94:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f96:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001f9a:	d002      	beq.n	8001fa2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_Delay+0x24>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa2:	f7ff ffed 	bl	8001f80 <HAL_GetTick>
 8001fa6:	1b40      	subs	r0, r0, r5
 8001fa8:	42a0      	cmp	r0, r4
 8001faa:	d3fa      	bcc.n	8001fa2 <HAL_Delay+0x16>
  {
  }
}
 8001fac:	bd38      	pop	{r3, r4, r5, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000054 	.word	0x20000054

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001fb6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	0200      	lsls	r0, r0, #8
 8001fc2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001fd0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_NVIC_SetPriority+0x60>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe2:	f1c3 0407 	rsb	r4, r3, #7
 8001fe6:	2c04      	cmp	r4, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fec:	1d1d      	adds	r5, r3, #4
 8001fee:	2d06      	cmp	r5, #6
 8001ff0:	d918      	bls.n	8002024 <HAL_NVIC_SetPriority+0x4c>
 8001ff2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 35ff 	mov.w	r5, #4294967295
 8001ff8:	fa05 f404 	lsl.w	r4, r5, r4
 8001ffc:	ea21 0104 	bic.w	r1, r1, r4
 8002000:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002002:	fa05 f303 	lsl.w	r3, r5, r3
 8002006:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800200c:	2800      	cmp	r0, #0
 800200e:	db0b      	blt.n	8002028 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	0109      	lsls	r1, r1, #4
 8002012:	b2c9      	uxtb	r1, r1
 8002014:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002018:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800201c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002020:	bc30      	pop	{r4, r5}
 8002022:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002024:	2300      	movs	r3, #0
 8002026:	e7e5      	b.n	8001ff4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	f000 000f 	and.w	r0, r0, #15
 800202c:	0109      	lsls	r1, r1, #4
 800202e:	b2c9      	uxtb	r1, r1
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <HAL_NVIC_SetPriority+0x64>)
 8002032:	5419      	strb	r1, [r3, r0]
 8002034:	e7f4      	b.n	8002020 <HAL_NVIC_SetPriority+0x48>
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00
 800203c:	e000ed14 	.word	0xe000ed14

08002040 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002040:	2800      	cmp	r0, #0
 8002042:	db07      	blt.n	8002054 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002044:	f000 021f 	and.w	r2, r0, #31
 8002048:	0940      	lsrs	r0, r0, #5
 800204a:	2301      	movs	r3, #1
 800204c:	4093      	lsls	r3, r2
 800204e:	4a02      	ldr	r2, [pc, #8]	; (8002058 <HAL_NVIC_EnableIRQ+0x18>)
 8002050:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100

0800205c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800205c:	b158      	cbz	r0, 8002076 <HAL_CRC_Init+0x1a>
{
 800205e:	b510      	push	{r4, lr}
 8002060:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002062:	7943      	ldrb	r3, [r0, #5]
 8002064:	b11b      	cbz	r3, 800206e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002066:	2301      	movs	r3, #1
 8002068:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800206a:	2000      	movs	r0, #0
}
 800206c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800206e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8002070:	f7ff fc3e 	bl	80018f0 <HAL_CRC_MspInit>
 8002074:	e7f7      	b.n	8002066 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8002076:	2001      	movs	r0, #1
}
 8002078:	4770      	bx	lr

0800207a <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800207a:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800207c:	6806      	ldr	r6, [r0, #0]
 800207e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8002080:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8002084:	9d03      	ldr	r5, [sp, #12]
 8002086:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800208a:	432c      	orrs	r4, r5
 800208c:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800208e:	6803      	ldr	r3, [r0, #0]
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002092:	6843      	ldr	r3, [r0, #4]
 8002094:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002098:	d003      	beq.n	80020a2 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800209a:	6803      	ldr	r3, [r0, #0]
 800209c:	60d9      	str	r1, [r3, #12]
  }
}
 800209e:	bc70      	pop	{r4, r5, r6}
 80020a0:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80020a2:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80020a6:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80020aa:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80020ae:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80020b0:	6884      	ldr	r4, [r0, #8]
 80020b2:	b194      	cbz	r4, 80020da <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80020b4:	2c01      	cmp	r4, #1
 80020b6:	d00e      	beq.n	80020d6 <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80020b8:	2c02      	cmp	r4, #2
 80020ba:	d011      	beq.n	80020e0 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80020bc:	2c03      	cmp	r4, #3
 80020be:	d017      	beq.n	80020f0 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 80020c0:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 80020c2:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 80020c4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80020c6:	0219      	lsls	r1, r3, #8
 80020c8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80020cc:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 80020d0:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 80020d4:	e001      	b.n	80020da <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 80020d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80020da:	6803      	ldr	r3, [r0, #0]
 80020dc:	6399      	str	r1, [r3, #56]	; 0x38
 80020de:	e7de      	b.n	800209e <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 80020e0:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 80020e2:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80020e4:	02d9      	lsls	r1, r3, #11
 80020e6:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80020ea:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 80020ee:	e7f4      	b.n	80020da <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 80020f0:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 80020f2:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 80020f4:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80020f6:	0299      	lsls	r1, r3, #10
 80020f8:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80020fc:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8002100:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002104:	e7e9      	b.n	80020da <DMA2D_SetConfig+0x60>

08002106 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8002106:	b348      	cbz	r0, 800215c <HAL_DMA2D_Init+0x56>
{
 8002108:	b510      	push	{r4, lr}
 800210a:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800210c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002110:	b1fb      	cbz	r3, 8002152 <HAL_DMA2D_Init+0x4c>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002112:	2302      	movs	r3, #2
 8002114:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	6813      	ldr	r3, [r2, #0]
 800211c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002120:	6861      	ldr	r1, [r4, #4]
 8002122:	430b      	orrs	r3, r1
 8002124:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002126:	6822      	ldr	r2, [r4, #0]
 8002128:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800212a:	f023 0307 	bic.w	r3, r3, #7
 800212e:	68a1      	ldr	r1, [r4, #8]
 8002130:	430b      	orrs	r3, r1
 8002132:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002138:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800213c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002140:	68e1      	ldr	r1, [r4, #12]
 8002142:	430b      	orrs	r3, r1
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002146:	2000      	movs	r0, #0
 8002148:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800214a:	2301      	movs	r3, #1
 800214c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002150:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002152:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002156:	f7ff fbe3 	bl	8001920 <HAL_DMA2D_MspInit>
 800215a:	e7da      	b.n	8002112 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 800215c:	2001      	movs	r0, #1
}
 800215e:	4770      	bx	lr

08002160 <HAL_DMA2D_Start>:
{
 8002160:	b510      	push	{r4, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8002166:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800216a:	2801      	cmp	r0, #1
 800216c:	d012      	beq.n	8002194 <HAL_DMA2D_Start+0x34>
 800216e:	2001      	movs	r0, #1
 8002170:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002174:	2002      	movs	r0, #2
 8002176:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800217a:	9804      	ldr	r0, [sp, #16]
 800217c:	9000      	str	r0, [sp, #0]
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff7b 	bl	800207a <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002184:	6822      	ldr	r2, [r4, #0]
 8002186:	6813      	ldr	r3, [r2, #0]
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800218e:	2000      	movs	r0, #0
}
 8002190:	b002      	add	sp, #8
 8002192:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8002194:	2002      	movs	r0, #2
 8002196:	e7fb      	b.n	8002190 <HAL_DMA2D_Start+0x30>

08002198 <HAL_DMA2D_PollForTransfer>:
{
 8002198:	b570      	push	{r4, r5, r6, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	4604      	mov	r4, r0
 800219e:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80021a4:	6803      	ldr	r3, [r0, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f013 0f01 	tst.w	r3, #1
 80021ac:	d111      	bne.n	80021d2 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80021ae:	6822      	ldr	r2, [r4, #0]
 80021b0:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80021b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b4:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80021b6:	f013 0f20 	tst.w	r3, #32
 80021ba:	d147      	bne.n	800224c <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	2212      	movs	r2, #18
 80021c0:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80021ce:	b002      	add	sp, #8
 80021d0:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80021d2:	f7ff fed5 	bl	8001f80 <HAL_GetTick>
 80021d6:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	f012 0f02 	tst.w	r2, #2
 80021e0:	d1e5      	bne.n	80021ae <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80021e6:	9a01      	ldr	r2, [sp, #4]
 80021e8:	f012 0f21 	tst.w	r2, #33	; 0x21
 80021ec:	d114      	bne.n	8002218 <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 80021ee:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021f2:	d0f1      	beq.n	80021d8 <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7ff fec4 	bl	8001f80 <HAL_GetTick>
 80021f8:	1b80      	subs	r0, r0, r6
 80021fa:	42a8      	cmp	r0, r5
 80021fc:	d801      	bhi.n	8002202 <HAL_DMA2D_PollForTransfer+0x6a>
 80021fe:	2d00      	cmp	r5, #0
 8002200:	d1ea      	bne.n	80021d8 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002202:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002204:	f043 0320 	orr.w	r3, r3, #32
 8002208:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800220a:	2003      	movs	r0, #3
 800220c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002210:	2300      	movs	r3, #0
 8002212:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002216:	e7da      	b.n	80021ce <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002218:	9a01      	ldr	r2, [sp, #4]
 800221a:	f012 0f20 	tst.w	r2, #32
 800221e:	d003      	beq.n	8002228 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002220:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002222:	f042 0202 	orr.w	r2, r2, #2
 8002226:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002228:	9a01      	ldr	r2, [sp, #4]
 800222a:	f012 0f01 	tst.w	r2, #1
 800222e:	d003      	beq.n	8002238 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002230:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002238:	2221      	movs	r2, #33	; 0x21
 800223a:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800223c:	2304      	movs	r3, #4
 800223e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002242:	2300      	movs	r3, #0
 8002244:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002248:	2001      	movs	r0, #1
 800224a:	e7c0      	b.n	80021ce <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 800224c:	f7ff fe98 	bl	8001f80 <HAL_GetTick>
 8002250:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	f012 0f10 	tst.w	r2, #16
 800225a:	d1af      	bne.n	80021bc <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002260:	9a01      	ldr	r2, [sp, #4]
 8002262:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002266:	d114      	bne.n	8002292 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 8002268:	f1b5 3fff 	cmp.w	r5, #4294967295
 800226c:	d0f1      	beq.n	8002252 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800226e:	f7ff fe87 	bl	8001f80 <HAL_GetTick>
 8002272:	1b80      	subs	r0, r0, r6
 8002274:	42a8      	cmp	r0, r5
 8002276:	d801      	bhi.n	800227c <HAL_DMA2D_PollForTransfer+0xe4>
 8002278:	2d00      	cmp	r5, #0
 800227a:	d1ea      	bne.n	8002252 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800227c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800227e:	f043 0320 	orr.w	r3, r3, #32
 8002282:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002284:	2003      	movs	r0, #3
 8002286:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 800228a:	2300      	movs	r3, #0
 800228c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002290:	e79d      	b.n	80021ce <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002292:	9a01      	ldr	r2, [sp, #4]
 8002294:	f012 0f08 	tst.w	r2, #8
 8002298:	d003      	beq.n	80022a2 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800229a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800229c:	f042 0204 	orr.w	r2, r2, #4
 80022a0:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80022a2:	9a01      	ldr	r2, [sp, #4]
 80022a4:	f012 0f20 	tst.w	r2, #32
 80022a8:	d003      	beq.n	80022b2 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80022ac:	f042 0202 	orr.w	r2, r2, #2
 80022b0:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022b2:	9a01      	ldr	r2, [sp, #4]
 80022b4:	f012 0f01 	tst.w	r2, #1
 80022b8:	d003      	beq.n	80022c2 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022c2:	2229      	movs	r2, #41	; 0x29
 80022c4:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022c6:	2304      	movs	r3, #4
 80022c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80022cc:	2300      	movs	r3, #0
 80022ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80022d2:	2001      	movs	r0, #1
 80022d4:	e77b      	b.n	80021ce <HAL_DMA2D_PollForTransfer+0x36>

080022d6 <HAL_DMA2D_LineEventCallback>:
}
 80022d6:	4770      	bx	lr

080022d8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
}
 80022d8:	4770      	bx	lr

080022da <HAL_DMA2D_IRQHandler>:
{
 80022da:	b570      	push	{r4, r5, r6, lr}
 80022dc:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80022de:	6803      	ldr	r3, [r0, #0]
 80022e0:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80022e2:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022e4:	f015 0f01 	tst.w	r5, #1
 80022e8:	d016      	beq.n	8002318 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80022ea:	f416 7f80 	tst.w	r6, #256	; 0x100
 80022ee:	d013      	beq.n	8002318 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f6:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002300:	6803      	ldr	r3, [r0, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002306:	2304      	movs	r3, #4
 8002308:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800230c:	2300      	movs	r3, #0
 800230e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002312:	6943      	ldr	r3, [r0, #20]
 8002314:	b103      	cbz	r3, 8002318 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8002316:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002318:	f015 0f20 	tst.w	r5, #32
 800231c:	d018      	beq.n	8002350 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800231e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8002322:	d015      	beq.n	8002350 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002324:	6822      	ldr	r2, [r4, #0]
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800232c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	2220      	movs	r2, #32
 8002332:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800233c:	2304      	movs	r3, #4
 800233e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002342:	2300      	movs	r3, #0
 8002344:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002348:	6963      	ldr	r3, [r4, #20]
 800234a:	b10b      	cbz	r3, 8002350 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800234c:	4620      	mov	r0, r4
 800234e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002350:	f015 0f08 	tst.w	r5, #8
 8002354:	d018      	beq.n	8002388 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002356:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800235a:	d015      	beq.n	8002388 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	6813      	ldr	r3, [r2, #0]
 8002360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002364:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	2208      	movs	r2, #8
 800236a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800236c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002374:	2304      	movs	r3, #4
 8002376:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800237a:	2300      	movs	r3, #0
 800237c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002380:	6963      	ldr	r3, [r4, #20]
 8002382:	b10b      	cbz	r3, 8002388 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8002384:	4620      	mov	r0, r4
 8002386:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002388:	f015 0f04 	tst.w	r5, #4
 800238c:	d002      	beq.n	8002394 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800238e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002392:	d120      	bne.n	80023d6 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002394:	f015 0f02 	tst.w	r5, #2
 8002398:	d016      	beq.n	80023c8 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800239a:	f416 7f00 	tst.w	r6, #512	; 0x200
 800239e:	d013      	beq.n	80023c8 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	6813      	ldr	r3, [r2, #0]
 80023a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a8:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	2202      	movs	r2, #2
 80023ae:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023b2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80023ba:	2300      	movs	r3, #0
 80023bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80023c0:	6923      	ldr	r3, [r4, #16]
 80023c2:	b10b      	cbz	r3, 80023c8 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 80023c4:	4620      	mov	r0, r4
 80023c6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80023c8:	f015 0f10 	tst.w	r5, #16
 80023cc:	d002      	beq.n	80023d4 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80023ce:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80023d2:	d10c      	bne.n	80023ee <HAL_DMA2D_IRQHandler+0x114>
}
 80023d4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	6813      	ldr	r3, [r2, #0]
 80023da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023de:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7ff ff75 	bl	80022d6 <HAL_DMA2D_LineEventCallback>
 80023ec:	e7d2      	b.n	8002394 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	6813      	ldr	r3, [r2, #0]
 80023f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	2210      	movs	r2, #16
 80023fc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002400:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002402:	2301      	movs	r3, #1
 8002404:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002408:	2300      	movs	r3, #0
 800240a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff ff62 	bl	80022d8 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8002414:	e7de      	b.n	80023d4 <HAL_DMA2D_IRQHandler+0xfa>
	...

08002418 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002418:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800241c:	2b01      	cmp	r3, #1
 800241e:	d059      	beq.n	80024d4 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8002420:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8002422:	2301      	movs	r3, #1
 8002424:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002428:	2302      	movs	r3, #2
 800242a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800242e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	1c8b      	adds	r3, r1, #2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	58c3      	ldr	r3, [r0, r3]
 800243a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800243e:	3a09      	subs	r2, #9
 8002440:	2a01      	cmp	r2, #1
 8002442:	d91e      	bls.n	8002482 <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002444:	1c8a      	adds	r2, r1, #2
 8002446:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800244a:	6852      	ldr	r2, [r2, #4]
 800244c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002450:	bb41      	cbnz	r1, 80024a4 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002452:	6804      	ldr	r4, [r0, #0]
 8002454:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002456:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_DMA2D_ConfigLayer+0xc0>)
 8002458:	402a      	ands	r2, r5
 800245a:	4313      	orrs	r3, r2
 800245c:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800245e:	6802      	ldr	r2, [r0, #0]
 8002460:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002464:	699c      	ldr	r4, [r3, #24]
 8002466:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	3b09      	subs	r3, #9
 800246c:	2b01      	cmp	r3, #1
 800246e:	d910      	bls.n	8002492 <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002470:	2301      	movs	r3, #1
 8002472:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002476:	2300      	movs	r3, #0
 8002478:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 800247c:	4618      	mov	r0, r3
}
 800247e:	bc30      	pop	{r4, r5}
 8002480:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002482:	1c8a      	adds	r2, r1, #2
 8002484:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002488:	6852      	ldr	r2, [r2, #4]
 800248a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800248e:	4313      	orrs	r3, r2
 8002490:	e7de      	b.n	8002450 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002492:	3102      	adds	r1, #2
 8002494:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002498:	684b      	ldr	r3, [r1, #4]
 800249a:	6802      	ldr	r2, [r0, #0]
 800249c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024a0:	6293      	str	r3, [r2, #40]	; 0x28
 80024a2:	e7e5      	b.n	8002470 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80024a4:	6804      	ldr	r4, [r0, #0]
 80024a6:	69e5      	ldr	r5, [r4, #28]
 80024a8:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <HAL_DMA2D_ConfigLayer+0xc0>)
 80024aa:	402a      	ands	r2, r5
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80024b0:	6802      	ldr	r2, [r0, #0]
 80024b2:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80024b6:	699c      	ldr	r4, [r3, #24]
 80024b8:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	3b09      	subs	r3, #9
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d8d6      	bhi.n	8002470 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80024c2:	3102      	adds	r1, #2
 80024c4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80024c8:	684b      	ldr	r3, [r1, #4]
 80024ca:	6802      	ldr	r2, [r0, #0]
 80024cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	e7cd      	b.n	8002470 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 80024d4:	2002      	movs	r0, #2
}
 80024d6:	4770      	bx	lr
 80024d8:	00fcfff0 	.word	0x00fcfff0

080024dc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024dc:	2300      	movs	r3, #0
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	f200 80ea 	bhi.w	80026b8 <HAL_GPIO_Init+0x1dc>
{
 80024e4:	b4f0      	push	{r4, r5, r6, r7}
 80024e6:	b082      	sub	sp, #8
 80024e8:	e05e      	b.n	80025a8 <HAL_GPIO_Init+0xcc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ea:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ec:	005f      	lsls	r7, r3, #1
 80024ee:	2403      	movs	r4, #3
 80024f0:	40bc      	lsls	r4, r7
 80024f2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f6:	68cc      	ldr	r4, [r1, #12]
 80024f8:	40bc      	lsls	r4, r7
 80024fa:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80024fc:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002500:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002504:	684c      	ldr	r4, [r1, #4]
 8002506:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800250e:	6042      	str	r2, [r0, #4]
 8002510:	e058      	b.n	80025c4 <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002512:	08dc      	lsrs	r4, r3, #3
 8002514:	3408      	adds	r4, #8
 8002516:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251a:	f003 0207 	and.w	r2, r3, #7
 800251e:	0096      	lsls	r6, r2, #2
 8002520:	220f      	movs	r2, #15
 8002522:	40b2      	lsls	r2, r6
 8002524:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	690a      	ldr	r2, [r1, #16]
 800252a:	40b2      	lsls	r2, r6
 800252c:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002532:	e05b      	b.n	80025ec <HAL_GPIO_Init+0x110>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002534:	2209      	movs	r2, #9
 8002536:	e000      	b.n	800253a <HAL_GPIO_Init+0x5e>
 8002538:	2200      	movs	r2, #0
 800253a:	40b2      	lsls	r2, r6
 800253c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253e:	3402      	adds	r4, #2
 8002540:	4e5e      	ldr	r6, [pc, #376]	; (80026bc <HAL_GPIO_Init+0x1e0>)
 8002542:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002546:	4a5e      	ldr	r2, [pc, #376]	; (80026c0 <HAL_GPIO_Init+0x1e4>)
 8002548:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800254a:	43ea      	mvns	r2, r5
 800254c:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002550:	684f      	ldr	r7, [r1, #4]
 8002552:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002556:	d001      	beq.n	800255c <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8002558:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800255c:	4c58      	ldr	r4, [pc, #352]	; (80026c0 <HAL_GPIO_Init+0x1e4>)
 800255e:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002560:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002562:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002566:	684f      	ldr	r7, [r1, #4]
 8002568:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800256c:	d001      	beq.n	8002572 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 800256e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002572:	4c53      	ldr	r4, [pc, #332]	; (80026c0 <HAL_GPIO_Init+0x1e4>)
 8002574:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002576:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002578:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257c:	684f      	ldr	r7, [r1, #4]
 800257e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002582:	d001      	beq.n	8002588 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8002584:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002588:	4c4d      	ldr	r4, [pc, #308]	; (80026c0 <HAL_GPIO_Init+0x1e4>)
 800258a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800258c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800258e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002590:	684e      	ldr	r6, [r1, #4]
 8002592:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002596:	d001      	beq.n	800259c <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8002598:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800259c:	4c48      	ldr	r4, [pc, #288]	; (80026c0 <HAL_GPIO_Init+0x1e4>)
 800259e:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a0:	3301      	adds	r3, #1
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f200 8085 	bhi.w	80026b2 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ac:	680c      	ldr	r4, [r1, #0]
 80025ae:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80025b2:	ea32 0404 	bics.w	r4, r2, r4
 80025b6:	d1f3      	bne.n	80025a0 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b8:	684c      	ldr	r4, [r1, #4]
 80025ba:	f004 0403 	and.w	r4, r4, #3
 80025be:	3c01      	subs	r4, #1
 80025c0:	2c01      	cmp	r4, #1
 80025c2:	d992      	bls.n	80024ea <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	684a      	ldr	r2, [r1, #4]
 80025c6:	f002 0203 	and.w	r2, r2, #3
 80025ca:	2a03      	cmp	r2, #3
 80025cc:	d009      	beq.n	80025e2 <HAL_GPIO_Init+0x106>
        temp = GPIOx->PUPDR;
 80025ce:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d0:	005e      	lsls	r6, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	40b2      	lsls	r2, r6
 80025d6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025da:	688a      	ldr	r2, [r1, #8]
 80025dc:	40b2      	lsls	r2, r6
 80025de:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80025e0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e2:	684a      	ldr	r2, [r1, #4]
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	2a02      	cmp	r2, #2
 80025ea:	d092      	beq.n	8002512 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80025ec:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ee:	005e      	lsls	r6, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	40b2      	lsls	r2, r6
 80025f4:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	684a      	ldr	r2, [r1, #4]
 80025fa:	f002 0203 	and.w	r2, r2, #3
 80025fe:	40b2      	lsls	r2, r6
 8002600:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002602:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002604:	684a      	ldr	r2, [r1, #4]
 8002606:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 800260a:	d0c9      	beq.n	80025a0 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260c:	2200      	movs	r2, #0
 800260e:	9201      	str	r2, [sp, #4]
 8002610:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <HAL_GPIO_Init+0x1e8>)
 8002612:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002614:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002618:	6454      	str	r4, [r2, #68]	; 0x44
 800261a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800261c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002620:	9201      	str	r2, [sp, #4]
 8002622:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002624:	089c      	lsrs	r4, r3, #2
 8002626:	1ca6      	adds	r6, r4, #2
 8002628:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_GPIO_Init+0x1e0>)
 800262a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262e:	f003 0203 	and.w	r2, r3, #3
 8002632:	0096      	lsls	r6, r2, #2
 8002634:	220f      	movs	r2, #15
 8002636:	40b2      	lsls	r2, r6
 8002638:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800263c:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <HAL_GPIO_Init+0x1ec>)
 800263e:	4290      	cmp	r0, r2
 8002640:	f43f af7a 	beq.w	8002538 <HAL_GPIO_Init+0x5c>
 8002644:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002648:	4290      	cmp	r0, r2
 800264a:	d022      	beq.n	8002692 <HAL_GPIO_Init+0x1b6>
 800264c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002650:	4290      	cmp	r0, r2
 8002652:	d020      	beq.n	8002696 <HAL_GPIO_Init+0x1ba>
 8002654:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002658:	4290      	cmp	r0, r2
 800265a:	d01e      	beq.n	800269a <HAL_GPIO_Init+0x1be>
 800265c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002660:	4290      	cmp	r0, r2
 8002662:	d01c      	beq.n	800269e <HAL_GPIO_Init+0x1c2>
 8002664:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002668:	4290      	cmp	r0, r2
 800266a:	d01a      	beq.n	80026a2 <HAL_GPIO_Init+0x1c6>
 800266c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002670:	4290      	cmp	r0, r2
 8002672:	d018      	beq.n	80026a6 <HAL_GPIO_Init+0x1ca>
 8002674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002678:	4290      	cmp	r0, r2
 800267a:	d016      	beq.n	80026aa <HAL_GPIO_Init+0x1ce>
 800267c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002680:	4290      	cmp	r0, r2
 8002682:	d014      	beq.n	80026ae <HAL_GPIO_Init+0x1d2>
 8002684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002688:	4290      	cmp	r0, r2
 800268a:	f43f af53 	beq.w	8002534 <HAL_GPIO_Init+0x58>
 800268e:	220a      	movs	r2, #10
 8002690:	e753      	b.n	800253a <HAL_GPIO_Init+0x5e>
 8002692:	2201      	movs	r2, #1
 8002694:	e751      	b.n	800253a <HAL_GPIO_Init+0x5e>
 8002696:	2202      	movs	r2, #2
 8002698:	e74f      	b.n	800253a <HAL_GPIO_Init+0x5e>
 800269a:	2203      	movs	r2, #3
 800269c:	e74d      	b.n	800253a <HAL_GPIO_Init+0x5e>
 800269e:	2204      	movs	r2, #4
 80026a0:	e74b      	b.n	800253a <HAL_GPIO_Init+0x5e>
 80026a2:	2205      	movs	r2, #5
 80026a4:	e749      	b.n	800253a <HAL_GPIO_Init+0x5e>
 80026a6:	2206      	movs	r2, #6
 80026a8:	e747      	b.n	800253a <HAL_GPIO_Init+0x5e>
 80026aa:	2207      	movs	r2, #7
 80026ac:	e745      	b.n	800253a <HAL_GPIO_Init+0x5e>
 80026ae:	2208      	movs	r2, #8
 80026b0:	e743      	b.n	800253a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80026b2:	b002      	add	sp, #8
 80026b4:	bcf0      	pop	{r4, r5, r6, r7}
 80026b6:	4770      	bx	lr
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40013c00 	.word	0x40013c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000

080026cc <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	f200 809b 	bhi.w	800280a <HAL_GPIO_DeInit+0x13e>
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	e02d      	b.n	8002734 <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80026d8:	2609      	movs	r6, #9
 80026da:	e000      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80026dc:	2600      	movs	r6, #0
 80026de:	fa06 f404 	lsl.w	r4, r6, r4
 80026e2:	42ac      	cmp	r4, r5
 80026e4:	d075      	beq.n	80027d2 <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e6:	6805      	ldr	r5, [r0, #0]
 80026e8:	005c      	lsls	r4, r3, #1
 80026ea:	2603      	movs	r6, #3
 80026ec:	fa06 f404 	lsl.w	r4, r6, r4
 80026f0:	ea25 0504 	bic.w	r5, r5, r4
 80026f4:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f6:	fa23 f506 	lsr.w	r5, r3, r6
 80026fa:	3508      	adds	r5, #8
 80026fc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8002700:	f003 0707 	and.w	r7, r3, #7
 8002704:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8002708:	270f      	movs	r7, #15
 800270a:	fa07 f70c 	lsl.w	r7, r7, ip
 800270e:	ea26 0607 	bic.w	r6, r6, r7
 8002712:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002716:	68c5      	ldr	r5, [r0, #12]
 8002718:	ea25 0504 	bic.w	r5, r5, r4
 800271c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271e:	6845      	ldr	r5, [r0, #4]
 8002720:	ea25 0202 	bic.w	r2, r5, r2
 8002724:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002726:	6882      	ldr	r2, [r0, #8]
 8002728:	ea22 0404 	bic.w	r4, r2, r4
 800272c:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	3301      	adds	r3, #1
 8002730:	2b0f      	cmp	r3, #15
 8002732:	d869      	bhi.n	8002808 <HAL_GPIO_DeInit+0x13c>
    ioposition = 0x01U << position;
 8002734:	2201      	movs	r2, #1
 8002736:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8002738:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 800273c:	ea32 0401 	bics.w	r4, r2, r1
 8002740:	d1f5      	bne.n	800272e <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002742:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002746:	f10c 0502 	add.w	r5, ip, #2
 800274a:	4c30      	ldr	r4, [pc, #192]	; (800280c <HAL_GPIO_DeInit+0x140>)
 800274c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002750:	f003 0403 	and.w	r4, r3, #3
 8002754:	00a4      	lsls	r4, r4, #2
 8002756:	260f      	movs	r6, #15
 8002758:	fa06 fe04 	lsl.w	lr, r6, r4
 800275c:	ea0e 0505 	and.w	r5, lr, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002760:	4e2b      	ldr	r6, [pc, #172]	; (8002810 <HAL_GPIO_DeInit+0x144>)
 8002762:	42b0      	cmp	r0, r6
 8002764:	d0ba      	beq.n	80026dc <HAL_GPIO_DeInit+0x10>
 8002766:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800276a:	42b0      	cmp	r0, r6
 800276c:	d021      	beq.n	80027b2 <HAL_GPIO_DeInit+0xe6>
 800276e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002772:	42b0      	cmp	r0, r6
 8002774:	d01f      	beq.n	80027b6 <HAL_GPIO_DeInit+0xea>
 8002776:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800277a:	42b0      	cmp	r0, r6
 800277c:	d01d      	beq.n	80027ba <HAL_GPIO_DeInit+0xee>
 800277e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002782:	42b0      	cmp	r0, r6
 8002784:	d01b      	beq.n	80027be <HAL_GPIO_DeInit+0xf2>
 8002786:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800278a:	42b0      	cmp	r0, r6
 800278c:	d019      	beq.n	80027c2 <HAL_GPIO_DeInit+0xf6>
 800278e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002792:	42b0      	cmp	r0, r6
 8002794:	d017      	beq.n	80027c6 <HAL_GPIO_DeInit+0xfa>
 8002796:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800279a:	42b0      	cmp	r0, r6
 800279c:	d015      	beq.n	80027ca <HAL_GPIO_DeInit+0xfe>
 800279e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027a2:	42b0      	cmp	r0, r6
 80027a4:	d013      	beq.n	80027ce <HAL_GPIO_DeInit+0x102>
 80027a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027aa:	42b0      	cmp	r0, r6
 80027ac:	d094      	beq.n	80026d8 <HAL_GPIO_DeInit+0xc>
 80027ae:	260a      	movs	r6, #10
 80027b0:	e795      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80027b2:	2601      	movs	r6, #1
 80027b4:	e793      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80027b6:	2602      	movs	r6, #2
 80027b8:	e791      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80027ba:	2603      	movs	r6, #3
 80027bc:	e78f      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80027be:	2604      	movs	r6, #4
 80027c0:	e78d      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80027c2:	2605      	movs	r6, #5
 80027c4:	e78b      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80027c6:	2606      	movs	r6, #6
 80027c8:	e789      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80027ca:	2607      	movs	r6, #7
 80027cc:	e787      	b.n	80026de <HAL_GPIO_DeInit+0x12>
 80027ce:	2608      	movs	r6, #8
 80027d0:	e785      	b.n	80026de <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80027d2:	4c10      	ldr	r4, [pc, #64]	; (8002814 <HAL_GPIO_DeInit+0x148>)
 80027d4:	6825      	ldr	r5, [r4, #0]
 80027d6:	ea25 0507 	bic.w	r5, r5, r7
 80027da:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80027dc:	6865      	ldr	r5, [r4, #4]
 80027de:	ea25 0507 	bic.w	r5, r5, r7
 80027e2:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80027e4:	68a5      	ldr	r5, [r4, #8]
 80027e6:	ea25 0507 	bic.w	r5, r5, r7
 80027ea:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80027ec:	68e5      	ldr	r5, [r4, #12]
 80027ee:	ea25 0707 	bic.w	r7, r5, r7
 80027f2:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80027f4:	4d05      	ldr	r5, [pc, #20]	; (800280c <HAL_GPIO_DeInit+0x140>)
 80027f6:	f10c 0402 	add.w	r4, ip, #2
 80027fa:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80027fe:	ea26 060e 	bic.w	r6, r6, lr
 8002802:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 8002806:	e76e      	b.n	80026e6 <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8002808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280a:	4770      	bx	lr
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002818:	6903      	ldr	r3, [r0, #16]
 800281a:	4219      	tst	r1, r3
 800281c:	d001      	beq.n	8002822 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800281e:	2001      	movs	r0, #1
 8002820:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002822:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002824:	4770      	bx	lr

08002826 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002826:	b10a      	cbz	r2, 800282c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002828:	6181      	str	r1, [r0, #24]
 800282a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800282c:	0409      	lsls	r1, r1, #16
 800282e:	6181      	str	r1, [r0, #24]
  }
}
 8002830:	4770      	bx	lr

08002832 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002832:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002834:	ea01 0203 	and.w	r2, r1, r3
 8002838:	ea21 0103 	bic.w	r1, r1, r3
 800283c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002840:	6181      	str	r1, [r0, #24]
}
 8002842:	4770      	bx	lr

08002844 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002846:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002848:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800284a:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800284e:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002852:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8002856:	2b02      	cmp	r3, #2
 8002858:	d000      	beq.n	800285c <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 800285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800285c:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800285e:	2c00      	cmp	r4, #0
 8002860:	d0fb      	beq.n	800285a <HCD_RXQLVL_IRQHandler+0x16>
 8002862:	232c      	movs	r3, #44	; 0x2c
 8002864:	fb03 0307 	mla	r3, r3, r7, r0
 8002868:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800286a:	2900      	cmp	r1, #0
 800286c:	d0f5      	beq.n	800285a <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800286e:	232c      	movs	r3, #44	; 0x2c
 8002870:	fb03 0307 	mla	r3, r3, r7, r0
 8002874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002876:	4422      	add	r2, r4
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	429a      	cmp	r2, r3
 800287c:	d906      	bls.n	800288c <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800287e:	202c      	movs	r0, #44	; 0x2c
 8002880:	fb00 5507 	mla	r5, r0, r7, r5
 8002884:	2304      	movs	r3, #4
 8002886:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 800288a:	e7e6      	b.n	800285a <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 800288c:	4622      	mov	r2, r4
 800288e:	4630      	mov	r0, r6
 8002890:	f002 fd52 	bl	8005338 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002894:	232c      	movs	r3, #44	; 0x2c
 8002896:	fb03 5307 	mla	r3, r3, r7, r5
 800289a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800289c:	4422      	add	r2, r4
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80028a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a2:	4422      	add	r2, r4
 80028a4:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80028a6:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 80028aa:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 80028ae:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80028b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028b6:	42a3      	cmp	r3, r4
 80028b8:	d1cf      	bne.n	800285a <HCD_RXQLVL_IRQHandler+0x16>
 80028ba:	2a00      	cmp	r2, #0
 80028bc:	d0cd      	beq.n	800285a <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028be:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028ca:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80028ce:	232c      	movs	r3, #44	; 0x2c
 80028d0:	fb03 5507 	mla	r5, r3, r7, r5
 80028d4:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80028e0:	e7bb      	b.n	800285a <HCD_RXQLVL_IRQHandler+0x16>

080028e2 <HAL_HCD_Init>:
  if (hhcd == NULL)
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d045      	beq.n	8002972 <HAL_HCD_Init+0x90>
{
 80028e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e8:	b08b      	sub	sp, #44	; 0x2c
 80028ea:	4606      	mov	r6, r0
  USBx = hhcd->Instance;
 80028ec:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80028ee:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d038      	beq.n	8002968 <HAL_HCD_Init+0x86>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80028f6:	2303      	movs	r3, #3
 80028f8:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002902:	d101      	bne.n	8002908 <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	6133      	str	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 8002908:	6830      	ldr	r0, [r6, #0]
 800290a:	f002 fce0 	bl	80052ce <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800290e:	4634      	mov	r4, r6
 8002910:	f854 cb10 	ldr.w	ip, [r4], #16
 8002914:	466d      	mov	r5, sp
 8002916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002922:	e885 0003 	stmia.w	r5, {r0, r1}
 8002926:	1d37      	adds	r7, r6, #4
 8002928:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800292c:	4660      	mov	r0, ip
 800292e:	f002 fc89 	bl	8005244 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002932:	2101      	movs	r1, #1
 8002934:	6830      	ldr	r0, [r6, #0]
 8002936:	f002 fd2d 	bl	8005394 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800293a:	4634      	mov	r4, r6
 800293c:	f854 cb10 	ldr.w	ip, [r4], #16
 8002940:	466d      	mov	r5, sp
 8002942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800294e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002952:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002956:	4660      	mov	r0, ip
 8002958:	f002 fd4e 	bl	80053f8 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800295c:	2301      	movs	r3, #1
 800295e:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  return HAL_OK;
 8002962:	2000      	movs	r0, #0
}
 8002964:	b00b      	add	sp, #44	; 0x2c
 8002966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8002968:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 800296c:	f7ff f9d6 	bl	8001d1c <HAL_HCD_MspInit>
 8002970:	e7c1      	b.n	80028f6 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 8002972:	2001      	movs	r0, #1
}
 8002974:	4770      	bx	lr

08002976 <HAL_HCD_SOF_Callback>:
}
 8002976:	4770      	bx	lr

08002978 <HAL_HCD_Connect_Callback>:
}
 8002978:	4770      	bx	lr

0800297a <HAL_HCD_Disconnect_Callback>:
}
 800297a:	4770      	bx	lr

0800297c <HAL_HCD_PortEnabled_Callback>:
}
 800297c:	4770      	bx	lr

0800297e <HAL_HCD_PortDisabled_Callback>:
}
 800297e:	4770      	bx	lr

08002980 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002980:	b530      	push	{r4, r5, lr}
 8002982:	b083      	sub	sp, #12
 8002984:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002986:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002988:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800298c:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 800298e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002992:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002994:	9b00      	ldr	r3, [sp, #0]
 8002996:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800299a:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800299c:	9b01      	ldr	r3, [sp, #4]
 800299e:	f013 0f02 	tst.w	r3, #2
 80029a2:	d007      	beq.n	80029b4 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029a4:	9b01      	ldr	r3, [sp, #4]
 80029a6:	f013 0f01 	tst.w	r3, #1
 80029aa:	d125      	bne.n	80029f8 <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80029ac:	9b00      	ldr	r3, [sp, #0]
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80029b4:	9b01      	ldr	r3, [sp, #4]
 80029b6:	f013 0f08 	tst.w	r3, #8
 80029ba:	d010      	beq.n	80029de <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80029bc:	9b00      	ldr	r3, [sp, #0]
 80029be:	f043 0308 	orr.w	r3, r3, #8
 80029c2:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80029c4:	9b01      	ldr	r3, [sp, #4]
 80029c6:	f013 0f04 	tst.w	r3, #4
 80029ca:	d02d      	beq.n	8002a28 <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80029cc:	69a3      	ldr	r3, [r4, #24]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d015      	beq.n	80029fe <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80029d2:	68e3      	ldr	r3, [r4, #12]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d022      	beq.n	8002a1e <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff ffcf 	bl	800297c <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029de:	9b01      	ldr	r3, [sp, #4]
 80029e0:	f013 0f20 	tst.w	r3, #32
 80029e4:	d003      	beq.n	80029ee <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029e6:	9b00      	ldr	r3, [sp, #0]
 80029e8:	f043 0320 	orr.w	r3, r3, #32
 80029ec:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029ee:	9b00      	ldr	r3, [sp, #0]
 80029f0:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 80029f4:	b003      	add	sp, #12
 80029f6:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 80029f8:	f7ff ffbe 	bl	8002978 <HAL_HCD_Connect_Callback>
 80029fc:	e7d6      	b.n	80029ac <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80029fe:	9b01      	ldr	r3, [sp, #4]
 8002a00:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a08:	d004      	beq.n	8002a14 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	f002 fd6b 	bl	80054e8 <USB_InitFSLSPClkSel>
 8002a12:	e7e1      	b.n	80029d8 <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a14:	2102      	movs	r1, #2
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f002 fd66 	bl	80054e8 <USB_InitFSLSPClkSel>
 8002a1c:	e7dc      	b.n	80029d8 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8002a1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002a22:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8002a26:	e7d7      	b.n	80029d8 <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7ff ffa8 	bl	800297e <HAL_HCD_PortDisabled_Callback>
 8002a2e:	e7d6      	b.n	80029de <HCD_Port_IRQHandler+0x5e>

08002a30 <HAL_HCD_HC_NotifyURBChange_Callback>:
}
 8002a30:	4770      	bx	lr

08002a32 <HCD_HC_IN_IRQHandler>:
{
 8002a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a34:	4605      	mov	r5, r0
 8002a36:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a38:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a3a:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8002a3e:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	f013 0f04 	tst.w	r3, #4
 8002a48:	d040      	beq.n	8002acc <HCD_HC_IN_IRQHandler+0x9a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a4e:	68e3      	ldr	r3, [r4, #12]
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a56:	68a3      	ldr	r3, [r4, #8]
 8002a58:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002a5c:	f040 8093 	bne.w	8002b86 <HCD_HC_IN_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a60:	68a3      	ldr	r3, [r4, #8]
 8002a62:	f013 0f01 	tst.w	r3, #1
 8002a66:	f000 80d7 	beq.w	8002c18 <HCD_HC_IN_IRQHandler+0x1e6>
    if (hhcd->Init.dma_enable != 0U)
 8002a6a:	692b      	ldr	r3, [r5, #16]
 8002a6c:	b143      	cbz	r3, 8002a80 <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a6e:	232c      	movs	r3, #44	; 0x2c
 8002a70:	fb03 5306 	mla	r3, r3, r6, r5
 8002a74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a76:	6921      	ldr	r1, [r4, #16]
 8002a78:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a7c:	1a52      	subs	r2, r2, r1
 8002a7e:	651a      	str	r2, [r3, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a80:	232c      	movs	r3, #44	; 0x2c
 8002a82:	fb03 5306 	mla	r3, r3, r6, r5
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a90:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8081 	beq.w	8002b9e <HCD_HC_IN_IRQHandler+0x16c>
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d07e      	beq.n	8002b9e <HCD_HC_IN_IRQHandler+0x16c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	f000 8093 	beq.w	8002bcc <HCD_HC_IN_IRQHandler+0x19a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 8083 	bne.w	8002bb2 <HCD_HC_IN_IRQHandler+0x180>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002aac:	232c      	movs	r3, #44	; 0x2c
 8002aae:	fb03 5306 	mla	r3, r3, r6, r5
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ab8:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 8002abc:	4051      	eors	r1, r2
 8002abe:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ac2:	4631      	mov	r1, r6
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f7ff ffb3 	bl	8002a30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002aca:	e072      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002acc:	68a3      	ldr	r3, [r4, #8]
 8002ace:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ad2:	d106      	bne.n	8002ae2 <HCD_HC_IN_IRQHandler+0xb0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ad4:	68a3      	ldr	r3, [r4, #8]
 8002ad6:	f013 0f20 	tst.w	r3, #32
 8002ada:	d013      	beq.n	8002b04 <HCD_HC_IN_IRQHandler+0xd2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002adc:	2320      	movs	r3, #32
 8002ade:	60a3      	str	r3, [r4, #8]
 8002ae0:	e7b9      	b.n	8002a56 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ae8:	232c      	movs	r3, #44	; 0x2c
 8002aea:	fb03 0301 	mla	r3, r3, r1, r0
 8002aee:	2207      	movs	r2, #7
 8002af0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af4:	68e3      	ldr	r3, [r4, #12]
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afc:	6800      	ldr	r0, [r0, #0]
 8002afe:	f002 fd18 	bl	8005532 <USB_HC_Halt>
 8002b02:	e7a8      	b.n	8002a56 <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b04:	68a3      	ldr	r3, [r4, #8]
 8002b06:	f013 0f08 	tst.w	r3, #8
 8002b0a:	d117      	bne.n	8002b3c <HCD_HC_IN_IRQHandler+0x10a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b0c:	68a3      	ldr	r3, [r4, #8]
 8002b0e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b12:	d125      	bne.n	8002b60 <HCD_HC_IN_IRQHandler+0x12e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b14:	68a3      	ldr	r3, [r4, #8]
 8002b16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b1a:	d09c      	beq.n	8002a56 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b1c:	68e3      	ldr	r3, [r4, #12]
 8002b1e:	f043 0302 	orr.w	r3, r3, #2
 8002b22:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b24:	232c      	movs	r3, #44	; 0x2c
 8002b26:	fb03 0301 	mla	r3, r3, r1, r0
 8002b2a:	2206      	movs	r2, #6
 8002b2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b30:	6800      	ldr	r0, [r0, #0]
 8002b32:	f002 fcfe 	bl	8005532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	60a3      	str	r3, [r4, #8]
 8002b3a:	e78c      	b.n	8002a56 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b3c:	68e3      	ldr	r3, [r4, #12]
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b44:	232c      	movs	r3, #44	; 0x2c
 8002b46:	fb03 0301 	mla	r3, r3, r1, r0
 8002b4a:	2205      	movs	r2, #5
 8002b4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b50:	2310      	movs	r3, #16
 8002b52:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b54:	2308      	movs	r3, #8
 8002b56:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b58:	6800      	ldr	r0, [r0, #0]
 8002b5a:	f002 fcea 	bl	8005532 <USB_HC_Halt>
 8002b5e:	e77a      	b.n	8002a56 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b60:	68e3      	ldr	r3, [r4, #12]
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b68:	232c      	movs	r3, #44	; 0x2c
 8002b6a:	fb03 0301 	mla	r3, r3, r1, r0
 8002b6e:	2208      	movs	r2, #8
 8002b70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b74:	2310      	movs	r3, #16
 8002b76:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b7c:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7e:	6800      	ldr	r0, [r0, #0]
 8002b80:	f002 fcd7 	bl	8005532 <USB_HC_Halt>
 8002b84:	e767      	b.n	8002a56 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b86:	68e3      	ldr	r3, [r4, #12]
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8e:	4631      	mov	r1, r6
 8002b90:	6828      	ldr	r0, [r5, #0]
 8002b92:	f002 fcce 	bl	8005532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9a:	60a3      	str	r3, [r4, #8]
}
 8002b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b9e:	68e3      	ldr	r3, [r4, #12]
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba6:	4631      	mov	r1, r6
 8002ba8:	6828      	ldr	r0, [r5, #0]
 8002baa:	f002 fcc2 	bl	8005532 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bae:	2310      	movs	r3, #16
 8002bb0:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 8002bb2:	692b      	ldr	r3, [r5, #16]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d01a      	beq.n	8002bee <HCD_HC_IN_IRQHandler+0x1bc>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bb8:	202c      	movs	r0, #44	; 0x2c
 8002bba:	fb00 5506 	mla	r5, r0, r6, r5
 8002bbe:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8002bca:	e7e7      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x16a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bcc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bd4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bd8:	232c      	movs	r3, #44	; 0x2c
 8002bda:	fb03 5306 	mla	r3, r3, r6, r5
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002be4:	4631      	mov	r1, r6
 8002be6:	4628      	mov	r0, r5
 8002be8:	f7ff ff22 	bl	8002a30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bec:	e7e1      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x180>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002bee:	232c      	movs	r3, #44	; 0x2c
 8002bf0:	fb03 5306 	mla	r3, r3, r6, r5
 8002bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	f013 0f01 	tst.w	r3, #1
 8002c02:	d0cb      	beq.n	8002b9c <HCD_HC_IN_IRQHandler+0x16a>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c04:	232c      	movs	r3, #44	; 0x2c
 8002c06:	fb03 5506 	mla	r5, r3, r6, r5
 8002c0a:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8002c0e:	f083 0301 	eor.w	r3, r3, #1
 8002c12:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8002c16:	e7c1      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x16a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c18:	68a3      	ldr	r3, [r4, #8]
 8002c1a:	f013 0f02 	tst.w	r3, #2
 8002c1e:	d064      	beq.n	8002cea <HCD_HC_IN_IRQHandler+0x2b8>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c20:	68e3      	ldr	r3, [r4, #12]
 8002c22:	f023 0302 	bic.w	r3, r3, #2
 8002c26:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c28:	232c      	movs	r3, #44	; 0x2c
 8002c2a:	fb03 5306 	mla	r3, r3, r6, r5
 8002c2e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d013      	beq.n	8002c5e <HCD_HC_IN_IRQHandler+0x22c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d023      	beq.n	8002c82 <HCD_HC_IN_IRQHandler+0x250>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d028      	beq.n	8002c90 <HCD_HC_IN_IRQHandler+0x25e>
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d026      	beq.n	8002c90 <HCD_HC_IN_IRQHandler+0x25e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d042      	beq.n	8002ccc <HCD_HC_IN_IRQHandler+0x29a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	d10f      	bne.n	8002c6a <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 8002c4a:	232c      	movs	r3, #44	; 0x2c
 8002c4c:	fb03 5306 	mla	r3, r3, r6, r5
 8002c50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c52:	3201      	adds	r2, #1
 8002c54:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c56:	2204      	movs	r2, #4
 8002c58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002c5c:	e005      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c5e:	232c      	movs	r3, #44	; 0x2c
 8002c60:	fb03 5306 	mla	r3, r3, r6, r5
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c6e:	232c      	movs	r3, #44	; 0x2c
 8002c70:	fb03 5306 	mla	r3, r3, r6, r5
 8002c74:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002c78:	4631      	mov	r1, r6
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f7ff fed8 	bl	8002a30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c80:	e78c      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c82:	232c      	movs	r3, #44	; 0x2c
 8002c84:	fb03 5306 	mla	r3, r3, r6, r5
 8002c88:	2205      	movs	r2, #5
 8002c8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002c8e:	e7ec      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 8002c90:	222c      	movs	r2, #44	; 0x2c
 8002c92:	fb02 5206 	mla	r2, r2, r6, r5
 8002c96:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002c98:	3301      	adds	r3, #1
 8002c9a:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d906      	bls.n	8002cae <HCD_HC_IN_IRQHandler+0x27c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002cac:	e7dd      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0x238>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cae:	232c      	movs	r3, #44	; 0x2c
 8002cb0:	fb03 5306 	mla	r3, r3, r6, r5
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cba:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cc6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002cca:	e7ce      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ccc:	232c      	movs	r3, #44	; 0x2c
 8002cce:	fb03 5306 	mla	r3, r3, r6, r5
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cd8:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ce4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002ce8:	e7bf      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0x238>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cea:	68a3      	ldr	r3, [r4, #8]
 8002cec:	f013 0f10 	tst.w	r3, #16
 8002cf0:	f43f af54 	beq.w	8002b9c <HCD_HC_IN_IRQHandler+0x16a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cf4:	232c      	movs	r3, #44	; 0x2c
 8002cf6:	fb03 5306 	mla	r3, r3, r6, r5
 8002cfa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d00c      	beq.n	8002d1c <HCD_HC_IN_IRQHandler+0x2ea>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d02:	b10b      	cbz	r3, 8002d08 <HCD_HC_IN_IRQHandler+0x2d6>
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d106      	bne.n	8002d16 <HCD_HC_IN_IRQHandler+0x2e4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d08:	232c      	movs	r3, #44	; 0x2c
 8002d0a:	fb03 5306 	mla	r3, r3, r6, r5
 8002d0e:	2200      	movs	r2, #0
 8002d10:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8002d12:	692b      	ldr	r3, [r5, #16]
 8002d14:	b183      	cbz	r3, 8002d38 <HCD_HC_IN_IRQHandler+0x306>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d16:	2310      	movs	r3, #16
 8002d18:	60a3      	str	r3, [r4, #8]
}
 8002d1a:	e73f      	b.n	8002b9c <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d1c:	232c      	movs	r3, #44	; 0x2c
 8002d1e:	fb03 5306 	mla	r3, r3, r6, r5
 8002d22:	2200      	movs	r2, #0
 8002d24:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d26:	68e3      	ldr	r3, [r4, #12]
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2e:	4631      	mov	r1, r6
 8002d30:	6828      	ldr	r0, [r5, #0]
 8002d32:	f002 fbfe 	bl	8005532 <USB_HC_Halt>
 8002d36:	e7ee      	b.n	8002d16 <HCD_HC_IN_IRQHandler+0x2e4>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d38:	232c      	movs	r3, #44	; 0x2c
 8002d3a:	fb03 5306 	mla	r3, r3, r6, r5
 8002d3e:	2203      	movs	r2, #3
 8002d40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d44:	68e3      	ldr	r3, [r4, #12]
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d4c:	4631      	mov	r1, r6
 8002d4e:	6828      	ldr	r0, [r5, #0]
 8002d50:	f002 fbef 	bl	8005532 <USB_HC_Halt>
 8002d54:	e7df      	b.n	8002d16 <HCD_HC_IN_IRQHandler+0x2e4>

08002d56 <HCD_HC_OUT_IRQHandler>:
{
 8002d56:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d58:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d5a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002d5e:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8002d62:	68a2      	ldr	r2, [r4, #8]
 8002d64:	f012 0f04 	tst.w	r2, #4
 8002d68:	d006      	beq.n	8002d78 <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d6e:	68e3      	ldr	r3, [r4, #12]
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	60e3      	str	r3, [r4, #12]
}
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	4605      	mov	r5, r0
 8002d7a:	460e      	mov	r6, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d7c:	68a2      	ldr	r2, [r4, #8]
 8002d7e:	f012 0f20 	tst.w	r2, #32
 8002d82:	d018      	beq.n	8002db6 <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d84:	2320      	movs	r3, #32
 8002d86:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d88:	232c      	movs	r3, #44	; 0x2c
 8002d8a:	fb03 0301 	mla	r3, r3, r1, r0
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d1ef      	bne.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d96:	232c      	movs	r3, #44	; 0x2c
 8002d98:	fb03 0301 	mla	r3, r3, r1, r0
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002da8:	68e3      	ldr	r3, [r4, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dae:	6800      	ldr	r0, [r0, #0]
 8002db0:	f002 fbbf 	bl	8005532 <USB_HC_Halt>
 8002db4:	e7df      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002db6:	68a2      	ldr	r2, [r4, #8]
 8002db8:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002dbc:	d124      	bne.n	8002e08 <HCD_HC_OUT_IRQHandler+0xb2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dbe:	68a2      	ldr	r2, [r4, #8]
 8002dc0:	f012 0f01 	tst.w	r2, #1
 8002dc4:	d02b      	beq.n	8002e1e <HCD_HC_OUT_IRQHandler+0xc8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc6:	232c      	movs	r3, #44	; 0x2c
 8002dc8:	fb03 0301 	mla	r3, r3, r1, r0
 8002dcc:	2200      	movs	r2, #0
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002dd0:	68a3      	ldr	r3, [r4, #8]
 8002dd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002dd6:	d007      	beq.n	8002de8 <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 8002dd8:	232c      	movs	r3, #44	; 0x2c
 8002dda:	fb03 0301 	mla	r3, r3, r1, r0
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002de4:	2340      	movs	r3, #64	; 0x40
 8002de6:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002de8:	68e3      	ldr	r3, [r4, #12]
 8002dea:	f043 0302 	orr.w	r3, r3, #2
 8002dee:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df0:	4631      	mov	r1, r6
 8002df2:	6828      	ldr	r0, [r5, #0]
 8002df4:	f002 fb9d 	bl	8005532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002df8:	2301      	movs	r3, #1
 8002dfa:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002dfc:	202c      	movs	r0, #44	; 0x2c
 8002dfe:	fb00 5506 	mla	r5, r0, r6, r5
 8002e02:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8002e06:	e7b6      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e08:	68e3      	ldr	r3, [r4, #12]
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e10:	6800      	ldr	r0, [r0, #0]
 8002e12:	f002 fb8e 	bl	8005532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e1a:	60a3      	str	r3, [r4, #8]
 8002e1c:	e7ab      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e1e:	68a2      	ldr	r2, [r4, #8]
 8002e20:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e24:	d129      	bne.n	8002e7a <HCD_HC_OUT_IRQHandler+0x124>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e26:	68a2      	ldr	r2, [r4, #8]
 8002e28:	f012 0f08 	tst.w	r2, #8
 8002e2c:	d13a      	bne.n	8002ea4 <HCD_HC_OUT_IRQHandler+0x14e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e2e:	68a2      	ldr	r2, [r4, #8]
 8002e30:	f012 0f10 	tst.w	r2, #16
 8002e34:	d046      	beq.n	8002ec4 <HCD_HC_OUT_IRQHandler+0x16e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e36:	232c      	movs	r3, #44	; 0x2c
 8002e38:	fb03 0301 	mla	r3, r3, r1, r0
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8002e40:	2203      	movs	r2, #3
 8002e42:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4a:	b95b      	cbnz	r3, 8002e64 <HCD_HC_OUT_IRQHandler+0x10e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e4c:	232c      	movs	r3, #44	; 0x2c
 8002e4e:	fb03 0301 	mla	r3, r3, r1, r0
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e56:	b92b      	cbnz	r3, 8002e64 <HCD_HC_OUT_IRQHandler+0x10e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e58:	232c      	movs	r3, #44	; 0x2c
 8002e5a:	fb03 0301 	mla	r3, r3, r1, r0
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e64:	68e3      	ldr	r3, [r4, #12]
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e6c:	4631      	mov	r1, r6
 8002e6e:	6828      	ldr	r0, [r5, #0]
 8002e70:	f002 fb5f 	bl	8005532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e74:	2310      	movs	r3, #16
 8002e76:	60a3      	str	r3, [r4, #8]
 8002e78:	e77d      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e7a:	232c      	movs	r3, #44	; 0x2c
 8002e7c:	fb03 0301 	mla	r3, r3, r1, r0
 8002e80:	2204      	movs	r2, #4
 8002e82:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e90:	68e3      	ldr	r3, [r4, #12]
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e98:	6800      	ldr	r0, [r0, #0]
 8002e9a:	f002 fb4a 	bl	8005532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e9e:	2340      	movs	r3, #64	; 0x40
 8002ea0:	60a3      	str	r3, [r4, #8]
 8002ea2:	e768      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ea8:	68e3      	ldr	r3, [r4, #12]
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb0:	6800      	ldr	r0, [r0, #0]
 8002eb2:	f002 fb3e 	bl	8005532 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002eb6:	232c      	movs	r3, #44	; 0x2c
 8002eb8:	fb03 5506 	mla	r5, r3, r6, r5
 8002ebc:	2305      	movs	r3, #5
 8002ebe:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8002ec2:	e758      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ec4:	68a2      	ldr	r2, [r4, #8]
 8002ec6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002eca:	d029      	beq.n	8002f20 <HCD_HC_OUT_IRQHandler+0x1ca>
    if (hhcd->Init.dma_enable == 0U)
 8002ecc:	6903      	ldr	r3, [r0, #16]
 8002ece:	b183      	cbz	r3, 8002ef2 <HCD_HC_OUT_IRQHandler+0x19c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ed0:	222c      	movs	r2, #44	; 0x2c
 8002ed2:	fb02 0201 	mla	r2, r2, r1, r0
 8002ed6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002ed8:	3301      	adds	r3, #1
 8002eda:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d816      	bhi.n	8002f0e <HCD_HC_OUT_IRQHandler+0x1b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ee0:	232c      	movs	r3, #44	; 0x2c
 8002ee2:	fb03 0501 	mla	r5, r3, r1, r0
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	60a3      	str	r3, [r4, #8]
 8002ef0:	e741      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ef2:	232c      	movs	r3, #44	; 0x2c
 8002ef4:	fb03 0301 	mla	r3, r3, r1, r0
 8002ef8:	2206      	movs	r2, #6
 8002efa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002efe:	68e3      	ldr	r3, [r4, #12]
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f06:	6800      	ldr	r0, [r0, #0]
 8002f08:	f002 fb13 	bl	8005532 <USB_HC_Halt>
 8002f0c:	e7ee      	b.n	8002eec <HCD_HC_OUT_IRQHandler+0x196>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f0e:	4613      	mov	r3, r2
 8002f10:	2200      	movs	r2, #0
 8002f12:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f14:	2204      	movs	r2, #4
 8002f16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002f1a:	f7ff fd89 	bl	8002a30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f1e:	e7e5      	b.n	8002eec <HCD_HC_OUT_IRQHandler+0x196>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f20:	68a2      	ldr	r2, [r4, #8]
 8002f22:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002f26:	d127      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x222>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f28:	68a2      	ldr	r2, [r4, #8]
 8002f2a:	f012 0f02 	tst.w	r2, #2
 8002f2e:	f43f af22 	beq.w	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f32:	68e2      	ldr	r2, [r4, #12]
 8002f34:	f022 0202 	bic.w	r2, r2, #2
 8002f38:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f3a:	222c      	movs	r2, #44	; 0x2c
 8002f3c:	fb02 0201 	mla	r2, r2, r1, r0
 8002f40:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8002f44:	2a01      	cmp	r2, #1
 8002f46:	d02a      	beq.n	8002f9e <HCD_HC_OUT_IRQHandler+0x248>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f48:	2a03      	cmp	r2, #3
 8002f4a:	d05b      	beq.n	8003004 <HCD_HC_OUT_IRQHandler+0x2ae>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f4c:	2a04      	cmp	r2, #4
 8002f4e:	d06b      	beq.n	8003028 <HCD_HC_OUT_IRQHandler+0x2d2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f50:	2a05      	cmp	r2, #5
 8002f52:	d070      	beq.n	8003036 <HCD_HC_OUT_IRQHandler+0x2e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f54:	2a06      	cmp	r2, #6
 8002f56:	d001      	beq.n	8002f5c <HCD_HC_OUT_IRQHandler+0x206>
 8002f58:	2a08      	cmp	r2, #8
 8002f5a:	d159      	bne.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].ErrCnt++;
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 5106 	mla	r1, r1, r6, r5
 8002f62:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8002f64:	3201      	adds	r2, #1
 8002f66:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f68:	2a02      	cmp	r2, #2
 8002f6a:	d96a      	bls.n	8003042 <HCD_HC_OUT_IRQHandler+0x2ec>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	65ca      	str	r2, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f70:	2204      	movs	r2, #4
 8002f72:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
 8002f76:	e04b      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f78:	68e3      	ldr	r3, [r4, #12]
 8002f7a:	f043 0302 	orr.w	r3, r3, #2
 8002f7e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f80:	6800      	ldr	r0, [r0, #0]
 8002f82:	f002 fad6 	bl	8005532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f86:	2310      	movs	r3, #16
 8002f88:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8e:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f90:	232c      	movs	r3, #44	; 0x2c
 8002f92:	fb03 5506 	mla	r5, r3, r6, r5
 8002f96:	2308      	movs	r3, #8
 8002f98:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8002f9c:	e6eb      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f9e:	232c      	movs	r3, #44	; 0x2c
 8002fa0:	fb03 0301 	mla	r3, r3, r1, r0
 8002fa4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fac:	3b02      	subs	r3, #2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d82d      	bhi.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
        if (hhcd->Init.dma_enable == 0U)
 8002fb4:	6901      	ldr	r1, [r0, #16]
 8002fb6:	b941      	cbnz	r1, 8002fca <HCD_HC_OUT_IRQHandler+0x274>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fb8:	232c      	movs	r3, #44	; 0x2c
 8002fba:	fb03 0306 	mla	r3, r3, r6, r0
 8002fbe:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8002fc2:	f082 0201 	eor.w	r2, r2, #1
 8002fc6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002fca:	2901      	cmp	r1, #1
 8002fcc:	d120      	bne.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
 8002fce:	232c      	movs	r3, #44	; 0x2c
 8002fd0:	fb03 5306 	mla	r3, r3, r6, r5
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	b1db      	cbz	r3, 8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002fd8:	222c      	movs	r2, #44	; 0x2c
 8002fda:	fb02 5206 	mla	r2, r2, r6, r5
 8002fde:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8002fea:	f013 0f01 	tst.w	r3, #1
 8002fee:	d00f      	beq.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ff0:	232c      	movs	r3, #44	; 0x2c
 8002ff2:	fb03 5306 	mla	r3, r3, r6, r5
 8002ff6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8002ffa:	f082 0201 	eor.w	r2, r2, #1
 8002ffe:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8003002:	e005      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003004:	232c      	movs	r3, #44	; 0x2c
 8003006:	fb03 0301 	mla	r3, r3, r1, r0
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003010:	2302      	movs	r3, #2
 8003012:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003014:	232c      	movs	r3, #44	; 0x2c
 8003016:	fb03 5306 	mla	r3, r3, r6, r5
 800301a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800301e:	4631      	mov	r1, r6
 8003020:	4628      	mov	r0, r5
 8003022:	f7ff fd05 	bl	8002a30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003026:	e6a6      	b.n	8002d76 <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003028:	232c      	movs	r3, #44	; 0x2c
 800302a:	fb03 0301 	mla	r3, r3, r1, r0
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003034:	e7ec      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003036:	232c      	movs	r3, #44	; 0x2c
 8003038:	fb03 0301 	mla	r3, r3, r1, r0
 800303c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003040:	e7e6      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003042:	222c      	movs	r2, #44	; 0x2c
 8003044:	fb02 5206 	mla	r2, r2, r6, r5
 8003048:	2102      	movs	r1, #2
 800304a:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800304e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003052:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003056:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800305a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800305e:	e7d7      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x2ba>

08003060 <HAL_HCD_IRQHandler>:
{
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003064:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003066:	4628      	mov	r0, r5
 8003068:	f002 f990 	bl	800538c <USB_GetMode>
 800306c:	2801      	cmp	r0, #1
 800306e:	d000      	beq.n	8003072 <HAL_HCD_IRQHandler+0x12>
}
 8003070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003072:	462e      	mov	r6, r5
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003074:	6820      	ldr	r0, [r4, #0]
 8003076:	f002 f985 	bl	8005384 <USB_ReadInterrupts>
 800307a:	2800      	cmp	r0, #0
 800307c:	d0f8      	beq.n	8003070 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800307e:	6820      	ldr	r0, [r4, #0]
 8003080:	f002 f980 	bl	8005384 <USB_ReadInterrupts>
 8003084:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8003088:	d003      	beq.n	8003092 <HAL_HCD_IRQHandler+0x32>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003090:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003092:	6820      	ldr	r0, [r4, #0]
 8003094:	f002 f976 	bl	8005384 <USB_ReadInterrupts>
 8003098:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800309c:	d003      	beq.n	80030a6 <HAL_HCD_IRQHandler+0x46>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030a4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80030a6:	6820      	ldr	r0, [r4, #0]
 80030a8:	f002 f96c 	bl	8005384 <USB_ReadInterrupts>
 80030ac:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80030b0:	d003      	beq.n	80030ba <HAL_HCD_IRQHandler+0x5a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030b8:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80030ba:	6820      	ldr	r0, [r4, #0]
 80030bc:	f002 f962 	bl	8005384 <USB_ReadInterrupts>
 80030c0:	f010 0f02 	tst.w	r0, #2
 80030c4:	d002      	beq.n	80030cc <HAL_HCD_IRQHandler+0x6c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	2202      	movs	r2, #2
 80030ca:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80030cc:	6820      	ldr	r0, [r4, #0]
 80030ce:	f002 f959 	bl	8005384 <USB_ReadInterrupts>
 80030d2:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80030d6:	d008      	beq.n	80030ea <HAL_HCD_IRQHandler+0x8a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80030de:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80030e0:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80030e4:	f013 0f01 	tst.w	r3, #1
 80030e8:	d01d      	beq.n	8003126 <HAL_HCD_IRQHandler+0xc6>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	f002 f94a 	bl	8005384 <USB_ReadInterrupts>
 80030f0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80030f4:	d126      	bne.n	8003144 <HAL_HCD_IRQHandler+0xe4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80030f6:	6820      	ldr	r0, [r4, #0]
 80030f8:	f002 f944 	bl	8005384 <USB_ReadInterrupts>
 80030fc:	f010 0f08 	tst.w	r0, #8
 8003100:	d124      	bne.n	800314c <HAL_HCD_IRQHandler+0xec>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	f002 f93e 	bl	8005384 <USB_ReadInterrupts>
 8003108:	f010 0f10 	tst.w	r0, #16
 800310c:	d125      	bne.n	800315a <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	f002 f938 	bl	8005384 <USB_ReadInterrupts>
 8003114:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003118:	d0aa      	beq.n	8003070 <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800311a:	6820      	ldr	r0, [r4, #0]
 800311c:	f002 fa04 	bl	8005528 <USB_HC_ReadInterrupt>
 8003120:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003122:	2500      	movs	r5, #0
 8003124:	e02c      	b.n	8003180 <HAL_HCD_IRQHandler+0x120>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003126:	2110      	movs	r1, #16
 8003128:	4628      	mov	r0, r5
 800312a:	f002 f8d7 	bl	80052dc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800312e:	4628      	mov	r0, r5
 8003130:	f002 f8ec 	bl	800530c <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003134:	2101      	movs	r1, #1
 8003136:	6820      	ldr	r0, [r4, #0]
 8003138:	f002 f9d6 	bl	80054e8 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 800313c:	4620      	mov	r0, r4
 800313e:	f7ff fc1c 	bl	800297a <HAL_HCD_Disconnect_Callback>
 8003142:	e7d2      	b.n	80030ea <HAL_HCD_IRQHandler+0x8a>
      HCD_Port_IRQHandler(hhcd);
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff fc1b 	bl	8002980 <HCD_Port_IRQHandler>
 800314a:	e7d4      	b.n	80030f6 <HAL_HCD_IRQHandler+0x96>
      HAL_HCD_SOF_Callback(hhcd);
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff fc12 	bl	8002976 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	2208      	movs	r2, #8
 8003156:	615a      	str	r2, [r3, #20]
 8003158:	e7d3      	b.n	8003102 <HAL_HCD_IRQHandler+0xa2>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	6993      	ldr	r3, [r2, #24]
 800315e:	f023 0310 	bic.w	r3, r3, #16
 8003162:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff fb6d 	bl	8002844 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800316a:	6822      	ldr	r2, [r4, #0]
 800316c:	6993      	ldr	r3, [r2, #24]
 800316e:	f043 0310 	orr.w	r3, r3, #16
 8003172:	6193      	str	r3, [r2, #24]
 8003174:	e7cb      	b.n	800310e <HAL_HCD_IRQHandler+0xae>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003176:	b2e9      	uxtb	r1, r5
 8003178:	4620      	mov	r0, r4
 800317a:	f7ff fdec 	bl	8002d56 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800317e:	3501      	adds	r5, #1
 8003180:	68a3      	ldr	r3, [r4, #8]
 8003182:	42ab      	cmp	r3, r5
 8003184:	d912      	bls.n	80031ac <HAL_HCD_IRQHandler+0x14c>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003186:	f005 030f 	and.w	r3, r5, #15
 800318a:	fa27 f303 	lsr.w	r3, r7, r3
 800318e:	f013 0f01 	tst.w	r3, #1
 8003192:	d0f4      	beq.n	800317e <HAL_HCD_IRQHandler+0x11e>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003194:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8003198:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800319c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80031a0:	d0e9      	beq.n	8003176 <HAL_HCD_IRQHandler+0x116>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80031a2:	b2e9      	uxtb	r1, r5
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7ff fc44 	bl	8002a32 <HCD_HC_IN_IRQHandler>
 80031aa:	e7e8      	b.n	800317e <HAL_HCD_IRQHandler+0x11e>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b2:	615a      	str	r2, [r3, #20]
 80031b4:	e75c      	b.n	8003070 <HAL_HCD_IRQHandler+0x10>
	...

080031b8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	f000 80cc 	beq.w	8003356 <HAL_I2C_Init+0x19e>
{
 80031be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c0:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d077      	beq.n	80032ba <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ca:	2324      	movs	r3, #36	; 0x24
 80031cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	6822      	ldr	r2, [r4, #0]
 80031d2:	6813      	ldr	r3, [r2, #0]
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	6813      	ldr	r3, [r2, #0]
 80031de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	6813      	ldr	r3, [r2, #0]
 80031e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031ec:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031ee:	f000 fe25 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031f2:	6862      	ldr	r2, [r4, #4]
 80031f4:	4b5a      	ldr	r3, [pc, #360]	; (8003360 <HAL_I2C_Init+0x1a8>)
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d864      	bhi.n	80032c4 <HAL_I2C_Init+0x10c>
 80031fa:	4b5a      	ldr	r3, [pc, #360]	; (8003364 <HAL_I2C_Init+0x1ac>)
 80031fc:	4298      	cmp	r0, r3
 80031fe:	bf8c      	ite	hi
 8003200:	2300      	movhi	r3, #0
 8003202:	2301      	movls	r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	f040 80a8 	bne.w	800335a <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800320a:	4d57      	ldr	r5, [pc, #348]	; (8003368 <HAL_I2C_Init+0x1b0>)
 800320c:	fba5 3500 	umull	r3, r5, r5, r0
 8003210:	0caf      	lsrs	r7, r5, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003212:	6826      	ldr	r6, [r4, #0]
 8003214:	6871      	ldr	r1, [r6, #4]
 8003216:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800321a:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 800321e:	6071      	str	r1, [r6, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003220:	6821      	ldr	r1, [r4, #0]
 8003222:	6a0b      	ldr	r3, [r1, #32]
 8003224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003228:	6865      	ldr	r5, [r4, #4]
 800322a:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <HAL_I2C_Init+0x1a8>)
 800322c:	4295      	cmp	r5, r2
 800322e:	d84f      	bhi.n	80032d0 <HAL_I2C_Init+0x118>
 8003230:	1c7a      	adds	r2, r7, #1
 8003232:	4313      	orrs	r3, r2
 8003234:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003236:	6825      	ldr	r5, [r4, #0]
 8003238:	69e9      	ldr	r1, [r5, #28]
 800323a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800323e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003242:	6863      	ldr	r3, [r4, #4]
 8003244:	4a46      	ldr	r2, [pc, #280]	; (8003360 <HAL_I2C_Init+0x1a8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d84c      	bhi.n	80032e4 <HAL_I2C_Init+0x12c>
 800324a:	3801      	subs	r0, #1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003252:	3001      	adds	r0, #1
 8003254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003258:	4218      	tst	r0, r3
 800325a:	d078      	beq.n	800334e <HAL_I2C_Init+0x196>
 800325c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003260:	430b      	orrs	r3, r1
 8003262:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003264:	6821      	ldr	r1, [r4, #0]
 8003266:	680b      	ldr	r3, [r1, #0]
 8003268:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800326c:	69e2      	ldr	r2, [r4, #28]
 800326e:	6a20      	ldr	r0, [r4, #32]
 8003270:	4302      	orrs	r2, r0
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	688b      	ldr	r3, [r1, #8]
 800327a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800327e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003282:	6922      	ldr	r2, [r4, #16]
 8003284:	68e0      	ldr	r0, [r4, #12]
 8003286:	4302      	orrs	r2, r0
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800328c:	6821      	ldr	r1, [r4, #0]
 800328e:	68cb      	ldr	r3, [r1, #12]
 8003290:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003294:	6962      	ldr	r2, [r4, #20]
 8003296:	69a0      	ldr	r0, [r4, #24]
 8003298:	4302      	orrs	r2, r0
 800329a:	4313      	orrs	r3, r2
 800329c:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	6813      	ldr	r3, [r2, #0]
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	2000      	movs	r0, #0
 80032aa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ac:	2320      	movs	r3, #32
 80032ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 80032b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80032be:	f7fe fb4f 	bl	8001960 <HAL_I2C_MspInit>
 80032c2:	e782      	b.n	80031ca <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <HAL_I2C_Init+0x1b4>)
 80032c6:	4298      	cmp	r0, r3
 80032c8:	bf8c      	ite	hi
 80032ca:	2300      	movhi	r3, #0
 80032cc:	2301      	movls	r3, #1
 80032ce:	e799      	b.n	8003204 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032d4:	fb02 f207 	mul.w	r2, r2, r7
 80032d8:	4d25      	ldr	r5, [pc, #148]	; (8003370 <HAL_I2C_Init+0x1b8>)
 80032da:	fba5 5202 	umull	r5, r2, r5, r2
 80032de:	0992      	lsrs	r2, r2, #6
 80032e0:	3201      	adds	r2, #1
 80032e2:	e7a6      	b.n	8003232 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e4:	68a2      	ldr	r2, [r4, #8]
 80032e6:	b9ba      	cbnz	r2, 8003318 <HAL_I2C_Init+0x160>
 80032e8:	1e46      	subs	r6, r0, #1
 80032ea:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80032ee:	fbb6 f6f7 	udiv	r6, r6, r7
 80032f2:	3601      	adds	r6, #1
 80032f4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80032f8:	fab6 f686 	clz	r6, r6
 80032fc:	0976      	lsrs	r6, r6, #5
 80032fe:	bb46      	cbnz	r6, 8003352 <HAL_I2C_Init+0x19a>
 8003300:	b9c2      	cbnz	r2, 8003334 <HAL_I2C_Init+0x17c>
 8003302:	1e42      	subs	r2, r0, #1
 8003304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003308:	fbb2 f2f3 	udiv	r2, r2, r3
 800330c:	3201      	adds	r2, #1
 800330e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003312:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003316:	e7a3      	b.n	8003260 <HAL_I2C_Init+0xa8>
 8003318:	1e46      	subs	r6, r0, #1
 800331a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800331e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003322:	fbb6 f6f7 	udiv	r6, r6, r7
 8003326:	3601      	adds	r6, #1
 8003328:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800332c:	fab6 f686 	clz	r6, r6
 8003330:	0976      	lsrs	r6, r6, #5
 8003332:	e7e4      	b.n	80032fe <HAL_I2C_Init+0x146>
 8003334:	1e42      	subs	r2, r0, #1
 8003336:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800333a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800333e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003342:	3201      	adds	r2, #1
 8003344:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003348:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 800334c:	e788      	b.n	8003260 <HAL_I2C_Init+0xa8>
 800334e:	2304      	movs	r3, #4
 8003350:	e786      	b.n	8003260 <HAL_I2C_Init+0xa8>
 8003352:	2301      	movs	r3, #1
 8003354:	e784      	b.n	8003260 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8003356:	2001      	movs	r0, #1
}
 8003358:	4770      	bx	lr
    return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
 800335c:	e7ac      	b.n	80032b8 <HAL_I2C_Init+0x100>
 800335e:	bf00      	nop
 8003360:	000186a0 	.word	0x000186a0
 8003364:	001e847f 	.word	0x001e847f
 8003368:	431bde83 	.word	0x431bde83
 800336c:	003d08ff 	.word	0x003d08ff
 8003370:	10624dd3 	.word	0x10624dd3

08003374 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003374:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	d001      	beq.n	8003382 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800337e:	2002      	movs	r0, #2
  }
}
 8003380:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003382:	2324      	movs	r3, #36	; 0x24
 8003384:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8003388:	6802      	ldr	r2, [r0, #0]
 800338a:	6813      	ldr	r3, [r2, #0]
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003392:	6802      	ldr	r2, [r0, #0]
 8003394:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003396:	f023 0310 	bic.w	r3, r3, #16
 800339a:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 800339c:	6802      	ldr	r2, [r0, #0]
 800339e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80033a0:	4319      	orrs	r1, r3
 80033a2:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 80033a4:	6802      	ldr	r2, [r0, #0]
 80033a6:	6813      	ldr	r3, [r2, #0]
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	2320      	movs	r3, #32
 80033b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 80033b4:	2000      	movs	r0, #0
 80033b6:	4770      	bx	lr

080033b8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d001      	beq.n	80033c6 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2002      	movs	r0, #2
  }
}
 80033c4:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	2324      	movs	r3, #36	; 0x24
 80033c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80033cc:	6802      	ldr	r2, [r0, #0]
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 80033d6:	6802      	ldr	r2, [r0, #0]
 80033d8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80033da:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 80033dc:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 80033e0:	4319      	orrs	r1, r3
 80033e2:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 80033e4:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 80033e6:	6802      	ldr	r2, [r0, #0]
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	2320      	movs	r3, #32
 80033f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 80033f6:	2000      	movs	r0, #0
 80033f8:	4770      	bx	lr

080033fa <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80033fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80033fc:	684e      	ldr	r6, [r1, #4]
 80033fe:	6805      	ldr	r5, [r0, #0]
 8003400:	68eb      	ldr	r3, [r5, #12]
 8003402:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8003406:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003408:	01d4      	lsls	r4, r2, #7
 800340a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 800340e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003412:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003416:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800341a:	680b      	ldr	r3, [r1, #0]
 800341c:	6805      	ldr	r5, [r0, #0]
 800341e:	68ef      	ldr	r7, [r5, #12]
 8003420:	f3c7 470b 	ubfx	r7, r7, #16, #12
 8003424:	443b      	add	r3, r7
 8003426:	3301      	adds	r3, #1
 8003428:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 800342c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003430:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003434:	68ce      	ldr	r6, [r1, #12]
 8003436:	6805      	ldr	r5, [r0, #0]
 8003438:	68eb      	ldr	r3, [r5, #12]
 800343a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800343e:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003440:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003444:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003448:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800344c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003450:	688b      	ldr	r3, [r1, #8]
 8003452:	6805      	ldr	r5, [r0, #0]
 8003454:	68ef      	ldr	r7, [r5, #12]
 8003456:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800345a:	443b      	add	r3, r7
 800345c:	3301      	adds	r3, #1
 800345e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003466:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800346a:	6803      	ldr	r3, [r0, #0]
 800346c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003470:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 8003474:	f025 0507 	bic.w	r5, r5, #7
 8003478:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800347c:	6803      	ldr	r3, [r0, #0]
 800347e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003482:	690d      	ldr	r5, [r1, #16]
 8003484:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003488:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800348c:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003490:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003492:	6806      	ldr	r6, [r0, #0]
 8003494:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8003498:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 800349c:	2500      	movs	r5, #0
 800349e:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80034a2:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 80034a6:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80034aa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80034ae:	6806      	ldr	r6, [r0, #0]
 80034b0:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 80034b4:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80034b8:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80034c2:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80034c6:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 80034ca:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80034ce:	6803      	ldr	r3, [r0, #0]
 80034d0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80034d4:	694e      	ldr	r6, [r1, #20]
 80034d6:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80034da:	6803      	ldr	r3, [r0, #0]
 80034dc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80034e0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80034e4:	f426 66e0 	bic.w	r6, r6, #1792	; 0x700
 80034e8:	f026 0607 	bic.w	r6, r6, #7
 80034ec:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80034f0:	69ce      	ldr	r6, [r1, #28]
 80034f2:	6a0f      	ldr	r7, [r1, #32]
 80034f4:	6803      	ldr	r3, [r0, #0]
 80034f6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80034fa:	433e      	orrs	r6, r7
 80034fc:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003500:	6803      	ldr	r3, [r0, #0]
 8003502:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003506:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 800350a:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800350e:	6803      	ldr	r3, [r0, #0]
 8003510:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8003514:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003516:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800351a:	690b      	ldr	r3, [r1, #16]
 800351c:	b16b      	cbz	r3, 800353a <LTDC_SetConfig+0x140>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800351e:	2b01      	cmp	r3, #1
 8003520:	d03b      	beq.n	800359a <LTDC_SetConfig+0x1a0>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003522:	2b04      	cmp	r3, #4
 8003524:	d03b      	beq.n	800359e <LTDC_SetConfig+0x1a4>
 8003526:	2b02      	cmp	r3, #2
 8003528:	d008      	beq.n	800353c <LTDC_SetConfig+0x142>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800352a:	2b03      	cmp	r3, #3
 800352c:	d039      	beq.n	80035a2 <LTDC_SetConfig+0x1a8>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800352e:	2b07      	cmp	r3, #7
 8003530:	d001      	beq.n	8003536 <LTDC_SetConfig+0x13c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003532:	2301      	movs	r3, #1
 8003534:	e002      	b.n	800353c <LTDC_SetConfig+0x142>
    tmp = 2U;
 8003536:	2302      	movs	r3, #2
 8003538:	e000      	b.n	800353c <LTDC_SetConfig+0x142>
    tmp = 4U;
 800353a:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800353c:	6802      	ldr	r2, [r0, #0]
 800353e:	4422      	add	r2, r4
 8003540:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003544:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003548:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800354c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800354e:	fb03 f502 	mul.w	r5, r3, r2
 8003552:	684a      	ldr	r2, [r1, #4]
 8003554:	680e      	ldr	r6, [r1, #0]
 8003556:	1b92      	subs	r2, r2, r6
 8003558:	fb03 f302 	mul.w	r3, r3, r2
 800355c:	3303      	adds	r3, #3
 800355e:	6802      	ldr	r2, [r0, #0]
 8003560:	4422      	add	r2, r4
 8003562:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003566:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800356a:	6803      	ldr	r3, [r0, #0]
 800356c:	4423      	add	r3, r4
 800356e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003572:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8003576:	f022 0207 	bic.w	r2, r2, #7
 800357a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800357e:	6803      	ldr	r3, [r0, #0]
 8003580:	4423      	add	r3, r4
 8003582:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003584:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003588:	6803      	ldr	r3, [r0, #0]
 800358a:	441c      	add	r4, r3
 800358c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8003598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800359a:	2303      	movs	r3, #3
 800359c:	e7ce      	b.n	800353c <LTDC_SetConfig+0x142>
    tmp = 2U;
 800359e:	2302      	movs	r3, #2
 80035a0:	e7cc      	b.n	800353c <LTDC_SetConfig+0x142>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e7ca      	b.n	800353c <LTDC_SetConfig+0x142>
	...

080035a8 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d072      	beq.n	8003692 <HAL_LTDC_Init+0xea>
{
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80035b0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d067      	beq.n	8003688 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035b8:	2302      	movs	r3, #2
 80035ba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	6993      	ldr	r3, [r2, #24]
 80035c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035c6:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035c8:	6821      	ldr	r1, [r4, #0]
 80035ca:	698a      	ldr	r2, [r1, #24]
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	68a0      	ldr	r0, [r4, #8]
 80035d0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80035d2:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035d4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80035d6:	6920      	ldr	r0, [r4, #16]
 80035d8:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035da:	4313      	orrs	r3, r2
 80035dc:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80035de:	6821      	ldr	r1, [r4, #0]
 80035e0:	688a      	ldr	r2, [r1, #8]
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <HAL_LTDC_Init+0xf0>)
 80035e4:	401a      	ands	r2, r3
 80035e6:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80035e8:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80035ea:	6820      	ldr	r0, [r4, #0]
 80035ec:	6882      	ldr	r2, [r0, #8]
 80035ee:	69a1      	ldr	r1, [r4, #24]
 80035f0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80035f4:	430a      	orrs	r2, r1
 80035f6:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80035f8:	6821      	ldr	r1, [r4, #0]
 80035fa:	68ca      	ldr	r2, [r1, #12]
 80035fc:	401a      	ands	r2, r3
 80035fe:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003600:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003602:	6820      	ldr	r0, [r4, #0]
 8003604:	68c2      	ldr	r2, [r0, #12]
 8003606:	6a21      	ldr	r1, [r4, #32]
 8003608:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800360c:	430a      	orrs	r2, r1
 800360e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003610:	6821      	ldr	r1, [r4, #0]
 8003612:	690a      	ldr	r2, [r1, #16]
 8003614:	401a      	ands	r2, r3
 8003616:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003618:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800361a:	6820      	ldr	r0, [r4, #0]
 800361c:	6902      	ldr	r2, [r0, #16]
 800361e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003620:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003624:	430a      	orrs	r2, r1
 8003626:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003628:	6821      	ldr	r1, [r4, #0]
 800362a:	694a      	ldr	r2, [r1, #20]
 800362c:	4013      	ands	r3, r2
 800362e:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003630:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003632:	6821      	ldr	r1, [r4, #0]
 8003634:	694b      	ldr	r3, [r1, #20]
 8003636:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003638:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800363c:	4313      	orrs	r3, r2
 800363e:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003640:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003644:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003648:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800364a:	6821      	ldr	r1, [r4, #0]
 800364c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800364e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003652:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003654:	6821      	ldr	r1, [r4, #0]
 8003656:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003658:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800365c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003660:	4303      	orrs	r3, r0
 8003662:	4313      	orrs	r3, r2
 8003664:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003666:	6822      	ldr	r2, [r4, #0]
 8003668:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800366a:	f043 0306 	orr.w	r3, r3, #6
 800366e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003670:	6822      	ldr	r2, [r4, #0]
 8003672:	6993      	ldr	r3, [r2, #24]
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800367a:	2000      	movs	r0, #0
 800367c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003680:	2301      	movs	r3, #1
 8003682:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003686:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8003688:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800368c:	f7fe f9be 	bl	8001a0c <HAL_LTDC_MspInit>
 8003690:	e792      	b.n	80035b8 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8003692:	2001      	movs	r0, #1
}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	f000f800 	.word	0xf000f800

0800369c <HAL_LTDC_ErrorCallback>:
}
 800369c:	4770      	bx	lr

0800369e <HAL_LTDC_LineEventCallback>:
}
 800369e:	4770      	bx	lr

080036a0 <HAL_LTDC_ReloadEventCallback>:
}
 80036a0:	4770      	bx	lr

080036a2 <HAL_LTDC_IRQHandler>:
{
 80036a2:	b570      	push	{r4, r5, r6, lr}
 80036a4:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80036a6:	6803      	ldr	r3, [r0, #0]
 80036a8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80036aa:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80036ac:	f015 0f04 	tst.w	r5, #4
 80036b0:	d002      	beq.n	80036b8 <HAL_LTDC_IRQHandler+0x16>
 80036b2:	f016 0f04 	tst.w	r6, #4
 80036b6:	d112      	bne.n	80036de <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80036b8:	f015 0f02 	tst.w	r5, #2
 80036bc:	d002      	beq.n	80036c4 <HAL_LTDC_IRQHandler+0x22>
 80036be:	f016 0f02 	tst.w	r6, #2
 80036c2:	d121      	bne.n	8003708 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80036c4:	f015 0f01 	tst.w	r5, #1
 80036c8:	d002      	beq.n	80036d0 <HAL_LTDC_IRQHandler+0x2e>
 80036ca:	f016 0f01 	tst.w	r6, #1
 80036ce:	d132      	bne.n	8003736 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80036d0:	f015 0f08 	tst.w	r5, #8
 80036d4:	d002      	beq.n	80036dc <HAL_LTDC_IRQHandler+0x3a>
 80036d6:	f016 0f08 	tst.w	r6, #8
 80036da:	d13d      	bne.n	8003758 <HAL_LTDC_IRQHandler+0xb6>
}
 80036dc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80036de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e0:	f022 0204 	bic.w	r2, r2, #4
 80036e4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80036e6:	6803      	ldr	r3, [r0, #0]
 80036e8:	2204      	movs	r2, #4
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80036ec:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80036f8:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80036fc:	2300      	movs	r3, #0
 80036fe:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003702:	f7ff ffcb 	bl	800369c <HAL_LTDC_ErrorCallback>
 8003706:	e7d7      	b.n	80036b8 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800370c:	f023 0302 	bic.w	r3, r3, #2
 8003710:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	2202      	movs	r2, #2
 8003716:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003718:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003722:	2304      	movs	r3, #4
 8003724:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003728:	2300      	movs	r3, #0
 800372a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800372e:	4620      	mov	r0, r4
 8003730:	f7ff ffb4 	bl	800369c <HAL_LTDC_ErrorCallback>
 8003734:	e7c6      	b.n	80036c4 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003740:	6822      	ldr	r2, [r4, #0]
 8003742:	2301      	movs	r3, #1
 8003744:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003746:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800374a:	2300      	movs	r3, #0
 800374c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003750:	4620      	mov	r0, r4
 8003752:	f7ff ffa4 	bl	800369e <HAL_LTDC_LineEventCallback>
 8003756:	e7bb      	b.n	80036d0 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800375c:	f023 0308 	bic.w	r3, r3, #8
 8003760:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	2208      	movs	r2, #8
 8003766:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8003768:	2301      	movs	r3, #1
 800376a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800376e:	2300      	movs	r3, #0
 8003770:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003774:	4620      	mov	r0, r4
 8003776:	f7ff ff93 	bl	80036a0 <HAL_LTDC_ReloadEventCallback>
}
 800377a:	e7af      	b.n	80036dc <HAL_LTDC_IRQHandler+0x3a>

0800377c <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 800377c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d027      	beq.n	80037d4 <HAL_LTDC_ConfigLayer+0x58>
{
 8003784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003788:	4606      	mov	r6, r0
 800378a:	460f      	mov	r7, r1
 800378c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800378e:	f04f 0801 	mov.w	r8, #1
 8003792:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800379c:	2434      	movs	r4, #52	; 0x34
 800379e:	fb04 0402 	mla	r4, r4, r2, r0
 80037a2:	3438      	adds	r4, #56	; 0x38
 80037a4:	460d      	mov	r5, r1
 80037a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b2:	682b      	ldr	r3, [r5, #0]
 80037b4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80037b6:	4662      	mov	r2, ip
 80037b8:	4639      	mov	r1, r7
 80037ba:	4630      	mov	r0, r6
 80037bc:	f7ff fe1d 	bl	80033fa <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80037c0:	6833      	ldr	r3, [r6, #0]
 80037c2:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80037c6:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80037ca:	2000      	movs	r0, #0
 80037cc:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80037d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 80037d4:	2002      	movs	r0, #2
}
 80037d6:	4770      	bx	lr

080037d8 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 80037d8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d011      	beq.n	8003804 <HAL_LTDC_EnableDither+0x2c>
 80037e0:	2201      	movs	r2, #1
 80037e2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80037ec:	4906      	ldr	r1, [pc, #24]	; (8003808 <HAL_LTDC_EnableDither+0x30>)
 80037ee:	698b      	ldr	r3, [r1, #24]
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	618b      	str	r3, [r1, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80037f6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80037fa:	2300      	movs	r3, #0
 80037fc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8003800:	4618      	mov	r0, r3
 8003802:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8003804:	2002      	movs	r0, #2
}
 8003806:	4770      	bx	lr
 8003808:	40016800 	.word	0x40016800

0800380c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800380c:	2800      	cmp	r0, #0
 800380e:	f000 81df 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x3c4>
{
 8003812:	b570      	push	{r4, r5, r6, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003818:	6803      	ldr	r3, [r0, #0]
 800381a:	f013 0f01 	tst.w	r3, #1
 800381e:	d03b      	beq.n	8003898 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003820:	4ba6      	ldr	r3, [pc, #664]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b04      	cmp	r3, #4
 800382a:	d02c      	beq.n	8003886 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382c:	4ba3      	ldr	r3, [pc, #652]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003834:	2b08      	cmp	r3, #8
 8003836:	d021      	beq.n	800387c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383e:	d04f      	beq.n	80038e0 <HAL_RCC_OscConfig+0xd4>
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d052      	beq.n	80038ec <HAL_RCC_OscConfig+0xe0>
 8003846:	4b9d      	ldr	r3, [pc, #628]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003856:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003858:	6863      	ldr	r3, [r4, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d050      	beq.n	8003900 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385e:	f7fe fb8f 	bl	8001f80 <HAL_GetTick>
 8003862:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003864:	4b95      	ldr	r3, [pc, #596]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800386c:	d114      	bne.n	8003898 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386e:	f7fe fb87 	bl	8001f80 <HAL_GetTick>
 8003872:	1b40      	subs	r0, r0, r5
 8003874:	2864      	cmp	r0, #100	; 0x64
 8003876:	d9f5      	bls.n	8003864 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
 800387a:	e1b0      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387c:	4b8f      	ldr	r3, [pc, #572]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003884:	d0d8      	beq.n	8003838 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	4b8d      	ldr	r3, [pc, #564]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800388e:	d003      	beq.n	8003898 <HAL_RCC_OscConfig+0x8c>
 8003890:	6863      	ldr	r3, [r4, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 819e 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f013 0f02 	tst.w	r3, #2
 800389e:	d054      	beq.n	800394a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a0:	4b86      	ldr	r3, [pc, #536]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f013 0f0c 	tst.w	r3, #12
 80038a8:	d03e      	beq.n	8003928 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038aa:	4b84      	ldr	r3, [pc, #528]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d033      	beq.n	800391e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b6:	68e3      	ldr	r3, [r4, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d067      	beq.n	800398c <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038bc:	4b80      	ldr	r3, [pc, #512]	; (8003ac0 <HAL_RCC_OscConfig+0x2b4>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fe fb5d 	bl	8001f80 <HAL_GetTick>
 80038c6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	4b7c      	ldr	r3, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f013 0f02 	tst.w	r3, #2
 80038d0:	d153      	bne.n	800397a <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fe fb55 	bl	8001f80 <HAL_GetTick>
 80038d6:	1b40      	subs	r0, r0, r5
 80038d8:	2802      	cmp	r0, #2
 80038da:	d9f5      	bls.n	80038c8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80038dc:	2003      	movs	r0, #3
 80038de:	e17e      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e0:	4a76      	ldr	r2, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e7b5      	b.n	8003858 <HAL_RCC_OscConfig+0x4c>
 80038ec:	4b73      	ldr	r3, [pc, #460]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e7ab      	b.n	8003858 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003900:	f7fe fb3e 	bl	8001f80 <HAL_GetTick>
 8003904:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b6d      	ldr	r3, [pc, #436]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800390e:	d0c3      	beq.n	8003898 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003910:	f7fe fb36 	bl	8001f80 <HAL_GetTick>
 8003914:	1b40      	subs	r0, r0, r5
 8003916:	2864      	cmp	r0, #100	; 0x64
 8003918:	d9f5      	bls.n	8003906 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800391a:	2003      	movs	r0, #3
 800391c:	e15f      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b67      	ldr	r3, [pc, #412]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003926:	d1c6      	bne.n	80038b6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f013 0f02 	tst.w	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_OscConfig+0x12e>
 8003932:	68e3      	ldr	r3, [r4, #12]
 8003934:	2b01      	cmp	r3, #1
 8003936:	f040 814f 	bne.w	8003bd8 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4a60      	ldr	r2, [pc, #384]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 800393c:	6813      	ldr	r3, [r2, #0]
 800393e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003942:	6921      	ldr	r1, [r4, #16]
 8003944:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003948:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	f013 0f08 	tst.w	r3, #8
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003952:	6963      	ldr	r3, [r4, #20]
 8003954:	b363      	cbz	r3, 80039b0 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x2b8>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fe fb10 	bl	8001f80 <HAL_GetTick>
 8003960:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	f013 0f02 	tst.w	r3, #2
 800396a:	d133      	bne.n	80039d4 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe fb08 	bl	8001f80 <HAL_GetTick>
 8003970:	1b40      	subs	r0, r0, r5
 8003972:	2802      	cmp	r0, #2
 8003974:	d9f5      	bls.n	8003962 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8003976:	2003      	movs	r0, #3
 8003978:	e131      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4a50      	ldr	r2, [pc, #320]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003982:	6921      	ldr	r1, [r4, #16]
 8003984:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e7de      	b.n	800394a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800398c:	4b4c      	ldr	r3, [pc, #304]	; (8003ac0 <HAL_RCC_OscConfig+0x2b4>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003992:	f7fe faf5 	bl	8001f80 <HAL_GetTick>
 8003996:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003998:	4b48      	ldr	r3, [pc, #288]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f013 0f02 	tst.w	r3, #2
 80039a0:	d0d3      	beq.n	800394a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fe faed 	bl	8001f80 <HAL_GetTick>
 80039a6:	1b40      	subs	r0, r0, r5
 80039a8:	2802      	cmp	r0, #2
 80039aa:	d9f5      	bls.n	8003998 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80039ac:	2003      	movs	r0, #3
 80039ae:	e116      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b0:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <HAL_RCC_OscConfig+0x2b8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fe fae3 	bl	8001f80 <HAL_GetTick>
 80039ba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80039be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c0:	f013 0f02 	tst.w	r3, #2
 80039c4:	d006      	beq.n	80039d4 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c6:	f7fe fadb 	bl	8001f80 <HAL_GetTick>
 80039ca:	1b40      	subs	r0, r0, r5
 80039cc:	2802      	cmp	r0, #2
 80039ce:	d9f5      	bls.n	80039bc <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80039d0:	2003      	movs	r0, #3
 80039d2:	e104      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	f013 0f04 	tst.w	r3, #4
 80039da:	d078      	beq.n	8003ace <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039dc:	4b37      	ldr	r3, [pc, #220]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80039e4:	d10d      	bne.n	8003a02 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039fe:	2501      	movs	r5, #1
 8003a00:	e000      	b.n	8003a04 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCC_OscConfig+0x2bc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a0c:	d021      	beq.n	8003a52 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d032      	beq.n	8003a7a <HAL_RCC_OscConfig+0x26e>
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d036      	beq.n	8003a86 <HAL_RCC_OscConfig+0x27a>
 8003a18:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003a1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	671a      	str	r2, [r3, #112]	; 0x70
 8003a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d034      	beq.n	8003a9a <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fe faa6 	bl	8001f80 <HAL_GetTick>
 8003a34:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	4b21      	ldr	r3, [pc, #132]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f013 0f02 	tst.w	r3, #2
 8003a3e:	d145      	bne.n	8003acc <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe fa9e 	bl	8001f80 <HAL_GetTick>
 8003a44:	1b80      	subs	r0, r0, r6
 8003a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a4a:	4298      	cmp	r0, r3
 8003a4c:	d9f3      	bls.n	8003a36 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8003a4e:	2003      	movs	r0, #3
 8003a50:	e0c5      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a52:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_RCC_OscConfig+0x2bc>)
 8003a54:	6813      	ldr	r3, [r2, #0]
 8003a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fa90 	bl	8001f80 <HAL_GetTick>
 8003a60:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <HAL_RCC_OscConfig+0x2bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a6a:	d1d0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6c:	f7fe fa88 	bl	8001f80 <HAL_GetTick>
 8003a70:	1b80      	subs	r0, r0, r6
 8003a72:	2802      	cmp	r0, #2
 8003a74:	d9f5      	bls.n	8003a62 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8003a76:	2003      	movs	r0, #3
 8003a78:	e0b1      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7a:	4a10      	ldr	r2, [pc, #64]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003a7c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	e7d1      	b.n	8003a2a <HAL_RCC_OscConfig+0x21e>
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003a88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a8a:	f042 0204 	orr.w	r2, r2, #4
 8003a8e:	671a      	str	r2, [r3, #112]	; 0x70
 8003a90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	671a      	str	r2, [r3, #112]	; 0x70
 8003a98:	e7c7      	b.n	8003a2a <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fa71 	bl	8001f80 <HAL_GetTick>
 8003a9e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_OscConfig+0x2b0>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f013 0f02 	tst.w	r3, #2
 8003aa8:	d010      	beq.n	8003acc <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fe fa69 	bl	8001f80 <HAL_GetTick>
 8003aae:	1b80      	subs	r0, r0, r6
 8003ab0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ab4:	4298      	cmp	r0, r3
 8003ab6:	d9f3      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8003ab8:	2003      	movs	r0, #3
 8003aba:	e090      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470000 	.word	0x42470000
 8003ac4:	42470e80 	.word	0x42470e80
 8003ac8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003acc:	b9ed      	cbnz	r5, 8003b0a <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ace:	69a3      	ldr	r3, [r4, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8083 	beq.w	8003bdc <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad6:	4a49      	ldr	r2, [pc, #292]	; (8003bfc <HAL_RCC_OscConfig+0x3f0>)
 8003ad8:	6892      	ldr	r2, [r2, #8]
 8003ada:	f002 020c 	and.w	r2, r2, #12
 8003ade:	2a08      	cmp	r2, #8
 8003ae0:	d051      	beq.n	8003b86 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d017      	beq.n	8003b16 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCC_OscConfig+0x3f4>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fe fa48 	bl	8001f80 <HAL_GetTick>
 8003af0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	4b42      	ldr	r3, [pc, #264]	; (8003bfc <HAL_RCC_OscConfig+0x3f0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003afa:	d042      	beq.n	8003b82 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe fa40 	bl	8001f80 <HAL_GetTick>
 8003b00:	1b00      	subs	r0, r0, r4
 8003b02:	2802      	cmp	r0, #2
 8003b04:	d9f5      	bls.n	8003af2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003b06:	2003      	movs	r0, #3
 8003b08:	e069      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <HAL_RCC_OscConfig+0x3f0>)
 8003b0c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6413      	str	r3, [r2, #64]	; 0x40
 8003b14:	e7db      	b.n	8003ace <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <HAL_RCC_OscConfig+0x3f4>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fa30 	bl	8001f80 <HAL_GetTick>
 8003b20:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCC_OscConfig+0x3f0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b2a:	d006      	beq.n	8003b3a <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe fa28 	bl	8001f80 <HAL_GetTick>
 8003b30:	1b40      	subs	r0, r0, r5
 8003b32:	2802      	cmp	r0, #2
 8003b34:	d9f5      	bls.n	8003b22 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8003b36:	2003      	movs	r0, #3
 8003b38:	e051      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b3a:	69e3      	ldr	r3, [r4, #28]
 8003b3c:	6a22      	ldr	r2, [r4, #32]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b42:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003b46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b48:	0852      	lsrs	r2, r2, #1
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <HAL_RCC_OscConfig+0x3f0>)
 8003b58:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b5a:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <HAL_RCC_OscConfig+0x3f4>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b60:	f7fe fa0e 	bl	8001f80 <HAL_GetTick>
 8003b64:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_OscConfig+0x3f0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fe fa06 	bl	8001f80 <HAL_GetTick>
 8003b74:	1b00      	subs	r0, r0, r4
 8003b76:	2802      	cmp	r0, #2
 8003b78:	d9f5      	bls.n	8003b66 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003b7a:	2003      	movs	r0, #3
 8003b7c:	e02f      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e02d      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
 8003b82:	2000      	movs	r0, #0
 8003b84:	e02b      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d02b      	beq.n	8003be2 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <HAL_RCC_OscConfig+0x3f0>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003b92:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b94:	4291      	cmp	r1, r2
 8003b96:	d126      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b9c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	428a      	cmp	r2, r1
 8003ba0:	d123      	bne.n	8003bea <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003ba8:	401a      	ands	r2, r3
 8003baa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003bae:	d11e      	bne.n	8003bee <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003bb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003bb6:	0852      	lsrs	r2, r2, #1
 8003bb8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bba:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003bbe:	d118      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003bc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003bca:	d114      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8003bcc:	2000      	movs	r0, #0
 8003bce:	e006      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8003bd0:	2001      	movs	r0, #1
}
 8003bd2:	4770      	bx	lr
        return HAL_ERROR;
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	e002      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8003bd8:	2001      	movs	r0, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8003bdc:	2000      	movs	r0, #0
}
 8003bde:	b002      	add	sp, #8
 8003be0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
 8003be4:	e7fb      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8003be6:	2001      	movs	r0, #1
 8003be8:	e7f9      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
 8003bea:	2001      	movs	r0, #1
 8003bec:	e7f7      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
 8003bee:	2001      	movs	r0, #1
 8003bf0:	e7f5      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	e7f3      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	e7f1      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	42470060 	.word	0x42470060

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c06:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d053      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0xb6>
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d153      	bne.n	8003cbe <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c16:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003c24:	d028      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c26:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003c2e:	0158      	lsls	r0, r3, #5
 8003c30:	2100      	movs	r1, #0
 8003c32:	1ac0      	subs	r0, r0, r3
 8003c34:	f161 0100 	sbc.w	r1, r1, #0
 8003c38:	018e      	lsls	r6, r1, #6
 8003c3a:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8003c3e:	0187      	lsls	r7, r0, #6
 8003c40:	1a3c      	subs	r4, r7, r0
 8003c42:	eb66 0501 	sbc.w	r5, r6, r1
 8003c46:	00e9      	lsls	r1, r5, #3
 8003c48:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8003c4c:	00e0      	lsls	r0, r4, #3
 8003c4e:	18c0      	adds	r0, r0, r3
 8003c50:	f141 0100 	adc.w	r1, r1, #0
 8003c54:	024b      	lsls	r3, r1, #9
 8003c56:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003c5a:	0244      	lsls	r4, r0, #9
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	2300      	movs	r3, #0
 8003c62:	f7fc fb15 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003c72:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003c76:	e023      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003c80:	015c      	lsls	r4, r3, #5
 8003c82:	2500      	movs	r5, #0
 8003c84:	1ae4      	subs	r4, r4, r3
 8003c86:	f165 0500 	sbc.w	r5, r5, #0
 8003c8a:	01ae      	lsls	r6, r5, #6
 8003c8c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8003c90:	01a7      	lsls	r7, r4, #6
 8003c92:	1b38      	subs	r0, r7, r4
 8003c94:	eb66 0105 	sbc.w	r1, r6, r5
 8003c98:	00cc      	lsls	r4, r1, #3
 8003c9a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8003c9e:	00c5      	lsls	r5, r0, #3
 8003ca0:	18e8      	adds	r0, r5, r3
 8003ca2:	f144 0100 	adc.w	r1, r4, #0
 8003ca6:	028b      	lsls	r3, r1, #10
 8003ca8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003cac:	0284      	lsls	r4, r0, #10
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f7fc faec 	bl	8000290 <__aeabi_uldivmod>
 8003cb8:	e7d5      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8003cba:	4803      	ldr	r0, [pc, #12]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cbe:	4803      	ldr	r0, [pc, #12]	; (8003ccc <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	00f42400 	.word	0x00f42400

08003cd0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	f000 809b 	beq.w	8003e0c <HAL_RCC_ClockConfig+0x13c>
{
 8003cd6:	b570      	push	{r4, r5, r6, lr}
 8003cd8:	460d      	mov	r5, r1
 8003cda:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b4f      	ldr	r3, [pc, #316]	; (8003e1c <HAL_RCC_ClockConfig+0x14c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d208      	bcs.n	8003cfa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce8:	b2cb      	uxtb	r3, r1
 8003cea:	4a4c      	ldr	r2, [pc, #304]	; (8003e1c <HAL_RCC_ClockConfig+0x14c>)
 8003cec:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	f040 808b 	bne.w	8003e10 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	f013 0f02 	tst.w	r3, #2
 8003d00:	d017      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d02:	f013 0f04 	tst.w	r3, #4
 8003d06:	d004      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d08:	4a45      	ldr	r2, [pc, #276]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003d0a:	6893      	ldr	r3, [r2, #8]
 8003d0c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d10:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	f013 0f08 	tst.w	r3, #8
 8003d18:	d004      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1a:	4a41      	ldr	r2, [pc, #260]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003d1c:	6893      	ldr	r3, [r2, #8]
 8003d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d22:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d24:	4a3e      	ldr	r2, [pc, #248]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003d26:	6893      	ldr	r3, [r2, #8]
 8003d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2c:	68a1      	ldr	r1, [r4, #8]
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f013 0f01 	tst.w	r3, #1
 8003d38:	d032      	beq.n	8003da0 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d021      	beq.n	8003d84 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d40:	1e9a      	subs	r2, r3, #2
 8003d42:	2a01      	cmp	r2, #1
 8003d44:	d925      	bls.n	8003d92 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4a36      	ldr	r2, [pc, #216]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	f012 0f02 	tst.w	r2, #2
 8003d4e:	d061      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d50:	4933      	ldr	r1, [pc, #204]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003d52:	688a      	ldr	r2, [r1, #8]
 8003d54:	f022 0203 	bic.w	r2, r2, #3
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003d5c:	f7fe f910 	bl	8001f80 <HAL_GetTick>
 8003d60:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b2f      	ldr	r3, [pc, #188]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	6862      	ldr	r2, [r4, #4]
 8003d6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d70:	d016      	beq.n	8003da0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d72:	f7fe f905 	bl	8001f80 <HAL_GetTick>
 8003d76:	1b80      	subs	r0, r0, r6
 8003d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d7c:	4298      	cmp	r0, r3
 8003d7e:	d9f0      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8003d80:	2003      	movs	r0, #3
 8003d82:	e042      	b.n	8003e0a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d84:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003d8c:	d1e0      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003d8e:	2001      	movs	r0, #1
 8003d90:	e03b      	b.n	8003e0a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d92:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003d9a:	d1d9      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	e034      	b.n	8003e0a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <HAL_RCC_ClockConfig+0x14c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	42ab      	cmp	r3, r5
 8003daa:	d907      	bls.n	8003dbc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dac:	b2ea      	uxtb	r2, r5
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_ClockConfig+0x14c>)
 8003db0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	42ab      	cmp	r3, r5
 8003dba:	d12d      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	f013 0f04 	tst.w	r3, #4
 8003dc2:	d006      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003dc6:	6893      	ldr	r3, [r2, #8]
 8003dc8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003dcc:	68e1      	ldr	r1, [r4, #12]
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	f013 0f08 	tst.w	r3, #8
 8003dd8:	d007      	beq.n	8003dea <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dda:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003ddc:	6893      	ldr	r3, [r2, #8]
 8003dde:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003de2:	6921      	ldr	r1, [r4, #16]
 8003de4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003de8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dea:	f7ff ff0b 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_RCC_ClockConfig+0x150>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003df6:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <HAL_RCC_ClockConfig+0x154>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	40d8      	lsrs	r0, r3
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_RCC_ClockConfig+0x158>)
 8003dfe:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <HAL_RCC_ClockConfig+0x15c>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	f7fd ffda 	bl	8001dbc <HAL_InitTick>
  return HAL_OK;
 8003e08:	2000      	movs	r0, #0
}
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003e0c:	2001      	movs	r0, #1
}
 8003e0e:	4770      	bx	lr
      return HAL_ERROR;
 8003e10:	2001      	movs	r0, #1
 8003e12:	e7fa      	b.n	8003e0a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003e14:	2001      	movs	r0, #1
 8003e16:	e7f8      	b.n	8003e0a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003e18:	2001      	movs	r0, #1
 8003e1a:	e7f6      	b.n	8003e0a <HAL_RCC_ClockConfig+0x13a>
 8003e1c:	40023c00 	.word	0x40023c00
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08009d1c 	.word	0x08009d1c
 8003e28:	20000050 	.word	0x20000050
 8003e2c:	20000058 	.word	0x20000058

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000050 	.word	0x20000050

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e3e:	f7ff fff7 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003e4a:	4a03      	ldr	r2, [pc, #12]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8003e4e:	40d8      	lsrs	r0, r3
 8003e50:	bd08      	pop	{r3, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08009d2c 	.word	0x08009d2c

08003e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e5c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e5e:	f7ff ffe7 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003e6a:	4a03      	ldr	r2, [pc, #12]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
}
 8003e6e:	40d8      	lsrs	r0, r3
 8003e70:	bd08      	pop	{r3, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	08009d2c 	.word	0x08009d2c

08003e7c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e7c:	230f      	movs	r3, #15
 8003e7e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_GetClockConfig+0x34>)
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	f002 0203 	and.w	r2, r2, #3
 8003e88:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003e90:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003e98:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	08db      	lsrs	r3, r3, #3
 8003e9e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003ea2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCC_GetClockConfig+0x38>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	600b      	str	r3, [r1, #0]
}
 8003eae:	4770      	bx	lr
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40023c00 	.word	0x40023c00

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	b530      	push	{r4, r5, lr}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ebe:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ec0:	f013 0f43 	tst.w	r3, #67	; 0x43
 8003ec4:	d114      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x38>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	f013 0f0c 	tst.w	r3, #12
 8003ecc:	d169      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	f013 0f20 	tst.w	r3, #32
 8003ed4:	f040 80be 	bne.w	8004054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	f013 0f10 	tst.w	r3, #16
 8003ede:	f000 8120 	beq.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ee2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8003ee6:	4b90      	ldr	r3, [pc, #576]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003ee8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003eea:	2000      	movs	r0, #0
}
 8003eec:	b003      	add	sp, #12
 8003eee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003ef0:	4b8e      	ldr	r3, [pc, #568]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003ef6:	f7fe f843 	bl	8001f80 <HAL_GetTick>
 8003efa:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003efc:	4b8c      	ldr	r3, [pc, #560]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f04:	d006      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f06:	f7fe f83b 	bl	8001f80 <HAL_GetTick>
 8003f0a:	1b43      	subs	r3, r0, r5
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d9f5      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 8003f10:	2003      	movs	r0, #3
 8003f12:	e7eb      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f013 0f01 	tst.w	r3, #1
 8003f1a:	d007      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f1c:	6862      	ldr	r2, [r4, #4]
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	071b      	lsls	r3, r3, #28
 8003f22:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003f26:	4a82      	ldr	r2, [pc, #520]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	f013 0f02 	tst.w	r3, #2
 8003f32:	d015      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f34:	4a7e      	ldr	r2, [pc, #504]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f36:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003f3a:	6860      	ldr	r0, [r4, #4]
 8003f3c:	68e3      	ldr	r3, [r4, #12]
 8003f3e:	061b      	lsls	r3, r3, #24
 8003f40:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003f44:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f4e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003f52:	f023 031f 	bic.w	r3, r3, #31
 8003f56:	69e1      	ldr	r1, [r4, #28]
 8003f58:	3901      	subs	r1, #1
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f68:	6862      	ldr	r2, [r4, #4]
 8003f6a:	68e3      	ldr	r3, [r4, #12]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003f72:	68a2      	ldr	r2, [r4, #8]
 8003f74:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003f78:	4a6d      	ldr	r2, [pc, #436]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003f7e:	4b6b      	ldr	r3, [pc, #428]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003f84:	f7fd fffc 	bl	8001f80 <HAL_GetTick>
 8003f88:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f8a:	4b69      	ldr	r3, [pc, #420]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f92:	d198      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f94:	f7fd fff4 	bl	8001f80 <HAL_GetTick>
 8003f98:	1b40      	subs	r0, r0, r5
 8003f9a:	2802      	cmp	r0, #2
 8003f9c:	d9f5      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        return HAL_TIMEOUT;
 8003f9e:	2003      	movs	r0, #3
 8003fa0:	e7a4      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE();
 8003fa2:	4b64      	ldr	r3, [pc, #400]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003fa8:	f7fd ffea 	bl	8001f80 <HAL_GetTick>
 8003fac:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fae:	4b60      	ldr	r3, [pc, #384]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003fb6:	d006      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003fb8:	f7fd ffe2 	bl	8001f80 <HAL_GetTick>
 8003fbc:	1b43      	subs	r3, r0, r5
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d9f5      	bls.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xf6>
        return HAL_TIMEOUT;
 8003fc2:	2003      	movs	r0, #3
 8003fc4:	e792      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	f013 0f04 	tst.w	r3, #4
 8003fcc:	d016      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x144>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fce:	4a58      	ldr	r2, [pc, #352]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003fd0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fd4:	6920      	ldr	r0, [r4, #16]
 8003fd6:	6963      	ldr	r3, [r4, #20]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003fde:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fe8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003fec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003ff0:	6a21      	ldr	r1, [r4, #32]
 8003ff2:	3901      	subs	r1, #1
 8003ff4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ff8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	f013 0f08 	tst.w	r3, #8
 8004002:	d014      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004004:	4a4a      	ldr	r2, [pc, #296]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004006:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800400a:	6921      	ldr	r1, [r4, #16]
 800400c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004010:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004014:	69a1      	ldr	r1, [r4, #24]
 8004016:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800401a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800401e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004022:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004026:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004028:	430b      	orrs	r3, r1
 800402a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800402e:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004034:	f7fd ffa4 	bl	8001f80 <HAL_GetTick>
 8004038:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800403a:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004042:	f47f af44 	bne.w	8003ece <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004046:	f7fd ff9b 	bl	8001f80 <HAL_GetTick>
 800404a:	1b40      	subs	r0, r0, r5
 800404c:	2802      	cmp	r0, #2
 800404e:	d9f4      	bls.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x182>
        return HAL_TIMEOUT;
 8004050:	2003      	movs	r0, #3
 8004052:	e74b      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004054:	2300      	movs	r3, #0
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	4b35      	ldr	r3, [pc, #212]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800405a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800406c:	4a32      	ldr	r2, [pc, #200]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004074:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004076:	f7fd ff83 	bl	8001f80 <HAL_GetTick>
 800407a:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004084:	d106      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004086:	f7fd ff7b 	bl	8001f80 <HAL_GetTick>
 800408a:	1b40      	subs	r0, r0, r5
 800408c:	2802      	cmp	r0, #2
 800408e:	d9f5      	bls.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        return HAL_TIMEOUT;
 8004090:	2003      	movs	r0, #3
 8004092:	e72b      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004094:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004098:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800409c:	d012      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800409e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d00d      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80040aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80040b0:	4922      	ldr	r1, [pc, #136]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040b2:	2001      	movs	r0, #1
 80040b4:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	2000      	movs	r0, #0
 80040b8:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 80040ba:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f013 0f01 	tst.w	r3, #1
 80040c2:	d112      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80040ca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80040ce:	d01d      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80040d0:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80040d2:	6893      	ldr	r3, [r2, #8]
 80040d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040d8:	6093      	str	r3, [r2, #8]
 80040da:	4915      	ldr	r1, [pc, #84]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80040dc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80040de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80040e4:	4313      	orrs	r3, r2
 80040e6:	670b      	str	r3, [r1, #112]	; 0x70
 80040e8:	e6f6      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 80040ea:	f7fd ff49 	bl	8001f80 <HAL_GetTick>
 80040ee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	f013 0f02 	tst.w	r3, #2
 80040f8:	d1e4      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fd ff41 	bl	8001f80 <HAL_GetTick>
 80040fe:	1b40      	subs	r0, r0, r5
 8004100:	f241 3388 	movw	r3, #5000	; 0x1388
 8004104:	4298      	cmp	r0, r3
 8004106:	d9f3      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
            return HAL_TIMEOUT;
 8004108:	2003      	movs	r0, #3
 800410a:	e6ef      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410c:	4908      	ldr	r1, [pc, #32]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800410e:	688a      	ldr	r2, [r1, #8]
 8004110:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004114:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]
 8004120:	e7db      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x222>
  return HAL_OK;
 8004122:	2000      	movs	r0, #0
 8004124:	e6e2      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004126:	bf00      	nop
 8004128:	424711e0 	.word	0x424711e0
 800412c:	42470068 	.word	0x42470068
 8004130:	40023800 	.word	0x40023800
 8004134:	42470070 	.word	0x42470070
 8004138:	40007000 	.word	0x40007000
 800413c:	42470e40 	.word	0x42470e40

08004140 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004140:	b1e0      	cbz	r0, 800417c <HAL_SDRAM_Init+0x3c>
{   
 8004142:	b538      	push	{r3, r4, r5, lr}
 8004144:	460d      	mov	r5, r1
 8004146:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004148:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800414c:	b18b      	cbz	r3, 8004172 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800414e:	2302      	movs	r3, #2
 8004150:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004154:	4621      	mov	r1, r4
 8004156:	f851 0b04 	ldr.w	r0, [r1], #4
 800415a:	f000 ff98 	bl	800508e <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800415e:	6862      	ldr	r2, [r4, #4]
 8004160:	4629      	mov	r1, r5
 8004162:	6820      	ldr	r0, [r4, #0]
 8004164:	f000 ffcf 	bl	8005106 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004168:	2301      	movs	r3, #1
 800416a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 800416e:	2000      	movs	r0, #0
}
 8004170:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8004172:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004176:	f7fd fe1d 	bl	8001db4 <HAL_SDRAM_MspInit>
 800417a:	e7e8      	b.n	800414e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800417c:	2001      	movs	r0, #1
}
 800417e:	4770      	bx	lr

08004180 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004184:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004188:	b2c0      	uxtb	r0, r0
 800418a:	2802      	cmp	r0, #2
 800418c:	d00d      	beq.n	80041aa <HAL_SDRAM_SendCommand+0x2a>
 800418e:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004190:	2302      	movs	r3, #2
 8004192:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	f001 f800 	bl	800519c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d004      	beq.n	80041ac <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80041a8:	2000      	movs	r0, #0
}
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80041ac:	2305      	movs	r3, #5
 80041ae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 80041b2:	2000      	movs	r0, #0
 80041b4:	e7f9      	b.n	80041aa <HAL_SDRAM_SendCommand+0x2a>

080041b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80041b6:	b510      	push	{r4, lr}
 80041b8:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80041ba:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80041be:	b2c0      	uxtb	r0, r0
 80041c0:	2802      	cmp	r0, #2
 80041c2:	d009      	beq.n	80041d8 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	f001 f80e 	bl	80051ec <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80041d6:	2000      	movs	r0, #0
}
 80041d8:	bd10      	pop	{r4, pc}
	...

080041dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	4605      	mov	r5, r0
 80041e4:	4688      	mov	r8, r1
 80041e6:	4617      	mov	r7, r2
 80041e8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041ea:	f7fd fec9 	bl	8001f80 <HAL_GetTick>
 80041ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041f0:	1a1b      	subs	r3, r3, r0
 80041f2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80041f6:	f7fd fec3 	bl	8001f80 <HAL_GetTick>
 80041fa:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041fc:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004204:	fb09 f303 	mul.w	r3, r9, r3
 8004208:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	689c      	ldr	r4, [r3, #8]
 800420e:	ea38 0304 	bics.w	r3, r8, r4
 8004212:	bf0c      	ite	eq
 8004214:	2401      	moveq	r4, #1
 8004216:	2400      	movne	r4, #0
 8004218:	42bc      	cmp	r4, r7
 800421a:	d040      	beq.n	800429e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800421c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004220:	d0f3      	beq.n	800420a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004222:	f7fd fead 	bl	8001f80 <HAL_GetTick>
 8004226:	eba0 000a 	sub.w	r0, r0, sl
 800422a:	4548      	cmp	r0, r9
 800422c:	d20a      	bcs.n	8004244 <SPI_WaitFlagStateUntilTimeout+0x68>
 800422e:	f1b9 0f00 	cmp.w	r9, #0
 8004232:	d007      	beq.n	8004244 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004234:	9a01      	ldr	r2, [sp, #4]
 8004236:	b102      	cbz	r2, 800423a <SPI_WaitFlagStateUntilTimeout+0x5e>
 8004238:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800423a:	9b01      	ldr	r3, [sp, #4]
 800423c:	3b01      	subs	r3, #1
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	4691      	mov	r9, r2
 8004242:	e7e2      	b.n	800420a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004244:	682a      	ldr	r2, [r5, #0]
 8004246:	6853      	ldr	r3, [r2, #4]
 8004248:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800424c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424e:	686b      	ldr	r3, [r5, #4]
 8004250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004254:	d00b      	beq.n	800426e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004256:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425c:	d014      	beq.n	8004288 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800425e:	2301      	movs	r3, #1
 8004260:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004264:	2300      	movs	r3, #0
 8004266:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 800426a:	2003      	movs	r0, #3
 800426c:	e018      	b.n	80042a0 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426e:	68ab      	ldr	r3, [r5, #8]
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004274:	d002      	beq.n	800427c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d1ec      	bne.n	8004256 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800427c:	682a      	ldr	r2, [r5, #0]
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e7e6      	b.n	8004256 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004288:	682a      	ldr	r2, [r5, #0]
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	682a      	ldr	r2, [r5, #0]
 8004294:	6813      	ldr	r3, [r2, #0]
 8004296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	e7df      	b.n	800425e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800429e:	2000      	movs	r0, #0
}
 80042a0:	b002      	add	sp, #8
 80042a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a6:	bf00      	nop
 80042a8:	20000050 	.word	0x20000050

080042ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b530      	push	{r4, r5, lr}
 80042ae:	b085      	sub	sp, #20
 80042b0:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042b2:	4b16      	ldr	r3, [pc, #88]	; (800430c <SPI_EndRxTxTransaction+0x60>)
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	4b16      	ldr	r3, [pc, #88]	; (8004310 <SPI_EndRxTxTransaction+0x64>)
 80042b8:	fba3 3000 	umull	r3, r0, r3, r0
 80042bc:	0d40      	lsrs	r0, r0, #21
 80042be:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80042c2:	fb05 f000 	mul.w	r0, r5, r0
 80042c6:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ce:	d00b      	beq.n	80042e8 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042d0:	9b03      	ldr	r3, [sp, #12]
 80042d2:	b1bb      	cbz	r3, 8004304 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042e2:	d1f5      	bne.n	80042d0 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 80042e4:	2000      	movs	r0, #0
 80042e6:	e00e      	b.n	8004306 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042e8:	9200      	str	r2, [sp, #0]
 80042ea:	460b      	mov	r3, r1
 80042ec:	2200      	movs	r2, #0
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7ff ff73 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 80042f6:	b130      	cbz	r0, 8004306 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042fa:	f043 0320 	orr.w	r3, r3, #32
 80042fe:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004300:	2003      	movs	r0, #3
 8004302:	e000      	b.n	8004306 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004304:	2000      	movs	r0, #0
}
 8004306:	b005      	add	sp, #20
 8004308:	bd30      	pop	{r4, r5, pc}
 800430a:	bf00      	nop
 800430c:	20000050 	.word	0x20000050
 8004310:	165e9f81 	.word	0x165e9f81

08004314 <SPI_EndRxTransaction>:
{
 8004314:	b510      	push	{r4, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	4604      	mov	r4, r0
 800431a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431c:	6841      	ldr	r1, [r0, #4]
 800431e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004322:	d014      	beq.n	800434e <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004324:	6861      	ldr	r1, [r4, #4]
 8004326:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800432a:	d12a      	bne.n	8004382 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800432c:	68a1      	ldr	r1, [r4, #8]
 800432e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004332:	d019      	beq.n	8004368 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004334:	9200      	str	r2, [sp, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	2180      	movs	r1, #128	; 0x80
 800433a:	4620      	mov	r0, r4
 800433c:	f7ff ff4e 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004340:	b330      	cbz	r0, 8004390 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004342:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004344:	f043 0320 	orr.w	r3, r3, #32
 8004348:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800434a:	2003      	movs	r0, #3
 800434c:	e020      	b.n	8004390 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800434e:	6881      	ldr	r1, [r0, #8]
 8004350:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004354:	d002      	beq.n	800435c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004356:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800435a:	d1e3      	bne.n	8004324 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 800435c:	6820      	ldr	r0, [r4, #0]
 800435e:	6801      	ldr	r1, [r0, #0]
 8004360:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004364:	6001      	str	r1, [r0, #0]
 8004366:	e7dd      	b.n	8004324 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004368:	9200      	str	r2, [sp, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	2101      	movs	r1, #1
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff ff34 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004374:	b160      	cbz	r0, 8004390 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004376:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004378:	f043 0320 	orr.w	r3, r3, #32
 800437c:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800437e:	2003      	movs	r0, #3
 8004380:	e006      	b.n	8004390 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004382:	9200      	str	r2, [sp, #0]
 8004384:	2200      	movs	r2, #0
 8004386:	2101      	movs	r1, #1
 8004388:	4620      	mov	r0, r4
 800438a:	f7ff ff27 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 800438e:	b908      	cbnz	r0, 8004394 <SPI_EndRxTransaction+0x80>
}
 8004390:	b002      	add	sp, #8
 8004392:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004394:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004396:	f043 0320 	orr.w	r3, r3, #32
 800439a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800439c:	2003      	movs	r0, #3
 800439e:	e7f7      	b.n	8004390 <SPI_EndRxTransaction+0x7c>

080043a0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d05a      	beq.n	800445a <HAL_SPI_Init+0xba>
{
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043aa:	b933      	cbnz	r3, 80043ba <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ac:	6843      	ldr	r3, [r0, #4]
 80043ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b2:	d005      	beq.n	80043c0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61c3      	str	r3, [r0, #28]
 80043b8:	e002      	b.n	80043c0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ba:	2300      	movs	r3, #0
 80043bc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043be:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80043c4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d040      	beq.n	800444e <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80043cc:	2302      	movs	r3, #2
 80043ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043da:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043dc:	6863      	ldr	r3, [r4, #4]
 80043de:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80043e2:	68a2      	ldr	r2, [r4, #8]
 80043e4:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80043e8:	4313      	orrs	r3, r2
 80043ea:	68e2      	ldr	r2, [r4, #12]
 80043ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043f0:	4313      	orrs	r3, r2
 80043f2:	6922      	ldr	r2, [r4, #16]
 80043f4:	f002 0202 	and.w	r2, r2, #2
 80043f8:	4313      	orrs	r3, r2
 80043fa:	6962      	ldr	r2, [r4, #20]
 80043fc:	f002 0201 	and.w	r2, r2, #1
 8004400:	4313      	orrs	r3, r2
 8004402:	69a2      	ldr	r2, [r4, #24]
 8004404:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004408:	4313      	orrs	r3, r2
 800440a:	69e2      	ldr	r2, [r4, #28]
 800440c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004410:	4313      	orrs	r3, r2
 8004412:	6a22      	ldr	r2, [r4, #32]
 8004414:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004418:	4313      	orrs	r3, r2
 800441a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800441c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004420:	6821      	ldr	r1, [r4, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004426:	8b63      	ldrh	r3, [r4, #26]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800442e:	f002 0210 	and.w	r2, r2, #16
 8004432:	6821      	ldr	r1, [r4, #0]
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	69d3      	ldr	r3, [r2, #28]
 800443c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004440:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004442:	2000      	movs	r0, #0
 8004444:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004446:	2301      	movs	r3, #1
 8004448:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800444c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800444e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004452:	4620      	mov	r0, r4
 8004454:	f7fd fbc0 	bl	8001bd8 <HAL_SPI_MspInit>
 8004458:	e7b8      	b.n	80043cc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800445a:	2001      	movs	r0, #1
}
 800445c:	4770      	bx	lr

0800445e <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800445e:	b190      	cbz	r0, 8004486 <HAL_SPI_DeInit+0x28>
{
 8004460:	b510      	push	{r4, lr}
 8004462:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800446a:	6802      	ldr	r2, [r0, #0]
 800446c:	6813      	ldr	r3, [r2, #0]
 800446e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004472:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004474:	f7fd fbe8 	bl	8001c48 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004478:	2000      	movs	r0, #0
 800447a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800447c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004480:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 8004484:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004486:	2001      	movs	r0, #1
}
 8004488:	4770      	bx	lr

0800448a <HAL_SPI_Transmit>:
{
 800448a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800448e:	b083      	sub	sp, #12
 8004490:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004492:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004496:	2b01      	cmp	r3, #1
 8004498:	f000 80cc 	beq.w	8004634 <HAL_SPI_Transmit+0x1aa>
 800449c:	4604      	mov	r4, r0
 800449e:	4688      	mov	r8, r1
 80044a0:	4691      	mov	r9, r2
 80044a2:	2301      	movs	r3, #1
 80044a4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80044a8:	f7fd fd6a 	bl	8001f80 <HAL_GetTick>
 80044ac:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80044ae:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80044b2:	b2f6      	uxtb	r6, r6
 80044b4:	2e01      	cmp	r6, #1
 80044b6:	f040 80aa 	bne.w	800460e <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80044ba:	f1b8 0f00 	cmp.w	r8, #0
 80044be:	f000 80a7 	beq.w	8004610 <HAL_SPI_Transmit+0x186>
 80044c2:	f1b9 0f00 	cmp.w	r9, #0
 80044c6:	f000 80a3 	beq.w	8004610 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ca:	2303      	movs	r3, #3
 80044cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044d4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044d8:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044dc:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044e0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044e2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80044e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80044e6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80044e8:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ea:	68a3      	ldr	r3, [r4, #8]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f0:	d01e      	beq.n	8004530 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044fa:	d103      	bne.n	8004504 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004502:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004504:	68e3      	ldr	r3, [r4, #12]
 8004506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800450a:	d01c      	beq.n	8004546 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800450c:	6863      	ldr	r3, [r4, #4]
 800450e:	b113      	cbz	r3, 8004516 <HAL_SPI_Transmit+0x8c>
 8004510:	f1b9 0f01 	cmp.w	r9, #1
 8004514:	d152      	bne.n	80045bc <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004516:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800451e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004520:	3301      	adds	r3, #1
 8004522:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004524:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29b      	uxth	r3, r3
 800452c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800452e:	e045      	b.n	80045bc <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8004530:	6822      	ldr	r2, [r4, #0]
 8004532:	6813      	ldr	r3, [r2, #0]
 8004534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004538:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	6813      	ldr	r3, [r2, #0]
 800453e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e7d5      	b.n	80044f2 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004546:	6863      	ldr	r3, [r4, #4]
 8004548:	b113      	cbz	r3, 8004550 <HAL_SPI_Transmit+0xc6>
 800454a:	f1b9 0f01 	cmp.w	r9, #1
 800454e:	d116      	bne.n	800457e <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004550:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	8812      	ldrh	r2, [r2, #0]
 8004556:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004558:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800455a:	3302      	adds	r3, #2
 800455c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800455e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29b      	uxth	r3, r3
 8004566:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004568:	e009      	b.n	800457e <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800456a:	f7fd fd09 	bl	8001f80 <HAL_GetTick>
 800456e:	1bc0      	subs	r0, r0, r7
 8004570:	42a8      	cmp	r0, r5
 8004572:	d302      	bcc.n	800457a <HAL_SPI_Transmit+0xf0>
 8004574:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004578:	d154      	bne.n	8004624 <HAL_SPI_Transmit+0x19a>
 800457a:	2d00      	cmp	r5, #0
 800457c:	d054      	beq.n	8004628 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 800457e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d02e      	beq.n	80045e4 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	f012 0f02 	tst.w	r2, #2
 800458e:	d0ec      	beq.n	800456a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004590:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004592:	8812      	ldrh	r2, [r2, #0]
 8004594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004598:	3302      	adds	r3, #2
 800459a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800459c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80045a6:	e7ea      	b.n	800457e <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a8:	f7fd fcea 	bl	8001f80 <HAL_GetTick>
 80045ac:	1bc0      	subs	r0, r0, r7
 80045ae:	42a8      	cmp	r0, r5
 80045b0:	d302      	bcc.n	80045b8 <HAL_SPI_Transmit+0x12e>
 80045b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80045b6:	d139      	bne.n	800462c <HAL_SPI_Transmit+0x1a2>
 80045b8:	2d00      	cmp	r5, #0
 80045ba:	d039      	beq.n	8004630 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 80045bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045be:	b29b      	uxth	r3, r3
 80045c0:	b183      	cbz	r3, 80045e4 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	f012 0f02 	tst.w	r2, #2
 80045ca:	d0ed      	beq.n	80045a8 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80045ce:	7812      	ldrb	r2, [r2, #0]
 80045d0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045d4:	3301      	adds	r3, #1
 80045d6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80045d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80045da:	b292      	uxth	r2, r2
 80045dc:	3a01      	subs	r2, #1
 80045de:	b292      	uxth	r2, r2
 80045e0:	86e2      	strh	r2, [r4, #54]	; 0x36
 80045e2:	e7eb      	b.n	80045bc <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045e4:	463a      	mov	r2, r7
 80045e6:	4629      	mov	r1, r5
 80045e8:	4620      	mov	r0, r4
 80045ea:	f7ff fe5f 	bl	80042ac <SPI_EndRxTxTransaction>
 80045ee:	b108      	cbz	r0, 80045f4 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045f0:	2320      	movs	r3, #32
 80045f2:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045f4:	68a3      	ldr	r3, [r4, #8]
 80045f6:	b933      	cbnz	r3, 8004606 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	9201      	str	r2, [sp, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004606:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004608:	b913      	cbnz	r3, 8004610 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800460a:	2600      	movs	r6, #0
 800460c:	e000      	b.n	8004610 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 800460e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004610:	2301      	movs	r3, #1
 8004612:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004616:	2300      	movs	r3, #0
 8004618:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800461c:	4630      	mov	r0, r6
 800461e:	b003      	add	sp, #12
 8004620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8004624:	2603      	movs	r6, #3
 8004626:	e7f3      	b.n	8004610 <HAL_SPI_Transmit+0x186>
 8004628:	2603      	movs	r6, #3
 800462a:	e7f1      	b.n	8004610 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 800462c:	2603      	movs	r6, #3
 800462e:	e7ef      	b.n	8004610 <HAL_SPI_Transmit+0x186>
 8004630:	2603      	movs	r6, #3
 8004632:	e7ed      	b.n	8004610 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 8004634:	2602      	movs	r6, #2
 8004636:	e7f1      	b.n	800461c <HAL_SPI_Transmit+0x192>

08004638 <HAL_SPI_TransmitReceive>:
{
 8004638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800463c:	b083      	sub	sp, #12
 800463e:	461f      	mov	r7, r3
 8004640:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004642:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004646:	2b01      	cmp	r3, #1
 8004648:	f000 8110 	beq.w	800486c <HAL_SPI_TransmitReceive+0x234>
 800464c:	4604      	mov	r4, r0
 800464e:	4688      	mov	r8, r1
 8004650:	4691      	mov	r9, r2
 8004652:	2301      	movs	r3, #1
 8004654:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004658:	f7fd fc92 	bl	8001f80 <HAL_GetTick>
 800465c:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800465e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004662:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004664:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004666:	2b01      	cmp	r3, #1
 8004668:	d00a      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x48>
 800466a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800466e:	f040 80e3 	bne.w	8004838 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004672:	68a2      	ldr	r2, [r4, #8]
 8004674:	2a00      	cmp	r2, #0
 8004676:	f040 80e9 	bne.w	800484c <HAL_SPI_TransmitReceive+0x214>
 800467a:	2b04      	cmp	r3, #4
 800467c:	f040 80e8 	bne.w	8004850 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004680:	f1b8 0f00 	cmp.w	r8, #0
 8004684:	f000 80e6 	beq.w	8004854 <HAL_SPI_TransmitReceive+0x21c>
 8004688:	f1b9 0f00 	cmp.w	r9, #0
 800468c:	f000 80e4 	beq.w	8004858 <HAL_SPI_TransmitReceive+0x220>
 8004690:	2f00      	cmp	r7, #0
 8004692:	f000 80e3 	beq.w	800485c <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004696:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b04      	cmp	r3, #4
 800469e:	d002      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046a0:	2305      	movs	r3, #5
 80046a2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046aa:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046ae:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046b0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046b2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046b6:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046b8:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80046ba:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046bc:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046c6:	d103      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ce:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046d0:	68e3      	ldr	r3, [r4, #12]
 80046d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d6:	d011      	beq.n	80046fc <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	b10b      	cbz	r3, 80046e0 <HAL_SPI_TransmitReceive+0xa8>
 80046dc:	2f01      	cmp	r7, #1
 80046de:	d10b      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046ea:	3301      	adds	r3, #1
 80046ec:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80046ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80046f8:	2701      	movs	r7, #1
 80046fa:	e06b      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	b10b      	cbz	r3, 8004704 <HAL_SPI_TransmitReceive+0xcc>
 8004700:	2f01      	cmp	r7, #1
 8004702:	d10b      	bne.n	800471c <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004704:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	8812      	ldrh	r2, [r2, #0]
 800470a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800470c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800470e:	3302      	adds	r3, #2
 8004710:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004712:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29b      	uxth	r3, r3
 800471a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800471c:	2701      	movs	r7, #1
 800471e:	e01c      	b.n	800475a <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	f012 0f01 	tst.w	r2, #1
 8004728:	d00e      	beq.n	8004748 <HAL_SPI_TransmitReceive+0x110>
 800472a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800472c:	b292      	uxth	r2, r2
 800472e:	b15a      	cbz	r2, 8004748 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004734:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004738:	3302      	adds	r3, #2
 800473a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800473c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29b      	uxth	r3, r3
 8004744:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004746:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004748:	f7fd fc1a 	bl	8001f80 <HAL_GetTick>
 800474c:	1b80      	subs	r0, r0, r6
 800474e:	42a8      	cmp	r0, r5
 8004750:	d303      	bcc.n	800475a <HAL_SPI_TransmitReceive+0x122>
 8004752:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004756:	f040 8083 	bne.w	8004860 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800475c:	b29b      	uxth	r3, r3
 800475e:	b91b      	cbnz	r3, 8004768 <HAL_SPI_TransmitReceive+0x130>
 8004760:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d053      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	f012 0f02 	tst.w	r2, #2
 8004770:	d0d6      	beq.n	8004720 <HAL_SPI_TransmitReceive+0xe8>
 8004772:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004774:	b292      	uxth	r2, r2
 8004776:	2a00      	cmp	r2, #0
 8004778:	d0d2      	beq.n	8004720 <HAL_SPI_TransmitReceive+0xe8>
 800477a:	2f00      	cmp	r7, #0
 800477c:	d0d0      	beq.n	8004720 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004780:	8812      	ldrh	r2, [r2, #0]
 8004782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004786:	3302      	adds	r3, #2
 8004788:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800478a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29b      	uxth	r3, r3
 8004792:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004794:	2700      	movs	r7, #0
 8004796:	e7c3      	b.n	8004720 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	f012 0f01 	tst.w	r2, #1
 80047a0:	d00e      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x188>
 80047a2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80047a4:	b292      	uxth	r2, r2
 80047a6:	b15a      	cbz	r2, 80047c0 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047b0:	3301      	adds	r3, #1
 80047b2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80047b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80047be:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047c0:	f7fd fbde 	bl	8001f80 <HAL_GetTick>
 80047c4:	1b83      	subs	r3, r0, r6
 80047c6:	42ab      	cmp	r3, r5
 80047c8:	d302      	bcc.n	80047d0 <HAL_SPI_TransmitReceive+0x198>
 80047ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 80047ce:	d149      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x22c>
 80047d0:	2d00      	cmp	r5, #0
 80047d2:	d049      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	b913      	cbnz	r3, 80047e0 <HAL_SPI_TransmitReceive+0x1a8>
 80047da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	b1bb      	cbz	r3, 8004810 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	f012 0f02 	tst.w	r2, #2
 80047e8:	d0d6      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x160>
 80047ea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80047ec:	b292      	uxth	r2, r2
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	d0d2      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x160>
 80047f2:	2f00      	cmp	r7, #0
 80047f4:	d0d0      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047f8:	7812      	ldrb	r2, [r2, #0]
 80047fa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80047fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047fe:	3301      	adds	r3, #1
 8004800:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004802:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800480c:	2700      	movs	r7, #0
 800480e:	e7c3      	b.n	8004798 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004810:	4632      	mov	r2, r6
 8004812:	4629      	mov	r1, r5
 8004814:	4620      	mov	r0, r4
 8004816:	f7ff fd49 	bl	80042ac <SPI_EndRxTxTransaction>
 800481a:	b948      	cbnz	r0, 8004830 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800481c:	68a3      	ldr	r3, [r4, #8]
 800481e:	b963      	cbnz	r3, 800483a <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	9201      	str	r2, [sp, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	9b01      	ldr	r3, [sp, #4]
 800482e:	e004      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004830:	2320      	movs	r3, #32
 8004832:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004834:	2001      	movs	r0, #1
    goto error;
 8004836:	e000      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8004838:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800483a:	2301      	movs	r3, #1
 800483c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004840:	2300      	movs	r3, #0
 8004842:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004846:	b003      	add	sp, #12
 8004848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800484c:	2002      	movs	r0, #2
 800484e:	e7f4      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
 8004850:	2002      	movs	r0, #2
 8004852:	e7f2      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8004854:	2001      	movs	r0, #1
 8004856:	e7f0      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
 8004858:	2001      	movs	r0, #1
 800485a:	e7ee      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
 800485c:	2001      	movs	r0, #1
 800485e:	e7ec      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8004860:	2003      	movs	r0, #3
 8004862:	e7ea      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8004864:	2003      	movs	r0, #3
 8004866:	e7e8      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
 8004868:	2003      	movs	r0, #3
 800486a:	e7e6      	b.n	800483a <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 800486c:	2002      	movs	r0, #2
 800486e:	e7ea      	b.n	8004846 <HAL_SPI_TransmitReceive+0x20e>

08004870 <HAL_SPI_Receive>:
{
 8004870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004874:	b083      	sub	sp, #12
 8004876:	4604      	mov	r4, r0
 8004878:	4688      	mov	r8, r1
 800487a:	4691      	mov	r9, r2
 800487c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800487e:	6843      	ldr	r3, [r0, #4]
 8004880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004884:	d038      	beq.n	80048f8 <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8004886:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800488a:	2b01      	cmp	r3, #1
 800488c:	f000 80a8 	beq.w	80049e0 <HAL_SPI_Receive+0x170>
 8004890:	2301      	movs	r3, #1
 8004892:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004896:	f7fd fb73 	bl	8001f80 <HAL_GetTick>
 800489a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800489c:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80048a0:	b2f6      	uxtb	r6, r6
 80048a2:	2e01      	cmp	r6, #1
 80048a4:	f040 8089 	bne.w	80049ba <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80048a8:	f1b8 0f00 	cmp.w	r8, #0
 80048ac:	f000 8086 	beq.w	80049bc <HAL_SPI_Receive+0x14c>
 80048b0:	f1b9 0f00 	cmp.w	r9, #0
 80048b4:	f000 8082 	beq.w	80049bc <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048b8:	2304      	movs	r3, #4
 80048ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048be:	2300      	movs	r3, #0
 80048c0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048c2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048c6:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048ca:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048ce:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048d0:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048d2:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048d4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048d6:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048de:	d018      	beq.n	8004912 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80048e8:	d103      	bne.n	80048f2 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	b313      	cbz	r3, 800493c <HAL_SPI_Receive+0xcc>
 80048f6:	e040      	b.n	800497a <HAL_SPI_Receive+0x10a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048f8:	6883      	ldr	r3, [r0, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1c3      	bne.n	8004886 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048fe:	2304      	movs	r3, #4
 8004900:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004904:	9500      	str	r5, [sp, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	460a      	mov	r2, r1
 800490a:	f7ff fe95 	bl	8004638 <HAL_SPI_TransmitReceive>
 800490e:	4606      	mov	r6, r0
 8004910:	e05a      	b.n	80049c8 <HAL_SPI_Receive+0x158>
    __HAL_SPI_DISABLE(hspi);
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	6813      	ldr	r3, [r2, #0]
 8004916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e7db      	b.n	80048e0 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004928:	f7fd fb2a 	bl	8001f80 <HAL_GetTick>
 800492c:	1bc0      	subs	r0, r0, r7
 800492e:	42a8      	cmp	r0, r5
 8004930:	d302      	bcc.n	8004938 <HAL_SPI_Receive+0xc8>
 8004932:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004936:	d14b      	bne.n	80049d0 <HAL_SPI_Receive+0x160>
 8004938:	2d00      	cmp	r5, #0
 800493a:	d04b      	beq.n	80049d4 <HAL_SPI_Receive+0x164>
    while (hspi->RxXferCount > 0U)
 800493c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02e      	beq.n	80049a2 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	f012 0f01 	tst.w	r2, #1
 800494c:	d0ec      	beq.n	8004928 <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800494e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004950:	7b1b      	ldrb	r3, [r3, #12]
 8004952:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004956:	3301      	adds	r3, #1
 8004958:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800495a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29b      	uxth	r3, r3
 8004962:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004964:	e7ea      	b.n	800493c <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004966:	f7fd fb0b 	bl	8001f80 <HAL_GetTick>
 800496a:	1bc0      	subs	r0, r0, r7
 800496c:	42a8      	cmp	r0, r5
 800496e:	d302      	bcc.n	8004976 <HAL_SPI_Receive+0x106>
 8004970:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004974:	d130      	bne.n	80049d8 <HAL_SPI_Receive+0x168>
 8004976:	2d00      	cmp	r5, #0
 8004978:	d030      	beq.n	80049dc <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 800497a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800497c:	b29b      	uxth	r3, r3
 800497e:	b183      	cbz	r3, 80049a2 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	f012 0f01 	tst.w	r2, #1
 8004988:	d0ed      	beq.n	8004966 <HAL_SPI_Receive+0xf6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800498e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004992:	3302      	adds	r3, #2
 8004994:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004996:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004998:	b292      	uxth	r2, r2
 800499a:	3a01      	subs	r2, #1
 800499c:	b292      	uxth	r2, r2
 800499e:	87e2      	strh	r2, [r4, #62]	; 0x3e
 80049a0:	e7eb      	b.n	800497a <HAL_SPI_Receive+0x10a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049a2:	463a      	mov	r2, r7
 80049a4:	4629      	mov	r1, r5
 80049a6:	4620      	mov	r0, r4
 80049a8:	f7ff fcb4 	bl	8004314 <SPI_EndRxTransaction>
 80049ac:	b108      	cbz	r0, 80049b2 <HAL_SPI_Receive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ae:	2320      	movs	r3, #32
 80049b0:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80049b4:	b913      	cbnz	r3, 80049bc <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049b6:	2600      	movs	r6, #0
 80049b8:	e000      	b.n	80049bc <HAL_SPI_Receive+0x14c>
    errorcode = HAL_BUSY;
 80049ba:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80049bc:	2301      	movs	r3, #1
 80049be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049c2:	2300      	movs	r3, #0
 80049c4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80049c8:	4630      	mov	r0, r6
 80049ca:	b003      	add	sp, #12
 80049cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80049d0:	2603      	movs	r6, #3
 80049d2:	e7f3      	b.n	80049bc <HAL_SPI_Receive+0x14c>
 80049d4:	2603      	movs	r6, #3
 80049d6:	e7f1      	b.n	80049bc <HAL_SPI_Receive+0x14c>
          errorcode = HAL_TIMEOUT;
 80049d8:	2603      	movs	r6, #3
 80049da:	e7ef      	b.n	80049bc <HAL_SPI_Receive+0x14c>
 80049dc:	2603      	movs	r6, #3
 80049de:	e7ed      	b.n	80049bc <HAL_SPI_Receive+0x14c>
  __HAL_LOCK(hspi);
 80049e0:	2602      	movs	r6, #2
 80049e2:	e7f1      	b.n	80049c8 <HAL_SPI_Receive+0x158>

080049e4 <HAL_SPI_GetState>:
  return hspi->State;
 80049e4:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80049e8:	4770      	bx	lr

080049ea <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ea:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049ec:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ee:	6a05      	ldr	r5, [r0, #32]
 80049f0:	f025 0501 	bic.w	r5, r5, #1
 80049f4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f6:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f8:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049fc:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a00:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004a04:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a06:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a08:	6203      	str	r3, [r0, #32]
}
 8004a0a:	bc30      	pop	{r4, r5}
 8004a0c:	4770      	bx	lr

08004a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0e:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a10:	6a05      	ldr	r5, [r0, #32]
 8004a12:	f025 0510 	bic.w	r5, r5, #16
 8004a16:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a18:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004a1a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a20:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a28:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a2c:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a2e:	6203      	str	r3, [r0, #32]
}
 8004a30:	bc30      	pop	{r4, r5}
 8004a32:	4770      	bx	lr

08004a34 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a34:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a40:	6083      	str	r3, [r0, #8]
}
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004a44:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d137      	bne.n	8004abe <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a54:	6802      	ldr	r2, [r0, #0]
 8004a56:	68d3      	ldr	r3, [r2, #12]
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	6803      	ldr	r3, [r0, #0]
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_TIM_Base_Start_IT+0x84>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d020      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x64>
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6a:	d01d      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x64>
 8004a6c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d019      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x64>
 8004a74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d015      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x64>
 8004a7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d011      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x64>
 8004a84:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x64>
 8004a8c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x64>
 8004a94:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d005      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aae:	2a06      	cmp	r2, #6
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004aba:	2000      	movs	r0, #0
 8004abc:	4770      	bx	lr
    return HAL_ERROR;
 8004abe:	2001      	movs	r0, #1
 8004ac0:	4770      	bx	lr
  return HAL_OK;
 8004ac2:	2000      	movs	r0, #0
}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000

08004acc <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004acc:	4770      	bx	lr

08004ace <HAL_TIM_IC_CaptureCallback>:
}
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_TriggerCallback>:
}
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIM_IRQHandler>:
{
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad8:	6803      	ldr	r3, [r0, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	f012 0f02 	tst.w	r2, #2
 8004ae0:	d011      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	f012 0f02 	tst.w	r2, #2
 8004ae8:	d00d      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aea:	f06f 0202 	mvn.w	r2, #2
 8004aee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af0:	2301      	movs	r3, #1
 8004af2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af4:	6803      	ldr	r3, [r0, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f013 0f03 	tst.w	r3, #3
 8004afc:	d070      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	f7ff ffe6 	bl	8004ace <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	2300      	movs	r3, #0
 8004b04:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	f012 0f04 	tst.w	r2, #4
 8004b0e:	d012      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	f012 0f04 	tst.w	r2, #4
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b18:	f06f 0204 	mvn.w	r2, #4
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b2a:	d05f      	beq.n	8004bec <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f7ff ffce 	bl	8004ace <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	2300      	movs	r3, #0
 8004b34:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	f012 0f08 	tst.w	r2, #8
 8004b3e:	d012      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	f012 0f08 	tst.w	r2, #8
 8004b46:	d00e      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b48:	f06f 0208 	mvn.w	r2, #8
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4e:	2304      	movs	r3, #4
 8004b50:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f013 0f03 	tst.w	r3, #3
 8004b5a:	d04e      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f7ff ffb6 	bl	8004ace <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b62:	2300      	movs	r3, #0
 8004b64:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	f012 0f10 	tst.w	r2, #16
 8004b6e:	d012      	beq.n	8004b96 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	f012 0f10 	tst.w	r2, #16
 8004b76:	d00e      	beq.n	8004b96 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b78:	f06f 0210 	mvn.w	r2, #16
 8004b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b7e:	2308      	movs	r3, #8
 8004b80:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b8a:	d03d      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7ff ff9e 	bl	8004ace <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	2300      	movs	r3, #0
 8004b94:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	f012 0f01 	tst.w	r2, #1
 8004b9e:	d003      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	f012 0f01 	tst.w	r2, #1
 8004ba6:	d136      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bb8:	d134      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004bc2:	d003      	beq.n	8004bcc <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004bca:	d132      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	f012 0f20 	tst.w	r2, #32
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	f012 0f20 	tst.w	r2, #32
 8004bdc:	d130      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x16c>
}
 8004bde:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be0:	f7ff ff74 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff ff73 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bea:	e78a      	b.n	8004b02 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff ff6d 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff ff6c 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bf8:	e79b      	b.n	8004b32 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7ff ff66 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	4620      	mov	r0, r4
 8004c02:	f7ff ff65 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c06:	e7ac      	b.n	8004b62 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7ff ff5f 	bl	8004acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f7ff ff5e 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c14:	e7bd      	b.n	8004b92 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c16:	f06f 0201 	mvn.w	r2, #1
 8004c1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7fc fbe5 	bl	80013ec <HAL_TIM_PeriodElapsedCallback>
 8004c22:	e7c1      	b.n	8004ba8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f000 f971 	bl	8004f12 <HAL_TIMEx_BreakCallback>
 8004c30:	e7c3      	b.n	8004bba <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c36:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f7ff ff4a 	bl	8004ad2 <HAL_TIM_TriggerCallback>
 8004c3e:	e7c5      	b.n	8004bcc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c40:	f06f 0220 	mvn.w	r2, #32
 8004c44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 f962 	bl	8004f10 <HAL_TIMEx_CommutCallback>
}
 8004c4c:	e7c7      	b.n	8004bde <HAL_TIM_IRQHandler+0x10a>
	...

08004c50 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004c50:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c52:	4a30      	ldr	r2, [pc, #192]	; (8004d14 <TIM_Base_SetConfig+0xc4>)
 8004c54:	4290      	cmp	r0, r2
 8004c56:	d012      	beq.n	8004c7e <TIM_Base_SetConfig+0x2e>
 8004c58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c5c:	d00f      	beq.n	8004c7e <TIM_Base_SetConfig+0x2e>
 8004c5e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004c62:	4290      	cmp	r0, r2
 8004c64:	d00b      	beq.n	8004c7e <TIM_Base_SetConfig+0x2e>
 8004c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c6a:	4290      	cmp	r0, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_Base_SetConfig+0x2e>
 8004c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c72:	4290      	cmp	r0, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_Base_SetConfig+0x2e>
 8004c76:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004c7a:	4290      	cmp	r0, r2
 8004c7c:	d103      	bne.n	8004c86 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c82:	684a      	ldr	r2, [r1, #4]
 8004c84:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c86:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <TIM_Base_SetConfig+0xc4>)
 8004c88:	4290      	cmp	r0, r2
 8004c8a:	d02a      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004c8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c90:	d027      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004c92:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004c96:	4290      	cmp	r0, r2
 8004c98:	d023      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c9e:	4290      	cmp	r0, r2
 8004ca0:	d01f      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ca6:	4290      	cmp	r0, r2
 8004ca8:	d01b      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004caa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004cae:	4290      	cmp	r0, r2
 8004cb0:	d017      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004cb2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004cb6:	4290      	cmp	r0, r2
 8004cb8:	d013      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cbe:	4290      	cmp	r0, r2
 8004cc0:	d00f      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cc6:	4290      	cmp	r0, r2
 8004cc8:	d00b      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004cca:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004cce:	4290      	cmp	r0, r2
 8004cd0:	d007      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cd6:	4290      	cmp	r0, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_Base_SetConfig+0x92>
 8004cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cde:	4290      	cmp	r0, r2
 8004ce0:	d103      	bne.n	8004cea <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce6:	68ca      	ldr	r2, [r1, #12]
 8004ce8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cee:	694a      	ldr	r2, [r1, #20]
 8004cf0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004cf2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf4:	688b      	ldr	r3, [r1, #8]
 8004cf6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004cf8:	680b      	ldr	r3, [r1, #0]
 8004cfa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <TIM_Base_SetConfig+0xc4>)
 8004cfe:	4298      	cmp	r0, r3
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0xba>
 8004d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d06:	4298      	cmp	r0, r3
 8004d08:	d101      	bne.n	8004d0e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0a:	690b      	ldr	r3, [r1, #16]
 8004d0c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	6143      	str	r3, [r0, #20]
}
 8004d12:	4770      	bx	lr
 8004d14:	40010000 	.word	0x40010000

08004d18 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004d18:	b340      	cbz	r0, 8004d6c <HAL_TIM_Base_Init+0x54>
{
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d22:	b1f3      	cbz	r3, 8004d62 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	2302      	movs	r3, #2
 8004d26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004d30:	f7ff ff8e 	bl	8004c50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004d3e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004d42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004d46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004d5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d5e:	2000      	movs	r0, #0
}
 8004d60:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d66:	f7fc ff87 	bl	8001c78 <HAL_TIM_Base_MspInit>
 8004d6a:	e7db      	b.n	8004d24 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004d6c:	2001      	movs	r0, #1
}
 8004d6e:	4770      	bx	lr

08004d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d70:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d72:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d78:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d80:	6082      	str	r2, [r0, #8]
}
 8004d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004d88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d078      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xfa>
{
 8004d90:	b510      	push	{r4, lr}
 8004d92:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004d94:	2301      	movs	r3, #1
 8004d96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	6802      	ldr	r2, [r0, #0]
 8004da2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004dac:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	2b60      	cmp	r3, #96	; 0x60
 8004db2:	d04c      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0xc6>
 8004db4:	d829      	bhi.n	8004e0a <HAL_TIM_ConfigClockSource+0x82>
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d054      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0xdc>
 8004dba:	d90c      	bls.n	8004dd6 <HAL_TIM_ConfigClockSource+0x4e>
 8004dbc:	2b50      	cmp	r3, #80	; 0x50
 8004dbe:	d122      	bne.n	8004e06 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc0:	68ca      	ldr	r2, [r1, #12]
 8004dc2:	6849      	ldr	r1, [r1, #4]
 8004dc4:	6800      	ldr	r0, [r0, #0]
 8004dc6:	f7ff fe10 	bl	80049ea <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dca:	2150      	movs	r1, #80	; 0x50
 8004dcc:	6820      	ldr	r0, [r4, #0]
 8004dce:	f7ff fe31 	bl	8004a34 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2000      	movs	r0, #0
      break;
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d00d      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x6e>
 8004dda:	d909      	bls.n	8004df0 <HAL_TIM_ConfigClockSource+0x68>
 8004ddc:	2b30      	cmp	r3, #48	; 0x30
 8004dde:	d00a      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8004de0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004de8:	2300      	movs	r3, #0
 8004dea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004dee:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004df0:	b10b      	cbz	r3, 8004df6 <HAL_TIM_ConfigClockSource+0x6e>
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d105      	bne.n	8004e02 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004df6:	4619      	mov	r1, r3
 8004df8:	6820      	ldr	r0, [r4, #0]
 8004dfa:	f7ff fe1b 	bl	8004a34 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	2000      	movs	r0, #0
      break;
 8004e00:	e7ef      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004e02:	2001      	movs	r0, #1
 8004e04:	e7ed      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
 8004e06:	2001      	movs	r0, #1
 8004e08:	e7eb      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d034      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xf2>
 8004e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e14:	d10c      	bne.n	8004e30 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8004e16:	68cb      	ldr	r3, [r1, #12]
 8004e18:	684a      	ldr	r2, [r1, #4]
 8004e1a:	6889      	ldr	r1, [r1, #8]
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	f7ff ffa7 	bl	8004d70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	6893      	ldr	r3, [r2, #8]
 8004e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e2a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2c:	2000      	movs	r0, #0
      break;
 8004e2e:	e7d8      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004e30:	2b70      	cmp	r3, #112	; 0x70
 8004e32:	d124      	bne.n	8004e7e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	68cb      	ldr	r3, [r1, #12]
 8004e36:	684a      	ldr	r2, [r1, #4]
 8004e38:	6889      	ldr	r1, [r1, #8]
 8004e3a:	6800      	ldr	r0, [r0, #0]
 8004e3c:	f7ff ff98 	bl	8004d70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e40:	6822      	ldr	r2, [r4, #0]
 8004e42:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004e48:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2000      	movs	r0, #0
      break;
 8004e4c:	e7c9      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4e:	68ca      	ldr	r2, [r1, #12]
 8004e50:	6849      	ldr	r1, [r1, #4]
 8004e52:	6800      	ldr	r0, [r0, #0]
 8004e54:	f7ff fddb 	bl	8004a0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e58:	2160      	movs	r1, #96	; 0x60
 8004e5a:	6820      	ldr	r0, [r4, #0]
 8004e5c:	f7ff fdea 	bl	8004a34 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004e60:	2000      	movs	r0, #0
      break;
 8004e62:	e7be      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e64:	68ca      	ldr	r2, [r1, #12]
 8004e66:	6849      	ldr	r1, [r1, #4]
 8004e68:	6800      	ldr	r0, [r0, #0]
 8004e6a:	f7ff fdbe 	bl	80049ea <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e6e:	2140      	movs	r1, #64	; 0x40
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	f7ff fddf 	bl	8004a34 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004e76:	2000      	movs	r0, #0
      break;
 8004e78:	e7b3      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e7b1      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7af      	b.n	8004de2 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004e82:	2002      	movs	r0, #2
}
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d03b      	beq.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8004e90:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004e92:	2301      	movs	r3, #1
 8004e94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e9e:	6803      	ldr	r3, [r0, #0]
 8004ea0:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea2:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea8:	680a      	ldr	r2, [r1, #0]
 8004eaa:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eae:	6803      	ldr	r3, [r0, #0]
 8004eb0:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01a      	beq.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eba:	d017      	beq.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004ebc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004ec4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00f      	beq.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004ed4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004edc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004ee4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d104      	bne.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eec:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef0:	684a      	ldr	r2, [r1, #4]
 8004ef2:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ef4:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efc:	2300      	movs	r3, #0
 8004efe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004f02:	4618      	mov	r0, r3
}
 8004f04:	bc30      	pop	{r4, r5}
 8004f06:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004f08:	2002      	movs	r0, #2
}
 8004f0a:	4770      	bx	lr
 8004f0c:	40010000 	.word	0x40010000

08004f10 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f12:	4770      	bx	lr

08004f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f18:	6802      	ldr	r2, [r0, #0]
 8004f1a:	6913      	ldr	r3, [r2, #16]
 8004f1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f20:	68c1      	ldr	r1, [r0, #12]
 8004f22:	430b      	orrs	r3, r1
 8004f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f26:	6883      	ldr	r3, [r0, #8]
 8004f28:	6902      	ldr	r2, [r0, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	6942      	ldr	r2, [r0, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	69c2      	ldr	r2, [r0, #28]
 8004f32:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004f34:	6801      	ldr	r1, [r0, #0]
 8004f36:	68cb      	ldr	r3, [r1, #12]
 8004f38:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f3c:	f023 030c 	bic.w	r3, r3, #12
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f44:	6802      	ldr	r2, [r0, #0]
 8004f46:	6953      	ldr	r3, [r2, #20]
 8004f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4c:	6981      	ldr	r1, [r0, #24]
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f52:	6803      	ldr	r3, [r0, #0]
 8004f54:	4a34      	ldr	r2, [pc, #208]	; (8005028 <UART_SetConfig+0x114>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d006      	beq.n	8004f68 <UART_SetConfig+0x54>
 8004f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d002      	beq.n	8004f68 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f62:	f7fe ff6b 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8004f66:	e001      	b.n	8004f6c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7fe ff78 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6c:	69e3      	ldr	r3, [r4, #28]
 8004f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f72:	d02a      	beq.n	8004fca <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f74:	2600      	movs	r6, #0
 8004f76:	1805      	adds	r5, r0, r0
 8004f78:	eb46 0106 	adc.w	r1, r6, r6
 8004f7c:	182d      	adds	r5, r5, r0
 8004f7e:	eb46 0101 	adc.w	r1, r6, r1
 8004f82:	00cb      	lsls	r3, r1, #3
 8004f84:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004f88:	00ea      	lsls	r2, r5, #3
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	009a      	lsls	r2, r3, #2
 8004f92:	0f9b      	lsrs	r3, r3, #30
 8004f94:	1828      	adds	r0, r5, r0
 8004f96:	eb46 0101 	adc.w	r1, r6, r1
 8004f9a:	f7fb f979 	bl	8000290 <__aeabi_uldivmod>
 8004f9e:	4d23      	ldr	r5, [pc, #140]	; (800502c <UART_SetConfig+0x118>)
 8004fa0:	fba5 3200 	umull	r3, r2, r5, r0
 8004fa4:	0951      	lsrs	r1, r2, #5
 8004fa6:	2364      	movs	r3, #100	; 0x64
 8004fa8:	fb03 0311 	mls	r3, r3, r1, r0
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	3332      	adds	r3, #50	; 0x32
 8004fb0:	fba5 2303 	umull	r2, r3, r5, r3
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fba:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]
  }
}
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fca:	2600      	movs	r6, #0
 8004fcc:	1805      	adds	r5, r0, r0
 8004fce:	eb46 0106 	adc.w	r1, r6, r6
 8004fd2:	182d      	adds	r5, r5, r0
 8004fd4:	eb46 0101 	adc.w	r1, r6, r1
 8004fd8:	00cb      	lsls	r3, r1, #3
 8004fda:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004fde:	00ea      	lsls	r2, r5, #3
 8004fe0:	4615      	mov	r5, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6862      	ldr	r2, [r4, #4]
 8004fe6:	4633      	mov	r3, r6
 8004fe8:	1892      	adds	r2, r2, r2
 8004fea:	eb46 0303 	adc.w	r3, r6, r3
 8004fee:	1828      	adds	r0, r5, r0
 8004ff0:	eb46 0101 	adc.w	r1, r6, r1
 8004ff4:	f7fb f94c 	bl	8000290 <__aeabi_uldivmod>
 8004ff8:	4d0c      	ldr	r5, [pc, #48]	; (800502c <UART_SetConfig+0x118>)
 8004ffa:	fba5 3200 	umull	r3, r2, r5, r0
 8004ffe:	0951      	lsrs	r1, r2, #5
 8005000:	2364      	movs	r3, #100	; 0x64
 8005002:	fb03 0311 	mls	r3, r3, r1, r0
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	3332      	adds	r3, #50	; 0x32
 800500a:	fba5 2303 	umull	r2, r3, r5, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	005a      	lsls	r2, r3, #1
 8005012:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005016:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	6821      	ldr	r1, [r4, #0]
 8005020:	4413      	add	r3, r2
 8005022:	608b      	str	r3, [r1, #8]
 8005024:	e7d0      	b.n	8004fc8 <UART_SetConfig+0xb4>
 8005026:	bf00      	nop
 8005028:	40011000 	.word	0x40011000
 800502c:	51eb851f 	.word	0x51eb851f

08005030 <HAL_UART_Init>:
  if (huart == NULL)
 8005030:	b358      	cbz	r0, 800508a <HAL_UART_Init+0x5a>
{
 8005032:	b510      	push	{r4, lr}
 8005034:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005036:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800503a:	b30b      	cbz	r3, 8005080 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800503c:	2324      	movs	r3, #36	; 0x24
 800503e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	68d3      	ldr	r3, [r2, #12]
 8005046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800504a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800504c:	4620      	mov	r0, r4
 800504e:	f7ff ff61 	bl	8004f14 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	6913      	ldr	r3, [r2, #16]
 8005056:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800505a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	6953      	ldr	r3, [r2, #20]
 8005060:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005064:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	68d3      	ldr	r3, [r2, #12]
 800506a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800506e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	2000      	movs	r0, #0
 8005072:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005074:	2320      	movs	r3, #32
 8005076:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800507a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800507e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005080:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005084:	f7fc fe10 	bl	8001ca8 <HAL_UART_MspInit>
 8005088:	e7d8      	b.n	800503c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800508a:	2001      	movs	r0, #1
}
 800508c:	4770      	bx	lr

0800508e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800508e:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005090:	680b      	ldr	r3, [r1, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d01a      	beq.n	80050cc <FMC_SDRAM_Init+0x3e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005096:	6802      	ldr	r2, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005098:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800509c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050a0:	684b      	ldr	r3, [r1, #4]
                                               Init->RowBitsNumber      |\
 80050a2:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050a4:	4323      	orrs	r3, r4
                                               Init->MemoryDataWidth    |\
 80050a6:	68cc      	ldr	r4, [r1, #12]
                                               Init->RowBitsNumber      |\
 80050a8:	4323      	orrs	r3, r4
                                               Init->InternalBankNumber |\
 80050aa:	690c      	ldr	r4, [r1, #16]
                                               Init->MemoryDataWidth    |\
 80050ac:	4323      	orrs	r3, r4
                                               Init->CASLatency         |\
 80050ae:	694c      	ldr	r4, [r1, #20]
                                               Init->InternalBankNumber |\
 80050b0:	4323      	orrs	r3, r4
                                               Init->WriteProtection    |\
 80050b2:	698c      	ldr	r4, [r1, #24]
                                               Init->CASLatency         |\
 80050b4:	4323      	orrs	r3, r4
                                               Init->SDClockPeriod      |\
 80050b6:	69cc      	ldr	r4, [r1, #28]
                                               Init->WriteProtection    |\
 80050b8:	4323      	orrs	r3, r4
                                               Init->ReadBurst          |\
 80050ba:	6a0c      	ldr	r4, [r1, #32]
                                               Init->SDClockPeriod      |\
 80050bc:	4323      	orrs	r3, r4
                                               Init->ReadPipeDelay
 80050be:	6a49      	ldr	r1, [r1, #36]	; 0x24
                                               Init->ReadBurst          |\
 80050c0:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050c2:	4313      	orrs	r3, r2
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80050c4:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 80050c6:	2000      	movs	r0, #0
 80050c8:	bc30      	pop	{r4, r5}
 80050ca:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80050cc:	6802      	ldr	r2, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80050ce:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80050d2:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 80050d4:	6a0c      	ldr	r4, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80050d6:	431c      	orrs	r4, r3
                        Init->ReadPipeDelay);  
 80050d8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80050da:	431c      	orrs	r4, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80050dc:	4314      	orrs	r4, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80050de:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80050e0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80050e4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050e8:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber      |\
 80050ea:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050ec:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth    |\
 80050ee:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber      |\
 80050f0:	432b      	orrs	r3, r5
                       Init->InternalBankNumber |\
 80050f2:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth    |\
 80050f4:	432b      	orrs	r3, r5
                       Init->CASLatency         |\
 80050f6:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber |\
 80050f8:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80050fa:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency         |\
 80050fc:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050fe:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005100:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005102:	6043      	str	r3, [r0, #4]
 8005104:	e7df      	b.n	80050c6 <FMC_SDRAM_Init+0x38>

08005106 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005106:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005108:	2a01      	cmp	r2, #1
 800510a:	d021      	beq.n	8005150 <FMC_SDRAM_Timing_Init+0x4a>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800510c:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800510e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005112:	680b      	ldr	r3, [r1, #0]
 8005114:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005116:	684c      	ldr	r4, [r1, #4]
 8005118:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800511a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800511e:	688c      	ldr	r4, [r1, #8]
 8005120:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005122:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005126:	68cc      	ldr	r4, [r1, #12]
 8005128:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800512a:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800512e:	690c      	ldr	r4, [r1, #16]
 8005130:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005132:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005136:	694c      	ldr	r4, [r1, #20]
 8005138:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800513a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 800513e:	6989      	ldr	r1, [r1, #24]
 8005140:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005142:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005146:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005148:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 800514a:	2000      	movs	r0, #0
 800514c:	bc30      	pop	{r4, r5}
 800514e:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005150:	6884      	ldr	r4, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005152:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 8005156:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800515a:	68ca      	ldr	r2, [r1, #12]
 800515c:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 800515e:	694b      	ldr	r3, [r1, #20]
 8005160:	1e5a      	subs	r2, r3, #1
 8005162:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005164:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8005168:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800516a:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800516c:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005170:	680b      	ldr	r3, [r1, #0]
 8005172:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005174:	684d      	ldr	r5, [r1, #4]
 8005176:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005178:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800517c:	688d      	ldr	r5, [r1, #8]
 800517e:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005180:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005184:	690d      	ldr	r5, [r1, #16]
 8005186:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005188:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800518c:	6989      	ldr	r1, [r1, #24]
 800518e:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005190:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005194:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005196:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005198:	60c3      	str	r3, [r0, #12]
 800519a:	e7d6      	b.n	800514a <FMC_SDRAM_Timing_Init+0x44>

0800519c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	4604      	mov	r4, r0
 80051a2:	4615      	mov	r5, r2
  __IO uint32_t tmpr = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	9301      	str	r3, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80051a8:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 80051aa:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80051ac:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80051ae:	688a      	ldr	r2, [r1, #8]
 80051b0:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 80051b2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9U)
 80051b6:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80051b8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80051bc:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80051be:	9b01      	ldr	r3, [sp, #4]
 80051c0:	6103      	str	r3, [r0, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80051c2:	f7fc fedd 	bl	8001f80 <HAL_GetTick>
 80051c6:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80051c8:	69a3      	ldr	r3, [r4, #24]
 80051ca:	f013 0f20 	tst.w	r3, #32
 80051ce:	d00a      	beq.n	80051e6 <FMC_SDRAM_SendCommand+0x4a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80051d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80051d4:	d0f8      	beq.n	80051c8 <FMC_SDRAM_SendCommand+0x2c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80051d6:	b125      	cbz	r5, 80051e2 <FMC_SDRAM_SendCommand+0x46>
 80051d8:	f7fc fed2 	bl	8001f80 <HAL_GetTick>
 80051dc:	1b80      	subs	r0, r0, r6
 80051de:	42a8      	cmp	r0, r5
 80051e0:	d9f2      	bls.n	80051c8 <FMC_SDRAM_SendCommand+0x2c>
      {
        return HAL_TIMEOUT;
 80051e2:	2003      	movs	r0, #3
 80051e4:	e000      	b.n	80051e8 <FMC_SDRAM_SendCommand+0x4c>
      }
    }
  }

  return HAL_OK;
 80051e6:	2000      	movs	r0, #0
}
 80051e8:	b002      	add	sp, #8
 80051ea:	bd70      	pop	{r4, r5, r6, pc}

080051ec <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80051ec:	6943      	ldr	r3, [r0, #20]
 80051ee:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80051f2:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 80051f4:	2000      	movs	r0, #0
 80051f6:	4770      	bx	lr

080051f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	3301      	adds	r3, #1
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	4a0e      	ldr	r2, [pc, #56]	; (8005240 <USB_CoreReset+0x48>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d814      	bhi.n	8005234 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800520a:	6903      	ldr	r3, [r0, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	daf6      	bge.n	80051fe <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005214:	6903      	ldr	r3, [r0, #16]
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800521c:	9b01      	ldr	r3, [sp, #4]
 800521e:	3301      	adds	r3, #1
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	4a07      	ldr	r2, [pc, #28]	; (8005240 <USB_CoreReset+0x48>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d808      	bhi.n	800523a <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005228:	6903      	ldr	r3, [r0, #16]
 800522a:	f013 0f01 	tst.w	r3, #1
 800522e:	d1f5      	bne.n	800521c <USB_CoreReset+0x24>

  return HAL_OK;
 8005230:	2000      	movs	r0, #0
 8005232:	e000      	b.n	8005236 <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8005234:	2003      	movs	r0, #3
}
 8005236:	b002      	add	sp, #8
 8005238:	4770      	bx	lr
      return HAL_TIMEOUT;
 800523a:	2003      	movs	r0, #3
 800523c:	e7fb      	b.n	8005236 <USB_CoreReset+0x3e>
 800523e:	bf00      	nop
 8005240:	00030d40 	.word	0x00030d40

08005244 <USB_CoreInit>:
{
 8005244:	b084      	sub	sp, #16
 8005246:	b510      	push	{r4, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	a803      	add	r0, sp, #12
 800524c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005250:	9b08      	ldr	r3, [sp, #32]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d11f      	bne.n	8005296 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005256:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800525e:	68e3      	ldr	r3, [r4, #12]
 8005260:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005268:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800526a:	68e3      	ldr	r3, [r4, #12]
 800526c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005270:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8005272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d009      	beq.n	800528c <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8005278:	4620      	mov	r0, r4
 800527a:	f7ff ffbd 	bl	80051f8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800527e:	9b06      	ldr	r3, [sp, #24]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d01b      	beq.n	80052bc <USB_CoreInit+0x78>
}
 8005284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005288:	b004      	add	sp, #16
 800528a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800528c:	68e3      	ldr	r3, [r4, #12]
 800528e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005292:	60e3      	str	r3, [r4, #12]
 8005294:	e7f0      	b.n	8005278 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005296:	68e3      	ldr	r3, [r4, #12]
 8005298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800529e:	4620      	mov	r0, r4
 80052a0:	f7ff ffaa 	bl	80051f8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80052a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052a6:	b923      	cbnz	r3, 80052b2 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ae:	63a3      	str	r3, [r4, #56]	; 0x38
 80052b0:	e7e5      	b.n	800527e <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80052ba:	e7e0      	b.n	800527e <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052bc:	68a3      	ldr	r3, [r4, #8]
 80052be:	f043 0306 	orr.w	r3, r3, #6
 80052c2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052c4:	68a3      	ldr	r3, [r4, #8]
 80052c6:	f043 0320 	orr.w	r3, r3, #32
 80052ca:	60a3      	str	r3, [r4, #8]
 80052cc:	e7da      	b.n	8005284 <USB_CoreInit+0x40>

080052ce <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ce:	6883      	ldr	r3, [r0, #8]
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	6083      	str	r3, [r0, #8]
}
 80052d6:	2000      	movs	r0, #0
 80052d8:	4770      	bx	lr
	...

080052dc <USB_FlushTxFifo>:
{
 80052dc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052e2:	0189      	lsls	r1, r1, #6
 80052e4:	f041 0120 	orr.w	r1, r1, #32
 80052e8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80052ea:	9b01      	ldr	r3, [sp, #4]
 80052ec:	3301      	adds	r3, #1
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	4a05      	ldr	r2, [pc, #20]	; (8005308 <USB_FlushTxFifo+0x2c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d805      	bhi.n	8005302 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052f6:	6903      	ldr	r3, [r0, #16]
 80052f8:	f013 0f20 	tst.w	r3, #32
 80052fc:	d1f5      	bne.n	80052ea <USB_FlushTxFifo+0xe>
  return HAL_OK;
 80052fe:	2000      	movs	r0, #0
 8005300:	e000      	b.n	8005304 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8005302:	2003      	movs	r0, #3
}
 8005304:	b002      	add	sp, #8
 8005306:	4770      	bx	lr
 8005308:	00030d40 	.word	0x00030d40

0800530c <USB_FlushRxFifo>:
{
 800530c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005312:	2310      	movs	r3, #16
 8005314:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	3301      	adds	r3, #1
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	4a05      	ldr	r2, [pc, #20]	; (8005334 <USB_FlushRxFifo+0x28>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d805      	bhi.n	800532e <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005322:	6903      	ldr	r3, [r0, #16]
 8005324:	f013 0f10 	tst.w	r3, #16
 8005328:	d1f5      	bne.n	8005316 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 800532a:	2000      	movs	r0, #0
 800532c:	e000      	b.n	8005330 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 800532e:	2003      	movs	r0, #3
}
 8005330:	b002      	add	sp, #8
 8005332:	4770      	bx	lr
 8005334:	00030d40 	.word	0x00030d40

08005338 <USB_ReadPacket>:
{
 8005338:	b4f0      	push	{r4, r5, r6, r7}
 800533a:	b082      	sub	sp, #8
 800533c:	4607      	mov	r7, r0
 800533e:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005340:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 8005342:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8005344:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8005348:	2300      	movs	r3, #0
 800534a:	42ab      	cmp	r3, r5
 800534c:	d206      	bcs.n	800535c <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800534e:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8005352:	6824      	ldr	r4, [r4, #0]
 8005354:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 8005358:	3301      	adds	r3, #1
 800535a:	e7f6      	b.n	800534a <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 800535c:	b17a      	cbz	r2, 800537e <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800535e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	9301      	str	r3, [sp, #4]
    i = 0U;
 8005366:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005368:	b2eb      	uxtb	r3, r5
 800536a:	00dc      	lsls	r4, r3, #3
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	40e3      	lsrs	r3, r4
 8005370:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8005374:	3501      	adds	r5, #1
      remaining_bytes--;
 8005376:	3a01      	subs	r2, #1
 8005378:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800537a:	2a00      	cmp	r2, #0
 800537c:	d1f4      	bne.n	8005368 <USB_ReadPacket+0x30>
}
 800537e:	b002      	add	sp, #8
 8005380:	bcf0      	pop	{r4, r5, r6, r7}
 8005382:	4770      	bx	lr

08005384 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005384:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005386:	6980      	ldr	r0, [r0, #24]
}
 8005388:	4010      	ands	r0, r2
 800538a:	4770      	bx	lr

0800538c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800538c:	6940      	ldr	r0, [r0, #20]
}
 800538e:	f000 0001 	and.w	r0, r0, #1
 8005392:	4770      	bx	lr

08005394 <USB_SetCurrentMode>:
{
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005398:	68c3      	ldr	r3, [r0, #12]
 800539a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800539e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80053a0:	2901      	cmp	r1, #1
 80053a2:	d013      	beq.n	80053cc <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80053a4:	bb19      	cbnz	r1, 80053ee <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053a6:	68c3      	ldr	r3, [r0, #12]
 80053a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ac:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80053ae:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80053b0:	2001      	movs	r0, #1
 80053b2:	f7fc fdeb 	bl	8001f8c <HAL_Delay>
      ms++;
 80053b6:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053b8:	4628      	mov	r0, r5
 80053ba:	f7ff ffe7 	bl	800538c <USB_GetMode>
 80053be:	b108      	cbz	r0, 80053c4 <USB_SetCurrentMode+0x30>
 80053c0:	2c31      	cmp	r4, #49	; 0x31
 80053c2:	d9f5      	bls.n	80053b0 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 80053c4:	2c32      	cmp	r4, #50	; 0x32
 80053c6:	d014      	beq.n	80053f2 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80053c8:	2000      	movs	r0, #0
}
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053cc:	68c3      	ldr	r3, [r0, #12]
 80053ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053d2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80053d4:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80053d6:	2001      	movs	r0, #1
 80053d8:	f7fc fdd8 	bl	8001f8c <HAL_Delay>
      ms++;
 80053dc:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053de:	4628      	mov	r0, r5
 80053e0:	f7ff ffd4 	bl	800538c <USB_GetMode>
 80053e4:	2801      	cmp	r0, #1
 80053e6:	d0ed      	beq.n	80053c4 <USB_SetCurrentMode+0x30>
 80053e8:	2c31      	cmp	r4, #49	; 0x31
 80053ea:	d9f4      	bls.n	80053d6 <USB_SetCurrentMode+0x42>
 80053ec:	e7ea      	b.n	80053c4 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80053ee:	2001      	movs	r0, #1
 80053f0:	e7eb      	b.n	80053ca <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80053f2:	2001      	movs	r0, #1
 80053f4:	e7e9      	b.n	80053ca <USB_SetCurrentMode+0x36>
	...

080053f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053f8:	b084      	sub	sp, #16
 80053fa:	b538      	push	{r3, r4, r5, lr}
 80053fc:	4604      	mov	r4, r0
 80053fe:	a805      	add	r0, sp, #20
 8005400:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	4625      	mov	r5, r4
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800540c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800540e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005412:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005414:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005416:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800541a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800541c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800541e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005422:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005426:	f413 7f80 	tst.w	r3, #256	; 0x100
 800542a:	d010      	beq.n	800544e <USB_HostInit+0x56>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d006      	beq.n	8005440 <USB_HostInit+0x48>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005432:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8005436:	f023 0304 	bic.w	r3, r3, #4
 800543a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800543e:	e00c      	b.n	800545a <USB_HostInit+0x62>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005440:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8005444:	f043 0304 	orr.w	r3, r3, #4
 8005448:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800544c:	e005      	b.n	800545a <USB_HostInit+0x62>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800544e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8005452:	f023 0304 	bic.w	r3, r3, #4
 8005456:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800545a:	2110      	movs	r1, #16
 800545c:	4620      	mov	r0, r4
 800545e:	f7ff ff3d 	bl	80052dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005462:	4620      	mov	r0, r4
 8005464:	f7ff ff52 	bl	800530c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005468:	2200      	movs	r2, #0
 800546a:	9b06      	ldr	r3, [sp, #24]
 800546c:	4293      	cmp	r3, r2
 800546e:	d90a      	bls.n	8005486 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005470:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 8005474:	f04f 31ff 	mov.w	r1, #4294967295
 8005478:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 800547c:	2100      	movs	r1, #0
 800547e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8005482:	3201      	adds	r2, #1
 8005484:	e7f1      	b.n	800546a <USB_HostInit+0x72>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005492:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005496:	d017      	beq.n	80054c8 <USB_HostInit+0xd0>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800549c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800549e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80054a2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054a4:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <USB_HostInit+0xe4>)
 80054a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054aa:	9b08      	ldr	r3, [sp, #32]
 80054ac:	b91b      	cbnz	r3, 80054b6 <USB_HostInit+0xbe>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054ae:	69a3      	ldr	r3, [r4, #24]
 80054b0:	f043 0310 	orr.w	r3, r3, #16
 80054b4:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80054b6:	69a2      	ldr	r2, [r4, #24]
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <USB_HostInit+0xe8>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 80054be:	2000      	movs	r0, #0
 80054c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054c4:	b004      	add	sp, #16
 80054c6:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054cc:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80054d0:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054d2:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <USB_HostInit+0xec>)
 80054d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80054d8:	e7e7      	b.n	80054aa <USB_HostInit+0xb2>
 80054da:	bf00      	nop
 80054dc:	00e00300 	.word	0x00e00300
 80054e0:	a3200008 	.word	0xa3200008
 80054e4:	004000e0 	.word	0x004000e0

080054e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80054e8:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80054ea:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80054ee:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054fa:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80054fe:	f001 0203 	and.w	r2, r1, #3
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 8005508:	2901      	cmp	r1, #1
 800550a:	d005      	beq.n	8005518 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800550c:	2902      	cmp	r1, #2
 800550e:	d007      	beq.n	8005520 <USB_InitFSLSPClkSel+0x38>
  {
    /* ... */
  }

  return HAL_OK;
}
 8005510:	2000      	movs	r0, #0
 8005512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005516:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8005518:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	e7f7      	b.n	8005510 <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 8005520:	f241 7370 	movw	r3, #6000	; 0x1770
 8005524:	6063      	str	r3, [r4, #4]
 8005526:	e7f3      	b.n	8005510 <USB_InitFSLSPClkSel+0x28>

08005528 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005528:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800552c:	6940      	ldr	r0, [r0, #20]
}
 800552e:	b280      	uxth	r0, r0
 8005530:	4770      	bx	lr

08005532 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005532:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005534:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005538:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 800553c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005540:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005544:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005548:	6885      	ldr	r5, [r0, #8]
 800554a:	f015 0f20 	tst.w	r5, #32
 800554e:	d002      	beq.n	8005556 <USB_HC_Halt+0x24>
 8005550:	0fe4      	lsrs	r4, r4, #31
 8005552:	2c00      	cmp	r4, #0
 8005554:	d055      	beq.n	8005602 <USB_HC_Halt+0xd0>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005556:	b333      	cbz	r3, 80055a6 <USB_HC_Halt+0x74>
 8005558:	2b02      	cmp	r3, #2
 800555a:	d024      	beq.n	80055a6 <USB_HC_Halt+0x74>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800555c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005564:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005568:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800556c:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8005570:	d14a      	bne.n	8005608 <USB_HC_Halt+0xd6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005572:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8005576:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800557a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800557e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8005582:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005586:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800558a:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800558e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005592:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      do
      {
        if (++count > 1000U)
 8005596:	3301      	adds	r3, #1
 8005598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800559c:	d831      	bhi.n	8005602 <USB_HC_Halt+0xd0>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800559e:	6811      	ldr	r1, [r2, #0]
 80055a0:	2900      	cmp	r1, #0
 80055a2:	dbf8      	blt.n	8005596 <USB_HC_Halt+0x64>
 80055a4:	e02d      	b.n	8005602 <USB_HC_Halt+0xd0>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055a6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80055aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ae:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055b2:	6883      	ldr	r3, [r0, #8]
 80055b4:	f013 0f20 	tst.w	r3, #32
 80055b8:	d123      	bne.n	8005602 <USB_HC_Halt+0xd0>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80055ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80055bc:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 80055c0:	d119      	bne.n	80055f6 <USB_HC_Halt+0xc4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055c2:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80055c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80055ca:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055ce:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80055d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80055d6:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80055da:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80055de:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80055e2:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
          if (++count > 1000U)
 80055e6:	3301      	adds	r3, #1
 80055e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ec:	d809      	bhi.n	8005602 <USB_HC_Halt+0xd0>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055ee:	6811      	ldr	r1, [r2, #0]
 80055f0:	2900      	cmp	r1, #0
 80055f2:	dbf8      	blt.n	80055e6 <USB_HC_Halt+0xb4>
 80055f4:	e005      	b.n	8005602 <USB_HC_Halt+0xd0>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055f6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80055fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055fe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8005602:	2000      	movs	r0, #0
 8005604:	bc30      	pop	{r4, r5}
 8005606:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005608:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800560c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005610:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005614:	e7f5      	b.n	8005602 <USB_HC_Halt+0xd0>

08005616 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005616:	f100 0308 	add.w	r3, r0, #8
 800561a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800561c:	f04f 32ff 	mov.w	r2, #4294967295
 8005620:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005622:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005624:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800562a:	4770      	bx	lr

0800562c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005630:	4770      	bx	lr

08005632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005632:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005634:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800563a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800563c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800563e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005640:	6803      	ldr	r3, [r0, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	6003      	str	r3, [r0, #0]
}
 8005646:	4770      	bx	lr

08005648 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005648:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800564a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800564c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005650:	d011      	beq.n	8005676 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005652:	f100 0308 	add.w	r3, r0, #8
 8005656:	461c      	mov	r4, r3
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	42aa      	cmp	r2, r5
 800565e:	d9fa      	bls.n	8005656 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005664:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005666:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005668:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800566a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800566c:	6803      	ldr	r3, [r0, #0]
 800566e:	3301      	adds	r3, #1
 8005670:	6003      	str	r3, [r0, #0]
}
 8005672:	bc30      	pop	{r4, r5}
 8005674:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005676:	6904      	ldr	r4, [r0, #16]
 8005678:	e7f2      	b.n	8005660 <vListInsert+0x18>

0800567a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800567a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800567c:	6841      	ldr	r1, [r0, #4]
 800567e:	6882      	ldr	r2, [r0, #8]
 8005680:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005682:	6841      	ldr	r1, [r0, #4]
 8005684:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	4282      	cmp	r2, r0
 800568a:	d006      	beq.n	800569a <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800568c:	2200      	movs	r2, #0
 800568e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	3a01      	subs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005696:	6818      	ldr	r0, [r3, #0]
}
 8005698:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800569a:	6882      	ldr	r2, [r0, #8]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	e7f5      	b.n	800568c <uxListRemove+0x12>

080056a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80056a0:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80056a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80056a4:	b118      	cbz	r0, 80056ae <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80056ae:	4770      	bx	lr

080056b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056b0:	b510      	push	{r4, lr}
 80056b2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056b4:	f001 f8be 	bl	8006834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80056ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d004      	beq.n	80056ca <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80056c0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80056c2:	f001 f8d9 	bl	8006878 <vPortExitCritical>

	return xReturn;
}
 80056c6:	4620      	mov	r0, r4
 80056c8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80056ca:	2401      	movs	r4, #1
 80056cc:	e7f9      	b.n	80056c2 <prvIsQueueFull+0x12>

080056ce <prvIsQueueEmpty>:
{
 80056ce:	b510      	push	{r4, lr}
 80056d0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80056d2:	f001 f8af 	bl	8006834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056d8:	b923      	cbnz	r3, 80056e4 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80056da:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80056dc:	f001 f8cc 	bl	8006878 <vPortExitCritical>
}
 80056e0:	4620      	mov	r0, r4
 80056e2:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80056e4:	2400      	movs	r4, #0
 80056e6:	e7f9      	b.n	80056dc <prvIsQueueEmpty+0xe>

080056e8 <prvCopyDataToQueue>:
{
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ee:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80056f2:	b95a      	cbnz	r2, 800570c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056f4:	6803      	ldr	r3, [r0, #0]
 80056f6:	b11b      	cbz	r3, 8005700 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80056f8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056fa:	3601      	adds	r6, #1
 80056fc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005700:	6880      	ldr	r0, [r0, #8]
 8005702:	f000 ff69 	bl	80065d8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	60a3      	str	r3, [r4, #8]
 800570a:	e7f6      	b.n	80056fa <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800570c:	b96d      	cbnz	r5, 800572a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800570e:	6840      	ldr	r0, [r0, #4]
 8005710:	f001 fb08 	bl	8006d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005714:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005716:	6863      	ldr	r3, [r4, #4]
 8005718:	4413      	add	r3, r2
 800571a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800571c:	68a2      	ldr	r2, [r4, #8]
 800571e:	4293      	cmp	r3, r2
 8005720:	d319      	bcc.n	8005756 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8005726:	4628      	mov	r0, r5
 8005728:	e7e7      	b.n	80056fa <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800572a:	68c0      	ldr	r0, [r0, #12]
 800572c:	f001 fafa 	bl	8006d24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005730:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005732:	4251      	negs	r1, r2
 8005734:	68e3      	ldr	r3, [r4, #12]
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	4293      	cmp	r3, r2
 800573e:	d202      	bcs.n	8005746 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005740:	68a3      	ldr	r3, [r4, #8]
 8005742:	440b      	add	r3, r1
 8005744:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005746:	2d02      	cmp	r5, #2
 8005748:	d001      	beq.n	800574e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800574a:	2000      	movs	r0, #0
 800574c:	e7d5      	b.n	80056fa <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800574e:	b126      	cbz	r6, 800575a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005750:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005752:	2000      	movs	r0, #0
 8005754:	e7d1      	b.n	80056fa <prvCopyDataToQueue+0x12>
 8005756:	4628      	mov	r0, r5
 8005758:	e7cf      	b.n	80056fa <prvCopyDataToQueue+0x12>
 800575a:	2000      	movs	r0, #0
 800575c:	e7cd      	b.n	80056fa <prvCopyDataToQueue+0x12>

0800575e <prvUnlockQueue>:
{
 800575e:	b538      	push	{r3, r4, r5, lr}
 8005760:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005762:	f001 f867 	bl	8006834 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005766:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800576a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800576c:	e003      	b.n	8005776 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800576e:	f000 fec7 	bl	8006500 <vTaskMissedYield>
			--cTxLock;
 8005772:	3c01      	subs	r4, #1
 8005774:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005776:	2c00      	cmp	r4, #0
 8005778:	dd08      	ble.n	800578c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800577a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800577c:	b133      	cbz	r3, 800578c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800577e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005782:	f000 fe29 	bl	80063d8 <xTaskRemoveFromEventList>
 8005786:	2800      	cmp	r0, #0
 8005788:	d0f3      	beq.n	8005772 <prvUnlockQueue+0x14>
 800578a:	e7f0      	b.n	800576e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800578c:	23ff      	movs	r3, #255	; 0xff
 800578e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005792:	f001 f871 	bl	8006878 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005796:	f001 f84d 	bl	8006834 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800579a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800579e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057a0:	e003      	b.n	80057aa <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80057a2:	f000 fead 	bl	8006500 <vTaskMissedYield>
				--cRxLock;
 80057a6:	3c01      	subs	r4, #1
 80057a8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057aa:	2c00      	cmp	r4, #0
 80057ac:	dd08      	ble.n	80057c0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ae:	692b      	ldr	r3, [r5, #16]
 80057b0:	b133      	cbz	r3, 80057c0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b2:	f105 0010 	add.w	r0, r5, #16
 80057b6:	f000 fe0f 	bl	80063d8 <xTaskRemoveFromEventList>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0f3      	beq.n	80057a6 <prvUnlockQueue+0x48>
 80057be:	e7f0      	b.n	80057a2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80057c0:	23ff      	movs	r3, #255	; 0xff
 80057c2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80057c6:	f001 f857 	bl	8006878 <vPortExitCritical>
}
 80057ca:	bd38      	pop	{r3, r4, r5, pc}

080057cc <xQueueGenericReset>:
{
 80057cc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80057ce:	b1e0      	cbz	r0, 800580a <xQueueGenericReset+0x3e>
 80057d0:	460d      	mov	r5, r1
 80057d2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80057d4:	f001 f82e 	bl	8006834 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d8:	6821      	ldr	r1, [r4, #0]
 80057da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80057dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057de:	fb03 1002 	mla	r0, r3, r2, r1
 80057e2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057e4:	2000      	movs	r0, #0
 80057e6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e8:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ea:	3a01      	subs	r2, #1
 80057ec:	fb02 1303 	mla	r3, r2, r3, r1
 80057f0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057f2:	23ff      	movs	r3, #255	; 0xff
 80057f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80057fc:	b9ed      	cbnz	r5, 800583a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	b963      	cbnz	r3, 800581c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005802:	f001 f839 	bl	8006878 <vPortExitCritical>
}
 8005806:	2001      	movs	r0, #1
 8005808:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800581a:	e7fe      	b.n	800581a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800581c:	f104 0010 	add.w	r0, r4, #16
 8005820:	f000 fdda 	bl	80063d8 <xTaskRemoveFromEventList>
 8005824:	2800      	cmp	r0, #0
 8005826:	d0ec      	beq.n	8005802 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <xQueueGenericReset+0x80>)
 800582a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	e7e3      	b.n	8005802 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800583a:	f104 0010 	add.w	r0, r4, #16
 800583e:	f7ff feea 	bl	8005616 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005842:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005846:	f7ff fee6 	bl	8005616 <vListInitialise>
 800584a:	e7da      	b.n	8005802 <xQueueGenericReset+0x36>
 800584c:	e000ed04 	.word	0xe000ed04

08005850 <prvInitialiseNewQueue>:
{
 8005850:	b510      	push	{r4, lr}
 8005852:	4603      	mov	r3, r0
 8005854:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005856:	460c      	mov	r4, r1
 8005858:	b931      	cbnz	r1, 8005868 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800585a:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800585c:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800585e:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005860:	2101      	movs	r1, #1
 8005862:	f7ff ffb3 	bl	80057cc <xQueueGenericReset>
}
 8005866:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005868:	6002      	str	r2, [r0, #0]
 800586a:	e7f7      	b.n	800585c <prvInitialiseNewQueue+0xc>

0800586c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800586c:	b940      	cbnz	r0, 8005880 <xQueueGenericCreate+0x14>
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	e7fe      	b.n	800587e <xQueueGenericCreate+0x12>
	{
 8005880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005882:	b083      	sub	sp, #12
 8005884:	460d      	mov	r5, r1
 8005886:	4616      	mov	r6, r2
 8005888:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800588a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800588e:	3048      	adds	r0, #72	; 0x48
 8005890:	f001 f958 	bl	8006b44 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005894:	4604      	mov	r4, r0
 8005896:	b150      	cbz	r0, 80058ae <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005898:	2300      	movs	r3, #0
 800589a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800589e:	9000      	str	r0, [sp, #0]
 80058a0:	4633      	mov	r3, r6
 80058a2:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80058a6:	4629      	mov	r1, r5
 80058a8:	4638      	mov	r0, r7
 80058aa:	f7ff ffd1 	bl	8005850 <prvInitialiseNewQueue>
	}
 80058ae:	4620      	mov	r0, r4
 80058b0:	b003      	add	sp, #12
 80058b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058b4 <xQueueGenericSend>:
{
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b6:	b085      	sub	sp, #20
 80058b8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80058ba:	b188      	cbz	r0, 80058e0 <xQueueGenericSend+0x2c>
 80058bc:	460e      	mov	r6, r1
 80058be:	461d      	mov	r5, r3
 80058c0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058c2:	b1b1      	cbz	r1, 80058f2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058c4:	2d02      	cmp	r5, #2
 80058c6:	d120      	bne.n	800590a <xQueueGenericSend+0x56>
 80058c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d01d      	beq.n	800590a <xQueueGenericSend+0x56>
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	e7fe      	b.n	80058de <xQueueGenericSend+0x2a>
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0e5      	beq.n	80058c4 <xQueueGenericSend+0x10>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	e7fe      	b.n	8005908 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800590a:	f000 fdff 	bl	800650c <xTaskGetSchedulerState>
 800590e:	4607      	mov	r7, r0
 8005910:	b958      	cbnz	r0, 800592a <xQueueGenericSend+0x76>
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d044      	beq.n	80059a2 <xQueueGenericSend+0xee>
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	e7fe      	b.n	8005928 <xQueueGenericSend+0x74>
 800592a:	2700      	movs	r7, #0
 800592c:	e039      	b.n	80059a2 <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800592e:	462a      	mov	r2, r5
 8005930:	4631      	mov	r1, r6
 8005932:	4620      	mov	r0, r4
 8005934:	f7ff fed8 	bl	80056e8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005938:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800593a:	b96a      	cbnz	r2, 8005958 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 800593c:	b138      	cbz	r0, 800594e <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800593e:	4b3c      	ldr	r3, [pc, #240]	; (8005a30 <xQueueGenericSend+0x17c>)
 8005940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800594e:	f000 ff93 	bl	8006878 <vPortExitCritical>
				return pdPASS;
 8005952:	2001      	movs	r0, #1
}
 8005954:	b005      	add	sp, #20
 8005956:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005958:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800595c:	f000 fd3c 	bl	80063d8 <xTaskRemoveFromEventList>
 8005960:	2800      	cmp	r0, #0
 8005962:	d0f4      	beq.n	800594e <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8005964:	4b32      	ldr	r3, [pc, #200]	; (8005a30 <xQueueGenericSend+0x17c>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	e7eb      	b.n	800594e <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 8005976:	f000 ff7f 	bl	8006878 <vPortExitCritical>
					return errQUEUE_FULL;
 800597a:	2000      	movs	r0, #0
 800597c:	e7ea      	b.n	8005954 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800597e:	a802      	add	r0, sp, #8
 8005980:	f000 fd70 	bl	8006464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005984:	2701      	movs	r7, #1
 8005986:	e019      	b.n	80059bc <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 8005988:	2300      	movs	r3, #0
 800598a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800598e:	e021      	b.n	80059d4 <xQueueGenericSend+0x120>
 8005990:	2300      	movs	r3, #0
 8005992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005996:	e023      	b.n	80059e0 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 8005998:	4620      	mov	r0, r4
 800599a:	f7ff fee0 	bl	800575e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800599e:	f000 fbfd 	bl	800619c <xTaskResumeAll>
		taskENTER_CRITICAL();
 80059a2:	f000 ff47 	bl	8006834 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80059a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d3bf      	bcc.n	800592e <xQueueGenericSend+0x7a>
 80059ae:	2d02      	cmp	r5, #2
 80059b0:	d0bd      	beq.n	800592e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0de      	beq.n	8005976 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 80059b8:	2f00      	cmp	r7, #0
 80059ba:	d0e0      	beq.n	800597e <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 80059bc:	f000 ff5c 	bl	8006878 <vPortExitCritical>
		vTaskSuspendAll();
 80059c0:	f000 fb58 	bl	8006074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059c4:	f000 ff36 	bl	8006834 <vPortEnterCritical>
 80059c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d0d9      	beq.n	8005988 <xQueueGenericSend+0xd4>
 80059d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80059d8:	b25b      	sxtb	r3, r3
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d0d7      	beq.n	8005990 <xQueueGenericSend+0xdc>
 80059e0:	f000 ff4a 	bl	8006878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059e4:	a901      	add	r1, sp, #4
 80059e6:	a802      	add	r0, sp, #8
 80059e8:	f000 fd48 	bl	800647c <xTaskCheckForTimeOut>
 80059ec:	b9c8      	cbnz	r0, 8005a22 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059ee:	4620      	mov	r0, r4
 80059f0:	f7ff fe5e 	bl	80056b0 <prvIsQueueFull>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d0cf      	beq.n	8005998 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059f8:	9901      	ldr	r1, [sp, #4]
 80059fa:	f104 0010 	add.w	r0, r4, #16
 80059fe:	f000 fcd3 	bl	80063a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a02:	4620      	mov	r0, r4
 8005a04:	f7ff feab 	bl	800575e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a08:	f000 fbc8 	bl	800619c <xTaskResumeAll>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d1c8      	bne.n	80059a2 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <xQueueGenericSend+0x17c>)
 8005a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	e7bf      	b.n	80059a2 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7ff fe9b 	bl	800575e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a28:	f000 fbb8 	bl	800619c <xTaskResumeAll>
			return errQUEUE_FULL;
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e791      	b.n	8005954 <xQueueGenericSend+0xa0>
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8005a34:	b148      	cbz	r0, 8005a4a <prvInitialiseMutex+0x16>
	{
 8005a36:	b510      	push	{r4, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a38:	2100      	movs	r1, #0
 8005a3a:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a3c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a3e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a40:	460b      	mov	r3, r1
 8005a42:	460a      	mov	r2, r1
 8005a44:	f7ff ff36 	bl	80058b4 <xQueueGenericSend>
	}
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	4770      	bx	lr

08005a4c <xQueueCreateMutex>:
	{
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a50:	2100      	movs	r1, #0
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7ff ff0a 	bl	800586c <xQueueGenericCreate>
 8005a58:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a5a:	f7ff ffeb 	bl	8005a34 <prvInitialiseMutex>
	}
 8005a5e:	4620      	mov	r0, r4
 8005a60:	bd10      	pop	{r4, pc}
	...

08005a64 <xQueueSemaphoreTake>:
{
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005a6a:	b158      	cbz	r0, 8005a84 <xQueueSemaphoreTake+0x20>
 8005a6c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a70:	b18b      	cbz	r3, 8005a96 <xQueueSemaphoreTake+0x32>
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	e7fe      	b.n	8005a82 <xQueueSemaphoreTake+0x1e>
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005a94:	e7fe      	b.n	8005a94 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a96:	f000 fd39 	bl	800650c <xTaskGetSchedulerState>
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	b950      	cbnz	r0, 8005ab4 <xQueueSemaphoreTake+0x50>
 8005a9e:	9b01      	ldr	r3, [sp, #4]
 8005aa0:	b15b      	cbz	r3, 8005aba <xQueueSemaphoreTake+0x56>
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	e7fe      	b.n	8005ab2 <xQueueSemaphoreTake+0x4e>
 8005ab4:	2500      	movs	r5, #0
 8005ab6:	462e      	mov	r6, r5
 8005ab8:	e053      	b.n	8005b62 <xQueueSemaphoreTake+0xfe>
 8005aba:	4605      	mov	r5, r0
 8005abc:	e051      	b.n	8005b62 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	b13b      	cbz	r3, 8005ad6 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	b94b      	cbnz	r3, 8005ade <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8005aca:	f000 fed5 	bl	8006878 <vPortExitCritical>
				return pdPASS;
 8005ace:	2501      	movs	r5, #1
}
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	b004      	add	sp, #16
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ad6:	f000 fe35 	bl	8006744 <pvTaskIncrementMutexHeldCount>
 8005ada:	60a0      	str	r0, [r4, #8]
 8005adc:	e7f3      	b.n	8005ac6 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ade:	f104 0010 	add.w	r0, r4, #16
 8005ae2:	f000 fc79 	bl	80063d8 <xTaskRemoveFromEventList>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d0ef      	beq.n	8005aca <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8005aea:	4b46      	ldr	r3, [pc, #280]	; (8005c04 <xQueueSemaphoreTake+0x1a0>)
 8005aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	e7e6      	b.n	8005aca <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005afc:	b145      	cbz	r5, 8005b10 <xQueueSemaphoreTake+0xac>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	e7fe      	b.n	8005b0e <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 8005b10:	f000 feb2 	bl	8006878 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005b14:	e7dc      	b.n	8005ad0 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b16:	a802      	add	r0, sp, #8
 8005b18:	f000 fca4 	bl	8006464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b1c:	2601      	movs	r6, #1
 8005b1e:	e02a      	b.n	8005b76 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 8005b20:	2300      	movs	r3, #0
 8005b22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b26:	e032      	b.n	8005b8e <xQueueSemaphoreTake+0x12a>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b2e:	e034      	b.n	8005b9a <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 8005b30:	f000 fe80 	bl	8006834 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b34:	68a0      	ldr	r0, [r4, #8]
 8005b36:	f000 fcf9 	bl	800652c <xTaskPriorityInherit>
 8005b3a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005b3c:	f000 fe9c 	bl	8006878 <vPortExitCritical>
 8005b40:	e03b      	b.n	8005bba <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 8005b42:	4620      	mov	r0, r4
 8005b44:	f7ff fe0b 	bl	800575e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b48:	f000 fb28 	bl	800619c <xTaskResumeAll>
 8005b4c:	e009      	b.n	8005b62 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f7ff fe05 	bl	800575e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b54:	f000 fb22 	bl	800619c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f7ff fdb8 	bl	80056ce <prvIsQueueEmpty>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d140      	bne.n	8005be4 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 8005b62:	f000 fe67 	bl	8006834 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1a8      	bne.n	8005abe <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0c4      	beq.n	8005afc <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8005b72:	2e00      	cmp	r6, #0
 8005b74:	d0cf      	beq.n	8005b16 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 8005b76:	f000 fe7f 	bl	8006878 <vPortExitCritical>
		vTaskSuspendAll();
 8005b7a:	f000 fa7b 	bl	8006074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b7e:	f000 fe59 	bl	8006834 <vPortEnterCritical>
 8005b82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005b86:	b25b      	sxtb	r3, r3
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d0c8      	beq.n	8005b20 <xQueueSemaphoreTake+0xbc>
 8005b8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d0c6      	beq.n	8005b28 <xQueueSemaphoreTake+0xc4>
 8005b9a:	f000 fe6d 	bl	8006878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b9e:	a901      	add	r1, sp, #4
 8005ba0:	a802      	add	r0, sp, #8
 8005ba2:	f000 fc6b 	bl	800647c <xTaskCheckForTimeOut>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d1d1      	bne.n	8005b4e <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff fd8f 	bl	80056ce <prvIsQueueEmpty>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d0c6      	beq.n	8005b42 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0ba      	beq.n	8005b30 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bba:	9901      	ldr	r1, [sp, #4]
 8005bbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005bc0:	f000 fbf2 	bl	80063a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff fdca 	bl	800575e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bca:	f000 fae7 	bl	800619c <xTaskResumeAll>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d1c7      	bne.n	8005b62 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 8005bd2:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <xQueueSemaphoreTake+0x1a0>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	e7be      	b.n	8005b62 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8005be4:	b90d      	cbnz	r5, 8005bea <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 8005be6:	2500      	movs	r5, #0
 8005be8:	e772      	b.n	8005ad0 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8005bea:	f000 fe23 	bl	8006834 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff fd56 	bl	80056a0 <prvGetDisinheritPriorityAfterTimeout>
 8005bf4:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005bf6:	68a0      	ldr	r0, [r4, #8]
 8005bf8:	f000 fd48 	bl	800668c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005bfc:	f000 fe3c 	bl	8006878 <vPortExitCritical>
 8005c00:	e7f1      	b.n	8005be6 <xQueueSemaphoreTake+0x182>
 8005c02:	bf00      	nop
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c08:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <prvResetNextTaskUnblockTime+0x24>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	b923      	cbnz	r3, 8005c1a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <prvResetNextTaskUnblockTime+0x28>)
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <prvResetNextTaskUnblockTime+0x24>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	4b02      	ldr	r3, [pc, #8]	; (8005c30 <prvResetNextTaskUnblockTime+0x28>)
 8005c26:	601a      	str	r2, [r3, #0]
	}
}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	2000040c 	.word	0x2000040c
 8005c30:	200004dc 	.word	0x200004dc

08005c34 <prvInitialiseNewTask>:
{
 8005c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c38:	4680      	mov	r8, r0
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	4617      	mov	r7, r2
 8005c3e:	4699      	mov	r9, r3
 8005c40:	9e08      	ldr	r6, [sp, #32]
 8005c42:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005c46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c48:	0092      	lsls	r2, r2, #2
 8005c4a:	21a5      	movs	r1, #165	; 0xa5
 8005c4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005c4e:	f001 f877 	bl	8006d40 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c54:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c5e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8005c62:	b38d      	cbz	r5, 8005cc8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c64:	2200      	movs	r2, #0
 8005c66:	2a0f      	cmp	r2, #15
 8005c68:	d807      	bhi.n	8005c7a <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c6a:	5ca9      	ldrb	r1, [r5, r2]
 8005c6c:	18a3      	adds	r3, r4, r2
 8005c6e:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005c72:	5cab      	ldrb	r3, [r5, r2]
 8005c74:	b10b      	cbz	r3, 8005c7a <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c76:	3201      	adds	r2, #1
 8005c78:	e7f5      	b.n	8005c66 <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c80:	2e06      	cmp	r6, #6
 8005c82:	d900      	bls.n	8005c86 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c84:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8005c86:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005c88:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c8a:	2500      	movs	r5, #0
 8005c8c:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c8e:	1d20      	adds	r0, r4, #4
 8005c90:	f7ff fccc 	bl	800562c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c94:	f104 0018 	add.w	r0, r4, #24
 8005c98:	f7ff fcc8 	bl	800562c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c9c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c9e:	f1c6 0607 	rsb	r6, r6, #7
 8005ca2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ca4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8005ca6:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8005ca8:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005caa:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cae:	464a      	mov	r2, r9
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	f000 fd92 	bl	80067dc <pxPortInitialiseStack>
 8005cb8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005cba:	f1ba 0f00 	cmp.w	sl, #0
 8005cbe:	d001      	beq.n	8005cc4 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cc0:	f8ca 4000 	str.w	r4, [sl]
}
 8005cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8005cce:	e7d7      	b.n	8005c80 <prvInitialiseNewTask+0x4c>

08005cd0 <prvInitialiseTaskLists>:
{
 8005cd0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cd2:	2400      	movs	r4, #0
 8005cd4:	e007      	b.n	8005ce6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cd6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005cda:	0093      	lsls	r3, r2, #2
 8005cdc:	480e      	ldr	r0, [pc, #56]	; (8005d18 <prvInitialiseTaskLists+0x48>)
 8005cde:	4418      	add	r0, r3
 8005ce0:	f7ff fc99 	bl	8005616 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ce4:	3401      	adds	r4, #1
 8005ce6:	2c06      	cmp	r4, #6
 8005ce8:	d9f5      	bls.n	8005cd6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005cea:	4d0c      	ldr	r5, [pc, #48]	; (8005d1c <prvInitialiseTaskLists+0x4c>)
 8005cec:	4628      	mov	r0, r5
 8005cee:	f7ff fc92 	bl	8005616 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cf2:	4c0b      	ldr	r4, [pc, #44]	; (8005d20 <prvInitialiseTaskLists+0x50>)
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f7ff fc8e 	bl	8005616 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cfa:	480a      	ldr	r0, [pc, #40]	; (8005d24 <prvInitialiseTaskLists+0x54>)
 8005cfc:	f7ff fc8b 	bl	8005616 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005d00:	4809      	ldr	r0, [pc, #36]	; (8005d28 <prvInitialiseTaskLists+0x58>)
 8005d02:	f7ff fc88 	bl	8005616 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005d06:	4809      	ldr	r0, [pc, #36]	; (8005d2c <prvInitialiseTaskLists+0x5c>)
 8005d08:	f7ff fc85 	bl	8005616 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d0c:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <prvInitialiseTaskLists+0x60>)
 8005d0e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <prvInitialiseTaskLists+0x64>)
 8005d12:	601c      	str	r4, [r3, #0]
}
 8005d14:	bd38      	pop	{r3, r4, r5, pc}
 8005d16:	bf00      	nop
 8005d18:	20000414 	.word	0x20000414
 8005d1c:	200004b4 	.word	0x200004b4
 8005d20:	200004c8 	.word	0x200004c8
 8005d24:	200004e8 	.word	0x200004e8
 8005d28:	20000514 	.word	0x20000514
 8005d2c:	20000500 	.word	0x20000500
 8005d30:	2000040c 	.word	0x2000040c
 8005d34:	20000410 	.word	0x20000410

08005d38 <prvAddNewTaskToReadyList>:
{
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005d3c:	f000 fd7a 	bl	8006834 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005d40:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <prvAddNewTaskToReadyList+0x8c>)
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d48:	4b1f      	ldr	r3, [pc, #124]	; (8005dc8 <prvAddNewTaskToReadyList+0x90>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	b15b      	cbz	r3, 8005d66 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005d4e:	4b1f      	ldr	r3, [pc, #124]	; (8005dcc <prvAddNewTaskToReadyList+0x94>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	b96b      	cbnz	r3, 8005d70 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d54:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <prvAddNewTaskToReadyList+0x90>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d807      	bhi.n	8005d70 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005d60:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <prvAddNewTaskToReadyList+0x90>)
 8005d62:	601c      	str	r4, [r3, #0]
 8005d64:	e004      	b.n	8005d70 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005d66:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <prvAddNewTaskToReadyList+0x90>)
 8005d68:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d6a:	6813      	ldr	r3, [r2, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d026      	beq.n	8005dbe <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8005d70:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <prvAddNewTaskToReadyList+0x98>)
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005d78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4083      	lsls	r3, r0
 8005d7e:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <prvAddNewTaskToReadyList+0x9c>)
 8005d80:	6811      	ldr	r1, [r2, #0]
 8005d82:	430b      	orrs	r3, r1
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d8a:	1d21      	adds	r1, r4, #4
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <prvAddNewTaskToReadyList+0xa0>)
 8005d8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d92:	f7ff fc4e 	bl	8005632 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005d96:	f000 fd6f 	bl	8006878 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005d9a:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <prvAddNewTaskToReadyList+0x94>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	b16b      	cbz	r3, 8005dbc <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005da0:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <prvAddNewTaskToReadyList+0x90>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d207      	bcs.n	8005dbc <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <prvAddNewTaskToReadyList+0xa4>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
}
 8005dbc:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005dbe:	f7ff ff87 	bl	8005cd0 <prvInitialiseTaskLists>
 8005dc2:	e7d5      	b.n	8005d70 <prvAddNewTaskToReadyList+0x38>
 8005dc4:	200004a0 	.word	0x200004a0
 8005dc8:	20000408 	.word	0x20000408
 8005dcc:	200004fc 	.word	0x200004fc
 8005dd0:	200004ac 	.word	0x200004ac
 8005dd4:	200004b0 	.word	0x200004b0
 8005dd8:	20000414 	.word	0x20000414
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <prvDeleteTCB>:
	{
 8005de0:	b510      	push	{r4, lr}
 8005de2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005de4:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8005de8:	b163      	cbz	r3, 8005e04 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d011      	beq.n	8005e12 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d00e      	beq.n	8005e10 <prvDeleteTCB+0x30>
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	e7fe      	b.n	8005e02 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8005e04:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005e06:	f000 ff25 	bl	8006c54 <vPortFree>
				vPortFree( pxTCB );
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f000 ff22 	bl	8006c54 <vPortFree>
	}
 8005e10:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005e12:	f000 ff1f 	bl	8006c54 <vPortFree>
 8005e16:	e7fb      	b.n	8005e10 <prvDeleteTCB+0x30>

08005e18 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <prvCheckTasksWaitingTermination+0x40>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b1d3      	cbz	r3, 8005e54 <prvCheckTasksWaitingTermination+0x3c>
{
 8005e1e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005e20:	f000 fd08 	bl	8006834 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e24:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <prvCheckTasksWaitingTermination+0x44>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e2a:	1d20      	adds	r0, r4, #4
 8005e2c:	f7ff fc25 	bl	800567a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e30:	4a0b      	ldr	r2, [pc, #44]	; (8005e60 <prvCheckTasksWaitingTermination+0x48>)
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e38:	4a07      	ldr	r2, [pc, #28]	; (8005e58 <prvCheckTasksWaitingTermination+0x40>)
 8005e3a:	6813      	ldr	r3, [r2, #0]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005e40:	f000 fd1a 	bl	8006878 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005e44:	4620      	mov	r0, r4
 8005e46:	f7ff ffcb 	bl	8005de0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e4a:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <prvCheckTasksWaitingTermination+0x40>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e6      	bne.n	8005e20 <prvCheckTasksWaitingTermination+0x8>
}
 8005e52:	bd10      	pop	{r4, pc}
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	200004a4 	.word	0x200004a4
 8005e5c:	20000514 	.word	0x20000514
 8005e60:	200004a0 	.word	0x200004a0

08005e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4604      	mov	r4, r0
 8005e68:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ee0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005e6c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	3004      	adds	r0, #4
 8005e74:	f7ff fc01 	bl	800567a <uxListRemove>
 8005e78:	b950      	cbnz	r0, 8005e90 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e80:	2301      	movs	r3, #1
 8005e82:	fa03 f202 	lsl.w	r2, r3, r2
 8005e86:	4918      	ldr	r1, [pc, #96]	; (8005ee8 <prvAddCurrentTaskToDelayedList+0x84>)
 8005e88:	680b      	ldr	r3, [r1, #0]
 8005e8a:	ea23 0302 	bic.w	r3, r3, r2
 8005e8e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e90:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005e94:	d00d      	beq.n	8005eb2 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e96:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005e9e:	42a6      	cmp	r6, r4
 8005ea0:	d910      	bls.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <prvAddCurrentTaskToDelayedList+0x88>)
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0x80>)
 8005ea8:	6819      	ldr	r1, [r3, #0]
 8005eaa:	3104      	adds	r1, #4
 8005eac:	f7ff fbcc 	bl	8005648 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005eb0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eb2:	2d00      	cmp	r5, #0
 8005eb4:	d0ef      	beq.n	8005e96 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0x80>)
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	3104      	adds	r1, #4
 8005ebc:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005ebe:	f7ff fbb8 	bl	8005632 <vListInsertEnd>
 8005ec2:	e7f5      	b.n	8005eb0 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0x80>)
 8005eca:	6819      	ldr	r1, [r3, #0]
 8005ecc:	3104      	adds	r1, #4
 8005ece:	f7ff fbbb 	bl	8005648 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	42a3      	cmp	r3, r4
 8005ed8:	d9ea      	bls.n	8005eb0 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005edc:	601c      	str	r4, [r3, #0]
}
 8005ede:	e7e7      	b.n	8005eb0 <prvAddCurrentTaskToDelayedList+0x4c>
 8005ee0:	20000528 	.word	0x20000528
 8005ee4:	20000408 	.word	0x20000408
 8005ee8:	200004b0 	.word	0x200004b0
 8005eec:	20000410 	.word	0x20000410
 8005ef0:	20000500 	.word	0x20000500
 8005ef4:	2000040c 	.word	0x2000040c
 8005ef8:	200004dc 	.word	0x200004dc

08005efc <prvIdleTask>:
{
 8005efc:	b508      	push	{r3, lr}
 8005efe:	e009      	b.n	8005f14 <prvIdleTask+0x18>
				taskYIELD();
 8005f00:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <prvIdleTask+0x28>)
 8005f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8005f10:	f7fb f98b 	bl	800122a <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005f14:	f7ff ff80 	bl	8005e18 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <prvIdleTask+0x2c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d8ef      	bhi.n	8005f00 <prvIdleTask+0x4>
 8005f20:	e7f6      	b.n	8005f10 <prvIdleTask+0x14>
 8005f22:	bf00      	nop
 8005f24:	e000ed04 	.word	0xe000ed04
 8005f28:	20000414 	.word	0x20000414

08005f2c <xTaskCreateStatic>:
	{
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005f32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005f34:	b175      	cbz	r5, 8005f54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f36:	b1b4      	cbz	r4, 8005f66 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f38:	2658      	movs	r6, #88	; 0x58
 8005f3a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f3c:	9e04      	ldr	r6, [sp, #16]
 8005f3e:	2e58      	cmp	r6, #88	; 0x58
 8005f40:	d01a      	beq.n	8005f78 <xTaskCreateStatic+0x4c>
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	e7fe      	b.n	8005f52 <xTaskCreateStatic+0x26>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005f64:	e7fe      	b.n	8005f64 <xTaskCreateStatic+0x38>
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005f76:	e7fe      	b.n	8005f76 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f78:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f7a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f7c:	2502      	movs	r5, #2
 8005f7e:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f82:	2500      	movs	r5, #0
 8005f84:	9503      	str	r5, [sp, #12]
 8005f86:	9402      	str	r4, [sp, #8]
 8005f88:	ad05      	add	r5, sp, #20
 8005f8a:	9501      	str	r5, [sp, #4]
 8005f8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005f8e:	9500      	str	r5, [sp, #0]
 8005f90:	f7ff fe50 	bl	8005c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f94:	4620      	mov	r0, r4
 8005f96:	f7ff fecf 	bl	8005d38 <prvAddNewTaskToReadyList>
	}
 8005f9a:	9805      	ldr	r0, [sp, #20]
 8005f9c:	b006      	add	sp, #24
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}

08005fa0 <xTaskCreate>:
	{
 8005fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	4688      	mov	r8, r1
 8005faa:	4614      	mov	r4, r2
 8005fac:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fae:	0090      	lsls	r0, r2, #2
 8005fb0:	f000 fdc8 	bl	8006b44 <pvPortMalloc>
			if( pxStack != NULL )
 8005fb4:	b300      	cbz	r0, 8005ff8 <xTaskCreate+0x58>
 8005fb6:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fb8:	2058      	movs	r0, #88	; 0x58
 8005fba:	f000 fdc3 	bl	8006b44 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	b1b0      	cbz	r0, 8005ff0 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8005fc2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8005fc6:	b1e5      	cbz	r5, 8006002 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	9502      	str	r5, [sp, #8]
 8005fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	4633      	mov	r3, r6
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4641      	mov	r1, r8
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7ff fe27 	bl	8005c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f7ff fea6 	bl	8005d38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fec:	2001      	movs	r0, #1
 8005fee:	e005      	b.n	8005ffc <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8005ff0:	4648      	mov	r0, r9
 8005ff2:	f000 fe2f 	bl	8006c54 <vPortFree>
 8005ff6:	e7e6      	b.n	8005fc6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005ffc:	b005      	add	sp, #20
 8005ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006006:	e7f9      	b.n	8005ffc <xTaskCreate+0x5c>

08006008 <vTaskStartScheduler>:
{
 8006008:	b510      	push	{r4, lr}
 800600a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800600c:	2400      	movs	r4, #0
 800600e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006010:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006012:	aa07      	add	r2, sp, #28
 8006014:	a906      	add	r1, sp, #24
 8006016:	a805      	add	r0, sp, #20
 8006018:	f7fb f90a 	bl	8001230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800601c:	9b05      	ldr	r3, [sp, #20]
 800601e:	9302      	str	r3, [sp, #8]
 8006020:	9b06      	ldr	r3, [sp, #24]
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	9400      	str	r4, [sp, #0]
 8006026:	4623      	mov	r3, r4
 8006028:	9a07      	ldr	r2, [sp, #28]
 800602a:	490d      	ldr	r1, [pc, #52]	; (8006060 <vTaskStartScheduler+0x58>)
 800602c:	480d      	ldr	r0, [pc, #52]	; (8006064 <vTaskStartScheduler+0x5c>)
 800602e:	f7ff ff7d 	bl	8005f2c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006032:	b190      	cbz	r0, 800605a <vTaskStartScheduler+0x52>
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006044:	4b08      	ldr	r3, [pc, #32]	; (8006068 <vTaskStartScheduler+0x60>)
 8006046:	f04f 32ff 	mov.w	r2, #4294967295
 800604a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800604c:	4b07      	ldr	r3, [pc, #28]	; (800606c <vTaskStartScheduler+0x64>)
 800604e:	2201      	movs	r2, #1
 8006050:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <vTaskStartScheduler+0x68>)
 8006054:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006056:	f000 fc8f 	bl	8006978 <xPortStartScheduler>
}
 800605a:	b008      	add	sp, #32
 800605c:	bd10      	pop	{r4, pc}
 800605e:	bf00      	nop
 8006060:	08009d34 	.word	0x08009d34
 8006064:	08005efd 	.word	0x08005efd
 8006068:	200004dc 	.word	0x200004dc
 800606c:	200004fc 	.word	0x200004fc
 8006070:	20000528 	.word	0x20000528

08006074 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006074:	4a02      	ldr	r2, [pc, #8]	; (8006080 <vTaskSuspendAll+0xc>)
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	6013      	str	r3, [r2, #0]
}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	200004a8 	.word	0x200004a8

08006084 <xTaskIncrementTick>:
{
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006086:	4b3a      	ldr	r3, [pc, #232]	; (8006170 <xTaskIncrementTick+0xec>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d169      	bne.n	8006162 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800608e:	4b39      	ldr	r3, [pc, #228]	; (8006174 <xTaskIncrementTick+0xf0>)
 8006090:	681d      	ldr	r5, [r3, #0]
 8006092:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006094:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006096:	b9c5      	cbnz	r5, 80060ca <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006098:	4b37      	ldr	r3, [pc, #220]	; (8006178 <xTaskIncrementTick+0xf4>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	b143      	cbz	r3, 80060b2 <xTaskIncrementTick+0x2e>
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	e7fe      	b.n	80060b0 <xTaskIncrementTick+0x2c>
 80060b2:	4a31      	ldr	r2, [pc, #196]	; (8006178 <xTaskIncrementTick+0xf4>)
 80060b4:	6811      	ldr	r1, [r2, #0]
 80060b6:	4b31      	ldr	r3, [pc, #196]	; (800617c <xTaskIncrementTick+0xf8>)
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	6010      	str	r0, [r2, #0]
 80060bc:	6019      	str	r1, [r3, #0]
 80060be:	4a30      	ldr	r2, [pc, #192]	; (8006180 <xTaskIncrementTick+0xfc>)
 80060c0:	6813      	ldr	r3, [r2, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	f7ff fd9f 	bl	8005c08 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ca:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <xTaskIncrementTick+0x100>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	42ab      	cmp	r3, r5
 80060d0:	d93d      	bls.n	800614e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80060d2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060d4:	4b2c      	ldr	r3, [pc, #176]	; (8006188 <xTaskIncrementTick+0x104>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060de:	009a      	lsls	r2, r3, #2
 80060e0:	4b2a      	ldr	r3, [pc, #168]	; (800618c <xTaskIncrementTick+0x108>)
 80060e2:	589b      	ldr	r3, [r3, r2]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d900      	bls.n	80060ea <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80060e8:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 80060ea:	4b29      	ldr	r3, [pc, #164]	; (8006190 <xTaskIncrementTick+0x10c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d03c      	beq.n	800616c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80060f2:	2401      	movs	r4, #1
	return xSwitchRequired;
 80060f4:	e03a      	b.n	800616c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80060f6:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f8:	4b1f      	ldr	r3, [pc, #124]	; (8006178 <xTaskIncrementTick+0xf4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	b343      	cbz	r3, 8006152 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <xTaskIncrementTick+0xf4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006108:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800610a:	429d      	cmp	r5, r3
 800610c:	d326      	bcc.n	800615c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800610e:	1d37      	adds	r7, r6, #4
 8006110:	4638      	mov	r0, r7
 8006112:	f7ff fab2 	bl	800567a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006116:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006118:	b11b      	cbz	r3, 8006122 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800611a:	f106 0018 	add.w	r0, r6, #24
 800611e:	f7ff faac 	bl	800567a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006122:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006124:	2201      	movs	r2, #1
 8006126:	409a      	lsls	r2, r3
 8006128:	491a      	ldr	r1, [pc, #104]	; (8006194 <xTaskIncrementTick+0x110>)
 800612a:	6808      	ldr	r0, [r1, #0]
 800612c:	4302      	orrs	r2, r0
 800612e:	600a      	str	r2, [r1, #0]
 8006130:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006134:	009a      	lsls	r2, r3, #2
 8006136:	4639      	mov	r1, r7
 8006138:	4814      	ldr	r0, [pc, #80]	; (800618c <xTaskIncrementTick+0x108>)
 800613a:	4410      	add	r0, r2
 800613c:	f7ff fa79 	bl	8005632 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006140:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <xTaskIncrementTick+0x104>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	429a      	cmp	r2, r3
 800614a:	d2d4      	bcs.n	80060f6 <xTaskIncrementTick+0x72>
 800614c:	e7d4      	b.n	80060f8 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800614e:	2400      	movs	r4, #0
 8006150:	e7d2      	b.n	80060f8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006152:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <xTaskIncrementTick+0x100>)
 8006154:	f04f 32ff 	mov.w	r2, #4294967295
 8006158:	601a      	str	r2, [r3, #0]
					break;
 800615a:	e7bb      	b.n	80060d4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800615c:	4a09      	ldr	r2, [pc, #36]	; (8006184 <xTaskIncrementTick+0x100>)
 800615e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006160:	e7b8      	b.n	80060d4 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8006162:	4a0d      	ldr	r2, [pc, #52]	; (8006198 <xTaskIncrementTick+0x114>)
 8006164:	6813      	ldr	r3, [r2, #0]
 8006166:	3301      	adds	r3, #1
 8006168:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800616a:	2400      	movs	r4, #0
}
 800616c:	4620      	mov	r0, r4
 800616e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006170:	200004a8 	.word	0x200004a8
 8006174:	20000528 	.word	0x20000528
 8006178:	2000040c 	.word	0x2000040c
 800617c:	20000410 	.word	0x20000410
 8006180:	200004e0 	.word	0x200004e0
 8006184:	200004dc 	.word	0x200004dc
 8006188:	20000408 	.word	0x20000408
 800618c:	20000414 	.word	0x20000414
 8006190:	2000052c 	.word	0x2000052c
 8006194:	200004b0 	.word	0x200004b0
 8006198:	200004e4 	.word	0x200004e4

0800619c <xTaskResumeAll>:
{
 800619c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800619e:	4b34      	ldr	r3, [pc, #208]	; (8006270 <xTaskResumeAll+0xd4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	b943      	cbnz	r3, 80061b6 <xTaskResumeAll+0x1a>
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	e7fe      	b.n	80061b4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80061b6:	f000 fb3d 	bl	8006834 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80061ba:	4b2d      	ldr	r3, [pc, #180]	; (8006270 <xTaskResumeAll+0xd4>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	3a01      	subs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d14d      	bne.n	8006264 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061c8:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <xTaskResumeAll+0xd8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	b90b      	cbnz	r3, 80061d2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80061ce:	2400      	movs	r4, #0
 80061d0:	e049      	b.n	8006266 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 80061d2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061d4:	4b28      	ldr	r3, [pc, #160]	; (8006278 <xTaskResumeAll+0xdc>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	b31b      	cbz	r3, 8006222 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061da:	4b27      	ldr	r3, [pc, #156]	; (8006278 <xTaskResumeAll+0xdc>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061e0:	f104 0018 	add.w	r0, r4, #24
 80061e4:	f7ff fa49 	bl	800567a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e8:	1d25      	adds	r5, r4, #4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7ff fa45 	bl	800567a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80061f2:	2301      	movs	r3, #1
 80061f4:	4083      	lsls	r3, r0
 80061f6:	4a21      	ldr	r2, [pc, #132]	; (800627c <xTaskResumeAll+0xe0>)
 80061f8:	6811      	ldr	r1, [r2, #0]
 80061fa:	430b      	orrs	r3, r1
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006202:	4629      	mov	r1, r5
 8006204:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <xTaskResumeAll+0xe4>)
 8006206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800620a:	f7ff fa12 	bl	8005632 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800620e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006210:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <xTaskResumeAll+0xe8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	429a      	cmp	r2, r3
 8006218:	d3dc      	bcc.n	80061d4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <xTaskResumeAll+0xec>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e7d8      	b.n	80061d4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8006222:	b10c      	cbz	r4, 8006228 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8006224:	f7ff fcf0 	bl	8005c08 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006228:	4b18      	ldr	r3, [pc, #96]	; (800628c <xTaskResumeAll+0xf0>)
 800622a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800622c:	b974      	cbnz	r4, 800624c <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 800622e:	4b16      	ldr	r3, [pc, #88]	; (8006288 <xTaskResumeAll+0xec>)
 8006230:	681c      	ldr	r4, [r3, #0]
 8006232:	b1c4      	cbz	r4, 8006266 <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8006234:	4b16      	ldr	r3, [pc, #88]	; (8006290 <xTaskResumeAll+0xf4>)
 8006236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006244:	2401      	movs	r4, #1
 8006246:	e00e      	b.n	8006266 <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006248:	3c01      	subs	r4, #1
 800624a:	d007      	beq.n	800625c <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 800624c:	f7ff ff1a 	bl	8006084 <xTaskIncrementTick>
 8006250:	2800      	cmp	r0, #0
 8006252:	d0f9      	beq.n	8006248 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <xTaskResumeAll+0xec>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e7f5      	b.n	8006248 <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <xTaskResumeAll+0xf0>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e7e4      	b.n	800622e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8006264:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006266:	f000 fb07 	bl	8006878 <vPortExitCritical>
}
 800626a:	4620      	mov	r0, r4
 800626c:	bd38      	pop	{r3, r4, r5, pc}
 800626e:	bf00      	nop
 8006270:	200004a8 	.word	0x200004a8
 8006274:	200004a0 	.word	0x200004a0
 8006278:	200004e8 	.word	0x200004e8
 800627c:	200004b0 	.word	0x200004b0
 8006280:	20000414 	.word	0x20000414
 8006284:	20000408 	.word	0x20000408
 8006288:	2000052c 	.word	0x2000052c
 800628c:	200004e4 	.word	0x200004e4
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <vTaskDelay>:
	{
 8006294:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006296:	b1a8      	cbz	r0, 80062c4 <vTaskDelay+0x30>
 8006298:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800629a:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <vTaskDelay+0x44>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	b143      	cbz	r3, 80062b2 <vTaskDelay+0x1e>
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	e7fe      	b.n	80062b0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80062b2:	f7ff fedf 	bl	8006074 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062b6:	2100      	movs	r1, #0
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7ff fdd3 	bl	8005e64 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80062be:	f7ff ff6d 	bl	800619c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80062c2:	b938      	cbnz	r0, 80062d4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <vTaskDelay+0x48>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
	}
 80062d4:	bd10      	pop	{r4, pc}
 80062d6:	bf00      	nop
 80062d8:	200004a8 	.word	0x200004a8
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062e0:	4b2c      	ldr	r3, [pc, #176]	; (8006394 <vTaskSwitchContext+0xb4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b11b      	cbz	r3, 80062ee <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80062e6:	4b2c      	ldr	r3, [pc, #176]	; (8006398 <vTaskSwitchContext+0xb8>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	4770      	bx	lr
{
 80062ee:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 80062f0:	4b29      	ldr	r3, [pc, #164]	; (8006398 <vTaskSwitchContext+0xb8>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80062f6:	4b29      	ldr	r3, [pc, #164]	; (800639c <vTaskSwitchContext+0xbc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8006302:	d103      	bne.n	800630c <vTaskSwitchContext+0x2c>
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800630a:	d01b      	beq.n	8006344 <vTaskSwitchContext+0x64>
 800630c:	4b23      	ldr	r3, [pc, #140]	; (800639c <vTaskSwitchContext+0xbc>)
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	6819      	ldr	r1, [r3, #0]
 8006312:	3134      	adds	r1, #52	; 0x34
 8006314:	f7fa ff8a 	bl	800122c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006318:	4b21      	ldr	r3, [pc, #132]	; (80063a0 <vTaskSwitchContext+0xc0>)
 800631a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800631c:	fab3 f383 	clz	r3, r3
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f1c3 031f 	rsb	r3, r3, #31
 8006326:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800632a:	008a      	lsls	r2, r1, #2
 800632c:	491d      	ldr	r1, [pc, #116]	; (80063a4 <vTaskSwitchContext+0xc4>)
 800632e:	588a      	ldr	r2, [r1, r2]
 8006330:	b98a      	cbnz	r2, 8006356 <vTaskSwitchContext+0x76>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	e7fe      	b.n	8006342 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800634a:	d1df      	bne.n	800630c <vTaskSwitchContext+0x2c>
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8006352:	d1db      	bne.n	800630c <vTaskSwitchContext+0x2c>
 8006354:	e7e0      	b.n	8006318 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006356:	4913      	ldr	r1, [pc, #76]	; (80063a4 <vTaskSwitchContext+0xc4>)
 8006358:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800635c:	0082      	lsls	r2, r0, #2
 800635e:	440a      	add	r2, r1
 8006360:	6850      	ldr	r0, [r2, #4]
 8006362:	6840      	ldr	r0, [r0, #4]
 8006364:	6050      	str	r0, [r2, #4]
 8006366:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800636a:	00a2      	lsls	r2, r4, #2
 800636c:	4614      	mov	r4, r2
 800636e:	3208      	adds	r2, #8
 8006370:	4411      	add	r1, r2
 8006372:	4288      	cmp	r0, r1
 8006374:	d009      	beq.n	800638a <vTaskSwitchContext+0xaa>
 8006376:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800637a:	009a      	lsls	r2, r3, #2
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <vTaskSwitchContext+0xc4>)
 800637e:	4413      	add	r3, r2
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <vTaskSwitchContext+0xbc>)
 8006386:	601a      	str	r2, [r3, #0]
}
 8006388:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800638a:	6840      	ldr	r0, [r0, #4]
 800638c:	4a05      	ldr	r2, [pc, #20]	; (80063a4 <vTaskSwitchContext+0xc4>)
 800638e:	4422      	add	r2, r4
 8006390:	6050      	str	r0, [r2, #4]
 8006392:	e7f0      	b.n	8006376 <vTaskSwitchContext+0x96>
 8006394:	200004a8 	.word	0x200004a8
 8006398:	2000052c 	.word	0x2000052c
 800639c:	20000408 	.word	0x20000408
 80063a0:	200004b0 	.word	0x200004b0
 80063a4:	20000414 	.word	0x20000414

080063a8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80063a8:	b158      	cbz	r0, 80063c2 <vTaskPlaceOnEventList+0x1a>
{
 80063aa:	b510      	push	{r4, lr}
 80063ac:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063ae:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <vTaskPlaceOnEventList+0x2c>)
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	3118      	adds	r1, #24
 80063b4:	f7ff f948 	bl	8005648 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063b8:	2101      	movs	r1, #1
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7ff fd52 	bl	8005e64 <prvAddCurrentTaskToDelayedList>
}
 80063c0:	bd10      	pop	{r4, pc}
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80063d2:	e7fe      	b.n	80063d2 <vTaskPlaceOnEventList+0x2a>
 80063d4:	20000408 	.word	0x20000408

080063d8 <xTaskRemoveFromEventList>:
{
 80063d8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063da:	68c3      	ldr	r3, [r0, #12]
 80063dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80063de:	b324      	cbz	r4, 800642a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063e0:	f104 0518 	add.w	r5, r4, #24
 80063e4:	4628      	mov	r0, r5
 80063e6:	f7ff f948 	bl	800567a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ea:	4b18      	ldr	r3, [pc, #96]	; (800644c <xTaskRemoveFromEventList+0x74>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	bb2b      	cbnz	r3, 800643c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063f0:	1d25      	adds	r5, r4, #4
 80063f2:	4628      	mov	r0, r5
 80063f4:	f7ff f941 	bl	800567a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80063fa:	2301      	movs	r3, #1
 80063fc:	4083      	lsls	r3, r0
 80063fe:	4a14      	ldr	r2, [pc, #80]	; (8006450 <xTaskRemoveFromEventList+0x78>)
 8006400:	6811      	ldr	r1, [r2, #0]
 8006402:	430b      	orrs	r3, r1
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800640a:	4629      	mov	r1, r5
 800640c:	4b11      	ldr	r3, [pc, #68]	; (8006454 <xTaskRemoveFromEventList+0x7c>)
 800640e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006412:	f7ff f90e 	bl	8005632 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <xTaskRemoveFromEventList+0x80>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	429a      	cmp	r2, r3
 8006420:	d911      	bls.n	8006446 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006422:	2001      	movs	r0, #1
 8006424:	4b0d      	ldr	r3, [pc, #52]	; (800645c <xTaskRemoveFromEventList+0x84>)
 8006426:	6018      	str	r0, [r3, #0]
 8006428:	e00e      	b.n	8006448 <xTaskRemoveFromEventList+0x70>
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800643a:	e7fe      	b.n	800643a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800643c:	4629      	mov	r1, r5
 800643e:	4808      	ldr	r0, [pc, #32]	; (8006460 <xTaskRemoveFromEventList+0x88>)
 8006440:	f7ff f8f7 	bl	8005632 <vListInsertEnd>
 8006444:	e7e7      	b.n	8006416 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8006446:	2000      	movs	r0, #0
}
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	200004a8 	.word	0x200004a8
 8006450:	200004b0 	.word	0x200004b0
 8006454:	20000414 	.word	0x20000414
 8006458:	20000408 	.word	0x20000408
 800645c:	2000052c 	.word	0x2000052c
 8006460:	200004e8 	.word	0x200004e8

08006464 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006464:	4b03      	ldr	r3, [pc, #12]	; (8006474 <vTaskInternalSetTimeOutState+0x10>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800646a:	4b03      	ldr	r3, [pc, #12]	; (8006478 <vTaskInternalSetTimeOutState+0x14>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6043      	str	r3, [r0, #4]
}
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	200004e0 	.word	0x200004e0
 8006478:	20000528 	.word	0x20000528

0800647c <xTaskCheckForTimeOut>:
{
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800647e:	b1c8      	cbz	r0, 80064b4 <xTaskCheckForTimeOut+0x38>
 8006480:	460c      	mov	r4, r1
 8006482:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006484:	b1f9      	cbz	r1, 80064c6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8006486:	f000 f9d5 	bl	8006834 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800648a:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <xTaskCheckForTimeOut+0x7c>)
 800648c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800648e:	686b      	ldr	r3, [r5, #4]
 8006490:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006498:	d026      	beq.n	80064e8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800649a:	682f      	ldr	r7, [r5, #0]
 800649c:	4e17      	ldr	r6, [pc, #92]	; (80064fc <xTaskCheckForTimeOut+0x80>)
 800649e:	6836      	ldr	r6, [r6, #0]
 80064a0:	42b7      	cmp	r7, r6
 80064a2:	d001      	beq.n	80064a8 <xTaskCheckForTimeOut+0x2c>
 80064a4:	428b      	cmp	r3, r1
 80064a6:	d924      	bls.n	80064f2 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064a8:	4282      	cmp	r2, r0
 80064aa:	d815      	bhi.n	80064d8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80064b0:	2401      	movs	r4, #1
 80064b2:	e01a      	b.n	80064ea <xTaskCheckForTimeOut+0x6e>
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80064c4:	e7fe      	b.n	80064c4 <xTaskCheckForTimeOut+0x48>
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80064d6:	e7fe      	b.n	80064d6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80064d8:	1a5b      	subs	r3, r3, r1
 80064da:	4413      	add	r3, r2
 80064dc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064de:	4628      	mov	r0, r5
 80064e0:	f7ff ffc0 	bl	8006464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064e4:	2400      	movs	r4, #0
 80064e6:	e000      	b.n	80064ea <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80064e8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80064ea:	f000 f9c5 	bl	8006878 <vPortExitCritical>
}
 80064ee:	4620      	mov	r0, r4
 80064f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80064f2:	2401      	movs	r4, #1
 80064f4:	e7f9      	b.n	80064ea <xTaskCheckForTimeOut+0x6e>
 80064f6:	bf00      	nop
 80064f8:	20000528 	.word	0x20000528
 80064fc:	200004e0 	.word	0x200004e0

08006500 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006500:	4b01      	ldr	r3, [pc, #4]	; (8006508 <vTaskMissedYield+0x8>)
 8006502:	2201      	movs	r2, #1
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	4770      	bx	lr
 8006508:	2000052c 	.word	0x2000052c

0800650c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <xTaskGetSchedulerState+0x18>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	b133      	cbz	r3, 8006520 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <xTaskGetSchedulerState+0x1c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	b10b      	cbz	r3, 800651c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006518:	2000      	movs	r0, #0
	}
 800651a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800651c:	2002      	movs	r0, #2
 800651e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006520:	2001      	movs	r0, #1
 8006522:	4770      	bx	lr
 8006524:	200004fc 	.word	0x200004fc
 8006528:	200004a8 	.word	0x200004a8

0800652c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800652c:	2800      	cmp	r0, #0
 800652e:	d049      	beq.n	80065c4 <xTaskPriorityInherit+0x98>
	{
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006534:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006536:	4a25      	ldr	r2, [pc, #148]	; (80065cc <xTaskPriorityInherit+0xa0>)
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800653c:	4293      	cmp	r3, r2
 800653e:	d239      	bcs.n	80065b4 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006540:	6982      	ldr	r2, [r0, #24]
 8006542:	2a00      	cmp	r2, #0
 8006544:	db05      	blt.n	8006552 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006546:	4a21      	ldr	r2, [pc, #132]	; (80065cc <xTaskPriorityInherit+0xa0>)
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800654c:	f1c2 0207 	rsb	r2, r2, #7
 8006550:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006552:	6961      	ldr	r1, [r4, #20]
 8006554:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <xTaskPriorityInherit+0xa4>)
 800655a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800655e:	4299      	cmp	r1, r3
 8006560:	d005      	beq.n	800656e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006562:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <xTaskPriorityInherit+0xa0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800656a:	2001      	movs	r0, #1
	}
 800656c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800656e:	1d25      	adds	r5, r4, #4
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff f882 	bl	800567a <uxListRemove>
 8006576:	b940      	cbnz	r0, 800658a <xTaskPriorityInherit+0x5e>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006578:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800657a:	2301      	movs	r3, #1
 800657c:	fa03 f202 	lsl.w	r2, r3, r2
 8006580:	4914      	ldr	r1, [pc, #80]	; (80065d4 <xTaskPriorityInherit+0xa8>)
 8006582:	680b      	ldr	r3, [r1, #0]
 8006584:	ea23 0302 	bic.w	r3, r3, r2
 8006588:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <xTaskPriorityInherit+0xa0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006590:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006592:	2401      	movs	r4, #1
 8006594:	fa04 f300 	lsl.w	r3, r4, r0
 8006598:	4a0e      	ldr	r2, [pc, #56]	; (80065d4 <xTaskPriorityInherit+0xa8>)
 800659a:	6811      	ldr	r1, [r2, #0]
 800659c:	430b      	orrs	r3, r1
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065a4:	4629      	mov	r1, r5
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <xTaskPriorityInherit+0xa4>)
 80065a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80065ac:	f7ff f841 	bl	8005632 <vListInsertEnd>
				xReturn = pdTRUE;
 80065b0:	4620      	mov	r0, r4
 80065b2:	e7db      	b.n	800656c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80065b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <xTaskPriorityInherit+0xa0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	429a      	cmp	r2, r3
 80065be:	d303      	bcc.n	80065c8 <xTaskPriorityInherit+0x9c>
	BaseType_t xReturn = pdFALSE;
 80065c0:	2000      	movs	r0, #0
 80065c2:	e7d3      	b.n	800656c <xTaskPriorityInherit+0x40>
 80065c4:	2000      	movs	r0, #0
	}
 80065c6:	4770      	bx	lr
					xReturn = pdTRUE;
 80065c8:	2001      	movs	r0, #1
		return xReturn;
 80065ca:	e7cf      	b.n	800656c <xTaskPriorityInherit+0x40>
 80065cc:	20000408 	.word	0x20000408
 80065d0:	20000414 	.word	0x20000414
 80065d4:	200004b0 	.word	0x200004b0

080065d8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80065d8:	2800      	cmp	r0, #0
 80065da:	d04c      	beq.n	8006676 <xTaskPriorityDisinherit+0x9e>
	{
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80065e0:	4b27      	ldr	r3, [pc, #156]	; (8006680 <xTaskPriorityDisinherit+0xa8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4283      	cmp	r3, r0
 80065e6:	d008      	beq.n	80065fa <xTaskPriorityDisinherit+0x22>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	e7fe      	b.n	80065f8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80065fa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80065fc:	b943      	cbnz	r3, 8006610 <xTaskPriorityDisinherit+0x38>
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	e7fe      	b.n	800660e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006610:	3b01      	subs	r3, #1
 8006612:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006614:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006616:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006618:	4291      	cmp	r1, r2
 800661a:	d02e      	beq.n	800667a <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800661c:	b10b      	cbz	r3, 8006622 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800661e:	2000      	movs	r0, #0
	}
 8006620:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006622:	1d05      	adds	r5, r0, #4
 8006624:	4628      	mov	r0, r5
 8006626:	f7ff f828 	bl	800567a <uxListRemove>
 800662a:	b970      	cbnz	r0, 800664a <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800662c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800662e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4913      	ldr	r1, [pc, #76]	; (8006684 <xTaskPriorityDisinherit+0xac>)
 8006636:	58cb      	ldr	r3, [r1, r3]
 8006638:	b93b      	cbnz	r3, 800664a <xTaskPriorityDisinherit+0x72>
 800663a:	2301      	movs	r3, #1
 800663c:	fa03 f202 	lsl.w	r2, r3, r2
 8006640:	4911      	ldr	r1, [pc, #68]	; (8006688 <xTaskPriorityDisinherit+0xb0>)
 8006642:	680b      	ldr	r3, [r1, #0]
 8006644:	ea23 0302 	bic.w	r3, r3, r2
 8006648:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800664a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800664c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800664e:	f1c0 0307 	rsb	r3, r0, #7
 8006652:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006654:	2401      	movs	r4, #1
 8006656:	fa04 f300 	lsl.w	r3, r4, r0
 800665a:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <xTaskPriorityDisinherit+0xb0>)
 800665c:	6811      	ldr	r1, [r2, #0]
 800665e:	430b      	orrs	r3, r1
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006666:	4629      	mov	r1, r5
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <xTaskPriorityDisinherit+0xac>)
 800666a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800666e:	f7fe ffe0 	bl	8005632 <vListInsertEnd>
					xReturn = pdTRUE;
 8006672:	4620      	mov	r0, r4
 8006674:	e7d4      	b.n	8006620 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006676:	2000      	movs	r0, #0
	}
 8006678:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800667a:	2000      	movs	r0, #0
 800667c:	e7d0      	b.n	8006620 <xTaskPriorityDisinherit+0x48>
 800667e:	bf00      	nop
 8006680:	20000408 	.word	0x20000408
 8006684:	20000414 	.word	0x20000414
 8006688:	200004b0 	.word	0x200004b0

0800668c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800668c:	2800      	cmp	r0, #0
 800668e:	d051      	beq.n	8006734 <vTaskPriorityDisinheritAfterTimeout+0xa8>
	{
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	460a      	mov	r2, r1
 8006694:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8006696:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006698:	b941      	cbnz	r1, 80066ac <vTaskPriorityDisinheritAfterTimeout+0x20>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	e7fe      	b.n	80066aa <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d200      	bcs.n	80066b4 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066b2:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80066b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d001      	beq.n	80066be <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066ba:	2901      	cmp	r1, #1
 80066bc:	d000      	beq.n	80066c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 80066be:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80066c0:	491d      	ldr	r1, [pc, #116]	; (8006738 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 80066c2:	6809      	ldr	r1, [r1, #0]
 80066c4:	42a1      	cmp	r1, r4
 80066c6:	d02c      	beq.n	8006722 <vTaskPriorityDisinheritAfterTimeout+0x96>
					pxTCB->uxPriority = uxPriorityToUse;
 80066c8:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066ca:	69a1      	ldr	r1, [r4, #24]
 80066cc:	2900      	cmp	r1, #0
 80066ce:	db02      	blt.n	80066d6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066d0:	f1c3 0307 	rsb	r3, r3, #7
 80066d4:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066d6:	6961      	ldr	r1, [r4, #20]
 80066d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80066dc:	4b17      	ldr	r3, [pc, #92]	; (800673c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80066de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80066e2:	4291      	cmp	r1, r2
 80066e4:	d1eb      	bne.n	80066be <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e6:	1d25      	adds	r5, r4, #4
 80066e8:	4628      	mov	r0, r5
 80066ea:	f7fe ffc6 	bl	800567a <uxListRemove>
 80066ee:	b940      	cbnz	r0, 8006702 <vTaskPriorityDisinheritAfterTimeout+0x76>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80066f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066f2:	2301      	movs	r3, #1
 80066f4:	fa03 f202 	lsl.w	r2, r3, r2
 80066f8:	4911      	ldr	r1, [pc, #68]	; (8006740 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 80066fa:	680b      	ldr	r3, [r1, #0]
 80066fc:	ea23 0302 	bic.w	r3, r3, r2
 8006700:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8006702:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006704:	2301      	movs	r3, #1
 8006706:	4083      	lsls	r3, r0
 8006708:	4a0d      	ldr	r2, [pc, #52]	; (8006740 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800670a:	6811      	ldr	r1, [r2, #0]
 800670c:	430b      	orrs	r3, r1
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006714:	4629      	mov	r1, r5
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8006718:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800671c:	f7fe ff89 	bl	8005632 <vListInsertEnd>
	}
 8006720:	e7cd      	b.n	80066be <vTaskPriorityDisinheritAfterTimeout+0x32>
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8006732:	e7fe      	b.n	8006732 <vTaskPriorityDisinheritAfterTimeout+0xa6>
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000408 	.word	0x20000408
 800673c:	20000414 	.word	0x20000414
 8006740:	200004b0 	.word	0x200004b0

08006744 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <pvTaskIncrementMutexHeldCount+0x18>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	b123      	cbz	r3, 8006754 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800674a:	4b04      	ldr	r3, [pc, #16]	; (800675c <pvTaskIncrementMutexHeldCount+0x18>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006750:	3301      	adds	r3, #1
 8006752:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8006754:	4b01      	ldr	r3, [pc, #4]	; (800675c <pvTaskIncrementMutexHeldCount+0x18>)
 8006756:	6818      	ldr	r0, [r3, #0]
	}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000408 	.word	0x20000408

08006760 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006760:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <prvTaskExitError+0x3c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d008      	beq.n	8006782 <prvTaskExitError+0x22>
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	e7fe      	b.n	8006780 <prvTaskExitError+0x20>
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006792:	9b01      	ldr	r3, [sp, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0fc      	beq.n	8006792 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006798:	b002      	add	sp, #8
 800679a:	4770      	bx	lr
 800679c:	2000005c 	.word	0x2000005c

080067a0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067a0:	4808      	ldr	r0, [pc, #32]	; (80067c4 <prvPortStartFirstTask+0x24>)
 80067a2:	6800      	ldr	r0, [r0, #0]
 80067a4:	6800      	ldr	r0, [r0, #0]
 80067a6:	f380 8808 	msr	MSP, r0
 80067aa:	f04f 0000 	mov.w	r0, #0
 80067ae:	f380 8814 	msr	CONTROL, r0
 80067b2:	b662      	cpsie	i
 80067b4:	b661      	cpsie	f
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	df00      	svc	0
 80067c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067c2:	0000      	.short	0x0000
 80067c4:	e000ed08 	.word	0xe000ed08

080067c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067d8 <vPortEnableVFP+0x10>
 80067cc:	6801      	ldr	r1, [r0, #0]
 80067ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067d2:	6001      	str	r1, [r0, #0]
 80067d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067d6:	0000      	.short	0x0000
 80067d8:	e000ed88 	.word	0xe000ed88

080067dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067e4:	f021 0101 	bic.w	r1, r1, #1
 80067e8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <pxPortInitialiseStack+0x28>)
 80067ee:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067f2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067f6:	f06f 0302 	mvn.w	r3, #2
 80067fa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80067fe:	3844      	subs	r0, #68	; 0x44
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	08006761 	.word	0x08006761
	...

08006810 <SVC_Handler>:
	__asm volatile (
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <pxCurrentTCBConst2>)
 8006812:	6819      	ldr	r1, [r3, #0]
 8006814:	6808      	ldr	r0, [r1, #0]
 8006816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681a:	f380 8809 	msr	PSP, r0
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8811 	msr	BASEPRI, r0
 800682a:	4770      	bx	lr
 800682c:	f3af 8000 	nop.w

08006830 <pxCurrentTCBConst2>:
 8006830:	20000408 	.word	0x20000408

08006834 <vPortEnterCritical>:
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006844:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <vPortEnterCritical+0x3c>)
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800684c:	2b01      	cmp	r3, #1
 800684e:	d000      	beq.n	8006852 <vPortEnterCritical+0x1e>
}
 8006850:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <vPortEnterCritical+0x40>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f013 0fff 	tst.w	r3, #255	; 0xff
 800685a:	d0f9      	beq.n	8006850 <vPortEnterCritical+0x1c>
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	e7fe      	b.n	800686c <vPortEnterCritical+0x38>
 800686e:	bf00      	nop
 8006870:	2000005c 	.word	0x2000005c
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006878:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <vPortExitCritical+0x28>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	b943      	cbnz	r3, 8006890 <vPortExitCritical+0x18>
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	e7fe      	b.n	800688e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006890:	3b01      	subs	r3, #1
 8006892:	4a03      	ldr	r2, [pc, #12]	; (80068a0 <vPortExitCritical+0x28>)
 8006894:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006896:	b90b      	cbnz	r3, 800689c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006898:	f383 8811 	msr	BASEPRI, r3
}
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	2000005c 	.word	0x2000005c
	...

080068b0 <PendSV_Handler>:
	__asm volatile
 80068b0:	f3ef 8009 	mrs	r0, PSP
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	4b15      	ldr	r3, [pc, #84]	; (8006910 <pxCurrentTCBConst>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f01e 0f10 	tst.w	lr, #16
 80068c0:	bf08      	it	eq
 80068c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	6010      	str	r0, [r2, #0]
 80068cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068d4:	f380 8811 	msr	BASEPRI, r0
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f7ff fcfe 	bl	80062e0 <vTaskSwitchContext>
 80068e4:	f04f 0000 	mov.w	r0, #0
 80068e8:	f380 8811 	msr	BASEPRI, r0
 80068ec:	bc09      	pop	{r0, r3}
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	6808      	ldr	r0, [r1, #0]
 80068f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f6:	f01e 0f10 	tst.w	lr, #16
 80068fa:	bf08      	it	eq
 80068fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006900:	f380 8809 	msr	PSP, r0
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst>:
 8006910:	20000408 	.word	0x20000408

08006914 <SysTick_Handler>:
{
 8006914:	b508      	push	{r3, lr}
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006926:	f7ff fbad 	bl	8006084 <xTaskIncrementTick>
 800692a:	b118      	cbz	r0, 8006934 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800692c:	4b03      	ldr	r3, [pc, #12]	; (800693c <SysTick_Handler+0x28>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006934:	2300      	movs	r3, #0
 8006936:	f383 8811 	msr	BASEPRI, r3
}
 800693a:	bd08      	pop	{r3, pc}
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006940:	4a08      	ldr	r2, [pc, #32]	; (8006964 <vPortSetupTimerInterrupt+0x24>)
 8006942:	2300      	movs	r3, #0
 8006944:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006946:	4908      	ldr	r1, [pc, #32]	; (8006968 <vPortSetupTimerInterrupt+0x28>)
 8006948:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800694a:	4b08      	ldr	r3, [pc, #32]	; (800696c <vPortSetupTimerInterrupt+0x2c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4908      	ldr	r1, [pc, #32]	; (8006970 <vPortSetupTimerInterrupt+0x30>)
 8006950:	fba1 1303 	umull	r1, r3, r1, r3
 8006954:	099b      	lsrs	r3, r3, #6
 8006956:	3b01      	subs	r3, #1
 8006958:	4906      	ldr	r1, [pc, #24]	; (8006974 <vPortSetupTimerInterrupt+0x34>)
 800695a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800695c:	2307      	movs	r3, #7
 800695e:	6013      	str	r3, [r2, #0]
}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	e000e010 	.word	0xe000e010
 8006968:	e000e018 	.word	0xe000e018
 800696c:	20000050 	.word	0x20000050
 8006970:	10624dd3 	.word	0x10624dd3
 8006974:	e000e014 	.word	0xe000e014

08006978 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006978:	4b3a      	ldr	r3, [pc, #232]	; (8006a64 <xPortStartScheduler+0xec>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b3a      	ldr	r3, [pc, #232]	; (8006a68 <xPortStartScheduler+0xf0>)
 800697e:	429a      	cmp	r2, r3
 8006980:	d029      	beq.n	80069d6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006982:	4b38      	ldr	r3, [pc, #224]	; (8006a64 <xPortStartScheduler+0xec>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4b39      	ldr	r3, [pc, #228]	; (8006a6c <xPortStartScheduler+0xf4>)
 8006988:	429a      	cmp	r2, r3
 800698a:	d02d      	beq.n	80069e8 <xPortStartScheduler+0x70>
{
 800698c:	b510      	push	{r4, lr}
 800698e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006990:	4b37      	ldr	r3, [pc, #220]	; (8006a70 <xPortStartScheduler+0xf8>)
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006998:	22ff      	movs	r2, #255	; 0xff
 800699a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80069a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069ac:	4a31      	ldr	r2, [pc, #196]	; (8006a74 <xPortStartScheduler+0xfc>)
 80069ae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069b0:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <xPortStartScheduler+0x100>)
 80069b2:	2207      	movs	r2, #7
 80069b4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80069ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069be:	d01c      	beq.n	80069fa <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80069c0:	4a2d      	ldr	r2, [pc, #180]	; (8006a78 <xPortStartScheduler+0x100>)
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f88d 3003 	strb.w	r3, [sp, #3]
 80069d4:	e7ef      	b.n	80069b6 <xPortStartScheduler+0x3e>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069e6:	e7fe      	b.n	80069e6 <xPortStartScheduler+0x6e>
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069f8:	e7fe      	b.n	80069f8 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069fa:	4b1f      	ldr	r3, [pc, #124]	; (8006a78 <xPortStartScheduler+0x100>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d008      	beq.n	8006a14 <xPortStartScheduler+0x9c>
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	e7fe      	b.n	8006a12 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a14:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a1a:	4a17      	ldr	r2, [pc, #92]	; (8006a78 <xPortStartScheduler+0x100>)
 8006a1c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <xPortStartScheduler+0xf8>)
 8006a24:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <xPortStartScheduler+0x104>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006a2e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006a36:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006a38:	f7ff ff82 	bl	8006940 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006a3c:	2400      	movs	r4, #0
 8006a3e:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <xPortStartScheduler+0x108>)
 8006a40:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006a42:	f7ff fec1 	bl	80067c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a46:	4a0f      	ldr	r2, [pc, #60]	; (8006a84 <xPortStartScheduler+0x10c>)
 8006a48:	6813      	ldr	r3, [r2, #0]
 8006a4a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a4e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006a50:	f7ff fea6 	bl	80067a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006a54:	f7ff fc44 	bl	80062e0 <vTaskSwitchContext>
	prvTaskExitError();
 8006a58:	f7ff fe82 	bl	8006760 <prvTaskExitError>
}
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	b002      	add	sp, #8
 8006a60:	bd10      	pop	{r4, pc}
 8006a62:	bf00      	nop
 8006a64:	e000ed00 	.word	0xe000ed00
 8006a68:	410fc271 	.word	0x410fc271
 8006a6c:	410fc270 	.word	0x410fc270
 8006a70:	e000e400 	.word	0xe000e400
 8006a74:	20000530 	.word	0x20000530
 8006a78:	20000534 	.word	0x20000534
 8006a7c:	e000ed20 	.word	0xe000ed20
 8006a80:	2000005c 	.word	0x2000005c
 8006a84:	e000ef34 	.word	0xe000ef34

08006a88 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a88:	4a12      	ldr	r2, [pc, #72]	; (8006ad4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a8a:	f012 0f07 	tst.w	r2, #7
 8006a8e:	d01e      	beq.n	8006ace <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a90:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a92:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a96:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 8006a9a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a9c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a9e:	480e      	ldr	r0, [pc, #56]	; (8006ad8 <prvHeapInit+0x50>)
 8006aa0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aa6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006aa8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006aae:	480b      	ldr	r0, [pc, #44]	; (8006adc <prvHeapInit+0x54>)
 8006ab0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006ab2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ab4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ab6:	1a99      	subs	r1, r3, r2
 8006ab8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006aba:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006abc:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <prvHeapInit+0x58>)
 8006abe:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac0:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <prvHeapInit+0x5c>)
 8006ac2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ac4:	4b08      	ldr	r3, [pc, #32]	; (8006ae8 <prvHeapInit+0x60>)
 8006ac6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006aca:	601a      	str	r2, [r3, #0]
}
 8006acc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad2:	e7e4      	b.n	8006a9e <prvHeapInit+0x16>
 8006ad4:	2000053c 	.word	0x2000053c
 8006ad8:	20008550 	.word	0x20008550
 8006adc:	20000538 	.word	0x20000538
 8006ae0:	20008544 	.word	0x20008544
 8006ae4:	20008540 	.word	0x20008540
 8006ae8:	2000853c 	.word	0x2000853c

08006aec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006aec:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <prvInsertBlockIntoFreeList+0x50>)
 8006af0:	461a      	mov	r2, r3
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4283      	cmp	r3, r0
 8006af6:	d3fb      	bcc.n	8006af0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006af8:	6851      	ldr	r1, [r2, #4]
 8006afa:	1854      	adds	r4, r2, r1
 8006afc:	4284      	cmp	r4, r0
 8006afe:	d00a      	beq.n	8006b16 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b00:	6841      	ldr	r1, [r0, #4]
 8006b02:	1844      	adds	r4, r0, r1
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	d00b      	beq.n	8006b20 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b08:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b0a:	4290      	cmp	r0, r2
 8006b0c:	d000      	beq.n	8006b10 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b0e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b14:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b16:	6840      	ldr	r0, [r0, #4]
 8006b18:	4401      	add	r1, r0
 8006b1a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	e7ef      	b.n	8006b00 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b20:	4c07      	ldr	r4, [pc, #28]	; (8006b40 <prvInsertBlockIntoFreeList+0x54>)
 8006b22:	6824      	ldr	r4, [r4, #0]
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	d006      	beq.n	8006b36 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4419      	add	r1, r3
 8006b2c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6003      	str	r3, [r0, #0]
 8006b34:	e7e9      	b.n	8006b0a <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b36:	6004      	str	r4, [r0, #0]
 8006b38:	e7e7      	b.n	8006b0a <prvInsertBlockIntoFreeList+0x1e>
 8006b3a:	bf00      	nop
 8006b3c:	20008550 	.word	0x20008550
 8006b40:	20000538 	.word	0x20000538

08006b44 <pvPortMalloc>:
{
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006b48:	f7ff fa94 	bl	8006074 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006b4c:	4b3b      	ldr	r3, [pc, #236]	; (8006c3c <pvPortMalloc+0xf8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	b19b      	cbz	r3, 8006b7a <pvPortMalloc+0x36>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b52:	4b3b      	ldr	r3, [pc, #236]	; (8006c40 <pvPortMalloc+0xfc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	421c      	tst	r4, r3
 8006b58:	d112      	bne.n	8006b80 <pvPortMalloc+0x3c>
			if( xWantedSize > 0 )
 8006b5a:	b134      	cbz	r4, 8006b6a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8006b5c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b5e:	f014 0f07 	tst.w	r4, #7
 8006b62:	d002      	beq.n	8006b6a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b64:	f024 0407 	bic.w	r4, r4, #7
 8006b68:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b6a:	b1d4      	cbz	r4, 8006ba2 <pvPortMalloc+0x5e>
 8006b6c:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <pvPortMalloc+0x100>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	d31a      	bcc.n	8006baa <pvPortMalloc+0x66>
				pxBlock = xStart.pxNextFreeBlock;
 8006b74:	4b34      	ldr	r3, [pc, #208]	; (8006c48 <pvPortMalloc+0x104>)
 8006b76:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b78:	e01d      	b.n	8006bb6 <pvPortMalloc+0x72>
			prvHeapInit();
 8006b7a:	f7ff ff85 	bl	8006a88 <prvHeapInit>
 8006b7e:	e7e8      	b.n	8006b52 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 8006b80:	f7ff fb0c 	bl	800619c <xTaskResumeAll>
void *pvReturn = NULL;
 8006b84:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8006b86:	f7fa fb52 	bl	800122e <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b8a:	f016 0f07 	tst.w	r6, #7
 8006b8e:	d053      	beq.n	8006c38 <pvPortMalloc+0xf4>
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	e7fe      	b.n	8006ba0 <pvPortMalloc+0x5c>
	( void ) xTaskResumeAll();
 8006ba2:	f7ff fafb 	bl	800619c <xTaskResumeAll>
void *pvReturn = NULL;
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	e7ed      	b.n	8006b86 <pvPortMalloc+0x42>
	( void ) xTaskResumeAll();
 8006baa:	f7ff faf7 	bl	800619c <xTaskResumeAll>
void *pvReturn = NULL;
 8006bae:	2600      	movs	r6, #0
 8006bb0:	e7e9      	b.n	8006b86 <pvPortMalloc+0x42>
					pxPreviousBlock = pxBlock;
 8006bb2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bb4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bb6:	686a      	ldr	r2, [r5, #4]
 8006bb8:	42a2      	cmp	r2, r4
 8006bba:	d202      	bcs.n	8006bc2 <pvPortMalloc+0x7e>
 8006bbc:	682a      	ldr	r2, [r5, #0]
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	d1f7      	bne.n	8006bb2 <pvPortMalloc+0x6e>
				if( pxBlock != pxEnd )
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <pvPortMalloc+0xf8>)
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	42aa      	cmp	r2, r5
 8006bc8:	d014      	beq.n	8006bf4 <pvPortMalloc+0xb0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bca:	681e      	ldr	r6, [r3, #0]
 8006bcc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bce:	682a      	ldr	r2, [r5, #0]
 8006bd0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bd2:	686b      	ldr	r3, [r5, #4]
 8006bd4:	1b1b      	subs	r3, r3, r4
 8006bd6:	2b10      	cmp	r3, #16
 8006bd8:	d914      	bls.n	8006c04 <pvPortMalloc+0xc0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bda:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bdc:	f010 0f07 	tst.w	r0, #7
 8006be0:	d00c      	beq.n	8006bfc <pvPortMalloc+0xb8>
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	e7fe      	b.n	8006bf2 <pvPortMalloc+0xae>
	( void ) xTaskResumeAll();
 8006bf4:	f7ff fad2 	bl	800619c <xTaskResumeAll>
void *pvReturn = NULL;
 8006bf8:	2600      	movs	r6, #0
 8006bfa:	e7c4      	b.n	8006b86 <pvPortMalloc+0x42>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bfc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bfe:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c00:	f7ff ff74 	bl	8006aec <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c04:	686a      	ldr	r2, [r5, #4]
 8006c06:	490f      	ldr	r1, [pc, #60]	; (8006c44 <pvPortMalloc+0x100>)
 8006c08:	680b      	ldr	r3, [r1, #0]
 8006c0a:	1a9b      	subs	r3, r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c0e:	490f      	ldr	r1, [pc, #60]	; (8006c4c <pvPortMalloc+0x108>)
 8006c10:	6809      	ldr	r1, [r1, #0]
 8006c12:	428b      	cmp	r3, r1
 8006c14:	d201      	bcs.n	8006c1a <pvPortMalloc+0xd6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c16:	490d      	ldr	r1, [pc, #52]	; (8006c4c <pvPortMalloc+0x108>)
 8006c18:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c1a:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <pvPortMalloc+0xfc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8006c26:	4a0a      	ldr	r2, [pc, #40]	; (8006c50 <pvPortMalloc+0x10c>)
 8006c28:	6813      	ldr	r3, [r2, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8006c2e:	f7ff fab5 	bl	800619c <xTaskResumeAll>
		if( pvReturn == NULL )
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	d1a9      	bne.n	8006b8a <pvPortMalloc+0x46>
 8006c36:	e7a6      	b.n	8006b86 <pvPortMalloc+0x42>
}
 8006c38:	4630      	mov	r0, r6
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	20000538 	.word	0x20000538
 8006c40:	2000853c 	.word	0x2000853c
 8006c44:	20008540 	.word	0x20008540
 8006c48:	20008550 	.word	0x20008550
 8006c4c:	20008544 	.word	0x20008544
 8006c50:	20008548 	.word	0x20008548

08006c54 <vPortFree>:
	if( pv != NULL )
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d034      	beq.n	8006cc2 <vPortFree+0x6e>
{
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006c5c:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c60:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006c64:	4a17      	ldr	r2, [pc, #92]	; (8006cc4 <vPortFree+0x70>)
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	4213      	tst	r3, r2
 8006c6a:	d108      	bne.n	8006c7e <vPortFree+0x2a>
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	e7fe      	b.n	8006c7c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c7e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006c82:	b141      	cbz	r1, 8006c96 <vPortFree+0x42>
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	e7fe      	b.n	8006c94 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c96:	ea23 0302 	bic.w	r3, r3, r2
 8006c9a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006c9e:	f7ff f9e9 	bl	8006074 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ca2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006ca6:	4a08      	ldr	r2, [pc, #32]	; (8006cc8 <vPortFree+0x74>)
 8006ca8:	6813      	ldr	r3, [r2, #0]
 8006caa:	440b      	add	r3, r1
 8006cac:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f7ff ff1c 	bl	8006aec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cb4:	4a05      	ldr	r2, [pc, #20]	; (8006ccc <vPortFree+0x78>)
 8006cb6:	6813      	ldr	r3, [r2, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006cbc:	f7ff fa6e 	bl	800619c <xTaskResumeAll>
}
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
 8006cc2:	4770      	bx	lr
 8006cc4:	2000853c 	.word	0x2000853c
 8006cc8:	20008540 	.word	0x20008540
 8006ccc:	2000854c 	.word	0x2000854c

08006cd0 <__errno>:
 8006cd0:	4b01      	ldr	r3, [pc, #4]	; (8006cd8 <__errno+0x8>)
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20000060 	.word	0x20000060

08006cdc <__libc_init_array>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	4d0d      	ldr	r5, [pc, #52]	; (8006d14 <__libc_init_array+0x38>)
 8006ce0:	4c0d      	ldr	r4, [pc, #52]	; (8006d18 <__libc_init_array+0x3c>)
 8006ce2:	1b64      	subs	r4, r4, r5
 8006ce4:	10a4      	asrs	r4, r4, #2
 8006ce6:	2600      	movs	r6, #0
 8006ce8:	42a6      	cmp	r6, r4
 8006cea:	d109      	bne.n	8006d00 <__libc_init_array+0x24>
 8006cec:	4d0b      	ldr	r5, [pc, #44]	; (8006d1c <__libc_init_array+0x40>)
 8006cee:	4c0c      	ldr	r4, [pc, #48]	; (8006d20 <__libc_init_array+0x44>)
 8006cf0:	f000 fc9c 	bl	800762c <_init>
 8006cf4:	1b64      	subs	r4, r4, r5
 8006cf6:	10a4      	asrs	r4, r4, #2
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	42a6      	cmp	r6, r4
 8006cfc:	d105      	bne.n	8006d0a <__libc_init_array+0x2e>
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
 8006d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d04:	4798      	blx	r3
 8006d06:	3601      	adds	r6, #1
 8006d08:	e7ee      	b.n	8006ce8 <__libc_init_array+0xc>
 8006d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0e:	4798      	blx	r3
 8006d10:	3601      	adds	r6, #1
 8006d12:	e7f2      	b.n	8006cfa <__libc_init_array+0x1e>
 8006d14:	08009dd8 	.word	0x08009dd8
 8006d18:	08009dd8 	.word	0x08009dd8
 8006d1c:	08009dd8 	.word	0x08009dd8
 8006d20:	08009ddc 	.word	0x08009ddc

08006d24 <memcpy>:
 8006d24:	440a      	add	r2, r1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d2c:	d100      	bne.n	8006d30 <memcpy+0xc>
 8006d2e:	4770      	bx	lr
 8006d30:	b510      	push	{r4, lr}
 8006d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	d1f9      	bne.n	8006d32 <memcpy+0xe>
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <memset>:
 8006d40:	4402      	add	r2, r0
 8006d42:	4603      	mov	r3, r0
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d100      	bne.n	8006d4a <memset+0xa>
 8006d48:	4770      	bx	lr
 8006d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4e:	e7f9      	b.n	8006d44 <memset+0x4>

08006d50 <sniprintf>:
 8006d50:	b40c      	push	{r2, r3}
 8006d52:	b530      	push	{r4, r5, lr}
 8006d54:	4b17      	ldr	r3, [pc, #92]	; (8006db4 <sniprintf+0x64>)
 8006d56:	1e0c      	subs	r4, r1, #0
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	b09d      	sub	sp, #116	; 0x74
 8006d5c:	da08      	bge.n	8006d70 <sniprintf+0x20>
 8006d5e:	238b      	movs	r3, #139	; 0x8b
 8006d60:	602b      	str	r3, [r5, #0]
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	b01d      	add	sp, #116	; 0x74
 8006d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6c:	b002      	add	sp, #8
 8006d6e:	4770      	bx	lr
 8006d70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d78:	bf14      	ite	ne
 8006d7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d7e:	4623      	moveq	r3, r4
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	9307      	str	r3, [sp, #28]
 8006d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d88:	9002      	str	r0, [sp, #8]
 8006d8a:	9006      	str	r0, [sp, #24]
 8006d8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d92:	ab21      	add	r3, sp, #132	; 0x84
 8006d94:	a902      	add	r1, sp, #8
 8006d96:	4628      	mov	r0, r5
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	f000 f8ff 	bl	8006f9c <_svfiprintf_r>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	bfbc      	itt	lt
 8006da2:	238b      	movlt	r3, #139	; 0x8b
 8006da4:	602b      	strlt	r3, [r5, #0]
 8006da6:	2c00      	cmp	r4, #0
 8006da8:	d0dd      	beq.n	8006d66 <sniprintf+0x16>
 8006daa:	9b02      	ldr	r3, [sp, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	e7d9      	b.n	8006d66 <sniprintf+0x16>
 8006db2:	bf00      	nop
 8006db4:	20000060 	.word	0x20000060

08006db8 <_vsniprintf_r>:
 8006db8:	b530      	push	{r4, r5, lr}
 8006dba:	1e14      	subs	r4, r2, #0
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	b09b      	sub	sp, #108	; 0x6c
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	da05      	bge.n	8006dd0 <_vsniprintf_r+0x18>
 8006dc4:	238b      	movs	r3, #139	; 0x8b
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	b01b      	add	sp, #108	; 0x6c
 8006dce:	bd30      	pop	{r4, r5, pc}
 8006dd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006dd4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006dd8:	bf14      	ite	ne
 8006dda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006dde:	4623      	moveq	r3, r4
 8006de0:	9302      	str	r3, [sp, #8]
 8006de2:	9305      	str	r3, [sp, #20]
 8006de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006de8:	9100      	str	r1, [sp, #0]
 8006dea:	9104      	str	r1, [sp, #16]
 8006dec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006df0:	4602      	mov	r2, r0
 8006df2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006df4:	4669      	mov	r1, sp
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 f8d0 	bl	8006f9c <_svfiprintf_r>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	bfbc      	itt	lt
 8006e00:	238b      	movlt	r3, #139	; 0x8b
 8006e02:	602b      	strlt	r3, [r5, #0]
 8006e04:	2c00      	cmp	r4, #0
 8006e06:	d0e1      	beq.n	8006dcc <_vsniprintf_r+0x14>
 8006e08:	9b00      	ldr	r3, [sp, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e7dd      	b.n	8006dcc <_vsniprintf_r+0x14>

08006e10 <vsniprintf>:
 8006e10:	b507      	push	{r0, r1, r2, lr}
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	460a      	mov	r2, r1
 8006e18:	4601      	mov	r1, r0
 8006e1a:	4803      	ldr	r0, [pc, #12]	; (8006e28 <vsniprintf+0x18>)
 8006e1c:	6800      	ldr	r0, [r0, #0]
 8006e1e:	f7ff ffcb 	bl	8006db8 <_vsniprintf_r>
 8006e22:	b003      	add	sp, #12
 8006e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e28:	20000060 	.word	0x20000060

08006e2c <__retarget_lock_acquire_recursive>:
 8006e2c:	4770      	bx	lr

08006e2e <__retarget_lock_release_recursive>:
 8006e2e:	4770      	bx	lr

08006e30 <_malloc_r>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	1ccd      	adds	r5, r1, #3
 8006e34:	f025 0503 	bic.w	r5, r5, #3
 8006e38:	3508      	adds	r5, #8
 8006e3a:	2d0c      	cmp	r5, #12
 8006e3c:	bf38      	it	cc
 8006e3e:	250c      	movcc	r5, #12
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	4606      	mov	r6, r0
 8006e44:	db01      	blt.n	8006e4a <_malloc_r+0x1a>
 8006e46:	42a9      	cmp	r1, r5
 8006e48:	d903      	bls.n	8006e52 <_malloc_r+0x22>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	6033      	str	r3, [r6, #0]
 8006e4e:	2000      	movs	r0, #0
 8006e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e52:	f000 fb61 	bl	8007518 <__malloc_lock>
 8006e56:	4921      	ldr	r1, [pc, #132]	; (8006edc <_malloc_r+0xac>)
 8006e58:	680a      	ldr	r2, [r1, #0]
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	b99c      	cbnz	r4, 8006e86 <_malloc_r+0x56>
 8006e5e:	4f20      	ldr	r7, [pc, #128]	; (8006ee0 <_malloc_r+0xb0>)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	b923      	cbnz	r3, 8006e6e <_malloc_r+0x3e>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4630      	mov	r0, r6
 8006e68:	f000 fb2c 	bl	80074c4 <_sbrk_r>
 8006e6c:	6038      	str	r0, [r7, #0]
 8006e6e:	4629      	mov	r1, r5
 8006e70:	4630      	mov	r0, r6
 8006e72:	f000 fb27 	bl	80074c4 <_sbrk_r>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d123      	bne.n	8006ec2 <_malloc_r+0x92>
 8006e7a:	230c      	movs	r3, #12
 8006e7c:	6033      	str	r3, [r6, #0]
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f000 fb50 	bl	8007524 <__malloc_unlock>
 8006e84:	e7e3      	b.n	8006e4e <_malloc_r+0x1e>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	1b5b      	subs	r3, r3, r5
 8006e8a:	d417      	bmi.n	8006ebc <_malloc_r+0x8c>
 8006e8c:	2b0b      	cmp	r3, #11
 8006e8e:	d903      	bls.n	8006e98 <_malloc_r+0x68>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	441c      	add	r4, r3
 8006e94:	6025      	str	r5, [r4, #0]
 8006e96:	e004      	b.n	8006ea2 <_malloc_r+0x72>
 8006e98:	6863      	ldr	r3, [r4, #4]
 8006e9a:	42a2      	cmp	r2, r4
 8006e9c:	bf0c      	ite	eq
 8006e9e:	600b      	streq	r3, [r1, #0]
 8006ea0:	6053      	strne	r3, [r2, #4]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f000 fb3e 	bl	8007524 <__malloc_unlock>
 8006ea8:	f104 000b 	add.w	r0, r4, #11
 8006eac:	1d23      	adds	r3, r4, #4
 8006eae:	f020 0007 	bic.w	r0, r0, #7
 8006eb2:	1ac2      	subs	r2, r0, r3
 8006eb4:	d0cc      	beq.n	8006e50 <_malloc_r+0x20>
 8006eb6:	1a1b      	subs	r3, r3, r0
 8006eb8:	50a3      	str	r3, [r4, r2]
 8006eba:	e7c9      	b.n	8006e50 <_malloc_r+0x20>
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	6864      	ldr	r4, [r4, #4]
 8006ec0:	e7cc      	b.n	8006e5c <_malloc_r+0x2c>
 8006ec2:	1cc4      	adds	r4, r0, #3
 8006ec4:	f024 0403 	bic.w	r4, r4, #3
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d0e3      	beq.n	8006e94 <_malloc_r+0x64>
 8006ecc:	1a21      	subs	r1, r4, r0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f000 faf8 	bl	80074c4 <_sbrk_r>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d1dd      	bne.n	8006e94 <_malloc_r+0x64>
 8006ed8:	e7cf      	b.n	8006e7a <_malloc_r+0x4a>
 8006eda:	bf00      	nop
 8006edc:	20008558 	.word	0x20008558
 8006ee0:	2000855c 	.word	0x2000855c

08006ee4 <__ssputs_r>:
 8006ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	688e      	ldr	r6, [r1, #8]
 8006eea:	429e      	cmp	r6, r3
 8006eec:	4682      	mov	sl, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	4690      	mov	r8, r2
 8006ef2:	461f      	mov	r7, r3
 8006ef4:	d838      	bhi.n	8006f68 <__ssputs_r+0x84>
 8006ef6:	898a      	ldrh	r2, [r1, #12]
 8006ef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006efc:	d032      	beq.n	8006f64 <__ssputs_r+0x80>
 8006efe:	6825      	ldr	r5, [r4, #0]
 8006f00:	6909      	ldr	r1, [r1, #16]
 8006f02:	eba5 0901 	sub.w	r9, r5, r1
 8006f06:	6965      	ldr	r5, [r4, #20]
 8006f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f10:	3301      	adds	r3, #1
 8006f12:	444b      	add	r3, r9
 8006f14:	106d      	asrs	r5, r5, #1
 8006f16:	429d      	cmp	r5, r3
 8006f18:	bf38      	it	cc
 8006f1a:	461d      	movcc	r5, r3
 8006f1c:	0553      	lsls	r3, r2, #21
 8006f1e:	d531      	bpl.n	8006f84 <__ssputs_r+0xa0>
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7ff ff85 	bl	8006e30 <_malloc_r>
 8006f26:	4606      	mov	r6, r0
 8006f28:	b950      	cbnz	r0, 8006f40 <__ssputs_r+0x5c>
 8006f2a:	230c      	movs	r3, #12
 8006f2c:	f8ca 3000 	str.w	r3, [sl]
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f36:	81a3      	strh	r3, [r4, #12]
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f40:	6921      	ldr	r1, [r4, #16]
 8006f42:	464a      	mov	r2, r9
 8006f44:	f7ff feee 	bl	8006d24 <memcpy>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	6126      	str	r6, [r4, #16]
 8006f56:	6165      	str	r5, [r4, #20]
 8006f58:	444e      	add	r6, r9
 8006f5a:	eba5 0509 	sub.w	r5, r5, r9
 8006f5e:	6026      	str	r6, [r4, #0]
 8006f60:	60a5      	str	r5, [r4, #8]
 8006f62:	463e      	mov	r6, r7
 8006f64:	42be      	cmp	r6, r7
 8006f66:	d900      	bls.n	8006f6a <__ssputs_r+0x86>
 8006f68:	463e      	mov	r6, r7
 8006f6a:	4632      	mov	r2, r6
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	4641      	mov	r1, r8
 8006f70:	f000 fab8 	bl	80074e4 <memmove>
 8006f74:	68a3      	ldr	r3, [r4, #8]
 8006f76:	6822      	ldr	r2, [r4, #0]
 8006f78:	1b9b      	subs	r3, r3, r6
 8006f7a:	4432      	add	r2, r6
 8006f7c:	60a3      	str	r3, [r4, #8]
 8006f7e:	6022      	str	r2, [r4, #0]
 8006f80:	2000      	movs	r0, #0
 8006f82:	e7db      	b.n	8006f3c <__ssputs_r+0x58>
 8006f84:	462a      	mov	r2, r5
 8006f86:	f000 fb23 	bl	80075d0 <_realloc_r>
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d1e1      	bne.n	8006f54 <__ssputs_r+0x70>
 8006f90:	6921      	ldr	r1, [r4, #16]
 8006f92:	4650      	mov	r0, sl
 8006f94:	f000 facc 	bl	8007530 <_free_r>
 8006f98:	e7c7      	b.n	8006f2a <__ssputs_r+0x46>
	...

08006f9c <_svfiprintf_r>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	4698      	mov	r8, r3
 8006fa2:	898b      	ldrh	r3, [r1, #12]
 8006fa4:	061b      	lsls	r3, r3, #24
 8006fa6:	b09d      	sub	sp, #116	; 0x74
 8006fa8:	4607      	mov	r7, r0
 8006faa:	460d      	mov	r5, r1
 8006fac:	4614      	mov	r4, r2
 8006fae:	d50e      	bpl.n	8006fce <_svfiprintf_r+0x32>
 8006fb0:	690b      	ldr	r3, [r1, #16]
 8006fb2:	b963      	cbnz	r3, 8006fce <_svfiprintf_r+0x32>
 8006fb4:	2140      	movs	r1, #64	; 0x40
 8006fb6:	f7ff ff3b 	bl	8006e30 <_malloc_r>
 8006fba:	6028      	str	r0, [r5, #0]
 8006fbc:	6128      	str	r0, [r5, #16]
 8006fbe:	b920      	cbnz	r0, 8006fca <_svfiprintf_r+0x2e>
 8006fc0:	230c      	movs	r3, #12
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc8:	e0d1      	b.n	800716e <_svfiprintf_r+0x1d2>
 8006fca:	2340      	movs	r3, #64	; 0x40
 8006fcc:	616b      	str	r3, [r5, #20]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd2:	2320      	movs	r3, #32
 8006fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fdc:	2330      	movs	r3, #48	; 0x30
 8006fde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007188 <_svfiprintf_r+0x1ec>
 8006fe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fe6:	f04f 0901 	mov.w	r9, #1
 8006fea:	4623      	mov	r3, r4
 8006fec:	469a      	mov	sl, r3
 8006fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff2:	b10a      	cbz	r2, 8006ff8 <_svfiprintf_r+0x5c>
 8006ff4:	2a25      	cmp	r2, #37	; 0x25
 8006ff6:	d1f9      	bne.n	8006fec <_svfiprintf_r+0x50>
 8006ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8006ffc:	d00b      	beq.n	8007016 <_svfiprintf_r+0x7a>
 8006ffe:	465b      	mov	r3, fp
 8007000:	4622      	mov	r2, r4
 8007002:	4629      	mov	r1, r5
 8007004:	4638      	mov	r0, r7
 8007006:	f7ff ff6d 	bl	8006ee4 <__ssputs_r>
 800700a:	3001      	adds	r0, #1
 800700c:	f000 80aa 	beq.w	8007164 <_svfiprintf_r+0x1c8>
 8007010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007012:	445a      	add	r2, fp
 8007014:	9209      	str	r2, [sp, #36]	; 0x24
 8007016:	f89a 3000 	ldrb.w	r3, [sl]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 80a2 	beq.w	8007164 <_svfiprintf_r+0x1c8>
 8007020:	2300      	movs	r3, #0
 8007022:	f04f 32ff 	mov.w	r2, #4294967295
 8007026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800702a:	f10a 0a01 	add.w	sl, sl, #1
 800702e:	9304      	str	r3, [sp, #16]
 8007030:	9307      	str	r3, [sp, #28]
 8007032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007036:	931a      	str	r3, [sp, #104]	; 0x68
 8007038:	4654      	mov	r4, sl
 800703a:	2205      	movs	r2, #5
 800703c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007040:	4851      	ldr	r0, [pc, #324]	; (8007188 <_svfiprintf_r+0x1ec>)
 8007042:	f7f9 f8d5 	bl	80001f0 <memchr>
 8007046:	9a04      	ldr	r2, [sp, #16]
 8007048:	b9d8      	cbnz	r0, 8007082 <_svfiprintf_r+0xe6>
 800704a:	06d0      	lsls	r0, r2, #27
 800704c:	bf44      	itt	mi
 800704e:	2320      	movmi	r3, #32
 8007050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007054:	0711      	lsls	r1, r2, #28
 8007056:	bf44      	itt	mi
 8007058:	232b      	movmi	r3, #43	; 0x2b
 800705a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800705e:	f89a 3000 	ldrb.w	r3, [sl]
 8007062:	2b2a      	cmp	r3, #42	; 0x2a
 8007064:	d015      	beq.n	8007092 <_svfiprintf_r+0xf6>
 8007066:	9a07      	ldr	r2, [sp, #28]
 8007068:	4654      	mov	r4, sl
 800706a:	2000      	movs	r0, #0
 800706c:	f04f 0c0a 	mov.w	ip, #10
 8007070:	4621      	mov	r1, r4
 8007072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007076:	3b30      	subs	r3, #48	; 0x30
 8007078:	2b09      	cmp	r3, #9
 800707a:	d94e      	bls.n	800711a <_svfiprintf_r+0x17e>
 800707c:	b1b0      	cbz	r0, 80070ac <_svfiprintf_r+0x110>
 800707e:	9207      	str	r2, [sp, #28]
 8007080:	e014      	b.n	80070ac <_svfiprintf_r+0x110>
 8007082:	eba0 0308 	sub.w	r3, r0, r8
 8007086:	fa09 f303 	lsl.w	r3, r9, r3
 800708a:	4313      	orrs	r3, r2
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	46a2      	mov	sl, r4
 8007090:	e7d2      	b.n	8007038 <_svfiprintf_r+0x9c>
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	1d19      	adds	r1, r3, #4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	9103      	str	r1, [sp, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	bfbb      	ittet	lt
 800709e:	425b      	neglt	r3, r3
 80070a0:	f042 0202 	orrlt.w	r2, r2, #2
 80070a4:	9307      	strge	r3, [sp, #28]
 80070a6:	9307      	strlt	r3, [sp, #28]
 80070a8:	bfb8      	it	lt
 80070aa:	9204      	strlt	r2, [sp, #16]
 80070ac:	7823      	ldrb	r3, [r4, #0]
 80070ae:	2b2e      	cmp	r3, #46	; 0x2e
 80070b0:	d10c      	bne.n	80070cc <_svfiprintf_r+0x130>
 80070b2:	7863      	ldrb	r3, [r4, #1]
 80070b4:	2b2a      	cmp	r3, #42	; 0x2a
 80070b6:	d135      	bne.n	8007124 <_svfiprintf_r+0x188>
 80070b8:	9b03      	ldr	r3, [sp, #12]
 80070ba:	1d1a      	adds	r2, r3, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	9203      	str	r2, [sp, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bfb8      	it	lt
 80070c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80070c8:	3402      	adds	r4, #2
 80070ca:	9305      	str	r3, [sp, #20]
 80070cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007198 <_svfiprintf_r+0x1fc>
 80070d0:	7821      	ldrb	r1, [r4, #0]
 80070d2:	2203      	movs	r2, #3
 80070d4:	4650      	mov	r0, sl
 80070d6:	f7f9 f88b 	bl	80001f0 <memchr>
 80070da:	b140      	cbz	r0, 80070ee <_svfiprintf_r+0x152>
 80070dc:	2340      	movs	r3, #64	; 0x40
 80070de:	eba0 000a 	sub.w	r0, r0, sl
 80070e2:	fa03 f000 	lsl.w	r0, r3, r0
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	4303      	orrs	r3, r0
 80070ea:	3401      	adds	r4, #1
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f2:	4826      	ldr	r0, [pc, #152]	; (800718c <_svfiprintf_r+0x1f0>)
 80070f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070f8:	2206      	movs	r2, #6
 80070fa:	f7f9 f879 	bl	80001f0 <memchr>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d038      	beq.n	8007174 <_svfiprintf_r+0x1d8>
 8007102:	4b23      	ldr	r3, [pc, #140]	; (8007190 <_svfiprintf_r+0x1f4>)
 8007104:	bb1b      	cbnz	r3, 800714e <_svfiprintf_r+0x1b2>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	3307      	adds	r3, #7
 800710a:	f023 0307 	bic.w	r3, r3, #7
 800710e:	3308      	adds	r3, #8
 8007110:	9303      	str	r3, [sp, #12]
 8007112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007114:	4433      	add	r3, r6
 8007116:	9309      	str	r3, [sp, #36]	; 0x24
 8007118:	e767      	b.n	8006fea <_svfiprintf_r+0x4e>
 800711a:	fb0c 3202 	mla	r2, ip, r2, r3
 800711e:	460c      	mov	r4, r1
 8007120:	2001      	movs	r0, #1
 8007122:	e7a5      	b.n	8007070 <_svfiprintf_r+0xd4>
 8007124:	2300      	movs	r3, #0
 8007126:	3401      	adds	r4, #1
 8007128:	9305      	str	r3, [sp, #20]
 800712a:	4619      	mov	r1, r3
 800712c:	f04f 0c0a 	mov.w	ip, #10
 8007130:	4620      	mov	r0, r4
 8007132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007136:	3a30      	subs	r2, #48	; 0x30
 8007138:	2a09      	cmp	r2, #9
 800713a:	d903      	bls.n	8007144 <_svfiprintf_r+0x1a8>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0c5      	beq.n	80070cc <_svfiprintf_r+0x130>
 8007140:	9105      	str	r1, [sp, #20]
 8007142:	e7c3      	b.n	80070cc <_svfiprintf_r+0x130>
 8007144:	fb0c 2101 	mla	r1, ip, r1, r2
 8007148:	4604      	mov	r4, r0
 800714a:	2301      	movs	r3, #1
 800714c:	e7f0      	b.n	8007130 <_svfiprintf_r+0x194>
 800714e:	ab03      	add	r3, sp, #12
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	462a      	mov	r2, r5
 8007154:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <_svfiprintf_r+0x1f8>)
 8007156:	a904      	add	r1, sp, #16
 8007158:	4638      	mov	r0, r7
 800715a:	f3af 8000 	nop.w
 800715e:	1c42      	adds	r2, r0, #1
 8007160:	4606      	mov	r6, r0
 8007162:	d1d6      	bne.n	8007112 <_svfiprintf_r+0x176>
 8007164:	89ab      	ldrh	r3, [r5, #12]
 8007166:	065b      	lsls	r3, r3, #25
 8007168:	f53f af2c 	bmi.w	8006fc4 <_svfiprintf_r+0x28>
 800716c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800716e:	b01d      	add	sp, #116	; 0x74
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	ab03      	add	r3, sp, #12
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	462a      	mov	r2, r5
 800717a:	4b06      	ldr	r3, [pc, #24]	; (8007194 <_svfiprintf_r+0x1f8>)
 800717c:	a904      	add	r1, sp, #16
 800717e:	4638      	mov	r0, r7
 8007180:	f000 f87a 	bl	8007278 <_printf_i>
 8007184:	e7eb      	b.n	800715e <_svfiprintf_r+0x1c2>
 8007186:	bf00      	nop
 8007188:	08009d9c 	.word	0x08009d9c
 800718c:	08009da6 	.word	0x08009da6
 8007190:	00000000 	.word	0x00000000
 8007194:	08006ee5 	.word	0x08006ee5
 8007198:	08009da2 	.word	0x08009da2

0800719c <_printf_common>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	4616      	mov	r6, r2
 80071a2:	4699      	mov	r9, r3
 80071a4:	688a      	ldr	r2, [r1, #8]
 80071a6:	690b      	ldr	r3, [r1, #16]
 80071a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	bfb8      	it	lt
 80071b0:	4613      	movlt	r3, r2
 80071b2:	6033      	str	r3, [r6, #0]
 80071b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b8:	4607      	mov	r7, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b10a      	cbz	r2, 80071c2 <_printf_common+0x26>
 80071be:	3301      	adds	r3, #1
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	0699      	lsls	r1, r3, #26
 80071c6:	bf42      	ittt	mi
 80071c8:	6833      	ldrmi	r3, [r6, #0]
 80071ca:	3302      	addmi	r3, #2
 80071cc:	6033      	strmi	r3, [r6, #0]
 80071ce:	6825      	ldr	r5, [r4, #0]
 80071d0:	f015 0506 	ands.w	r5, r5, #6
 80071d4:	d106      	bne.n	80071e4 <_printf_common+0x48>
 80071d6:	f104 0a19 	add.w	sl, r4, #25
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	6832      	ldr	r2, [r6, #0]
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dc26      	bgt.n	8007232 <_printf_common+0x96>
 80071e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e8:	1e13      	subs	r3, r2, #0
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	bf18      	it	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	0692      	lsls	r2, r2, #26
 80071f2:	d42b      	bmi.n	800724c <_printf_common+0xb0>
 80071f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f8:	4649      	mov	r1, r9
 80071fa:	4638      	mov	r0, r7
 80071fc:	47c0      	blx	r8
 80071fe:	3001      	adds	r0, #1
 8007200:	d01e      	beq.n	8007240 <_printf_common+0xa4>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	68e5      	ldr	r5, [r4, #12]
 8007206:	6832      	ldr	r2, [r6, #0]
 8007208:	f003 0306 	and.w	r3, r3, #6
 800720c:	2b04      	cmp	r3, #4
 800720e:	bf08      	it	eq
 8007210:	1aad      	subeq	r5, r5, r2
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	6922      	ldr	r2, [r4, #16]
 8007216:	bf0c      	ite	eq
 8007218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800721c:	2500      	movne	r5, #0
 800721e:	4293      	cmp	r3, r2
 8007220:	bfc4      	itt	gt
 8007222:	1a9b      	subgt	r3, r3, r2
 8007224:	18ed      	addgt	r5, r5, r3
 8007226:	2600      	movs	r6, #0
 8007228:	341a      	adds	r4, #26
 800722a:	42b5      	cmp	r5, r6
 800722c:	d11a      	bne.n	8007264 <_printf_common+0xc8>
 800722e:	2000      	movs	r0, #0
 8007230:	e008      	b.n	8007244 <_printf_common+0xa8>
 8007232:	2301      	movs	r3, #1
 8007234:	4652      	mov	r2, sl
 8007236:	4649      	mov	r1, r9
 8007238:	4638      	mov	r0, r7
 800723a:	47c0      	blx	r8
 800723c:	3001      	adds	r0, #1
 800723e:	d103      	bne.n	8007248 <_printf_common+0xac>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007248:	3501      	adds	r5, #1
 800724a:	e7c6      	b.n	80071da <_printf_common+0x3e>
 800724c:	18e1      	adds	r1, r4, r3
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	2030      	movs	r0, #48	; 0x30
 8007252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007256:	4422      	add	r2, r4
 8007258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800725c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007260:	3302      	adds	r3, #2
 8007262:	e7c7      	b.n	80071f4 <_printf_common+0x58>
 8007264:	2301      	movs	r3, #1
 8007266:	4622      	mov	r2, r4
 8007268:	4649      	mov	r1, r9
 800726a:	4638      	mov	r0, r7
 800726c:	47c0      	blx	r8
 800726e:	3001      	adds	r0, #1
 8007270:	d0e6      	beq.n	8007240 <_printf_common+0xa4>
 8007272:	3601      	adds	r6, #1
 8007274:	e7d9      	b.n	800722a <_printf_common+0x8e>
	...

08007278 <_printf_i>:
 8007278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	460c      	mov	r4, r1
 800727e:	4691      	mov	r9, r2
 8007280:	7e27      	ldrb	r7, [r4, #24]
 8007282:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007284:	2f78      	cmp	r7, #120	; 0x78
 8007286:	4680      	mov	r8, r0
 8007288:	469a      	mov	sl, r3
 800728a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800728e:	d807      	bhi.n	80072a0 <_printf_i+0x28>
 8007290:	2f62      	cmp	r7, #98	; 0x62
 8007292:	d80a      	bhi.n	80072aa <_printf_i+0x32>
 8007294:	2f00      	cmp	r7, #0
 8007296:	f000 80d8 	beq.w	800744a <_printf_i+0x1d2>
 800729a:	2f58      	cmp	r7, #88	; 0x58
 800729c:	f000 80a3 	beq.w	80073e6 <_printf_i+0x16e>
 80072a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a8:	e03a      	b.n	8007320 <_printf_i+0xa8>
 80072aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072ae:	2b15      	cmp	r3, #21
 80072b0:	d8f6      	bhi.n	80072a0 <_printf_i+0x28>
 80072b2:	a001      	add	r0, pc, #4	; (adr r0, 80072b8 <_printf_i+0x40>)
 80072b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072b8:	08007311 	.word	0x08007311
 80072bc:	08007325 	.word	0x08007325
 80072c0:	080072a1 	.word	0x080072a1
 80072c4:	080072a1 	.word	0x080072a1
 80072c8:	080072a1 	.word	0x080072a1
 80072cc:	080072a1 	.word	0x080072a1
 80072d0:	08007325 	.word	0x08007325
 80072d4:	080072a1 	.word	0x080072a1
 80072d8:	080072a1 	.word	0x080072a1
 80072dc:	080072a1 	.word	0x080072a1
 80072e0:	080072a1 	.word	0x080072a1
 80072e4:	08007431 	.word	0x08007431
 80072e8:	08007355 	.word	0x08007355
 80072ec:	08007413 	.word	0x08007413
 80072f0:	080072a1 	.word	0x080072a1
 80072f4:	080072a1 	.word	0x080072a1
 80072f8:	08007453 	.word	0x08007453
 80072fc:	080072a1 	.word	0x080072a1
 8007300:	08007355 	.word	0x08007355
 8007304:	080072a1 	.word	0x080072a1
 8007308:	080072a1 	.word	0x080072a1
 800730c:	0800741b 	.word	0x0800741b
 8007310:	680b      	ldr	r3, [r1, #0]
 8007312:	1d1a      	adds	r2, r3, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	600a      	str	r2, [r1, #0]
 8007318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800731c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007320:	2301      	movs	r3, #1
 8007322:	e0a3      	b.n	800746c <_printf_i+0x1f4>
 8007324:	6825      	ldr	r5, [r4, #0]
 8007326:	6808      	ldr	r0, [r1, #0]
 8007328:	062e      	lsls	r6, r5, #24
 800732a:	f100 0304 	add.w	r3, r0, #4
 800732e:	d50a      	bpl.n	8007346 <_printf_i+0xce>
 8007330:	6805      	ldr	r5, [r0, #0]
 8007332:	600b      	str	r3, [r1, #0]
 8007334:	2d00      	cmp	r5, #0
 8007336:	da03      	bge.n	8007340 <_printf_i+0xc8>
 8007338:	232d      	movs	r3, #45	; 0x2d
 800733a:	426d      	negs	r5, r5
 800733c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007340:	485e      	ldr	r0, [pc, #376]	; (80074bc <_printf_i+0x244>)
 8007342:	230a      	movs	r3, #10
 8007344:	e019      	b.n	800737a <_printf_i+0x102>
 8007346:	f015 0f40 	tst.w	r5, #64	; 0x40
 800734a:	6805      	ldr	r5, [r0, #0]
 800734c:	600b      	str	r3, [r1, #0]
 800734e:	bf18      	it	ne
 8007350:	b22d      	sxthne	r5, r5
 8007352:	e7ef      	b.n	8007334 <_printf_i+0xbc>
 8007354:	680b      	ldr	r3, [r1, #0]
 8007356:	6825      	ldr	r5, [r4, #0]
 8007358:	1d18      	adds	r0, r3, #4
 800735a:	6008      	str	r0, [r1, #0]
 800735c:	0628      	lsls	r0, r5, #24
 800735e:	d501      	bpl.n	8007364 <_printf_i+0xec>
 8007360:	681d      	ldr	r5, [r3, #0]
 8007362:	e002      	b.n	800736a <_printf_i+0xf2>
 8007364:	0669      	lsls	r1, r5, #25
 8007366:	d5fb      	bpl.n	8007360 <_printf_i+0xe8>
 8007368:	881d      	ldrh	r5, [r3, #0]
 800736a:	4854      	ldr	r0, [pc, #336]	; (80074bc <_printf_i+0x244>)
 800736c:	2f6f      	cmp	r7, #111	; 0x6f
 800736e:	bf0c      	ite	eq
 8007370:	2308      	moveq	r3, #8
 8007372:	230a      	movne	r3, #10
 8007374:	2100      	movs	r1, #0
 8007376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800737a:	6866      	ldr	r6, [r4, #4]
 800737c:	60a6      	str	r6, [r4, #8]
 800737e:	2e00      	cmp	r6, #0
 8007380:	bfa2      	ittt	ge
 8007382:	6821      	ldrge	r1, [r4, #0]
 8007384:	f021 0104 	bicge.w	r1, r1, #4
 8007388:	6021      	strge	r1, [r4, #0]
 800738a:	b90d      	cbnz	r5, 8007390 <_printf_i+0x118>
 800738c:	2e00      	cmp	r6, #0
 800738e:	d04d      	beq.n	800742c <_printf_i+0x1b4>
 8007390:	4616      	mov	r6, r2
 8007392:	fbb5 f1f3 	udiv	r1, r5, r3
 8007396:	fb03 5711 	mls	r7, r3, r1, r5
 800739a:	5dc7      	ldrb	r7, [r0, r7]
 800739c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073a0:	462f      	mov	r7, r5
 80073a2:	42bb      	cmp	r3, r7
 80073a4:	460d      	mov	r5, r1
 80073a6:	d9f4      	bls.n	8007392 <_printf_i+0x11a>
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d10b      	bne.n	80073c4 <_printf_i+0x14c>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	07df      	lsls	r7, r3, #31
 80073b0:	d508      	bpl.n	80073c4 <_printf_i+0x14c>
 80073b2:	6923      	ldr	r3, [r4, #16]
 80073b4:	6861      	ldr	r1, [r4, #4]
 80073b6:	4299      	cmp	r1, r3
 80073b8:	bfde      	ittt	le
 80073ba:	2330      	movle	r3, #48	; 0x30
 80073bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073c4:	1b92      	subs	r2, r2, r6
 80073c6:	6122      	str	r2, [r4, #16]
 80073c8:	f8cd a000 	str.w	sl, [sp]
 80073cc:	464b      	mov	r3, r9
 80073ce:	aa03      	add	r2, sp, #12
 80073d0:	4621      	mov	r1, r4
 80073d2:	4640      	mov	r0, r8
 80073d4:	f7ff fee2 	bl	800719c <_printf_common>
 80073d8:	3001      	adds	r0, #1
 80073da:	d14c      	bne.n	8007476 <_printf_i+0x1fe>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	b004      	add	sp, #16
 80073e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e6:	4835      	ldr	r0, [pc, #212]	; (80074bc <_printf_i+0x244>)
 80073e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	680e      	ldr	r6, [r1, #0]
 80073f0:	061f      	lsls	r7, r3, #24
 80073f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80073f6:	600e      	str	r6, [r1, #0]
 80073f8:	d514      	bpl.n	8007424 <_printf_i+0x1ac>
 80073fa:	07d9      	lsls	r1, r3, #31
 80073fc:	bf44      	itt	mi
 80073fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007402:	6023      	strmi	r3, [r4, #0]
 8007404:	b91d      	cbnz	r5, 800740e <_printf_i+0x196>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f023 0320 	bic.w	r3, r3, #32
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	2310      	movs	r3, #16
 8007410:	e7b0      	b.n	8007374 <_printf_i+0xfc>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	f043 0320 	orr.w	r3, r3, #32
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	2378      	movs	r3, #120	; 0x78
 800741c:	4828      	ldr	r0, [pc, #160]	; (80074c0 <_printf_i+0x248>)
 800741e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007422:	e7e3      	b.n	80073ec <_printf_i+0x174>
 8007424:	065e      	lsls	r6, r3, #25
 8007426:	bf48      	it	mi
 8007428:	b2ad      	uxthmi	r5, r5
 800742a:	e7e6      	b.n	80073fa <_printf_i+0x182>
 800742c:	4616      	mov	r6, r2
 800742e:	e7bb      	b.n	80073a8 <_printf_i+0x130>
 8007430:	680b      	ldr	r3, [r1, #0]
 8007432:	6826      	ldr	r6, [r4, #0]
 8007434:	6960      	ldr	r0, [r4, #20]
 8007436:	1d1d      	adds	r5, r3, #4
 8007438:	600d      	str	r5, [r1, #0]
 800743a:	0635      	lsls	r5, r6, #24
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	d501      	bpl.n	8007444 <_printf_i+0x1cc>
 8007440:	6018      	str	r0, [r3, #0]
 8007442:	e002      	b.n	800744a <_printf_i+0x1d2>
 8007444:	0671      	lsls	r1, r6, #25
 8007446:	d5fb      	bpl.n	8007440 <_printf_i+0x1c8>
 8007448:	8018      	strh	r0, [r3, #0]
 800744a:	2300      	movs	r3, #0
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	4616      	mov	r6, r2
 8007450:	e7ba      	b.n	80073c8 <_printf_i+0x150>
 8007452:	680b      	ldr	r3, [r1, #0]
 8007454:	1d1a      	adds	r2, r3, #4
 8007456:	600a      	str	r2, [r1, #0]
 8007458:	681e      	ldr	r6, [r3, #0]
 800745a:	6862      	ldr	r2, [r4, #4]
 800745c:	2100      	movs	r1, #0
 800745e:	4630      	mov	r0, r6
 8007460:	f7f8 fec6 	bl	80001f0 <memchr>
 8007464:	b108      	cbz	r0, 800746a <_printf_i+0x1f2>
 8007466:	1b80      	subs	r0, r0, r6
 8007468:	6060      	str	r0, [r4, #4]
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	6123      	str	r3, [r4, #16]
 800746e:	2300      	movs	r3, #0
 8007470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007474:	e7a8      	b.n	80073c8 <_printf_i+0x150>
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	4632      	mov	r2, r6
 800747a:	4649      	mov	r1, r9
 800747c:	4640      	mov	r0, r8
 800747e:	47d0      	blx	sl
 8007480:	3001      	adds	r0, #1
 8007482:	d0ab      	beq.n	80073dc <_printf_i+0x164>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	079b      	lsls	r3, r3, #30
 8007488:	d413      	bmi.n	80074b2 <_printf_i+0x23a>
 800748a:	68e0      	ldr	r0, [r4, #12]
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	4298      	cmp	r0, r3
 8007490:	bfb8      	it	lt
 8007492:	4618      	movlt	r0, r3
 8007494:	e7a4      	b.n	80073e0 <_printf_i+0x168>
 8007496:	2301      	movs	r3, #1
 8007498:	4632      	mov	r2, r6
 800749a:	4649      	mov	r1, r9
 800749c:	4640      	mov	r0, r8
 800749e:	47d0      	blx	sl
 80074a0:	3001      	adds	r0, #1
 80074a2:	d09b      	beq.n	80073dc <_printf_i+0x164>
 80074a4:	3501      	adds	r5, #1
 80074a6:	68e3      	ldr	r3, [r4, #12]
 80074a8:	9903      	ldr	r1, [sp, #12]
 80074aa:	1a5b      	subs	r3, r3, r1
 80074ac:	42ab      	cmp	r3, r5
 80074ae:	dcf2      	bgt.n	8007496 <_printf_i+0x21e>
 80074b0:	e7eb      	b.n	800748a <_printf_i+0x212>
 80074b2:	2500      	movs	r5, #0
 80074b4:	f104 0619 	add.w	r6, r4, #25
 80074b8:	e7f5      	b.n	80074a6 <_printf_i+0x22e>
 80074ba:	bf00      	nop
 80074bc:	08009dad 	.word	0x08009dad
 80074c0:	08009dbe 	.word	0x08009dbe

080074c4 <_sbrk_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4d06      	ldr	r5, [pc, #24]	; (80074e0 <_sbrk_r+0x1c>)
 80074c8:	2300      	movs	r3, #0
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	f7fa fcd8 	bl	8001e84 <_sbrk>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_sbrk_r+0x1a>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_sbrk_r+0x1a>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20008b28 	.word	0x20008b28

080074e4 <memmove>:
 80074e4:	4288      	cmp	r0, r1
 80074e6:	b510      	push	{r4, lr}
 80074e8:	eb01 0402 	add.w	r4, r1, r2
 80074ec:	d902      	bls.n	80074f4 <memmove+0x10>
 80074ee:	4284      	cmp	r4, r0
 80074f0:	4623      	mov	r3, r4
 80074f2:	d807      	bhi.n	8007504 <memmove+0x20>
 80074f4:	1e43      	subs	r3, r0, #1
 80074f6:	42a1      	cmp	r1, r4
 80074f8:	d008      	beq.n	800750c <memmove+0x28>
 80074fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007502:	e7f8      	b.n	80074f6 <memmove+0x12>
 8007504:	4402      	add	r2, r0
 8007506:	4601      	mov	r1, r0
 8007508:	428a      	cmp	r2, r1
 800750a:	d100      	bne.n	800750e <memmove+0x2a>
 800750c:	bd10      	pop	{r4, pc}
 800750e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007516:	e7f7      	b.n	8007508 <memmove+0x24>

08007518 <__malloc_lock>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__malloc_lock+0x8>)
 800751a:	f7ff bc87 	b.w	8006e2c <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	20008b20 	.word	0x20008b20

08007524 <__malloc_unlock>:
 8007524:	4801      	ldr	r0, [pc, #4]	; (800752c <__malloc_unlock+0x8>)
 8007526:	f7ff bc82 	b.w	8006e2e <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	20008b20 	.word	0x20008b20

08007530 <_free_r>:
 8007530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007532:	2900      	cmp	r1, #0
 8007534:	d048      	beq.n	80075c8 <_free_r+0x98>
 8007536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800753a:	9001      	str	r0, [sp, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f1a1 0404 	sub.w	r4, r1, #4
 8007542:	bfb8      	it	lt
 8007544:	18e4      	addlt	r4, r4, r3
 8007546:	f7ff ffe7 	bl	8007518 <__malloc_lock>
 800754a:	4a20      	ldr	r2, [pc, #128]	; (80075cc <_free_r+0x9c>)
 800754c:	9801      	ldr	r0, [sp, #4]
 800754e:	6813      	ldr	r3, [r2, #0]
 8007550:	4615      	mov	r5, r2
 8007552:	b933      	cbnz	r3, 8007562 <_free_r+0x32>
 8007554:	6063      	str	r3, [r4, #4]
 8007556:	6014      	str	r4, [r2, #0]
 8007558:	b003      	add	sp, #12
 800755a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800755e:	f7ff bfe1 	b.w	8007524 <__malloc_unlock>
 8007562:	42a3      	cmp	r3, r4
 8007564:	d90b      	bls.n	800757e <_free_r+0x4e>
 8007566:	6821      	ldr	r1, [r4, #0]
 8007568:	1862      	adds	r2, r4, r1
 800756a:	4293      	cmp	r3, r2
 800756c:	bf04      	itt	eq
 800756e:	681a      	ldreq	r2, [r3, #0]
 8007570:	685b      	ldreq	r3, [r3, #4]
 8007572:	6063      	str	r3, [r4, #4]
 8007574:	bf04      	itt	eq
 8007576:	1852      	addeq	r2, r2, r1
 8007578:	6022      	streq	r2, [r4, #0]
 800757a:	602c      	str	r4, [r5, #0]
 800757c:	e7ec      	b.n	8007558 <_free_r+0x28>
 800757e:	461a      	mov	r2, r3
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	b10b      	cbz	r3, 8007588 <_free_r+0x58>
 8007584:	42a3      	cmp	r3, r4
 8007586:	d9fa      	bls.n	800757e <_free_r+0x4e>
 8007588:	6811      	ldr	r1, [r2, #0]
 800758a:	1855      	adds	r5, r2, r1
 800758c:	42a5      	cmp	r5, r4
 800758e:	d10b      	bne.n	80075a8 <_free_r+0x78>
 8007590:	6824      	ldr	r4, [r4, #0]
 8007592:	4421      	add	r1, r4
 8007594:	1854      	adds	r4, r2, r1
 8007596:	42a3      	cmp	r3, r4
 8007598:	6011      	str	r1, [r2, #0]
 800759a:	d1dd      	bne.n	8007558 <_free_r+0x28>
 800759c:	681c      	ldr	r4, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	6053      	str	r3, [r2, #4]
 80075a2:	4421      	add	r1, r4
 80075a4:	6011      	str	r1, [r2, #0]
 80075a6:	e7d7      	b.n	8007558 <_free_r+0x28>
 80075a8:	d902      	bls.n	80075b0 <_free_r+0x80>
 80075aa:	230c      	movs	r3, #12
 80075ac:	6003      	str	r3, [r0, #0]
 80075ae:	e7d3      	b.n	8007558 <_free_r+0x28>
 80075b0:	6825      	ldr	r5, [r4, #0]
 80075b2:	1961      	adds	r1, r4, r5
 80075b4:	428b      	cmp	r3, r1
 80075b6:	bf04      	itt	eq
 80075b8:	6819      	ldreq	r1, [r3, #0]
 80075ba:	685b      	ldreq	r3, [r3, #4]
 80075bc:	6063      	str	r3, [r4, #4]
 80075be:	bf04      	itt	eq
 80075c0:	1949      	addeq	r1, r1, r5
 80075c2:	6021      	streq	r1, [r4, #0]
 80075c4:	6054      	str	r4, [r2, #4]
 80075c6:	e7c7      	b.n	8007558 <_free_r+0x28>
 80075c8:	b003      	add	sp, #12
 80075ca:	bd30      	pop	{r4, r5, pc}
 80075cc:	20008558 	.word	0x20008558

080075d0 <_realloc_r>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	4607      	mov	r7, r0
 80075d4:	4614      	mov	r4, r2
 80075d6:	460e      	mov	r6, r1
 80075d8:	b921      	cbnz	r1, 80075e4 <_realloc_r+0x14>
 80075da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075de:	4611      	mov	r1, r2
 80075e0:	f7ff bc26 	b.w	8006e30 <_malloc_r>
 80075e4:	b922      	cbnz	r2, 80075f0 <_realloc_r+0x20>
 80075e6:	f7ff ffa3 	bl	8007530 <_free_r>
 80075ea:	4625      	mov	r5, r4
 80075ec:	4628      	mov	r0, r5
 80075ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f0:	f000 f814 	bl	800761c <_malloc_usable_size_r>
 80075f4:	42a0      	cmp	r0, r4
 80075f6:	d20f      	bcs.n	8007618 <_realloc_r+0x48>
 80075f8:	4621      	mov	r1, r4
 80075fa:	4638      	mov	r0, r7
 80075fc:	f7ff fc18 	bl	8006e30 <_malloc_r>
 8007600:	4605      	mov	r5, r0
 8007602:	2800      	cmp	r0, #0
 8007604:	d0f2      	beq.n	80075ec <_realloc_r+0x1c>
 8007606:	4631      	mov	r1, r6
 8007608:	4622      	mov	r2, r4
 800760a:	f7ff fb8b 	bl	8006d24 <memcpy>
 800760e:	4631      	mov	r1, r6
 8007610:	4638      	mov	r0, r7
 8007612:	f7ff ff8d 	bl	8007530 <_free_r>
 8007616:	e7e9      	b.n	80075ec <_realloc_r+0x1c>
 8007618:	4635      	mov	r5, r6
 800761a:	e7e7      	b.n	80075ec <_realloc_r+0x1c>

0800761c <_malloc_usable_size_r>:
 800761c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007620:	1f18      	subs	r0, r3, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	bfbc      	itt	lt
 8007626:	580b      	ldrlt	r3, [r1, r0]
 8007628:	18c0      	addlt	r0, r0, r3
 800762a:	4770      	bx	lr

0800762c <_init>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr

08007638 <_fini>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr
