
V3_Semaphore2_withoutTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007320  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000278c  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c5c  08009c5c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c64  08009c64  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c64  08009c64  00019c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c68  08009c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08009c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          00008a68  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008b28  20008b28  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035443  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058b1  00000000  00000000  00055533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000224b7  00000000  00000000  0005ade4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002068  00000000  00000000  0007d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000020a0  00000000  00000000  0007f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a516  00000000  00000000  000813a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032ffb  00000000  00000000  000ab8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f44b8  00000000  00000000  000de8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001d2d71  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000062f8  00000000  00000000  001d2dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080074b8 	.word	0x080074b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	080074b8 	.word	0x080074b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <WorkerTask>:
		}
		vTaskDelay(300);
	}
}

static void WorkerTask(__attribute__ ((unused)) void *pvParameters) {
 8000588:	b500      	push	{lr}
 800058a:	b089      	sub	sp, #36	; 0x24

	while (1) {
		char text[30];
		if (xSemaphoreTake(LCDSemaphore, ( TickType_t ) 10) == pdTRUE) {
 800058c:	210a      	movs	r1, #10
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <WorkerTask+0x4c>)
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	f005 f9e9 	bl	8005968 <xQueueSemaphoreTake>
 8000596:	2801      	cmp	r0, #1
 8000598:	d1f8      	bne.n	800058c <WorkerTask+0x4>
			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <WorkerTask+0x50>)
 800059c:	f000 fc16 	bl	8000dcc <BSP_LCD_SetTextColor>
			snprintf(text, sizeof(text), "Hello from Worker Task");
 80005a0:	466c      	mov	r4, sp
 80005a2:	4d0e      	ldr	r5, [pc, #56]	; (80005dc <WorkerTask+0x54>)
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ac:	f844 0b04 	str.w	r0, [r4], #4
 80005b0:	f824 1b02 	strh.w	r1, [r4], #2
 80005b4:	0c09      	lsrs	r1, r1, #16
 80005b6:	7021      	strb	r1, [r4, #0]
			BSP_LCD_DisplayStringAt(0, 0, text, LEFT_MODE);
 80005b8:	2303      	movs	r3, #3
 80005ba:	466a      	mov	r2, sp
 80005bc:	2100      	movs	r1, #0
 80005be:	4608      	mov	r0, r1
 80005c0:	f000 fd1c 	bl	8000ffc <BSP_LCD_DisplayStringAt>
			xSemaphoreGive(LCDSemaphore);
 80005c4:	2300      	movs	r3, #0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	4802      	ldr	r0, [pc, #8]	; (80005d4 <WorkerTask+0x4c>)
 80005cc:	6800      	ldr	r0, [r0, #0]
 80005ce:	f005 f90b 	bl	80057e8 <xQueueGenericSend>
	while (1) {
 80005d2:	e7db      	b.n	800058c <WorkerTask+0x4>
 80005d4:	2000855c 	.word	0x2000855c
 80005d8:	ff0000ff 	.word	0xff0000ff
 80005dc:	080074d0 	.word	0x080074d0

080005e0 <HeartbeatTask>:
static void HeartbeatTask(__attribute__ ((unused)) void *pvParameters) {
 80005e0:	b510      	push	{r4, lr}
 80005e2:	e00f      	b.n	8000604 <HeartbeatTask+0x24>
			HAL_GPIO_TogglePin(LD_GPIO_PORT, LD4_RED);
 80005e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <HeartbeatTask+0x28>)
 80005ea:	f002 f8bd 	bl	8002768 <HAL_GPIO_TogglePin>
			vTaskDelay(50);
 80005ee:	2032      	movs	r0, #50	; 0x32
 80005f0:	f005 fdd2 	bl	8006198 <vTaskDelay>
		for (uint8_t i = 0; i < 4; ++i) {
 80005f4:	3401      	adds	r4, #1
 80005f6:	b2e4      	uxtb	r4, r4
 80005f8:	2c03      	cmp	r4, #3
 80005fa:	d9f3      	bls.n	80005e4 <HeartbeatTask+0x4>
		vTaskDelay(300);
 80005fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000600:	f005 fdca 	bl	8006198 <vTaskDelay>
		for (uint8_t i = 0; i < 4; ++i) {
 8000604:	2400      	movs	r4, #0
 8000606:	e7f7      	b.n	80005f8 <HeartbeatTask+0x18>
 8000608:	40021800 	.word	0x40021800

0800060c <CounterTask>:
static void CounterTask(__attribute__ ((unused)) void *pvParameters) {
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	b086      	sub	sp, #24
	int semaphore_take_errors = 0;
 8000610:	2500      	movs	r5, #0
	int n = 0;
 8000612:	462c      	mov	r4, r5
 8000614:	e014      	b.n	8000640 <CounterTask+0x34>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000616:	4820      	ldr	r0, [pc, #128]	; (8000698 <CounterTask+0x8c>)
 8000618:	f000 fbd8 	bl	8000dcc <BSP_LCD_SetTextColor>
			snprintf(text, sizeof(text), "ST-Error = %d",
 800061c:	1c6e      	adds	r6, r5, #1
 800061e:	462b      	mov	r3, r5
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <CounterTask+0x90>)
 8000622:	2114      	movs	r1, #20
 8000624:	a801      	add	r0, sp, #4
 8000626:	f006 fb13 	bl	8006c50 <sniprintf>
			BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 20, text,
 800062a:	f000 fb7d 	bl	8000d28 <BSP_LCD_GetYSize>
 800062e:	0841      	lsrs	r1, r0, #1
 8000630:	3114      	adds	r1, #20
 8000632:	2301      	movs	r3, #1
 8000634:	aa01      	add	r2, sp, #4
 8000636:	b289      	uxth	r1, r1
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fcdf 	bl	8000ffc <BSP_LCD_DisplayStringAt>
			snprintf(text, sizeof(text), "ST-Error = %d",
 800063e:	4635      	mov	r5, r6
		HAL_GPIO_TogglePin(LD_GPIO_PORT, LD3_GREEN);
 8000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000644:	4816      	ldr	r0, [pc, #88]	; (80006a0 <CounterTask+0x94>)
 8000646:	f002 f88f 	bl	8002768 <HAL_GPIO_TogglePin>
		vTaskDelay(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f005 fda4 	bl	8006198 <vTaskDelay>
		if (xSemaphoreTake(LCDSemaphore,( TickType_t ) 10) == pdTRUE) {
 8000650:	210a      	movs	r1, #10
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <CounterTask+0x98>)
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	f005 f987 	bl	8005968 <xQueueSemaphoreTake>
 800065a:	2801      	cmp	r0, #1
 800065c:	d1db      	bne.n	8000616 <CounterTask+0xa>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800065e:	f1a0 1001 	sub.w	r0, r0, #65537	; 0x10001
 8000662:	f000 fbb3 	bl	8000dcc <BSP_LCD_SetTextColor>
			snprintf(text, sizeof(text), "Counter = %d", n++);
 8000666:	1c66      	adds	r6, r4, #1
 8000668:	4623      	mov	r3, r4
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <CounterTask+0x9c>)
 800066c:	2114      	movs	r1, #20
 800066e:	a801      	add	r0, sp, #4
 8000670:	f006 faee 	bl	8006c50 <sniprintf>
			BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, text,
 8000674:	f000 fb58 	bl	8000d28 <BSP_LCD_GetYSize>
 8000678:	2301      	movs	r3, #1
 800067a:	aa01      	add	r2, sp, #4
 800067c:	f3c0 014f 	ubfx	r1, r0, #1, #16
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fcbb 	bl	8000ffc <BSP_LCD_DisplayStringAt>
			xSemaphoreGive(LCDSemaphore);
 8000686:	2300      	movs	r3, #0
 8000688:	461a      	mov	r2, r3
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <CounterTask+0x98>)
 800068e:	6800      	ldr	r0, [r0, #0]
 8000690:	f005 f8aa 	bl	80057e8 <xQueueGenericSend>
			snprintf(text, sizeof(text), "Counter = %d", n++);
 8000694:	4634      	mov	r4, r6
 8000696:	e7d3      	b.n	8000640 <CounterTask+0x34>
 8000698:	ffff0000 	.word	0xffff0000
 800069c:	080074f8 	.word	0x080074f8
 80006a0:	40021800 	.word	0x40021800
 80006a4:	2000855c 	.word	0x2000855c
 80006a8:	080074e8 	.word	0x080074e8

080006ac <app_main>:
void app_main(void) {
 80006ac:	b500      	push	{lr}
 80006ae:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(LD_GPIO_PORT, LD3_GREEN, RESET);
 80006b0:	4c1c      	ldr	r4, [pc, #112]	; (8000724 <app_main+0x78>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	4620      	mov	r0, r4
 80006ba:	f002 f84f 	bl	800275c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_GPIO_PORT, LD4_RED, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c4:	4620      	mov	r0, r4
 80006c6:	f002 f849 	bl	800275c <HAL_GPIO_WritePin>
	BSP_LCD_Init();
 80006ca:	f000 fbc5 	bl	8000e58 <BSP_LCD_Init>
	LCDSemaphore = xSemaphoreCreateBinary();
 80006ce:	2203      	movs	r2, #3
 80006d0:	2100      	movs	r1, #0
 80006d2:	2001      	movs	r0, #1
 80006d4:	f005 f864 	bl	80057a0 <xQueueGenericCreate>
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <app_main+0x7c>)
 80006da:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(LCDSemaphore);
 80006dc:	2300      	movs	r3, #0
 80006de:	461a      	mov	r2, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	f005 f881 	bl	80057e8 <xQueueGenericSend>
	xTaskCreate(CounterTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80006e6:	4d11      	ldr	r5, [pc, #68]	; (800072c <app_main+0x80>)
 80006e8:	2400      	movs	r4, #0
 80006ea:	9401      	str	r4, [sp, #4]
 80006ec:	2303      	movs	r3, #3
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	4623      	mov	r3, r4
 80006f2:	22d0      	movs	r2, #208	; 0xd0
 80006f4:	4629      	mov	r1, r5
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <app_main+0x84>)
 80006f8:	f005 fbd4 	bl	8005ea4 <xTaskCreate>
	xTaskCreate(HeartbeatTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 80006fc:	9401      	str	r4, [sp, #4]
 80006fe:	2601      	movs	r6, #1
 8000700:	9600      	str	r6, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	22d0      	movs	r2, #208	; 0xd0
 8000706:	4629      	mov	r1, r5
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <app_main+0x88>)
 800070a:	f005 fbcb 	bl	8005ea4 <xTaskCreate>
	xTaskCreate(WorkerTask, "CtrTask", (configMINIMAL_STACK_SIZE + 80), NULL,
 800070e:	9401      	str	r4, [sp, #4]
 8000710:	9600      	str	r6, [sp, #0]
 8000712:	4623      	mov	r3, r4
 8000714:	22d0      	movs	r2, #208	; 0xd0
 8000716:	4629      	mov	r1, r5
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <app_main+0x8c>)
 800071a:	f005 fbc3 	bl	8005ea4 <xTaskCreate>
	vTaskStartScheduler();
 800071e:	f005 fbf5 	bl	8005f0c <vTaskStartScheduler>
	for (;;)
 8000722:	e7fe      	b.n	8000722 <app_main+0x76>
 8000724:	40021800 	.word	0x40021800
 8000728:	2000855c 	.word	0x2000855c
 800072c:	08007508 	.word	0x08007508
 8000730:	0800060d 	.word	0x0800060d
 8000734:	080005e1 	.word	0x080005e1
 8000738:	08000589 	.word	0x08000589

0800073c <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 800073c:	20f0      	movs	r0, #240	; 0xf0
 800073e:	4770      	bx	lr

08000740 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8000740:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000744:	4770      	bx	lr

08000746 <ili9341_WriteReg>:
{
 8000746:	b508      	push	{r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8000748:	f000 fa70 	bl	8000c2c <LCD_IO_WriteReg>
}
 800074c:	bd08      	pop	{r3, pc}

0800074e <ili9341_DisplayOn>:
{
 800074e:	b508      	push	{r3, lr}
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000750:	2029      	movs	r0, #41	; 0x29
 8000752:	f7ff fff8 	bl	8000746 <ili9341_WriteReg>
}
 8000756:	bd08      	pop	{r3, pc}

08000758 <ili9341_DisplayOff>:
{
 8000758:	b508      	push	{r3, lr}
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f7ff fff3 	bl	8000746 <ili9341_WriteReg>
}
 8000760:	bd08      	pop	{r3, pc}

08000762 <ili9341_WriteData>:
{
 8000762:	b508      	push	{r3, lr}
  LCD_IO_WriteData(RegValue);
 8000764:	f000 fa46 	bl	8000bf4 <LCD_IO_WriteData>
}
 8000768:	bd08      	pop	{r3, pc}

0800076a <ili9341_Init>:
{
 800076a:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800076c:	f000 f9de 	bl	8000b2c <LCD_IO_Init>
  ili9341_WriteReg(0xCA);
 8000770:	20ca      	movs	r0, #202	; 0xca
 8000772:	f7ff ffe8 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000776:	20c3      	movs	r0, #195	; 0xc3
 8000778:	f7ff fff3 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800077c:	2008      	movs	r0, #8
 800077e:	f7ff fff0 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000782:	2050      	movs	r0, #80	; 0x50
 8000784:	f7ff ffed 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000788:	20cf      	movs	r0, #207	; 0xcf
 800078a:	f7ff ffdc 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ffe7 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000794:	20c1      	movs	r0, #193	; 0xc1
 8000796:	f7ff ffe4 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800079a:	2030      	movs	r0, #48	; 0x30
 800079c:	f7ff ffe1 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80007a0:	20ed      	movs	r0, #237	; 0xed
 80007a2:	f7ff ffd0 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80007a6:	2064      	movs	r0, #100	; 0x64
 80007a8:	f7ff ffdb 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f7ff ffd8 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80007b2:	2012      	movs	r0, #18
 80007b4:	f7ff ffd5 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80007b8:	2081      	movs	r0, #129	; 0x81
 80007ba:	f7ff ffd2 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80007be:	20e8      	movs	r0, #232	; 0xe8
 80007c0:	f7ff ffc1 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80007c4:	2085      	movs	r0, #133	; 0x85
 80007c6:	f7ff ffcc 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ffc9 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80007d0:	2078      	movs	r0, #120	; 0x78
 80007d2:	f7ff ffc6 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80007d6:	20cb      	movs	r0, #203	; 0xcb
 80007d8:	f7ff ffb5 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80007dc:	2039      	movs	r0, #57	; 0x39
 80007de:	f7ff ffc0 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80007e2:	202c      	movs	r0, #44	; 0x2c
 80007e4:	f7ff ffbd 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff ffba 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80007ee:	2034      	movs	r0, #52	; 0x34
 80007f0:	f7ff ffb7 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80007f4:	2002      	movs	r0, #2
 80007f6:	f7ff ffb4 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80007fa:	20f7      	movs	r0, #247	; 0xf7
 80007fc:	f7ff ffa3 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000800:	2020      	movs	r0, #32
 8000802:	f7ff ffae 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000806:	20ea      	movs	r0, #234	; 0xea
 8000808:	f7ff ff9d 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff ffa8 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff ffa5 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000818:	20b1      	movs	r0, #177	; 0xb1
 800081a:	f7ff ff94 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff ff9f 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000824:	201b      	movs	r0, #27
 8000826:	f7ff ff9c 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800082a:	20b6      	movs	r0, #182	; 0xb6
 800082c:	f7ff ff8b 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000830:	200a      	movs	r0, #10
 8000832:	f7ff ff96 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000836:	20a2      	movs	r0, #162	; 0xa2
 8000838:	f7ff ff93 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800083c:	20c0      	movs	r0, #192	; 0xc0
 800083e:	f7ff ff82 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000842:	2010      	movs	r0, #16
 8000844:	f7ff ff8d 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000848:	20c1      	movs	r0, #193	; 0xc1
 800084a:	f7ff ff7c 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800084e:	2010      	movs	r0, #16
 8000850:	f7ff ff87 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000854:	20c5      	movs	r0, #197	; 0xc5
 8000856:	f7ff ff76 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800085a:	2045      	movs	r0, #69	; 0x45
 800085c:	f7ff ff81 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000860:	2015      	movs	r0, #21
 8000862:	f7ff ff7e 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000866:	20c7      	movs	r0, #199	; 0xc7
 8000868:	f7ff ff6d 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800086c:	2090      	movs	r0, #144	; 0x90
 800086e:	f7ff ff78 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000872:	2036      	movs	r0, #54	; 0x36
 8000874:	f7ff ff67 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000878:	20c8      	movs	r0, #200	; 0xc8
 800087a:	f7ff ff72 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800087e:	20f2      	movs	r0, #242	; 0xf2
 8000880:	f7ff ff61 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff ff6c 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800088a:	20b0      	movs	r0, #176	; 0xb0
 800088c:	f7ff ff5b 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000890:	20c2      	movs	r0, #194	; 0xc2
 8000892:	f7ff ff66 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000896:	20b6      	movs	r0, #182	; 0xb6
 8000898:	f7ff ff55 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800089c:	200a      	movs	r0, #10
 800089e:	f7ff ff60 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80008a2:	20a7      	movs	r0, #167	; 0xa7
 80008a4:	f7ff ff5d 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff5a 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80008ae:	2004      	movs	r0, #4
 80008b0:	f7ff ff57 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80008b4:	202a      	movs	r0, #42	; 0x2a
 80008b6:	f7ff ff46 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff51 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff4e 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ff4b 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80008cc:	20ef      	movs	r0, #239	; 0xef
 80008ce:	f7ff ff48 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80008d2:	202b      	movs	r0, #43	; 0x2b
 80008d4:	f7ff ff37 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ff42 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff ff3f 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff ff3c 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80008ea:	203f      	movs	r0, #63	; 0x3f
 80008ec:	f7ff ff39 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80008f0:	20f6      	movs	r0, #246	; 0xf6
 80008f2:	f7ff ff28 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff ff33 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ff30 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000902:	2006      	movs	r0, #6
 8000904:	f7ff ff2d 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_GRAM);
 8000908:	202c      	movs	r0, #44	; 0x2c
 800090a:	f7ff ff1c 	bl	8000746 <ili9341_WriteReg>
  LCD_Delay(200);
 800090e:	20c8      	movs	r0, #200	; 0xc8
 8000910:	f000 f9d0 	bl	8000cb4 <LCD_Delay>
  ili9341_WriteReg(LCD_GAMMA);
 8000914:	2026      	movs	r0, #38	; 0x26
 8000916:	f7ff ff16 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff ff21 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PGAMMA);
 8000920:	20e0      	movs	r0, #224	; 0xe0
 8000922:	f7ff ff10 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000926:	200f      	movs	r0, #15
 8000928:	f7ff ff1b 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800092c:	2029      	movs	r0, #41	; 0x29
 800092e:	f7ff ff18 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000932:	2024      	movs	r0, #36	; 0x24
 8000934:	f7ff ff15 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000938:	200c      	movs	r0, #12
 800093a:	f7ff ff12 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800093e:	200e      	movs	r0, #14
 8000940:	f7ff ff0f 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000944:	2009      	movs	r0, #9
 8000946:	f7ff ff0c 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800094a:	204e      	movs	r0, #78	; 0x4e
 800094c:	f7ff ff09 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000950:	2078      	movs	r0, #120	; 0x78
 8000952:	f7ff ff06 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000956:	203c      	movs	r0, #60	; 0x3c
 8000958:	f7ff ff03 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800095c:	2009      	movs	r0, #9
 800095e:	f7ff ff00 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000962:	2013      	movs	r0, #19
 8000964:	f7ff fefd 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000968:	2005      	movs	r0, #5
 800096a:	f7ff fefa 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800096e:	2017      	movs	r0, #23
 8000970:	f7ff fef7 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000974:	2011      	movs	r0, #17
 8000976:	f7ff fef4 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fef1 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000980:	20e1      	movs	r0, #225	; 0xe1
 8000982:	f7ff fee0 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff feeb 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800098c:	2016      	movs	r0, #22
 800098e:	f7ff fee8 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000992:	201b      	movs	r0, #27
 8000994:	f7ff fee5 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000998:	2004      	movs	r0, #4
 800099a:	f7ff fee2 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800099e:	2011      	movs	r0, #17
 80009a0:	f7ff fedf 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80009a4:	2007      	movs	r0, #7
 80009a6:	f7ff fedc 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80009aa:	2031      	movs	r0, #49	; 0x31
 80009ac:	f7ff fed9 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80009b0:	2033      	movs	r0, #51	; 0x33
 80009b2:	f7ff fed6 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80009b6:	2042      	movs	r0, #66	; 0x42
 80009b8:	f7ff fed3 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80009bc:	2005      	movs	r0, #5
 80009be:	f7ff fed0 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80009c2:	200c      	movs	r0, #12
 80009c4:	f7ff fecd 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80009c8:	200a      	movs	r0, #10
 80009ca:	f7ff feca 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80009ce:	2028      	movs	r0, #40	; 0x28
 80009d0:	f7ff fec7 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80009d4:	202f      	movs	r0, #47	; 0x2f
 80009d6:	f7ff fec4 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80009da:	200f      	movs	r0, #15
 80009dc:	f7ff fec1 	bl	8000762 <ili9341_WriteData>
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80009e0:	2011      	movs	r0, #17
 80009e2:	f7ff feb0 	bl	8000746 <ili9341_WriteReg>
  LCD_Delay(200);
 80009e6:	20c8      	movs	r0, #200	; 0xc8
 80009e8:	f000 f964 	bl	8000cb4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80009ec:	2029      	movs	r0, #41	; 0x29
 80009ee:	f7ff feaa 	bl	8000746 <ili9341_WriteReg>
  ili9341_WriteReg(LCD_GRAM);
 80009f2:	202c      	movs	r0, #44	; 0x2c
 80009f4:	f7ff fea7 	bl	8000746 <ili9341_WriteReg>
}
 80009f8:	bd08      	pop	{r3, pc}

080009fa <ili9341_ReadData>:
{
 80009fa:	b508      	push	{r3, lr}
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80009fc:	f000 f932 	bl	8000c64 <LCD_IO_ReadData>
}
 8000a00:	bd08      	pop	{r3, pc}

08000a02 <ili9341_ReadID>:
{
 8000a02:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000a04:	f000 f892 	bl	8000b2c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000a08:	2103      	movs	r1, #3
 8000a0a:	20d3      	movs	r0, #211	; 0xd3
 8000a0c:	f7ff fff5 	bl	80009fa <ili9341_ReadData>
}
 8000a10:	b280      	uxth	r0, r0
 8000a12:	bd08      	pop	{r3, pc}

08000a14 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000a14:	b500      	push	{lr}
 8000a16:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000a18:	2100      	movs	r1, #0
 8000a1a:	9101      	str	r1, [sp, #4]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <SPIx_MspInit+0x54>)
 8000a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a24:	645a      	str	r2, [r3, #68]	; 0x44
 8000a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a28:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000a30:	9102      	str	r1, [sp, #8]
 8000a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a34:	f042 0220 	orr.w	r2, r2, #32
 8000a38:	631a      	str	r2, [r3, #48]	; 0x30
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f003 0320 	and.w	r3, r3, #32
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000a44:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a48:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000a4e:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000a50:	2301      	movs	r3, #1
 8000a52:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000a54:	2305      	movs	r3, #5
 8000a56:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000a58:	a903      	add	r1, sp, #12
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <SPIx_MspInit+0x58>)
 8000a5c:	f001 fce0 	bl	8002420 <HAL_GPIO_Init>
}
 8000a60:	b009      	add	sp, #36	; 0x24
 8000a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021400 	.word	0x40021400

08000a70 <SPIx_Init>:
{
 8000a70:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <SPIx_Init+0x44>)
 8000a74:	f003 ff50 	bl	8004918 <HAL_SPI_GetState>
 8000a78:	b100      	cbz	r0, 8000a7c <SPIx_Init+0xc>
}
 8000a7a:	bd10      	pop	{r4, pc}
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000a7c:	4c0d      	ldr	r4, [pc, #52]	; (8000ab4 <SPIx_Init+0x44>)
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <SPIx_Init+0x48>)
 8000a80:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a82:	2318      	movs	r3, #24
 8000a84:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60a3      	str	r3, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000a8a:	6163      	str	r3, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000a8c:	6123      	str	r3, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000a8e:	62a3      	str	r3, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000a90:	2207      	movs	r2, #7
 8000a92:	62e2      	str	r2, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000a94:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000a96:	6223      	str	r3, [r4, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9c:	61a2      	str	r2, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000a9e:	6263      	str	r3, [r4, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000aa0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000aa4:	6063      	str	r3, [r4, #4]
    SPIx_MspInit(&SpiHandle);
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f7ff ffb4 	bl	8000a14 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000aac:	4620      	mov	r0, r4
 8000aae:	f003 fc11 	bl	80042d4 <HAL_SPI_Init>
}
 8000ab2:	e7e2      	b.n	8000a7a <SPIx_Init+0xa>
 8000ab4:	200000e0 	.word	0x200000e0
 8000ab8:	40015000 	.word	0x40015000

08000abc <SPIx_Error>:
{
 8000abc:	b508      	push	{r3, lr}
  HAL_SPI_DeInit(&SpiHandle);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <SPIx_Error+0x10>)
 8000ac0:	f003 fc67 	bl	8004392 <HAL_SPI_DeInit>
  SPIx_Init();
 8000ac4:	f7ff ffd4 	bl	8000a70 <SPIx_Init>
}
 8000ac8:	bd08      	pop	{r3, pc}
 8000aca:	bf00      	nop
 8000acc:	200000e0 	.word	0x200000e0

08000ad0 <SPIx_Write>:
{
 8000ad0:	b500      	push	{lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <SPIx_Write+0x28>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2201      	movs	r2, #1
 8000ade:	f10d 0106 	add.w	r1, sp, #6
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <SPIx_Write+0x2c>)
 8000ae4:	f003 fc6b 	bl	80043be <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8000ae8:	b910      	cbnz	r0, 8000af0 <SPIx_Write+0x20>
}
 8000aea:	b003      	add	sp, #12
 8000aec:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 8000af0:	f7ff ffe4 	bl	8000abc <SPIx_Error>
}
 8000af4:	e7f9      	b.n	8000aea <SPIx_Write+0x1a>
 8000af6:	bf00      	nop
 8000af8:	20000048 	.word	0x20000048
 8000afc:	200000e0 	.word	0x200000e0

08000b00 <SPIx_Read>:
{
 8000b00:	b500      	push	{lr}
 8000b02:	b083      	sub	sp, #12
 8000b04:	4602      	mov	r2, r0
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <SPIx_Read+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	a901      	add	r1, sp, #4
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <SPIx_Read+0x28>)
 8000b0e:	f003 fe49 	bl	80047a4 <HAL_SPI_Receive>
  if(status != HAL_OK)
 8000b12:	b918      	cbnz	r0, 8000b1c <SPIx_Read+0x1c>
}
 8000b14:	9801      	ldr	r0, [sp, #4]
 8000b16:	b003      	add	sp, #12
 8000b18:	f85d fb04 	ldr.w	pc, [sp], #4
    SPIx_Error();
 8000b1c:	f7ff ffce 	bl	8000abc <SPIx_Error>
 8000b20:	e7f8      	b.n	8000b14 <SPIx_Read+0x14>
 8000b22:	bf00      	nop
 8000b24:	20000048 	.word	0x20000048
 8000b28:	200000e0 	.word	0x200000e0

08000b2c <LCD_IO_Init>:
  */
void LCD_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <LCD_IO_Init+0xbc>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b103      	cbz	r3, 8000b34 <LCD_IO_Init+0x8>
 8000b32:	4770      	bx	lr
{
 8000b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b38:	b088      	sub	sp, #32
  {
    Is_LCD_IO_Initialized = 1; 
 8000b3a:	2601      	movs	r6, #1
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <LCD_IO_Init+0xbc>)
 8000b3e:	701e      	strb	r6, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000b40:	2500      	movs	r5, #0
 8000b42:	9500      	str	r5, [sp, #0]
 8000b44:	4c29      	ldr	r4, [pc, #164]	; (8000bec <LCD_IO_Init+0xc0>)
 8000b46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	6323      	str	r3, [r4, #48]	; 0x30
 8000b4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000b5e:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000b60:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000b62:	f04f 0802 	mov.w	r8, #2
 8000b66:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000b6a:	4f21      	ldr	r7, [pc, #132]	; (8000bf0 <LCD_IO_Init+0xc4>)
 8000b6c:	a903      	add	r1, sp, #12
 8000b6e:	4638      	mov	r0, r7
 8000b70:	f001 fc56 	bl	8002420 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000b74:	9501      	str	r5, [sp, #4]
 8000b76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6323      	str	r3, [r4, #48]	; 0x30
 8000b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b80:	f003 0308 	and.w	r3, r3, #8
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000b8e:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000b90:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000b92:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000b96:	a903      	add	r1, sp, #12
 8000b98:	4638      	mov	r0, r7
 8000b9a:	f001 fc41 	bl	8002420 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000b9e:	9502      	str	r5, [sp, #8]
 8000ba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8000ba8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	9302      	str	r3, [sp, #8]
 8000bb0:	9b02      	ldr	r3, [sp, #8]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000bb2:	2704      	movs	r7, #4
 8000bb4:	9703      	str	r7, [sp, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000bb6:	9604      	str	r6, [sp, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000bb8:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000bba:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000bbe:	f5a4 5440 	sub.w	r4, r4, #12288	; 0x3000
 8000bc2:	a903      	add	r1, sp, #12
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f001 fc2b 	bl	8002420 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000bca:	462a      	mov	r2, r5
 8000bcc:	4639      	mov	r1, r7
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f001 fdc4 	bl	800275c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f001 fdbf 	bl	800275c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000bde:	f7ff ff47 	bl	8000a70 <SPIx_Init>
  }
}
 8000be2:	b008      	add	sp, #32
 8000be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000be8:	200000dc 	.word	0x200000dc
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000bf4:	b538      	push	{r3, r4, r5, lr}
 8000bf6:	4604      	mov	r4, r0
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	4809      	ldr	r0, [pc, #36]	; (8000c24 <LCD_IO_WriteData+0x30>)
 8000c00:	f001 fdac 	bl	800275c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000c04:	4d08      	ldr	r5, [pc, #32]	; (8000c28 <LCD_IO_WriteData+0x34>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f001 fda6 	bl	800275c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000c10:	4620      	mov	r0, r4
 8000c12:	f7ff ff5d 	bl	8000ad0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000c16:	2201      	movs	r2, #1
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f001 fd9e 	bl	800275c <HAL_GPIO_WritePin>
}
 8000c20:	bd38      	pop	{r3, r4, r5, pc}
 8000c22:	bf00      	nop
 8000c24:	40020c00 	.word	0x40020c00
 8000c28:	40020800 	.word	0x40020800

08000c2c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	4604      	mov	r4, r0
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <LCD_IO_WriteReg+0x30>)
 8000c38:	f001 fd90 	bl	800275c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000c3c:	4d08      	ldr	r5, [pc, #32]	; (8000c60 <LCD_IO_WriteReg+0x34>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2104      	movs	r1, #4
 8000c42:	4628      	mov	r0, r5
 8000c44:	f001 fd8a 	bl	800275c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f7ff ff41 	bl	8000ad0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2104      	movs	r1, #4
 8000c52:	4628      	mov	r0, r5
 8000c54:	f001 fd82 	bl	800275c <HAL_GPIO_WritePin>
}
 8000c58:	bd38      	pop	{r3, r4, r5, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40020800 	.word	0x40020800

08000c64 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c66:	4605      	mov	r5, r0
 8000c68:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000c6a:	4e10      	ldr	r6, [pc, #64]	; (8000cac <LCD_IO_ReadData+0x48>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2104      	movs	r1, #4
 8000c70:	4630      	mov	r0, r6
 8000c72:	f001 fd73 	bl	800275c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000c76:	4f0e      	ldr	r7, [pc, #56]	; (8000cb0 <LCD_IO_ReadData+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7e:	4638      	mov	r0, r7
 8000c80:	f001 fd6c 	bl	800275c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000c84:	4628      	mov	r0, r5
 8000c86:	f7ff ff23 	bl	8000ad0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f7ff ff38 	bl	8000b00 <SPIx_Read>
 8000c90:	4604      	mov	r4, r0

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f001 fd5f 	bl	800275c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f001 fd5a 	bl	800275c <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8000ca8:	4620      	mov	r0, r4
 8000caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000cb4:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8000cb6:	f001 f90b 	bl	8001ed0 <HAL_Delay>
}
 8000cba:	bd08      	pop	{r3, pc}

08000cbc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460d      	mov	r5, r1
 8000cc4:	4616      	mov	r6, r2
 8000cc6:	461f      	mov	r7, r3
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <FillBuffer+0x54>)
 8000cca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000cce:	6043      	str	r3, [r0, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6083      	str	r3, [r0, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8000cd4:	9b08      	ldr	r3, [sp, #32]
 8000cd6:	60c3      	str	r3, [r0, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <FillBuffer+0x58>)
 8000cda:	6003      	str	r3, [r0, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000cdc:	f001 f9b5 	bl	800204a <HAL_DMA2D_Init>
 8000ce0:	b108      	cbz	r0, 8000ce6 <FillBuffer+0x2a>
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
      }
    }
  } 
}
 8000ce2:	b003      	add	sp, #12
 8000ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <FillBuffer+0x54>)
 8000cea:	f001 fb37 	bl	800235c <HAL_DMA2D_ConfigLayer>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d1f7      	bne.n	8000ce2 <FillBuffer+0x26>
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000cf2:	9700      	str	r7, [sp, #0]
 8000cf4:	4633      	mov	r3, r6
 8000cf6:	462a      	mov	r2, r5
 8000cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <FillBuffer+0x54>)
 8000cfc:	f001 f9d2 	bl	80020a4 <HAL_DMA2D_Start>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d1ee      	bne.n	8000ce2 <FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000d04:	210a      	movs	r1, #10
 8000d06:	4802      	ldr	r0, [pc, #8]	; (8000d10 <FillBuffer+0x54>)
 8000d08:	f001 f9e8 	bl	80020dc <HAL_DMA2D_PollForTransfer>
}
 8000d0c:	e7e9      	b.n	8000ce2 <FillBuffer+0x26>
 8000d0e:	bf00      	nop
 8000d10:	2000013c 	.word	0x2000013c
 8000d14:	4002b000 	.word	0x4002b000

08000d18 <BSP_LCD_GetXSize>:
{
 8000d18:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8000d1a:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <BSP_LCD_GetXSize+0xc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	4798      	blx	r3
}
 8000d22:	bd08      	pop	{r3, pc}
 8000d24:	20008560 	.word	0x20008560

08000d28 <BSP_LCD_GetYSize>:
{
 8000d28:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8000d2a:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <BSP_LCD_GetYSize+0xc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	4798      	blx	r3
}
 8000d32:	bd08      	pop	{r3, pc}
 8000d34:	20008560 	.word	0x20008560

08000d38 <BSP_LCD_LayerDefaultInit>:
{     
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	b08e      	sub	sp, #56	; 0x38
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 8000d40:	2500      	movs	r5, #0
 8000d42:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000d44:	f7ff ffe8 	bl	8000d18 <BSP_LCD_GetXSize>
 8000d48:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 8000d4a:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000d4c:	f7ff ffec 	bl	8000d28 <BSP_LCD_GetYSize>
 8000d50:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d52:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 8000d54:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 8000d56:	23ff      	movs	r3, #255	; 0xff
 8000d58:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 8000d5a:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8000d5c:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8000d60:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8000d64:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d6c:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000d72:	f7ff ffd1 	bl	8000d18 <BSP_LCD_GetXSize>
 8000d76:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000d78:	f7ff ffd6 	bl	8000d28 <BSP_LCD_GetYSize>
 8000d7c:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 8000d7e:	4d0d      	ldr	r5, [pc, #52]	; (8000db4 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000d80:	4622      	mov	r2, r4
 8000d82:	a901      	add	r1, sp, #4
 8000d84:	4628      	mov	r0, r5
 8000d86:	f002 fc93 	bl	80036b0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <BSP_LCD_LayerDefaultInit+0x80>)
 8000d8c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000d90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <BSP_LCD_LayerDefaultInit+0x84>)
 8000d9c:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000d9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000da2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000da6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  HAL_LTDC_EnableDither(&hltdc);
 8000daa:	4628      	mov	r0, r5
 8000dac:	f002 fcae 	bl	800370c <HAL_LTDC_EnableDither>
}
 8000db0:	b00e      	add	sp, #56	; 0x38
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	2000861c 	.word	0x2000861c
 8000db8:	2000017c 	.word	0x2000017c
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <BSP_LCD_SelectLayer+0x8>)
 8000dc2:	6018      	str	r0, [r3, #0]
}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000138 	.word	0x20000138

08000dcc <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <BSP_LCD_SetTextColor+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000dd4:	4a02      	ldr	r2, [pc, #8]	; (8000de0 <BSP_LCD_SetTextColor+0x14>)
 8000dd6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000dda:	4770      	bx	lr
 8000ddc:	20000138 	.word	0x20000138
 8000de0:	2000017c 	.word	0x2000017c

08000de4 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <BSP_LCD_SetBackColor+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <BSP_LCD_SetBackColor+0x18>)
 8000dee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000df2:	6058      	str	r0, [r3, #4]
}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000138 	.word	0x20000138
 8000dfc:	2000017c 	.word	0x2000017c

08000e00 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <BSP_LCD_SetFont+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e08:	4a03      	ldr	r2, [pc, #12]	; (8000e18 <BSP_LCD_SetFont+0x18>)
 8000e0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000e0e:	6098      	str	r0, [r3, #8]
}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000138 	.word	0x20000138
 8000e18:	2000017c 	.word	0x2000017c

08000e1c <BSP_LCD_Clear>:
{ 
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	4605      	mov	r5, r0
  FillBuffer(ActiveLayer, (uint32_t *)(hltdc.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <BSP_LCD_Clear+0x34>)
 8000e24:	681e      	ldr	r6, [r3, #0]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <BSP_LCD_Clear+0x38>)
 8000e28:	2334      	movs	r3, #52	; 0x34
 8000e2a:	fb03 2306 	mla	r3, r3, r6, r2
 8000e2e:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8000e30:	f7ff ff72 	bl	8000d18 <BSP_LCD_GetXSize>
 8000e34:	4604      	mov	r4, r0
 8000e36:	f7ff ff77 	bl	8000d28 <BSP_LCD_GetYSize>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	9501      	str	r5, [sp, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	9200      	str	r2, [sp, #0]
 8000e42:	4622      	mov	r2, r4
 8000e44:	4639      	mov	r1, r7
 8000e46:	4630      	mov	r0, r6
 8000e48:	f7ff ff38 	bl	8000cbc <FillBuffer>
}
 8000e4c:	b003      	add	sp, #12
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	20000138 	.word	0x20000138
 8000e54:	2000861c 	.word	0x2000861c

08000e58 <BSP_LCD_Init>:
{ 
 8000e58:	b508      	push	{r3, lr}
    LcdDrv = &ili9341_drv;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <BSP_LCD_Init+0x4c>)
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <BSP_LCD_Init+0x50>)
 8000e5e:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4798      	blx	r3
    BSP_SDRAM_Init();
 8000e64:	f000 f97c 	bl	8001160 <BSP_SDRAM_Init>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000e68:	4810      	ldr	r0, [pc, #64]	; (8000eac <BSP_LCD_Init+0x54>)
 8000e6a:	f7ff ffc9 	bl	8000e00 <BSP_LCD_SetFont>
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8000e6e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff60 	bl	8000d38 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(1);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff ffa1 	bl	8000dc0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e82:	f7ff ffcb 	bl	8000e1c <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e86:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e8a:	f7ff ff9f 	bl	8000dcc <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e92:	f7ff ffa7 	bl	8000de4 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font16);
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <BSP_LCD_Init+0x58>)
 8000e98:	f7ff ffb2 	bl	8000e00 <BSP_LCD_SetFont>
    HAL_Delay(100);
 8000e9c:	2064      	movs	r0, #100	; 0x64
 8000e9e:	f001 f817 	bl	8001ed0 <HAL_Delay>
}  
 8000ea2:	bd08      	pop	{r3, pc}
 8000ea4:	20000010 	.word	0x20000010
 8000ea8:	20008560 	.word	0x20008560
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000000 	.word	0x20000000

08000eb4 <BSP_LCD_DrawPixel>:
{
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	4606      	mov	r6, r0
 8000eb8:	460c      	mov	r4, r1
 8000eba:	4615      	mov	r5, r2
  *(__IO uint32_t*) (hltdc.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <BSP_LCD_DrawPixel+0x24>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <BSP_LCD_DrawPixel+0x28>)
 8000ec2:	2134      	movs	r1, #52	; 0x34
 8000ec4:	fb01 2303 	mla	r3, r1, r3, r2
 8000ec8:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8000eca:	f7ff ff25 	bl	8000d18 <BSP_LCD_GetXSize>
 8000ece:	fb00 6004 	mla	r0, r0, r4, r6
 8000ed2:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8000ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed8:	20000138 	.word	0x20000138
 8000edc:	2000861c 	.word	0x2000861c

08000ee0 <DrawChar>:
{
 8000ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	4681      	mov	r9, r0
 8000ee8:	460e      	mov	r6, r1
 8000eea:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 8000eec:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <DrawChar+0xe0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ef4:	4a33      	ldr	r2, [pc, #204]	; (8000fc4 <DrawChar+0xe4>)
 8000ef6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	88da      	ldrh	r2, [r3, #6]
 8000efe:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000f00:	889d      	ldrh	r5, [r3, #4]
  offset = 8 *((width + 7)/8) -  width ;
 8000f02:	f105 0b07 	add.w	fp, r5, #7
 8000f06:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8000f0a:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8000f0e:	fa5f f888 	uxtb.w	r8, r8
 8000f12:	b2eb      	uxtb	r3, r5
 8000f14:	eba8 0803 	sub.w	r8, r8, r3
 8000f18:	fa5f f888 	uxtb.w	r8, r8
  for(i = 0; i < height; i++)
 8000f1c:	f04f 0a00 	mov.w	sl, #0
 8000f20:	e034      	b.n	8000f8c <DrawChar+0xac>
      line =  pchar[0];      
 8000f22:	9a00      	ldr	r2, [sp, #0]
 8000f24:	5cd7      	ldrb	r7, [r2, r3]
    for (j = 0; j < width; j++)
 8000f26:	2400      	movs	r4, #0
 8000f28:	e014      	b.n	8000f54 <DrawChar+0x74>
      line =  (pchar[0]<< 8) | pchar[1];
 8000f2a:	9900      	ldr	r1, [sp, #0]
 8000f2c:	5ccb      	ldrb	r3, [r1, r3]
 8000f2e:	7857      	ldrb	r7, [r2, #1]
 8000f30:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 8000f34:	e7f7      	b.n	8000f26 <DrawChar+0x46>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000f36:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <DrawChar+0xe0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <DrawChar+0xe4>)
 8000f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000f44:	eb09 0004 	add.w	r0, r9, r4
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4631      	mov	r1, r6
 8000f4c:	b280      	uxth	r0, r0
 8000f4e:	f7ff ffb1 	bl	8000eb4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000f52:	3401      	adds	r4, #1
 8000f54:	42a5      	cmp	r5, r4
 8000f56:	d915      	bls.n	8000f84 <DrawChar+0xa4>
      if(line & (1 << (width- j + offset- 1))) 
 8000f58:	1b2b      	subs	r3, r5, r4
 8000f5a:	4443      	add	r3, r8
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	423b      	tst	r3, r7
 8000f66:	d0e6      	beq.n	8000f36 <DrawChar+0x56>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <DrawChar+0xe0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f70:	eb09 0004 	add.w	r0, r9, r4
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <DrawChar+0xe4>)
 8000f76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	b280      	uxth	r0, r0
 8000f7e:	f7ff ff99 	bl	8000eb4 <BSP_LCD_DrawPixel>
 8000f82:	e7e6      	b.n	8000f52 <DrawChar+0x72>
    Ypos++;
 8000f84:	3601      	adds	r6, #1
 8000f86:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 8000f88:	f10a 0a01 	add.w	sl, sl, #1
 8000f8c:	9b01      	ldr	r3, [sp, #4]
 8000f8e:	4553      	cmp	r3, sl
 8000f90:	d912      	bls.n	8000fb8 <DrawChar+0xd8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000f92:	fb0a f30b 	mul.w	r3, sl, fp
 8000f96:	9a00      	ldr	r2, [sp, #0]
 8000f98:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8000f9a:	f1bb 0f01 	cmp.w	fp, #1
 8000f9e:	d0c0      	beq.n	8000f22 <DrawChar+0x42>
 8000fa0:	f1bb 0f02 	cmp.w	fp, #2
 8000fa4:	d0c1      	beq.n	8000f2a <DrawChar+0x4a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000fa6:	9900      	ldr	r1, [sp, #0]
 8000fa8:	5ccb      	ldrb	r3, [r1, r3]
 8000faa:	7857      	ldrb	r7, [r2, #1]
 8000fac:	023f      	lsls	r7, r7, #8
 8000fae:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000fb2:	7893      	ldrb	r3, [r2, #2]
 8000fb4:	431f      	orrs	r7, r3
      break;
 8000fb6:	e7b6      	b.n	8000f26 <DrawChar+0x46>
}
 8000fb8:	b003      	add	sp, #12
 8000fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000138 	.word	0x20000138
 8000fc4:	2000017c 	.word	0x2000017c

08000fc8 <BSP_LCD_DisplayChar>:
{
 8000fc8:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <BSP_LCD_DisplayChar+0x2c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000fd2:	4c09      	ldr	r4, [pc, #36]	; (8000ff8 <BSP_LCD_DisplayChar+0x30>)
 8000fd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000fd8:	689c      	ldr	r4, [r3, #8]
 8000fda:	6825      	ldr	r5, [r4, #0]
 8000fdc:	3a20      	subs	r2, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000fde:	88e3      	ldrh	r3, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000fe0:	fb03 f202 	mul.w	r2, r3, r2
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000fe4:	88a3      	ldrh	r3, [r4, #4]
 8000fe6:	3307      	adds	r3, #7
 8000fe8:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000fea:	fb03 5202 	mla	r2, r3, r2, r5
 8000fee:	f7ff ff77 	bl	8000ee0 <DrawChar>
}
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}
 8000ff4:	20000138 	.word	0x20000138
 8000ff8:	2000017c 	.word	0x2000017c

08000ffc <BSP_LCD_DisplayStringAt>:
{
 8000ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001000:	4606      	mov	r6, r0
 8001002:	460f      	mov	r7, r1
 8001004:	4615      	mov	r5, r2
 8001006:	4698      	mov	r8, r3
  uint32_t size = 0, xsize = 0; 
 8001008:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 800100a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800100e:	b109      	cbz	r1, 8001014 <BSP_LCD_DisplayStringAt+0x18>
 8001010:	3401      	adds	r4, #1
 8001012:	e7fa      	b.n	800100a <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001014:	f7ff fe80 	bl	8000d18 <BSP_LCD_GetXSize>
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <BSP_LCD_DisplayStringAt+0xbc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001020:	4a26      	ldr	r2, [pc, #152]	; (80010bc <BSP_LCD_DisplayStringAt+0xc0>)
 8001022:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	889b      	ldrh	r3, [r3, #4]
 800102a:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (mode)
 800102e:	f1b8 0f01 	cmp.w	r8, #1
 8001032:	d030      	beq.n	8001096 <BSP_LCD_DisplayStringAt+0x9a>
 8001034:	f1b8 0f02 	cmp.w	r8, #2
 8001038:	d035      	beq.n	80010a6 <BSP_LCD_DisplayStringAt+0xaa>
  while (*ptr++) size ++ ;
 800103a:	2400      	movs	r4, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800103c:	f895 8000 	ldrb.w	r8, [r5]
 8001040:	f7ff fe6a 	bl	8000d18 <BSP_LCD_GetXSize>
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <BSP_LCD_DisplayStringAt+0xbc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <BSP_LCD_DisplayStringAt+0xc0>)
 800104e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	889a      	ldrh	r2, [r3, #4]
 8001056:	fb02 0314 	mls	r3, r2, r4, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	4293      	cmp	r3, r2
 800105e:	bf34      	ite	cc
 8001060:	2300      	movcc	r3, #0
 8001062:	2301      	movcs	r3, #1
 8001064:	f1b8 0f00 	cmp.w	r8, #0
 8001068:	bf08      	it	eq
 800106a:	2300      	moveq	r3, #0
 800106c:	b313      	cbz	r3, 80010b4 <BSP_LCD_DisplayStringAt+0xb8>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800106e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001072:	4639      	mov	r1, r7
 8001074:	4630      	mov	r0, r6
 8001076:	f7ff ffa7 	bl	8000fc8 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <BSP_LCD_DisplayStringAt+0xbc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <BSP_LCD_DisplayStringAt+0xc0>)
 8001084:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	8898      	ldrh	r0, [r3, #4]
 800108c:	4406      	add	r6, r0
 800108e:	b2b6      	uxth	r6, r6
    i++;
 8001090:	3401      	adds	r4, #1
 8001092:	b2a4      	uxth	r4, r4
 8001094:	e7d2      	b.n	800103c <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001096:	1b00      	subs	r0, r0, r4
 8001098:	fb00 f303 	mul.w	r3, r0, r3
 800109c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80010a0:	441e      	add	r6, r3
 80010a2:	b2b6      	uxth	r6, r6
      break;
 80010a4:	e7c9      	b.n	800103a <BSP_LCD_DisplayStringAt+0x3e>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80010a6:	1b00      	subs	r0, r0, r4
 80010a8:	fb10 f003 	smulbb	r0, r0, r3
 80010ac:	fa16 f680 	uxtah	r6, r6, r0
 80010b0:	b2b6      	uxth	r6, r6
      break;
 80010b2:	e7c2      	b.n	800103a <BSP_LCD_DisplayStringAt+0x3e>
}
 80010b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010b8:	20000138 	.word	0x20000138
 80010bc:	2000017c 	.word	0x2000017c

080010c0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80010c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd =0;
 80010c8:	f04f 0800 	mov.w	r8, #0
 80010cc:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80010d0:	4c21      	ldr	r4, [pc, #132]	; (8001158 <BSP_SDRAM_Initialization_sequence+0x98>)
 80010d2:	2601      	movs	r6, #1
 80010d4:	6026      	str	r6, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010d6:	2708      	movs	r7, #8
 80010d8:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80010da:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80010dc:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80010e0:	4d1e      	ldr	r5, [pc, #120]	; (800115c <BSP_SDRAM_Initialization_sequence+0x9c>)
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	4621      	mov	r1, r4
 80010e8:	4628      	mov	r0, r5
 80010ea:	f002 ffe3 	bl	80040b4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80010ee:	4630      	mov	r0, r6
 80010f0:	f000 feee 	bl	8001ed0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80010f4:	2302      	movs	r3, #2
 80010f6:	6023      	str	r3, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010f8:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80010fa:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 80010fc:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001104:	4621      	mov	r1, r4
 8001106:	4628      	mov	r0, r5
 8001108:	f002 ffd4 	bl	80040b4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800110c:	2303      	movs	r3, #3
 800110e:	6023      	str	r3, [r4, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001110:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 4;
 8001112:	f04f 0a04 	mov.w	sl, #4
 8001116:	f8c4 a008 	str.w	sl, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 800111a:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800111e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001122:	4621      	mov	r1, r4
 8001124:	4628      	mov	r0, r5
 8001126:	f002 ffc5 	bl	80040b4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800112a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800112e:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001130:	f8c4 a000 	str.w	sl, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001134:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 8001136:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	4621      	mov	r1, r4
 8001142:	4628      	mov	r0, r5
 8001144:	f002 ffb6 	bl	80040b4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8001148:	4649      	mov	r1, r9
 800114a:	4628      	mov	r0, r5
 800114c:	f002 ffcd 	bl	80040ea <HAL_SDRAM_ProgramRefreshRate>
}
 8001150:	b002      	add	sp, #8
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	bf00      	nop
 8001158:	20000194 	.word	0x20000194
 800115c:	20008a98 	.word	0x20008a98

08001160 <BSP_SDRAM_Init>:
{
 8001160:	b508      	push	{r3, lr}
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001162:	f240 506a 	movw	r0, #1386	; 0x56a
 8001166:	f7ff ffab 	bl	80010c0 <BSP_SDRAM_Initialization_sequence>
}
 800116a:	2000      	movs	r0, #0
 800116c:	bd08      	pop	{r3, pc}

0800116e <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800116e:	4770      	bx	lr

08001170 <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001170:	4770      	bx	lr

08001172 <vApplicationMallocFailedHook>:
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001172:	4770      	bx	lr

08001174 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <vApplicationGetIdleTaskMemory+0x10>)
 8001176:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <vApplicationGetIdleTaskMemory+0x14>)
 800117a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200003a4 	.word	0x200003a4
 8001188:	200001a4 	.word	0x200001a4

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001190:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	2400      	movs	r4, #0
 8001194:	9409      	str	r4, [sp, #36]	; 0x24
 8001196:	940a      	str	r4, [sp, #40]	; 0x28
 8001198:	940b      	str	r4, [sp, #44]	; 0x2c
 800119a:	940c      	str	r4, [sp, #48]	; 0x30
 800119c:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	9401      	str	r4, [sp, #4]
 80011a0:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <MX_GPIO_Init+0x18c>)
 80011a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a4:	f042 0204 	orr.w	r2, r2, #4
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30
 80011aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ac:	f002 0204 	and.w	r2, r2, #4
 80011b0:	9201      	str	r2, [sp, #4]
 80011b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b4:	9402      	str	r4, [sp, #8]
 80011b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b8:	f042 0220 	orr.w	r2, r2, #32
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
 80011be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c0:	f002 0220 	and.w	r2, r2, #32
 80011c4:	9202      	str	r2, [sp, #8]
 80011c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c8:	9403      	str	r4, [sp, #12]
 80011ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
 80011d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80011d8:	9203      	str	r2, [sp, #12]
 80011da:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	9404      	str	r4, [sp, #16]
 80011de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e0:	f042 0201 	orr.w	r2, r2, #1
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
 80011e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e8:	f002 0201 	and.w	r2, r2, #1
 80011ec:	9204      	str	r2, [sp, #16]
 80011ee:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	9405      	str	r4, [sp, #20]
 80011f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f4:	f042 0202 	orr.w	r2, r2, #2
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
 80011fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011fc:	f002 0202 	and.w	r2, r2, #2
 8001200:	9205      	str	r2, [sp, #20]
 8001202:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001204:	9406      	str	r4, [sp, #24]
 8001206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
 800120e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001210:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001214:	9206      	str	r2, [sp, #24]
 8001216:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001218:	9407      	str	r4, [sp, #28]
 800121a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800121c:	f042 0210 	orr.w	r2, r2, #16
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
 8001222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001224:	f002 0210 	and.w	r2, r2, #16
 8001228:	9207      	str	r2, [sp, #28]
 800122a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122c:	9408      	str	r4, [sp, #32]
 800122e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001230:	f042 0208 	orr.w	r2, r2, #8
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	9308      	str	r3, [sp, #32]
 800123e:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001240:	4f36      	ldr	r7, [pc, #216]	; (800131c <MX_GPIO_Init+0x190>)
 8001242:	4622      	mov	r2, r4
 8001244:	2116      	movs	r1, #22
 8001246:	4638      	mov	r0, r7
 8001248:	f001 fa88 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800124c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001328 <MX_GPIO_Init+0x19c>
 8001250:	4622      	mov	r2, r4
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	4640      	mov	r0, r8
 8001256:	f001 fa81 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800125a:	4e31      	ldr	r6, [pc, #196]	; (8001320 <MX_GPIO_Init+0x194>)
 800125c:	4622      	mov	r2, r4
 800125e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001262:	4630      	mov	r0, r6
 8001264:	f001 fa7a 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001268:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800132c <MX_GPIO_Init+0x1a0>
 800126c:	4622      	mov	r2, r4
 800126e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001272:	4648      	mov	r0, r9
 8001274:	f001 fa72 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001278:	2316      	movs	r3, #22
 800127a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2501      	movs	r5, #1
 800127e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	a909      	add	r1, sp, #36	; 0x24
 8001286:	4638      	mov	r0, r7
 8001288:	f001 f8ca 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800128c:	f248 0307 	movw	r3, #32775	; 0x8007
 8001290:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001292:	f44f 1a90 	mov.w	sl, #1179648	; 0x120000
 8001296:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	a909      	add	r1, sp, #36	; 0x24
 800129e:	4640      	mov	r0, r8
 80012a0:	f001 f8be 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80012ae:	a909      	add	r1, sp, #36	; 0x24
 80012b0:	4640      	mov	r0, r8
 80012b2:	f001 f8b5 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80012b6:	2320      	movs	r3, #32
 80012b8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012ba:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80012c0:	a909      	add	r1, sp, #36	; 0x24
 80012c2:	4638      	mov	r0, r7
 80012c4:	f001 f8ac 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012c8:	2304      	movs	r3, #4
 80012ca:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012d0:	a909      	add	r1, sp, #36	; 0x24
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <MX_GPIO_Init+0x198>)
 80012d4:	f001 f8a4 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80012d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012dc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012de:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80012e2:	a909      	add	r1, sp, #36	; 0x24
 80012e4:	4630      	mov	r0, r6
 80012e6:	f001 f89b 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80012ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012ee:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	a909      	add	r1, sp, #36	; 0x24
 80012f8:	4630      	mov	r0, r6
 80012fa:	f001 f891 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80012fe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001302:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130a:	a909      	add	r1, sp, #36	; 0x24
 800130c:	4648      	mov	r0, r9
 800130e:	f001 f887 	bl	8002420 <HAL_GPIO_Init>

}
 8001312:	b00e      	add	sp, #56	; 0x38
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40020400 	.word	0x40020400
 8001328:	40020000 	.word	0x40020000
 800132c:	40021800 	.word	0x40021800

08001330 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001332:	6802      	ldr	r2, [r0, #0]
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001336:	429a      	cmp	r2, r3
 8001338:	d000      	beq.n	800133c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800133a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800133c:	f000 fdb6 	bl	8001eac <HAL_IncTick>
}
 8001340:	e7fb      	b.n	800133a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001342:	bf00      	nop
 8001344:	40001000 	.word	0x40001000

08001348 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134a:	e7fe      	b.n	800134a <Error_Handler+0x2>

0800134c <MX_CRC_Init>:
{
 800134c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_CRC_Init+0x14>)
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <MX_CRC_Init+0x18>)
 8001352:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001354:	f000 fe24 	bl	8001fa0 <HAL_CRC_Init>
 8001358:	b900      	cbnz	r0, 800135c <MX_CRC_Init+0x10>
}
 800135a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800135c:	f7ff fff4 	bl	8001348 <Error_Handler>
 8001360:	20008614 	.word	0x20008614
 8001364:	40023000 	.word	0x40023000

08001368 <MX_DMA2D_Init>:
{
 8001368:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_DMA2D_Init+0x34>)
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA2D_Init+0x38>)
 800136e:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001370:	2300      	movs	r3, #0
 8001372:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001374:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8001376:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001378:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800137a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800137c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800137e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001380:	f000 fe63 	bl	800204a <HAL_DMA2D_Init>
 8001384:	b928      	cbnz	r0, 8001392 <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001386:	2101      	movs	r1, #1
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_DMA2D_Init+0x34>)
 800138a:	f000 ffe7 	bl	800235c <HAL_DMA2D_ConfigLayer>
 800138e:	b910      	cbnz	r0, 8001396 <MX_DMA2D_Init+0x2e>
}
 8001390:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001392:	f7ff ffd9 	bl	8001348 <Error_Handler>
    Error_Handler();
 8001396:	f7ff ffd7 	bl	8001348 <Error_Handler>
 800139a:	bf00      	nop
 800139c:	20008a58 	.word	0x20008a58
 80013a0:	4002b000 	.word	0x4002b000

080013a4 <MX_FMC_Init>:
{
 80013a4:	b500      	push	{lr}
 80013a6:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_FMC_Init+0x5c>)
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_FMC_Init+0x60>)
 80013ac:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80013ae:	2301      	movs	r3, #1
 80013b0:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013b2:	2300      	movs	r3, #0
 80013b4:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013b6:	2104      	movs	r1, #4
 80013b8:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013ba:	2210      	movs	r2, #16
 80013bc:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013be:	2240      	movs	r2, #64	; 0x40
 80013c0:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80013c2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013c6:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013c8:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80013ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ce:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013d0:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80013d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d6:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80013dc:	2207      	movs	r2, #7
 80013de:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 80013e0:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 80013e2:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80013e4:	2203      	movs	r2, #3
 80013e6:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 80013e8:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80013ea:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80013ec:	4469      	add	r1, sp
 80013ee:	f002 fe41 	bl	8004074 <HAL_SDRAM_Init>
 80013f2:	b910      	cbnz	r0, 80013fa <MX_FMC_Init+0x56>
}
 80013f4:	b009      	add	sp, #36	; 0x24
 80013f6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 80013fa:	f7ff ffa5 	bl	8001348 <Error_Handler>
 80013fe:	bf00      	nop
 8001400:	20008a98 	.word	0x20008a98
 8001404:	a0000140 	.word	0xa0000140

08001408 <MX_I2C3_Init>:
{
 8001408:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <MX_I2C3_Init+0x48>)
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_I2C3_Init+0x4c>)
 800140e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_I2C3_Init+0x50>)
 8001412:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001414:	2300      	movs	r3, #0
 8001416:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001418:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141e:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001422:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001426:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001428:	f001 fe60 	bl	80030ec <HAL_I2C_Init>
 800142c:	b950      	cbnz	r0, 8001444 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_I2C3_Init+0x48>)
 8001432:	f001 ff39 	bl	80032a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001436:	b938      	cbnz	r0, 8001448 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_I2C3_Init+0x48>)
 800143c:	f001 ff56 	bl	80032ec <HAL_I2CEx_ConfigDigitalFilter>
 8001440:	b920      	cbnz	r0, 800144c <MX_I2C3_Init+0x44>
}
 8001442:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001444:	f7ff ff80 	bl	8001348 <Error_Handler>
    Error_Handler();
 8001448:	f7ff ff7e 	bl	8001348 <Error_Handler>
    Error_Handler();
 800144c:	f7ff ff7c 	bl	8001348 <Error_Handler>
 8001450:	20008568 	.word	0x20008568
 8001454:	40005c00 	.word	0x40005c00
 8001458:	000186a0 	.word	0x000186a0

0800145c <MX_LTDC_Init>:
{
 800145c:	b500      	push	{lr}
 800145e:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001460:	2234      	movs	r2, #52	; 0x34
 8001462:	2100      	movs	r1, #0
 8001464:	a801      	add	r0, sp, #4
 8001466:	f005 fbeb 	bl	8006c40 <memset>
  hltdc.Instance = LTDC;
 800146a:	4827      	ldr	r0, [pc, #156]	; (8001508 <MX_LTDC_Init+0xac>)
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <MX_LTDC_Init+0xb0>)
 800146e:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001470:	2300      	movs	r3, #0
 8001472:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001474:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001476:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001478:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 9;
 800147a:	2209      	movs	r2, #9
 800147c:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 1;
 800147e:	2201      	movs	r2, #1
 8001480:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001482:	221d      	movs	r2, #29
 8001484:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001486:	2203      	movs	r2, #3
 8001488:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800148a:	f240 120d 	movw	r2, #269	; 0x10d
 800148e:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001490:	f240 1243 	movw	r2, #323	; 0x143
 8001494:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001496:	f240 1217 	movw	r2, #279	; 0x117
 800149a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800149c:	f240 1247 	movw	r2, #327	; 0x147
 80014a0:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014a2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014a6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014aa:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014ae:	f002 f815 	bl	80034dc <HAL_LTDC_Init>
 80014b2:	bb20      	cbnz	r0, 80014fe <MX_LTDC_Init+0xa2>
  pLayerCfg.WindowX0 = 0;
 80014b4:	2200      	movs	r2, #0
 80014b6:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 240;
 80014b8:	21f0      	movs	r1, #240	; 0xf0
 80014ba:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 80014bc:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 320;
 80014be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014c2:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80014c4:	2002      	movs	r0, #2
 80014c6:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 80014c8:	20ff      	movs	r0, #255	; 0xff
 80014ca:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 80014cc:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80014ce:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80014d2:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80014d4:	2007      	movs	r0, #7
 80014d6:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80014d8:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 80014dc:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80014de:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80014e0:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80014e2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80014e6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80014ea:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80014ee:	a901      	add	r1, sp, #4
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_LTDC_Init+0xac>)
 80014f2:	f002 f8dd 	bl	80036b0 <HAL_LTDC_ConfigLayer>
 80014f6:	b920      	cbnz	r0, 8001502 <MX_LTDC_Init+0xa6>
}
 80014f8:	b00f      	add	sp, #60	; 0x3c
 80014fa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014fe:	f7ff ff23 	bl	8001348 <Error_Handler>
    Error_Handler();
 8001502:	f7ff ff21 	bl	8001348 <Error_Handler>
 8001506:	bf00      	nop
 8001508:	2000861c 	.word	0x2000861c
 800150c:	40016800 	.word	0x40016800

08001510 <MX_SPI5_Init>:
{
 8001510:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_SPI5_Init+0x38>)
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_SPI5_Init+0x3c>)
 8001516:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001518:	f44f 7382 	mov.w	r3, #260	; 0x104
 800151c:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	2300      	movs	r3, #0
 8001520:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001522:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001524:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001526:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800152e:	2218      	movs	r2, #24
 8001530:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001532:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001534:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001536:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001538:	230a      	movs	r3, #10
 800153a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800153c:	f002 feca 	bl	80042d4 <HAL_SPI_Init>
 8001540:	b900      	cbnz	r0, 8001544 <MX_SPI5_Init+0x34>
}
 8001542:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001544:	f7ff ff00 	bl	8001348 <Error_Handler>
 8001548:	200085bc 	.word	0x200085bc
 800154c:	40015000 	.word	0x40015000

08001550 <MX_TIM1_Init>:
{
 8001550:	b500      	push	{lr}
 8001552:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001554:	2300      	movs	r3, #0
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	9303      	str	r3, [sp, #12]
 800155a:	9304      	str	r3, [sp, #16]
 800155c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 8001562:	4813      	ldr	r0, [pc, #76]	; (80015b0 <MX_TIM1_Init+0x60>)
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <MX_TIM1_Init+0x64>)
 8001566:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001568:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 800156c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001570:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001574:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001578:	f003 fb68 	bl	8004c4c <HAL_TIM_Base_Init>
 800157c:	b990      	cbnz	r0, 80015a4 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001584:	a902      	add	r1, sp, #8
 8001586:	480a      	ldr	r0, [pc, #40]	; (80015b0 <MX_TIM1_Init+0x60>)
 8001588:	f003 fb98 	bl	8004cbc <HAL_TIM_ConfigClockSource>
 800158c:	b960      	cbnz	r0, 80015a8 <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001594:	4669      	mov	r1, sp
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_TIM1_Init+0x60>)
 8001598:	f003 fc10 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	b930      	cbnz	r0, 80015ac <MX_TIM1_Init+0x5c>
}
 800159e:	b007      	add	sp, #28
 80015a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015a4:	f7ff fed0 	bl	8001348 <Error_Handler>
    Error_Handler();
 80015a8:	f7ff fece 	bl	8001348 <Error_Handler>
    Error_Handler();
 80015ac:	f7ff fecc 	bl	8001348 <Error_Handler>
 80015b0:	20008a10 	.word	0x20008a10
 80015b4:	40010000 	.word	0x40010000

080015b8 <MX_USART1_UART_Init>:
{
 80015b8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <MX_USART1_UART_Init+0x2c>)
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_USART1_UART_Init+0x30>)
 80015be:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80015c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015c4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	2300      	movs	r3, #0
 80015c8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015cc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ce:	220c      	movs	r2, #12
 80015d0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d6:	f003 fcc5 	bl	8004f64 <HAL_UART_Init>
 80015da:	b900      	cbnz	r0, 80015de <MX_USART1_UART_Init+0x26>
}
 80015dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015de:	f7ff feb3 	bl	8001348 <Error_Handler>
 80015e2:	bf00      	nop
 80015e4:	200086c4 	.word	0x200086c4
 80015e8:	40011000 	.word	0x40011000

080015ec <MX_USB_OTG_HS_HCD_Init>:
{
 80015ec:	b508      	push	{r3, lr}
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <MX_USB_OTG_HS_HCD_Init+0x2c>)
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_USB_OTG_HS_HCD_Init+0x30>)
 80015f2:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80015f4:	230c      	movs	r3, #12
 80015f6:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80015f8:	2301      	movs	r3, #1
 80015fa:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001600:	2202      	movs	r2, #2
 8001602:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001604:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001606:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001608:	62c3      	str	r3, [r0, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800160a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800160c:	f001 f904 	bl	8002818 <HAL_HCD_Init>
 8001610:	b900      	cbnz	r0, 8001614 <MX_USB_OTG_HS_HCD_Init+0x28>
}
 8001612:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001614:	f7ff fe98 	bl	8001348 <Error_Handler>
 8001618:	20008708 	.word	0x20008708
 800161c:	40040000 	.word	0x40040000

08001620 <SystemClock_Config>:
{
 8001620:	b500      	push	{lr}
 8001622:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001624:	2230      	movs	r2, #48	; 0x30
 8001626:	2100      	movs	r1, #0
 8001628:	a808      	add	r0, sp, #32
 800162a:	f005 fb09 	bl	8006c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162e:	2300      	movs	r3, #0
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	9304      	str	r3, [sp, #16]
 8001634:	9305      	str	r3, [sp, #20]
 8001636:	9306      	str	r3, [sp, #24]
 8001638:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <SystemClock_Config+0xa0>)
 800163e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001640:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001644:	6411      	str	r1, [r2, #64]	; 0x40
 8001646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001648:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800164c:	9201      	str	r2, [sp, #4]
 800164e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <SystemClock_Config+0xa4>)
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800165a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166a:	2301      	movs	r3, #1
 800166c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800166e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001672:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001674:	2302      	movs	r3, #2
 8001676:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001678:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800167c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800167e:	2204      	movs	r2, #4
 8001680:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001682:	2248      	movs	r2, #72	; 0x48
 8001684:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001686:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001688:	2303      	movs	r3, #3
 800168a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	a808      	add	r0, sp, #32
 800168e:	f002 f857 	bl	8003740 <HAL_RCC_OscConfig>
 8001692:	b980      	cbnz	r0, 80016b6 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001694:	230f      	movs	r3, #15
 8001696:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001698:	2102      	movs	r1, #2
 800169a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a4:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a8:	a803      	add	r0, sp, #12
 80016aa:	f002 faab 	bl	8003c04 <HAL_RCC_ClockConfig>
 80016ae:	b920      	cbnz	r0, 80016ba <SystemClock_Config+0x9a>
}
 80016b0:	b015      	add	sp, #84	; 0x54
 80016b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016b6:	f7ff fe47 	bl	8001348 <Error_Handler>
    Error_Handler();
 80016ba:	f7ff fe45 	bl	8001348 <Error_Handler>
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000

080016c8 <main>:
{
 80016c8:	b508      	push	{r3, lr}
  HAL_Init();
 80016ca:	f000 fbd5 	bl	8001e78 <HAL_Init>
  SystemClock_Config();
 80016ce:	f7ff ffa7 	bl	8001620 <SystemClock_Config>
  MX_GPIO_Init();
 80016d2:	f7ff fd5b 	bl	800118c <MX_GPIO_Init>
  MX_CRC_Init();
 80016d6:	f7ff fe39 	bl	800134c <MX_CRC_Init>
  MX_DMA2D_Init();
 80016da:	f7ff fe45 	bl	8001368 <MX_DMA2D_Init>
  MX_FMC_Init();
 80016de:	f7ff fe61 	bl	80013a4 <MX_FMC_Init>
  MX_I2C3_Init();
 80016e2:	f7ff fe91 	bl	8001408 <MX_I2C3_Init>
  MX_LTDC_Init();
 80016e6:	f7ff feb9 	bl	800145c <MX_LTDC_Init>
  MX_SPI5_Init();
 80016ea:	f7ff ff11 	bl	8001510 <MX_SPI5_Init>
  MX_TIM1_Init();
 80016ee:	f7ff ff2f 	bl	8001550 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80016f2:	f7ff ff61 	bl	80015b8 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80016f6:	f7ff ff79 	bl	80015ec <MX_USB_OTG_HS_HCD_Init>
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016fa:	2300      	movs	r3, #0
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <main+0x44>)
 80016fe:	6013      	str	r3, [r2, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001700:	4a03      	ldr	r2, [pc, #12]	; (8001710 <main+0x48>)
 8001702:	6013      	str	r3, [r2, #0]
  app_main();
 8001704:	f7fe ffd2 	bl	80006ac <app_main>
  while (1)
 8001708:	e7fe      	b.n	8001708 <main+0x40>
 800170a:	bf00      	nop
 800170c:	20008564 	.word	0x20008564
 8001710:	20008a0c 	.word	0x20008a0c

08001714 <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_FMC_MspInit+0xbc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	b103      	cbz	r3, 800171c <HAL_FMC_MspInit+0x8>
 800171a:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 800171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001720:	b086      	sub	sp, #24
    return;
  }
  FMC_Initialized = 1;
 8001722:	f04f 0801 	mov.w	r8, #1
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_FMC_MspInit+0xbc>)
 8001728:	f8c3 8000 	str.w	r8, [r3]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800172c:	2400      	movs	r4, #0
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_FMC_MspInit+0xc0>)
 8001732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001734:	ea42 0208 	orr.w	r2, r2, r8
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	ea03 0308 	and.w	r3, r3, r8
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	9b00      	ldr	r3, [sp, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001744:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001748:	9301      	str	r3, [sp, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2702      	movs	r7, #2
 800174c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2603      	movs	r6, #3
 8001752:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001754:	250c      	movs	r5, #12
 8001756:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001758:	a901      	add	r1, sp, #4
 800175a:	481f      	ldr	r0, [pc, #124]	; (80017d8 <HAL_FMC_MspInit+0xc4>)
 800175c:	f000 fe60 	bl	8002420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001760:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800176a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800176c:	a901      	add	r1, sp, #4
 800176e:	481b      	ldr	r0, [pc, #108]	; (80017dc <HAL_FMC_MspInit+0xc8>)
 8001770:	f000 fe56 	bl	8002420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001774:	f248 1333 	movw	r3, #33075	; 0x8133
 8001778:	9301      	str	r3, [sp, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001780:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001782:	a901      	add	r1, sp, #4
 8001784:	4816      	ldr	r0, [pc, #88]	; (80017e0 <HAL_FMC_MspInit+0xcc>)
 8001786:	f000 fe4b 	bl	8002420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800178a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800178e:	9301      	str	r3, [sp, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001796:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001798:	a901      	add	r1, sp, #4
 800179a:	4812      	ldr	r0, [pc, #72]	; (80017e4 <HAL_FMC_MspInit+0xd0>)
 800179c:	f000 fe40 	bl	8002420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80017a0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80017a4:	9301      	str	r3, [sp, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ac:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ae:	a901      	add	r1, sp, #4
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <HAL_FMC_MspInit+0xd4>)
 80017b2:	f000 fe35 	bl	8002420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80017b6:	2360      	movs	r3, #96	; 0x60
 80017b8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	a901      	add	r1, sp, #4
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <HAL_FMC_MspInit+0xd8>)
 80017c6:	f000 fe2b 	bl	8002420 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80017ca:	b006      	add	sp, #24
 80017cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017d0:	200003fc 	.word	0x200003fc
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40021800 	.word	0x40021800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40020400 	.word	0x40020400

080017f0 <HAL_MspInit>:
{
 80017f0:	b500      	push	{lr}
 80017f2:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f4:	2200      	movs	r2, #0
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_MspInit+0x40>)
 80017fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017fc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001800:	6459      	str	r1, [r3, #68]	; 0x44
 8001802:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001804:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001808:	9100      	str	r1, [sp, #0]
 800180a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001810:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001814:	6419      	str	r1, [r3, #64]	; 0x40
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001820:	210f      	movs	r1, #15
 8001822:	f06f 0001 	mvn.w	r0, #1
 8001826:	f000 fb79 	bl	8001f1c <HAL_NVIC_SetPriority>
}
 800182a:	b003      	add	sp, #12
 800182c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8001834:	6802      	ldr	r2, [r0, #0]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_CRC_MspInit+0x28>)
 8001838:	429a      	cmp	r2, r3
 800183a:	d000      	beq.n	800183e <HAL_CRC_MspInit+0xa>
 800183c:	4770      	bx	lr
{
 800183e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_CRC_MspInit+0x2c>)
 8001846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001848:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	9b01      	ldr	r3, [sp, #4]
}
 8001858:	b002      	add	sp, #8
 800185a:	4770      	bx	lr
 800185c:	40023000 	.word	0x40023000
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_DMA2D_MspInit>:
  if(hdma2d->Instance==DMA2D)
 8001864:	6802      	ldr	r2, [r0, #0]
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_DMA2D_MspInit+0x3c>)
 8001868:	429a      	cmp	r2, r3
 800186a:	d000      	beq.n	800186e <HAL_DMA2D_MspInit+0xa>
 800186c:	4770      	bx	lr
{
 800186e:	b500      	push	{lr}
 8001870:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001872:	2200      	movs	r2, #0
 8001874:	9201      	str	r2, [sp, #4]
 8001876:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800187a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800187c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001880:	6319      	str	r1, [r3, #48]	; 0x30
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800188c:	2105      	movs	r1, #5
 800188e:	205a      	movs	r0, #90	; 0x5a
 8001890:	f000 fb44 	bl	8001f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001894:	205a      	movs	r0, #90	; 0x5a
 8001896:	f000 fb75 	bl	8001f84 <HAL_NVIC_EnableIRQ>
}
 800189a:	b003      	add	sp, #12
 800189c:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a0:	4002b000 	.word	0x4002b000

080018a4 <HAL_I2C_MspInit>:
{
 80018a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	2300      	movs	r3, #0
 80018ac:	9303      	str	r3, [sp, #12]
 80018ae:	9304      	str	r3, [sp, #16]
 80018b0:	9305      	str	r3, [sp, #20]
 80018b2:	9306      	str	r3, [sp, #24]
 80018b4:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 80018b6:	6802      	ldr	r2, [r0, #0]
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_I2C_MspInit+0x9c>)
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d002      	beq.n	80018c4 <HAL_I2C_MspInit+0x20>
}
 80018be:	b008      	add	sp, #32
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	2500      	movs	r5, #0
 80018c6:	9500      	str	r5, [sp, #0]
 80018c8:	4c1e      	ldr	r4, [pc, #120]	; (8001944 <HAL_I2C_MspInit+0xa0>)
 80018ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6323      	str	r3, [r4, #48]	; 0x30
 80018d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	9501      	str	r5, [sp, #4]
 80018de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6323      	str	r3, [r4, #48]	; 0x30
 80018e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80018f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	f04f 0812 	mov.w	r8, #18
 80018fa:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fe:	2701      	movs	r7, #1
 8001900:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001904:	2604      	movs	r6, #4
 8001906:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001908:	a903      	add	r1, sp, #12
 800190a:	480f      	ldr	r0, [pc, #60]	; (8001948 <HAL_I2C_MspInit+0xa4>)
 800190c:	f000 fd88 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001914:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001916:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800191e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001920:	a903      	add	r1, sp, #12
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <HAL_I2C_MspInit+0xa8>)
 8001924:	f000 fd7c 	bl	8002420 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001928:	9502      	str	r5, [sp, #8]
 800192a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800192c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001930:	6423      	str	r3, [r4, #64]	; 0x40
 8001932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	9b02      	ldr	r3, [sp, #8]
}
 800193c:	e7bf      	b.n	80018be <HAL_I2C_MspInit+0x1a>
 800193e:	bf00      	nop
 8001940:	40005c00 	.word	0x40005c00
 8001944:	40023800 	.word	0x40023800
 8001948:	40020800 	.word	0x40020800
 800194c:	40020000 	.word	0x40020000

08001950 <HAL_LTDC_MspInit>:
{
 8001950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001954:	b098      	sub	sp, #96	; 0x60
 8001956:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	2100      	movs	r1, #0
 800195a:	9113      	str	r1, [sp, #76]	; 0x4c
 800195c:	9114      	str	r1, [sp, #80]	; 0x50
 800195e:	9115      	str	r1, [sp, #84]	; 0x54
 8001960:	9116      	str	r1, [sp, #88]	; 0x58
 8001962:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001964:	2230      	movs	r2, #48	; 0x30
 8001966:	a807      	add	r0, sp, #28
 8001968:	f005 f96a 	bl	8006c40 <memset>
  if(hltdc->Instance==LTDC)
 800196c:	6822      	ldr	r2, [r4, #0]
 800196e:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <HAL_LTDC_MspInit+0x1b0>)
 8001970:	429a      	cmp	r2, r3
 8001972:	d002      	beq.n	800197a <HAL_LTDC_MspInit+0x2a>
}
 8001974:	b018      	add	sp, #96	; 0x60
 8001976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800197a:	2308      	movs	r3, #8
 800197c:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800197e:	233c      	movs	r3, #60	; 0x3c
 8001980:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001982:	2305      	movs	r3, #5
 8001984:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800198a:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198c:	a807      	add	r0, sp, #28
 800198e:	f002 fa2d 	bl	8003dec <HAL_RCCEx_PeriphCLKConfig>
 8001992:	2800      	cmp	r0, #0
 8001994:	f040 80b0 	bne.w	8001af8 <HAL_LTDC_MspInit+0x1a8>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001998:	2400      	movs	r4, #0
 800199a:	9400      	str	r4, [sp, #0]
 800199c:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <HAL_LTDC_MspInit+0x1b4>)
 800199e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
 80019a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80019ac:	9200      	str	r2, [sp, #0]
 80019ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b0:	9401      	str	r4, [sp, #4]
 80019b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b4:	f042 0220 	orr.w	r2, r2, #32
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
 80019ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019bc:	f002 0220 	and.w	r2, r2, #32
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	9402      	str	r4, [sp, #8]
 80019c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
 80019ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d0:	f002 0201 	and.w	r2, r2, #1
 80019d4:	9202      	str	r2, [sp, #8]
 80019d6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	9403      	str	r4, [sp, #12]
 80019da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019dc:	f042 0202 	orr.w	r2, r2, #2
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
 80019e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e4:	f002 0202 	and.w	r2, r2, #2
 80019e8:	9203      	str	r2, [sp, #12]
 80019ea:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ec:	9404      	str	r4, [sp, #16]
 80019ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
 80019f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80019fc:	9204      	str	r2, [sp, #16]
 80019fe:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a00:	9405      	str	r4, [sp, #20]
 8001a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a04:	f042 0204 	orr.w	r2, r2, #4
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
 8001a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0c:	f002 0204 	and.w	r2, r2, #4
 8001a10:	9205      	str	r2, [sp, #20]
 8001a12:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a14:	9406      	str	r4, [sp, #24]
 8001a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a18:	f042 0208 	orr.w	r2, r2, #8
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	9306      	str	r3, [sp, #24]
 8001a26:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2c:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2502      	movs	r5, #2
 8001a30:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a36:	260e      	movs	r6, #14
 8001a38:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	a913      	add	r1, sp, #76	; 0x4c
 8001a3c:	4832      	ldr	r0, [pc, #200]	; (8001b08 <HAL_LTDC_MspInit+0x1b8>)
 8001a3e:	f000 fcef 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001a42:	f641 0358 	movw	r3, #6232	; 0x1858
 8001a46:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a4e:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	a913      	add	r1, sp, #76	; 0x4c
 8001a52:	482e      	ldr	r0, [pc, #184]	; (8001b0c <HAL_LTDC_MspInit+0x1bc>)
 8001a54:	f000 fce4 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a62:	f04f 0809 	mov.w	r8, #9
 8001a66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	4f29      	ldr	r7, [pc, #164]	; (8001b10 <HAL_LTDC_MspInit+0x1c0>)
 8001a6c:	a913      	add	r1, sp, #76	; 0x4c
 8001a6e:	4638      	mov	r0, r7
 8001a70:	f000 fcd6 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001a74:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001a78:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a80:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	a913      	add	r1, sp, #76	; 0x4c
 8001a84:	4638      	mov	r0, r7
 8001a86:	f000 fccb 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001a8a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001a8e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a96:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a98:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 8001a9c:	a913      	add	r1, sp, #76	; 0x4c
 8001a9e:	4638      	mov	r0, r7
 8001aa0:	f000 fcbe 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001aa4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001aa8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ab0:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab2:	a913      	add	r1, sp, #76	; 0x4c
 8001ab4:	4817      	ldr	r0, [pc, #92]	; (8001b14 <HAL_LTDC_MspInit+0x1c4>)
 8001ab6:	f000 fcb3 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001aba:	2348      	movs	r3, #72	; 0x48
 8001abc:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ac4:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	a913      	add	r1, sp, #76	; 0x4c
 8001ac8:	4813      	ldr	r0, [pc, #76]	; (8001b18 <HAL_LTDC_MspInit+0x1c8>)
 8001aca:	f000 fca9 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ace:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ad2:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ada:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ade:	a913      	add	r1, sp, #76	; 0x4c
 8001ae0:	4638      	mov	r0, r7
 8001ae2:	f000 fc9d 	bl	8002420 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	2105      	movs	r1, #5
 8001aea:	2058      	movs	r0, #88	; 0x58
 8001aec:	f000 fa16 	bl	8001f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001af0:	2058      	movs	r0, #88	; 0x58
 8001af2:	f000 fa47 	bl	8001f84 <HAL_NVIC_EnableIRQ>
}
 8001af6:	e73d      	b.n	8001974 <HAL_LTDC_MspInit+0x24>
      Error_Handler();
 8001af8:	f7ff fc26 	bl	8001348 <Error_Handler>
 8001afc:	e74c      	b.n	8001998 <HAL_LTDC_MspInit+0x48>
 8001afe:	bf00      	nop
 8001b00:	40016800 	.word	0x40016800
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40021400 	.word	0x40021400
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00

08001b1c <HAL_SPI_MspInit>:
{
 8001b1c:	b500      	push	{lr}
 8001b1e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	2300      	movs	r3, #0
 8001b22:	9303      	str	r3, [sp, #12]
 8001b24:	9304      	str	r3, [sp, #16]
 8001b26:	9305      	str	r3, [sp, #20]
 8001b28:	9306      	str	r3, [sp, #24]
 8001b2a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI5)
 8001b2c:	6802      	ldr	r2, [r0, #0]
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_SPI_MspInit+0x68>)
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d002      	beq.n	8001b3a <HAL_SPI_MspInit+0x1e>
}
 8001b34:	b009      	add	sp, #36	; 0x24
 8001b36:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	9201      	str	r2, [sp, #4]
 8001b3e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8001b42:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001b44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001b48:	6459      	str	r1, [r3, #68]	; 0x44
 8001b4a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001b4c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8001b50:	9101      	str	r1, [sp, #4]
 8001b52:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b54:	9202      	str	r2, [sp, #8]
 8001b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b58:	f041 0120 	orr.w	r1, r1, #32
 8001b5c:	6319      	str	r1, [r3, #48]	; 0x30
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001b68:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b76:	2305      	movs	r3, #5
 8001b78:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b7a:	a903      	add	r1, sp, #12
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <HAL_SPI_MspInit+0x6c>)
 8001b7e:	f000 fc4f 	bl	8002420 <HAL_GPIO_Init>
}
 8001b82:	e7d7      	b.n	8001b34 <HAL_SPI_MspInit+0x18>
 8001b84:	40015000 	.word	0x40015000
 8001b88:	40021400 	.word	0x40021400

08001b8c <HAL_SPI_MspDeInit>:
{
 8001b8c:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI5)
 8001b8e:	6802      	ldr	r2, [r0, #0]
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <HAL_SPI_MspDeInit+0x24>)
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d000      	beq.n	8001b98 <HAL_SPI_MspDeInit+0xc>
}
 8001b96:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_SPI_MspDeInit+0x28>)
 8001b9a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001b9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001ba2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001ba6:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <HAL_SPI_MspDeInit+0x2c>)
 8001ba8:	f000 fd32 	bl	8002610 <HAL_GPIO_DeInit>
}
 8001bac:	e7f3      	b.n	8001b96 <HAL_SPI_MspDeInit+0xa>
 8001bae:	bf00      	nop
 8001bb0:	40015000 	.word	0x40015000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40021400 	.word	0x40021400

08001bbc <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 8001bbc:	6802      	ldr	r2, [r0, #0]
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_TIM_Base_MspInit+0x28>)
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d000      	beq.n	8001bc6 <HAL_TIM_Base_MspInit+0xa>
 8001bc4:	4770      	bx	lr
{
 8001bc6:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_TIM_Base_MspInit+0x2c>)
 8001bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	9b01      	ldr	r3, [sp, #4]
}
 8001be0:	b002      	add	sp, #8
 8001be2:	4770      	bx	lr
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_UART_MspInit>:
{
 8001bec:	b500      	push	{lr}
 8001bee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9303      	str	r3, [sp, #12]
 8001bf4:	9304      	str	r3, [sp, #16]
 8001bf6:	9305      	str	r3, [sp, #20]
 8001bf8:	9306      	str	r3, [sp, #24]
 8001bfa:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001bfc:	6802      	ldr	r2, [r0, #0]
 8001bfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c02:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d002      	beq.n	8001c10 <HAL_UART_MspInit+0x24>
}
 8001c0a:	b009      	add	sp, #36	; 0x24
 8001c0c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c10:	2200      	movs	r2, #0
 8001c12:	9201      	str	r2, [sp, #4]
 8001c14:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001c18:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c1a:	f041 0110 	orr.w	r1, r1, #16
 8001c1e:	6459      	str	r1, [r3, #68]	; 0x44
 8001c20:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c22:	f001 0110 	and.w	r1, r1, #16
 8001c26:	9101      	str	r1, [sp, #4]
 8001c28:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	9202      	str	r2, [sp, #8]
 8001c2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2e:	f041 0101 	orr.w	r1, r1, #1
 8001c32:	6319      	str	r1, [r3, #48]	; 0x30
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c4e:	2307      	movs	r3, #7
 8001c50:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	a903      	add	r1, sp, #12
 8001c54:	4801      	ldr	r0, [pc, #4]	; (8001c5c <HAL_UART_MspInit+0x70>)
 8001c56:	f000 fbe3 	bl	8002420 <HAL_GPIO_Init>
}
 8001c5a:	e7d6      	b.n	8001c0a <HAL_UART_MspInit+0x1e>
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_HCD_MspInit>:
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	2300      	movs	r3, #0
 8001c66:	9303      	str	r3, [sp, #12]
 8001c68:	9304      	str	r3, [sp, #16]
 8001c6a:	9305      	str	r3, [sp, #20]
 8001c6c:	9306      	str	r3, [sp, #24]
 8001c6e:	9307      	str	r3, [sp, #28]
  if(hhcd->Instance==USB_OTG_HS)
 8001c70:	6802      	ldr	r2, [r0, #0]
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_HCD_MspInit+0x8c>)
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_HCD_MspInit+0x1c>
}
 8001c78:	b008      	add	sp, #32
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	9401      	str	r4, [sp, #4]
 8001c80:	4d1b      	ldr	r5, [pc, #108]	; (8001cf0 <HAL_HCD_MspInit+0x90>)
 8001c82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	632b      	str	r3, [r5, #48]	; 0x30
 8001c8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001c94:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001c98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	4e13      	ldr	r6, [pc, #76]	; (8001cf4 <HAL_HCD_MspInit+0x94>)
 8001ca8:	eb0d 0103 	add.w	r1, sp, r3
 8001cac:	4630      	mov	r0, r6
 8001cae:	f000 fbb7 	bl	8002420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	a903      	add	r1, sp, #12
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f000 fbae 	bl	8002420 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001cc4:	9402      	str	r4, [sp, #8]
 8001cc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001cc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ccc:	632b      	str	r3, [r5, #48]	; 0x30
 8001cce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8001cd8:	4622      	mov	r2, r4
 8001cda:	2105      	movs	r1, #5
 8001cdc:	204d      	movs	r0, #77	; 0x4d
 8001cde:	f000 f91d 	bl	8001f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001ce2:	204d      	movs	r0, #77	; 0x4d
 8001ce4:	f000 f94e 	bl	8001f84 <HAL_NVIC_EnableIRQ>
}
 8001ce8:	e7c6      	b.n	8001c78 <HAL_HCD_MspInit+0x18>
 8001cea:	bf00      	nop
 8001cec:	40040000 	.word	0x40040000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001cf8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001cfa:	f7ff fd0b 	bl	8001714 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001cfe:	bd08      	pop	{r3, pc}

08001d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b510      	push	{r4, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2036      	movs	r0, #54	; 0x36
 8001d0a:	f000 f907 	bl	8001f1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d0e:	2036      	movs	r0, #54	; 0x36
 8001d10:	f000 f938 	bl	8001f84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d14:	2400      	movs	r4, #0
 8001d16:	9401      	str	r4, [sp, #4]
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_InitTick+0x6c>)
 8001d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1c:	f042 0210 	orr.w	r2, r2, #16
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d2c:	a902      	add	r1, sp, #8
 8001d2e:	a803      	add	r0, sp, #12
 8001d30:	f002 f83e 	bl	8003db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d34:	f002 f81c 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8001d38:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <HAL_InitTick+0x70>)
 8001d3c:	fba0 2303 	umull	r2, r3, r0, r3
 8001d40:	0c9b      	lsrs	r3, r3, #18
 8001d42:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d44:	480b      	ldr	r0, [pc, #44]	; (8001d74 <HAL_InitTick+0x74>)
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <HAL_InitTick+0x78>)
 8001d48:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d4e:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d50:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001d52:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d56:	f002 ff79 	bl	8004c4c <HAL_TIM_Base_Init>
 8001d5a:	b110      	cbz	r0, 8001d62 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
}
 8001d5e:	b008      	add	sp, #32
 8001d60:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d62:	4804      	ldr	r0, [pc, #16]	; (8001d74 <HAL_InitTick+0x74>)
 8001d64:	f002 fe08 	bl	8004978 <HAL_TIM_Base_Start_IT>
 8001d68:	e7f9      	b.n	8001d5e <HAL_InitTick+0x5e>
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	431bde83 	.word	0x431bde83
 8001d74:	20008acc 	.word	0x20008acc
 8001d78:	40001000 	.word	0x40001000

08001d7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler>

08001d7e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler>

08001d80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler>

08001d82 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler>

08001d84 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <UsageFault_Handler>

08001d86 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	4770      	bx	lr

08001d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d8a:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM6_DAC_IRQHandler+0xc>)
 8001d8c:	f002 fe3c 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d90:	bd08      	pop	{r3, pc}
 8001d92:	bf00      	nop
 8001d94:	20008acc 	.word	0x20008acc

08001d98 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001d98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001d9a:	4802      	ldr	r0, [pc, #8]	; (8001da4 <OTG_HS_IRQHandler+0xc>)
 8001d9c:	f001 f8fb 	bl	8002f96 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001da0:	bd08      	pop	{r3, pc}
 8001da2:	bf00      	nop
 8001da4:	20008708 	.word	0x20008708

08001da8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001da8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001daa:	4802      	ldr	r0, [pc, #8]	; (8001db4 <LTDC_IRQHandler+0xc>)
 8001dac:	f001 fc13 	bl	80035d6 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001db0:	bd08      	pop	{r3, pc}
 8001db2:	bf00      	nop
 8001db4:	2000861c 	.word	0x2000861c

08001db8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001dba:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <DMA2D_IRQHandler+0xc>)
 8001dbc:	f000 fa2f 	bl	800221e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001dc0:	bd08      	pop	{r3, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20008a58 	.word	0x20008a58

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <_sbrk+0x38>)
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <_sbrk+0x40>)
 8001dd2:	6800      	ldr	r0, [r0, #0]
 8001dd4:	b140      	cbz	r0, 8001de8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <_sbrk+0x40>)
 8001dd8:	6800      	ldr	r0, [r0, #0]
 8001dda:	4403      	add	r3, r0
 8001ddc:	1a52      	subs	r2, r2, r1
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d806      	bhi.n	8001df0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <_sbrk+0x40>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001de6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <_sbrk+0x40>)
 8001dea:	4c08      	ldr	r4, [pc, #32]	; (8001e0c <_sbrk+0x44>)
 8001dec:	6004      	str	r4, [r0, #0]
 8001dee:	e7f2      	b.n	8001dd6 <_sbrk+0xe>
    errno = ENOMEM;
 8001df0:	f004 feee 	bl	8006bd0 <__errno>
 8001df4:	230c      	movs	r3, #12
 8001df6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	e7f3      	b.n	8001de6 <_sbrk+0x1e>
 8001dfe:	bf00      	nop
 8001e00:	20030000 	.word	0x20030000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	20000400 	.word	0x20000400
 8001e0c:	20008b28 	.word	0x20008b28

08001e10 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <SystemInit+0x10>)
 8001e12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e2a:	490e      	ldr	r1, [pc, #56]	; (8001e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e40:	4c0b      	ldr	r4, [pc, #44]	; (8001e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e4e:	f7ff ffdf 	bl	8001e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f004 fec3 	bl	8006bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7ff fc37 	bl	80016c8 <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001e68:	08009c6c 	.word	0x08009c6c
  ldr r2, =_sbss
 8001e6c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001e70:	20008b28 	.word	0x20008b28

08001e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x30>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e82:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e8a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f82f 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff ff30 	bl	8001d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff fca6 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	bd08      	pop	{r3, pc}
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001eac:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <HAL_IncTick+0x10>)
 8001eae:	6811      	ldr	r1, [r2, #0]
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_IncTick+0x14>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	440b      	add	r3, r1
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20008b14 	.word	0x20008b14
 8001ec0:	20000050 	.word	0x20000050

08001ec4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ec4:	4b01      	ldr	r3, [pc, #4]	; (8001ecc <HAL_GetTick+0x8>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20008b14 	.word	0x20008b14

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff fff6 	bl	8001ec4 <HAL_GetTick>
 8001ed8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001ede:	d002      	beq.n	8001ee6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <HAL_Delay+0x24>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee6:	f7ff ffed 	bl	8001ec4 <HAL_GetTick>
 8001eea:	1b40      	subs	r0, r0, r5
 8001eec:	42a0      	cmp	r0, r4
 8001eee:	d3fa      	bcc.n	8001ee6 <HAL_Delay+0x16>
  {
  }
}
 8001ef0:	bd38      	pop	{r3, r4, r5, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000050 	.word	0x20000050

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001efa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	0200      	lsls	r0, r0, #8
 8001f06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f14:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_NVIC_SetPriority+0x60>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f26:	f1c3 0407 	rsb	r4, r3, #7
 8001f2a:	2c04      	cmp	r4, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f30:	1d1d      	adds	r5, r3, #4
 8001f32:	2d06      	cmp	r5, #6
 8001f34:	d918      	bls.n	8001f68 <HAL_NVIC_SetPriority+0x4c>
 8001f36:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 35ff 	mov.w	r5, #4294967295
 8001f3c:	fa05 f404 	lsl.w	r4, r5, r4
 8001f40:	ea21 0104 	bic.w	r1, r1, r4
 8001f44:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f46:	fa05 f303 	lsl.w	r3, r5, r3
 8001f4a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f50:	2800      	cmp	r0, #0
 8001f52:	db0b      	blt.n	8001f6c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	0109      	lsls	r1, r1, #4
 8001f56:	b2c9      	uxtb	r1, r1
 8001f58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f5c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f60:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f64:	bc30      	pop	{r4, r5}
 8001f66:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e7e5      	b.n	8001f38 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	f000 000f 	and.w	r0, r0, #15
 8001f70:	0109      	lsls	r1, r1, #4
 8001f72:	b2c9      	uxtb	r1, r1
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <HAL_NVIC_SetPriority+0x64>)
 8001f76:	5419      	strb	r1, [r3, r0]
 8001f78:	e7f4      	b.n	8001f64 <HAL_NVIC_SetPriority+0x48>
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00
 8001f80:	e000ed14 	.word	0xe000ed14

08001f84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f84:	2800      	cmp	r0, #0
 8001f86:	db07      	blt.n	8001f98 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f88:	f000 021f 	and.w	r2, r0, #31
 8001f8c:	0940      	lsrs	r0, r0, #5
 8001f8e:	2301      	movs	r3, #1
 8001f90:	4093      	lsls	r3, r2
 8001f92:	4a02      	ldr	r2, [pc, #8]	; (8001f9c <HAL_NVIC_EnableIRQ+0x18>)
 8001f94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001fa0:	b158      	cbz	r0, 8001fba <HAL_CRC_Init+0x1a>
{
 8001fa2:	b510      	push	{r4, lr}
 8001fa4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001fa6:	7943      	ldrb	r3, [r0, #5]
 8001fa8:	b11b      	cbz	r3, 8001fb2 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001faa:	2301      	movs	r3, #1
 8001fac:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001fae:	2000      	movs	r0, #0
}
 8001fb0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001fb2:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001fb4:	f7ff fc3e 	bl	8001834 <HAL_CRC_MspInit>
 8001fb8:	e7f7      	b.n	8001faa <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8001fba:	2001      	movs	r0, #1
}
 8001fbc:	4770      	bx	lr

08001fbe <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001fbe:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001fc0:	6806      	ldr	r6, [r0, #0]
 8001fc2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8001fc4:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001fc8:	9d03      	ldr	r5, [sp, #12]
 8001fca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001fce:	432c      	orrs	r4, r5
 8001fd0:	6474      	str	r4, [r6, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001fd6:	6843      	ldr	r3, [r0, #4]
 8001fd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001fdc:	d003      	beq.n	8001fe6 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001fde:	6803      	ldr	r3, [r0, #0]
 8001fe0:	60d9      	str	r1, [r3, #12]
  }
}
 8001fe2:	bc70      	pop	{r4, r5, r6}
 8001fe4:	4770      	bx	lr
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001fe6:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001fea:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001fee:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001ff2:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001ff4:	6884      	ldr	r4, [r0, #8]
 8001ff6:	b194      	cbz	r4, 800201e <DMA2D_SetConfig+0x60>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001ff8:	2c01      	cmp	r4, #1
 8001ffa:	d00e      	beq.n	800201a <DMA2D_SetConfig+0x5c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001ffc:	2c02      	cmp	r4, #2
 8001ffe:	d011      	beq.n	8002024 <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002000:	2c03      	cmp	r4, #3
 8002002:	d017      	beq.n	8002034 <DMA2D_SetConfig+0x76>
      tmp1 = (tmp1 >> 28U);
 8002004:	0f36      	lsrs	r6, r6, #28
      tmp2 = (tmp2 >> 20U);
 8002006:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002008:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800200a:	0219      	lsls	r1, r3, #8
 800200c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002010:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
 8002014:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8002018:	e001      	b.n	800201e <DMA2D_SetConfig+0x60>
      tmp = (tmp3 | tmp2 | tmp4);
 800201a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800201e:	6803      	ldr	r3, [r0, #0]
 8002020:	6399      	str	r1, [r3, #56]	; 0x38
 8002022:	e7de      	b.n	8001fe2 <DMA2D_SetConfig+0x24>
      tmp2 = (tmp2 >> 19U);
 8002024:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002026:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002028:	02d9      	lsls	r1, r3, #11
 800202a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800202e:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002032:	e7f4      	b.n	800201e <DMA2D_SetConfig+0x60>
      tmp1 = (tmp1 >> 31U);
 8002034:	0ff6      	lsrs	r6, r6, #31
      tmp2 = (tmp2 >> 19U);
 8002036:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002038:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800203a:	0299      	lsls	r1, r3, #10
 800203c:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002040:	ea41 31c6 	orr.w	r1, r1, r6, lsl #15
 8002044:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002048:	e7e9      	b.n	800201e <DMA2D_SetConfig+0x60>

0800204a <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 800204a:	b348      	cbz	r0, 80020a0 <HAL_DMA2D_Init+0x56>
{
 800204c:	b510      	push	{r4, lr}
 800204e:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002050:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002054:	b1fb      	cbz	r3, 8002096 <HAL_DMA2D_Init+0x4c>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800205c:	6822      	ldr	r2, [r4, #0]
 800205e:	6813      	ldr	r3, [r2, #0]
 8002060:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002064:	6861      	ldr	r1, [r4, #4]
 8002066:	430b      	orrs	r3, r1
 8002068:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800206a:	6822      	ldr	r2, [r4, #0]
 800206c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800206e:	f023 0307 	bic.w	r3, r3, #7
 8002072:	68a1      	ldr	r1, [r4, #8]
 8002074:	430b      	orrs	r3, r1
 8002076:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002078:	6822      	ldr	r2, [r4, #0]
 800207a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800207c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002084:	68e1      	ldr	r1, [r4, #12]
 8002086:	430b      	orrs	r3, r1
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800208a:	2000      	movs	r0, #0
 800208c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800208e:	2301      	movs	r3, #1
 8002090:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002094:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002096:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800209a:	f7ff fbe3 	bl	8001864 <HAL_DMA2D_MspInit>
 800209e:	e7da      	b.n	8002056 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 80020a0:	2001      	movs	r0, #1
}
 80020a2:	4770      	bx	lr

080020a4 <HAL_DMA2D_Start>:
{
 80020a4:	b510      	push	{r4, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80020aa:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 80020ae:	2801      	cmp	r0, #1
 80020b0:	d012      	beq.n	80020d8 <HAL_DMA2D_Start+0x34>
 80020b2:	2001      	movs	r0, #1
 80020b4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80020b8:	2002      	movs	r0, #2
 80020ba:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80020be:	9804      	ldr	r0, [sp, #16]
 80020c0:	9000      	str	r0, [sp, #0]
 80020c2:	4620      	mov	r0, r4
 80020c4:	f7ff ff7b 	bl	8001fbe <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80020c8:	6822      	ldr	r2, [r4, #0]
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80020d2:	2000      	movs	r0, #0
}
 80020d4:	b002      	add	sp, #8
 80020d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 80020d8:	2002      	movs	r0, #2
 80020da:	e7fb      	b.n	80020d4 <HAL_DMA2D_Start+0x30>

080020dc <HAL_DMA2D_PollForTransfer>:
{
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	4604      	mov	r4, r0
 80020e2:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80020e8:	6803      	ldr	r3, [r0, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f013 0f01 	tst.w	r3, #1
 80020f0:	d111      	bne.n	8002116 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80020f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020f8:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80020fa:	f013 0f20 	tst.w	r3, #32
 80020fe:	d147      	bne.n	8002190 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	2212      	movs	r2, #18
 8002104:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002106:	2301      	movs	r3, #1
 8002108:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800210c:	2000      	movs	r0, #0
 800210e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002112:	b002      	add	sp, #8
 8002114:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002116:	f7ff fed5 	bl	8001ec4 <HAL_GetTick>
 800211a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	f012 0f02 	tst.w	r2, #2
 8002124:	d1e5      	bne.n	80020f2 <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800212a:	9a01      	ldr	r2, [sp, #4]
 800212c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002130:	d114      	bne.n	800215c <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 8002132:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002136:	d0f1      	beq.n	800211c <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002138:	f7ff fec4 	bl	8001ec4 <HAL_GetTick>
 800213c:	1b80      	subs	r0, r0, r6
 800213e:	42a8      	cmp	r0, r5
 8002140:	d801      	bhi.n	8002146 <HAL_DMA2D_PollForTransfer+0x6a>
 8002142:	2d00      	cmp	r5, #0
 8002144:	d1ea      	bne.n	800211c <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800214e:	2003      	movs	r0, #3
 8002150:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002154:	2300      	movs	r3, #0
 8002156:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800215a:	e7da      	b.n	8002112 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800215c:	9a01      	ldr	r2, [sp, #4]
 800215e:	f012 0f20 	tst.w	r2, #32
 8002162:	d003      	beq.n	800216c <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002164:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002166:	f042 0202 	orr.w	r2, r2, #2
 800216a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800216c:	9a01      	ldr	r2, [sp, #4]
 800216e:	f012 0f01 	tst.w	r2, #1
 8002172:	d003      	beq.n	800217c <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002174:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800217c:	2221      	movs	r2, #33	; 0x21
 800217e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002180:	2304      	movs	r3, #4
 8002182:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002186:	2300      	movs	r3, #0
 8002188:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 800218c:	2001      	movs	r0, #1
 800218e:	e7c0      	b.n	8002112 <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 8002190:	f7ff fe98 	bl	8001ec4 <HAL_GetTick>
 8002194:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	f012 0f10 	tst.w	r2, #16
 800219e:	d1af      	bne.n	8002100 <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80021a4:	9a01      	ldr	r2, [sp, #4]
 80021a6:	f012 0f29 	tst.w	r2, #41	; 0x29
 80021aa:	d114      	bne.n	80021d6 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 80021ac:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021b0:	d0f1      	beq.n	8002196 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7ff fe87 	bl	8001ec4 <HAL_GetTick>
 80021b6:	1b80      	subs	r0, r0, r6
 80021b8:	42a8      	cmp	r0, r5
 80021ba:	d801      	bhi.n	80021c0 <HAL_DMA2D_PollForTransfer+0xe4>
 80021bc:	2d00      	cmp	r5, #0
 80021be:	d1ea      	bne.n	8002196 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80021c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021c2:	f043 0320 	orr.w	r3, r3, #32
 80021c6:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80021c8:	2003      	movs	r0, #3
 80021ca:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80021ce:	2300      	movs	r3, #0
 80021d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80021d4:	e79d      	b.n	8002112 <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80021d6:	9a01      	ldr	r2, [sp, #4]
 80021d8:	f012 0f08 	tst.w	r2, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80021de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80021e0:	f042 0204 	orr.w	r2, r2, #4
 80021e4:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80021e6:	9a01      	ldr	r2, [sp, #4]
 80021e8:	f012 0f20 	tst.w	r2, #32
 80021ec:	d003      	beq.n	80021f6 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80021ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80021f0:	f042 0202 	orr.w	r2, r2, #2
 80021f4:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80021f6:	9a01      	ldr	r2, [sp, #4]
 80021f8:	f012 0f01 	tst.w	r2, #1
 80021fc:	d003      	beq.n	8002206 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80021fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002206:	2229      	movs	r2, #41	; 0x29
 8002208:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800220a:	2304      	movs	r3, #4
 800220c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002210:	2300      	movs	r3, #0
 8002212:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002216:	2001      	movs	r0, #1
 8002218:	e77b      	b.n	8002112 <HAL_DMA2D_PollForTransfer+0x36>

0800221a <HAL_DMA2D_LineEventCallback>:
}
 800221a:	4770      	bx	lr

0800221c <HAL_DMA2D_CLUTLoadingCpltCallback>:
}
 800221c:	4770      	bx	lr

0800221e <HAL_DMA2D_IRQHandler>:
{
 800221e:	b570      	push	{r4, r5, r6, lr}
 8002220:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002226:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002228:	f015 0f01 	tst.w	r5, #1
 800222c:	d016      	beq.n	800225c <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800222e:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002232:	d013      	beq.n	800225c <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800223a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800223c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002244:	6803      	ldr	r3, [r0, #0]
 8002246:	2201      	movs	r2, #1
 8002248:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800224a:	2304      	movs	r3, #4
 800224c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002250:	2300      	movs	r3, #0
 8002252:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002256:	6943      	ldr	r3, [r0, #20]
 8002258:	b103      	cbz	r3, 800225c <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800225a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800225c:	f015 0f20 	tst.w	r5, #32
 8002260:	d018      	beq.n	8002294 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002262:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8002266:	d015      	beq.n	8002294 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002268:	6822      	ldr	r2, [r4, #0]
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002270:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	2220      	movs	r2, #32
 8002276:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002278:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800227a:	f043 0302 	orr.w	r3, r3, #2
 800227e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002280:	2304      	movs	r3, #4
 8002282:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002286:	2300      	movs	r3, #0
 8002288:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800228c:	6963      	ldr	r3, [r4, #20]
 800228e:	b10b      	cbz	r3, 8002294 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8002290:	4620      	mov	r0, r4
 8002292:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002294:	f015 0f08 	tst.w	r5, #8
 8002298:	d018      	beq.n	80022cc <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800229a:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800229e:	d015      	beq.n	80022cc <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022a8:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	2208      	movs	r2, #8
 80022ae:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022b8:	2304      	movs	r3, #4
 80022ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80022be:	2300      	movs	r3, #0
 80022c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80022c4:	6963      	ldr	r3, [r4, #20]
 80022c6:	b10b      	cbz	r3, 80022cc <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 80022c8:	4620      	mov	r0, r4
 80022ca:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80022cc:	f015 0f04 	tst.w	r5, #4
 80022d0:	d002      	beq.n	80022d8 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80022d2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80022d6:	d120      	bne.n	800231a <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80022d8:	f015 0f02 	tst.w	r5, #2
 80022dc:	d016      	beq.n	800230c <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80022de:	f416 7f00 	tst.w	r6, #512	; 0x200
 80022e2:	d013      	beq.n	800230c <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80022e4:	6822      	ldr	r2, [r4, #0]
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022ec:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	2202      	movs	r2, #2
 80022f2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80022f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022f6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80022fe:	2300      	movs	r3, #0
 8002300:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8002304:	6923      	ldr	r3, [r4, #16]
 8002306:	b10b      	cbz	r3, 800230c <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8002308:	4620      	mov	r0, r4
 800230a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800230c:	f015 0f10 	tst.w	r5, #16
 8002310:	d002      	beq.n	8002318 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002312:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8002316:	d10c      	bne.n	8002332 <HAL_DMA2D_IRQHandler+0x114>
}
 8002318:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002322:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	2204      	movs	r2, #4
 8002328:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff ff75 	bl	800221a <HAL_DMA2D_LineEventCallback>
 8002330:	e7d2      	b.n	80022d8 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002332:	6822      	ldr	r2, [r4, #0]
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800233a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	2210      	movs	r2, #16
 8002340:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002342:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002344:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002346:	2301      	movs	r3, #1
 8002348:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800234c:	2300      	movs	r3, #0
 800234e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002352:	4620      	mov	r0, r4
 8002354:	f7ff ff62 	bl	800221c <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8002358:	e7de      	b.n	8002318 <HAL_DMA2D_IRQHandler+0xfa>
	...

0800235c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800235c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002360:	2b01      	cmp	r3, #1
 8002362:	d059      	beq.n	8002418 <HAL_DMA2D_ConfigLayer+0xbc>
{
 8002364:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8002366:	2301      	movs	r3, #1
 8002368:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800236c:	2302      	movs	r3, #2
 800236e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002372:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	1c8b      	adds	r3, r1, #2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	58c3      	ldr	r3, [r0, r3]
 800237e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002382:	3a09      	subs	r2, #9
 8002384:	2a01      	cmp	r2, #1
 8002386:	d91e      	bls.n	80023c6 <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002388:	1c8a      	adds	r2, r1, #2
 800238a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800238e:	6852      	ldr	r2, [r2, #4]
 8002390:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002394:	bb41      	cbnz	r1, 80023e8 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002396:	6804      	ldr	r4, [r0, #0]
 8002398:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800239a:	4a20      	ldr	r2, [pc, #128]	; (800241c <HAL_DMA2D_ConfigLayer+0xc0>)
 800239c:	402a      	ands	r2, r5
 800239e:	4313      	orrs	r3, r2
 80023a0:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023a2:	6802      	ldr	r2, [r0, #0]
 80023a4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80023a8:	699c      	ldr	r4, [r3, #24]
 80023aa:	6194      	str	r4, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	3b09      	subs	r3, #9
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d910      	bls.n	80023d6 <HAL_DMA2D_ConfigLayer+0x7a>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80023ba:	2300      	movs	r3, #0
 80023bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80023c0:	4618      	mov	r0, r3
}
 80023c2:	bc30      	pop	{r4, r5}
 80023c4:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80023c6:	1c8a      	adds	r2, r1, #2
 80023c8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80023cc:	6852      	ldr	r2, [r2, #4]
 80023ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80023d2:	4313      	orrs	r3, r2
 80023d4:	e7de      	b.n	8002394 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023d6:	3102      	adds	r1, #2
 80023d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80023dc:	684b      	ldr	r3, [r1, #4]
 80023de:	6802      	ldr	r2, [r0, #0]
 80023e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023e4:	6293      	str	r3, [r2, #40]	; 0x28
 80023e6:	e7e5      	b.n	80023b4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023e8:	6804      	ldr	r4, [r0, #0]
 80023ea:	69e5      	ldr	r5, [r4, #28]
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_DMA2D_ConfigLayer+0xc0>)
 80023ee:	402a      	ands	r2, r5
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023f4:	6802      	ldr	r2, [r0, #0]
 80023f6:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80023fa:	699c      	ldr	r4, [r3, #24]
 80023fc:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	3b09      	subs	r3, #9
 8002402:	2b01      	cmp	r3, #1
 8002404:	d8d6      	bhi.n	80023b4 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002406:	3102      	adds	r1, #2
 8002408:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800240c:	684b      	ldr	r3, [r1, #4]
 800240e:	6802      	ldr	r2, [r0, #0]
 8002410:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	e7cd      	b.n	80023b4 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8002418:	2002      	movs	r0, #2
}
 800241a:	4770      	bx	lr
 800241c:	00fcfff0 	.word	0x00fcfff0

08002420 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002420:	2300      	movs	r3, #0
 8002422:	2b0f      	cmp	r3, #15
 8002424:	f200 80ea 	bhi.w	80025fc <HAL_GPIO_Init+0x1dc>
{
 8002428:	b4f0      	push	{r4, r5, r6, r7}
 800242a:	b082      	sub	sp, #8
 800242c:	e05e      	b.n	80024ec <HAL_GPIO_Init+0xcc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002430:	005f      	lsls	r7, r3, #1
 8002432:	2403      	movs	r4, #3
 8002434:	40bc      	lsls	r4, r7
 8002436:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243a:	68cc      	ldr	r4, [r1, #12]
 800243c:	40bc      	lsls	r4, r7
 800243e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002440:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002448:	684c      	ldr	r4, [r1, #4]
 800244a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800244e:	409a      	lsls	r2, r3
 8002450:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002452:	6042      	str	r2, [r0, #4]
 8002454:	e058      	b.n	8002508 <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002456:	08dc      	lsrs	r4, r3, #3
 8002458:	3408      	adds	r4, #8
 800245a:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245e:	f003 0207 	and.w	r2, r3, #7
 8002462:	0096      	lsls	r6, r2, #2
 8002464:	220f      	movs	r2, #15
 8002466:	40b2      	lsls	r2, r6
 8002468:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800246c:	690a      	ldr	r2, [r1, #16]
 800246e:	40b2      	lsls	r2, r6
 8002470:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002472:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002476:	e05b      	b.n	8002530 <HAL_GPIO_Init+0x110>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002478:	2209      	movs	r2, #9
 800247a:	e000      	b.n	800247e <HAL_GPIO_Init+0x5e>
 800247c:	2200      	movs	r2, #0
 800247e:	40b2      	lsls	r2, r6
 8002480:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002482:	3402      	adds	r4, #2
 8002484:	4e5e      	ldr	r6, [pc, #376]	; (8002600 <HAL_GPIO_Init+0x1e0>)
 8002486:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800248a:	4a5e      	ldr	r2, [pc, #376]	; (8002604 <HAL_GPIO_Init+0x1e4>)
 800248c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800248e:	43ea      	mvns	r2, r5
 8002490:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002494:	684f      	ldr	r7, [r1, #4]
 8002496:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800249a:	d001      	beq.n	80024a0 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 800249c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80024a0:	4c58      	ldr	r4, [pc, #352]	; (8002604 <HAL_GPIO_Init+0x1e4>)
 80024a2:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80024a4:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024aa:	684f      	ldr	r7, [r1, #4]
 80024ac:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80024b0:	d001      	beq.n	80024b6 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 80024b2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80024b6:	4c53      	ldr	r4, [pc, #332]	; (8002604 <HAL_GPIO_Init+0x1e4>)
 80024b8:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ba:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c0:	684f      	ldr	r7, [r1, #4]
 80024c2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80024c6:	d001      	beq.n	80024cc <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80024c8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80024cc:	4c4d      	ldr	r4, [pc, #308]	; (8002604 <HAL_GPIO_Init+0x1e4>)
 80024ce:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80024d0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d4:	684e      	ldr	r6, [r1, #4]
 80024d6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80024da:	d001      	beq.n	80024e0 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80024dc:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80024e0:	4c48      	ldr	r4, [pc, #288]	; (8002604 <HAL_GPIO_Init+0x1e4>)
 80024e2:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e4:	3301      	adds	r3, #1
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	f200 8085 	bhi.w	80025f6 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80024ec:	2201      	movs	r2, #1
 80024ee:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f0:	680c      	ldr	r4, [r1, #0]
 80024f2:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80024f6:	ea32 0404 	bics.w	r4, r2, r4
 80024fa:	d1f3      	bne.n	80024e4 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fc:	684c      	ldr	r4, [r1, #4]
 80024fe:	f004 0403 	and.w	r4, r4, #3
 8002502:	3c01      	subs	r4, #1
 8002504:	2c01      	cmp	r4, #1
 8002506:	d992      	bls.n	800242e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002508:	684a      	ldr	r2, [r1, #4]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	2a03      	cmp	r2, #3
 8002510:	d009      	beq.n	8002526 <HAL_GPIO_Init+0x106>
        temp = GPIOx->PUPDR;
 8002512:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002514:	005e      	lsls	r6, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	40b2      	lsls	r2, r6
 800251a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251e:	688a      	ldr	r2, [r1, #8]
 8002520:	40b2      	lsls	r2, r6
 8002522:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002524:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	684a      	ldr	r2, [r1, #4]
 8002528:	f002 0203 	and.w	r2, r2, #3
 800252c:	2a02      	cmp	r2, #2
 800252e:	d092      	beq.n	8002456 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8002530:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	005e      	lsls	r6, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	40b2      	lsls	r2, r6
 8002538:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253c:	684a      	ldr	r2, [r1, #4]
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	40b2      	lsls	r2, r6
 8002544:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002546:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002548:	684a      	ldr	r2, [r1, #4]
 800254a:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 800254e:	d0c9      	beq.n	80024e4 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002550:	2200      	movs	r2, #0
 8002552:	9201      	str	r2, [sp, #4]
 8002554:	4a2c      	ldr	r2, [pc, #176]	; (8002608 <HAL_GPIO_Init+0x1e8>)
 8002556:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002558:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800255c:	6454      	str	r4, [r2, #68]	; 0x44
 800255e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002560:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002564:	9201      	str	r2, [sp, #4]
 8002566:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002568:	089c      	lsrs	r4, r3, #2
 800256a:	1ca6      	adds	r6, r4, #2
 800256c:	4a24      	ldr	r2, [pc, #144]	; (8002600 <HAL_GPIO_Init+0x1e0>)
 800256e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	0096      	lsls	r6, r2, #2
 8002578:	220f      	movs	r2, #15
 800257a:	40b2      	lsls	r2, r6
 800257c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002580:	4a22      	ldr	r2, [pc, #136]	; (800260c <HAL_GPIO_Init+0x1ec>)
 8002582:	4290      	cmp	r0, r2
 8002584:	f43f af7a 	beq.w	800247c <HAL_GPIO_Init+0x5c>
 8002588:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800258c:	4290      	cmp	r0, r2
 800258e:	d022      	beq.n	80025d6 <HAL_GPIO_Init+0x1b6>
 8002590:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002594:	4290      	cmp	r0, r2
 8002596:	d020      	beq.n	80025da <HAL_GPIO_Init+0x1ba>
 8002598:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800259c:	4290      	cmp	r0, r2
 800259e:	d01e      	beq.n	80025de <HAL_GPIO_Init+0x1be>
 80025a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025a4:	4290      	cmp	r0, r2
 80025a6:	d01c      	beq.n	80025e2 <HAL_GPIO_Init+0x1c2>
 80025a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ac:	4290      	cmp	r0, r2
 80025ae:	d01a      	beq.n	80025e6 <HAL_GPIO_Init+0x1c6>
 80025b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025b4:	4290      	cmp	r0, r2
 80025b6:	d018      	beq.n	80025ea <HAL_GPIO_Init+0x1ca>
 80025b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025bc:	4290      	cmp	r0, r2
 80025be:	d016      	beq.n	80025ee <HAL_GPIO_Init+0x1ce>
 80025c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025c4:	4290      	cmp	r0, r2
 80025c6:	d014      	beq.n	80025f2 <HAL_GPIO_Init+0x1d2>
 80025c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025cc:	4290      	cmp	r0, r2
 80025ce:	f43f af53 	beq.w	8002478 <HAL_GPIO_Init+0x58>
 80025d2:	220a      	movs	r2, #10
 80025d4:	e753      	b.n	800247e <HAL_GPIO_Init+0x5e>
 80025d6:	2201      	movs	r2, #1
 80025d8:	e751      	b.n	800247e <HAL_GPIO_Init+0x5e>
 80025da:	2202      	movs	r2, #2
 80025dc:	e74f      	b.n	800247e <HAL_GPIO_Init+0x5e>
 80025de:	2203      	movs	r2, #3
 80025e0:	e74d      	b.n	800247e <HAL_GPIO_Init+0x5e>
 80025e2:	2204      	movs	r2, #4
 80025e4:	e74b      	b.n	800247e <HAL_GPIO_Init+0x5e>
 80025e6:	2205      	movs	r2, #5
 80025e8:	e749      	b.n	800247e <HAL_GPIO_Init+0x5e>
 80025ea:	2206      	movs	r2, #6
 80025ec:	e747      	b.n	800247e <HAL_GPIO_Init+0x5e>
 80025ee:	2207      	movs	r2, #7
 80025f0:	e745      	b.n	800247e <HAL_GPIO_Init+0x5e>
 80025f2:	2208      	movs	r2, #8
 80025f4:	e743      	b.n	800247e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80025f6:	b002      	add	sp, #8
 80025f8:	bcf0      	pop	{r4, r5, r6, r7}
 80025fa:	4770      	bx	lr
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40013800 	.word	0x40013800
 8002604:	40013c00 	.word	0x40013c00
 8002608:	40023800 	.word	0x40023800
 800260c:	40020000 	.word	0x40020000

08002610 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002610:	2300      	movs	r3, #0
 8002612:	2b0f      	cmp	r3, #15
 8002614:	f200 809b 	bhi.w	800274e <HAL_GPIO_DeInit+0x13e>
{
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	e02d      	b.n	8002678 <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800261c:	2609      	movs	r6, #9
 800261e:	e000      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 8002620:	2600      	movs	r6, #0
 8002622:	fa06 f404 	lsl.w	r4, r6, r4
 8002626:	42ac      	cmp	r4, r5
 8002628:	d075      	beq.n	8002716 <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262a:	6805      	ldr	r5, [r0, #0]
 800262c:	005c      	lsls	r4, r3, #1
 800262e:	2603      	movs	r6, #3
 8002630:	fa06 f404 	lsl.w	r4, r6, r4
 8002634:	ea25 0504 	bic.w	r5, r5, r4
 8002638:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263a:	fa23 f506 	lsr.w	r5, r3, r6
 800263e:	3508      	adds	r5, #8
 8002640:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8002644:	f003 0707 	and.w	r7, r3, #7
 8002648:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800264c:	270f      	movs	r7, #15
 800264e:	fa07 f70c 	lsl.w	r7, r7, ip
 8002652:	ea26 0607 	bic.w	r6, r6, r7
 8002656:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265a:	68c5      	ldr	r5, [r0, #12]
 800265c:	ea25 0504 	bic.w	r5, r5, r4
 8002660:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002662:	6845      	ldr	r5, [r0, #4]
 8002664:	ea25 0202 	bic.w	r2, r5, r2
 8002668:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800266a:	6882      	ldr	r2, [r0, #8]
 800266c:	ea22 0404 	bic.w	r4, r2, r4
 8002670:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002672:	3301      	adds	r3, #1
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d869      	bhi.n	800274c <HAL_GPIO_DeInit+0x13c>
    ioposition = 0x01U << position;
 8002678:	2201      	movs	r2, #1
 800267a:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 800267c:	ea02 0701 	and.w	r7, r2, r1
    if(iocurrent == ioposition)
 8002680:	ea32 0401 	bics.w	r4, r2, r1
 8002684:	d1f5      	bne.n	8002672 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002686:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800268a:	f10c 0502 	add.w	r5, ip, #2
 800268e:	4c30      	ldr	r4, [pc, #192]	; (8002750 <HAL_GPIO_DeInit+0x140>)
 8002690:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002694:	f003 0403 	and.w	r4, r3, #3
 8002698:	00a4      	lsls	r4, r4, #2
 800269a:	260f      	movs	r6, #15
 800269c:	fa06 fe04 	lsl.w	lr, r6, r4
 80026a0:	ea0e 0505 	and.w	r5, lr, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80026a4:	4e2b      	ldr	r6, [pc, #172]	; (8002754 <HAL_GPIO_DeInit+0x144>)
 80026a6:	42b0      	cmp	r0, r6
 80026a8:	d0ba      	beq.n	8002620 <HAL_GPIO_DeInit+0x10>
 80026aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026ae:	42b0      	cmp	r0, r6
 80026b0:	d021      	beq.n	80026f6 <HAL_GPIO_DeInit+0xe6>
 80026b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026b6:	42b0      	cmp	r0, r6
 80026b8:	d01f      	beq.n	80026fa <HAL_GPIO_DeInit+0xea>
 80026ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026be:	42b0      	cmp	r0, r6
 80026c0:	d01d      	beq.n	80026fe <HAL_GPIO_DeInit+0xee>
 80026c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026c6:	42b0      	cmp	r0, r6
 80026c8:	d01b      	beq.n	8002702 <HAL_GPIO_DeInit+0xf2>
 80026ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_DeInit+0xf6>
 80026d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026d6:	42b0      	cmp	r0, r6
 80026d8:	d017      	beq.n	800270a <HAL_GPIO_DeInit+0xfa>
 80026da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026de:	42b0      	cmp	r0, r6
 80026e0:	d015      	beq.n	800270e <HAL_GPIO_DeInit+0xfe>
 80026e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026e6:	42b0      	cmp	r0, r6
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_DeInit+0x102>
 80026ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026ee:	42b0      	cmp	r0, r6
 80026f0:	d094      	beq.n	800261c <HAL_GPIO_DeInit+0xc>
 80026f2:	260a      	movs	r6, #10
 80026f4:	e795      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 80026f6:	2601      	movs	r6, #1
 80026f8:	e793      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 80026fa:	2602      	movs	r6, #2
 80026fc:	e791      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 80026fe:	2603      	movs	r6, #3
 8002700:	e78f      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 8002702:	2604      	movs	r6, #4
 8002704:	e78d      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 8002706:	2605      	movs	r6, #5
 8002708:	e78b      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 800270a:	2606      	movs	r6, #6
 800270c:	e789      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 800270e:	2607      	movs	r6, #7
 8002710:	e787      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
 8002712:	2608      	movs	r6, #8
 8002714:	e785      	b.n	8002622 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002716:	4c10      	ldr	r4, [pc, #64]	; (8002758 <HAL_GPIO_DeInit+0x148>)
 8002718:	6825      	ldr	r5, [r4, #0]
 800271a:	ea25 0507 	bic.w	r5, r5, r7
 800271e:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002720:	6865      	ldr	r5, [r4, #4]
 8002722:	ea25 0507 	bic.w	r5, r5, r7
 8002726:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002728:	68a5      	ldr	r5, [r4, #8]
 800272a:	ea25 0507 	bic.w	r5, r5, r7
 800272e:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002730:	68e5      	ldr	r5, [r4, #12]
 8002732:	ea25 0707 	bic.w	r7, r5, r7
 8002736:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002738:	4d05      	ldr	r5, [pc, #20]	; (8002750 <HAL_GPIO_DeInit+0x140>)
 800273a:	f10c 0402 	add.w	r4, ip, #2
 800273e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8002742:	ea26 060e 	bic.w	r6, r6, lr
 8002746:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 800274a:	e76e      	b.n	800262a <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274e:	4770      	bx	lr
 8002750:	40013800 	.word	0x40013800
 8002754:	40020000 	.word	0x40020000
 8002758:	40013c00 	.word	0x40013c00

0800275c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	b10a      	cbz	r2, 8002762 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	6181      	str	r1, [r0, #24]
 8002760:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002762:	0409      	lsls	r1, r1, #16
 8002764:	6181      	str	r1, [r0, #24]
  }
}
 8002766:	4770      	bx	lr

08002768 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002768:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800276a:	ea01 0203 	and.w	r2, r1, r3
 800276e:	ea21 0103 	bic.w	r1, r1, r3
 8002772:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002776:	6181      	str	r1, [r0, #24]
}
 8002778:	4770      	bx	lr

0800277a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800277a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800277c:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800277e:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002780:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002784:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002788:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 800278c:	2b02      	cmp	r3, #2
 800278e:	d000      	beq.n	8002792 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8002790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002792:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002794:	2c00      	cmp	r4, #0
 8002796:	d0fb      	beq.n	8002790 <HCD_RXQLVL_IRQHandler+0x16>
 8002798:	232c      	movs	r3, #44	; 0x2c
 800279a:	fb03 0307 	mla	r3, r3, r7, r0
 800279e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027a0:	2900      	cmp	r1, #0
 80027a2:	d0f5      	beq.n	8002790 <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80027a4:	232c      	movs	r3, #44	; 0x2c
 80027a6:	fb03 0307 	mla	r3, r3, r7, r0
 80027aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ac:	4422      	add	r2, r4
 80027ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d906      	bls.n	80027c2 <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027b4:	202c      	movs	r0, #44	; 0x2c
 80027b6:	fb00 5507 	mla	r5, r0, r7, r5
 80027ba:	2304      	movs	r3, #4
 80027bc:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 80027c0:	e7e6      	b.n	8002790 <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 80027c2:	4622      	mov	r2, r4
 80027c4:	4630      	mov	r0, r6
 80027c6:	f002 fd51 	bl	800526c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027ca:	232c      	movs	r3, #44	; 0x2c
 80027cc:	fb03 5307 	mla	r3, r3, r7, r5
 80027d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d2:	4422      	add	r2, r4
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80027d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027d8:	4422      	add	r2, r4
 80027da:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80027dc:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 80027e0:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 80027e4:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80027e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027ec:	42a3      	cmp	r3, r4
 80027ee:	d1cf      	bne.n	8002790 <HCD_RXQLVL_IRQHandler+0x16>
 80027f0:	2a00      	cmp	r2, #0
 80027f2:	d0cd      	beq.n	8002790 <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027f4:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002800:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002804:	232c      	movs	r3, #44	; 0x2c
 8002806:	fb03 5507 	mla	r5, r3, r7, r5
 800280a:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8002816:	e7bb      	b.n	8002790 <HCD_RXQLVL_IRQHandler+0x16>

08002818 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8002818:	2800      	cmp	r0, #0
 800281a:	d045      	beq.n	80028a8 <HAL_HCD_Init+0x90>
{
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	b08b      	sub	sp, #44	; 0x2c
 8002820:	4606      	mov	r6, r0
  USBx = hhcd->Instance;
 8002822:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002824:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 8002828:	2b00      	cmp	r3, #0
 800282a:	d038      	beq.n	800289e <HAL_HCD_Init+0x86>
  hhcd->State = HAL_HCD_STATE_BUSY;
 800282c:	2303      	movs	r3, #3
 800282e:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002832:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002834:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002838:	d101      	bne.n	800283e <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	6133      	str	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 800283e:	6830      	ldr	r0, [r6, #0]
 8002840:	f002 fcdf 	bl	8005202 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002844:	4634      	mov	r4, r6
 8002846:	f854 cb10 	ldr.w	ip, [r4], #16
 800284a:	466d      	mov	r5, sp
 800284c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002854:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002858:	e885 0003 	stmia.w	r5, {r0, r1}
 800285c:	1d37      	adds	r7, r6, #4
 800285e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002862:	4660      	mov	r0, ip
 8002864:	f002 fc88 	bl	8005178 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002868:	2101      	movs	r1, #1
 800286a:	6830      	ldr	r0, [r6, #0]
 800286c:	f002 fd2c 	bl	80052c8 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002870:	4634      	mov	r4, r6
 8002872:	f854 cb10 	ldr.w	ip, [r4], #16
 8002876:	466d      	mov	r5, sp
 8002878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002880:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002884:	e885 0003 	stmia.w	r5, {r0, r1}
 8002888:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800288c:	4660      	mov	r0, ip
 800288e:	f002 fd4d 	bl	800532c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002892:	2301      	movs	r3, #1
 8002894:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  return HAL_OK;
 8002898:	2000      	movs	r0, #0
}
 800289a:	b00b      	add	sp, #44	; 0x2c
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->Lock = HAL_UNLOCKED;
 800289e:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 80028a2:	f7ff f9dd 	bl	8001c60 <HAL_HCD_MspInit>
 80028a6:	e7c1      	b.n	800282c <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 80028a8:	2001      	movs	r0, #1
}
 80028aa:	4770      	bx	lr

080028ac <HAL_HCD_SOF_Callback>:
}
 80028ac:	4770      	bx	lr

080028ae <HAL_HCD_Connect_Callback>:
}
 80028ae:	4770      	bx	lr

080028b0 <HAL_HCD_Disconnect_Callback>:
}
 80028b0:	4770      	bx	lr

080028b2 <HAL_HCD_PortEnabled_Callback>:
}
 80028b2:	4770      	bx	lr

080028b4 <HAL_HCD_PortDisabled_Callback>:
}
 80028b4:	4770      	bx	lr

080028b6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028b6:	b530      	push	{r4, r5, lr}
 80028b8:	b083      	sub	sp, #12
 80028ba:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028bc:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80028be:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80028c2:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 80028c4:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80028c8:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028ca:	9b00      	ldr	r3, [sp, #0]
 80028cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028d0:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80028d2:	9b01      	ldr	r3, [sp, #4]
 80028d4:	f013 0f02 	tst.w	r3, #2
 80028d8:	d007      	beq.n	80028ea <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	f013 0f01 	tst.w	r3, #1
 80028e0:	d125      	bne.n	800292e <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80028e2:	9b00      	ldr	r3, [sp, #0]
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80028ea:	9b01      	ldr	r3, [sp, #4]
 80028ec:	f013 0f08 	tst.w	r3, #8
 80028f0:	d010      	beq.n	8002914 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80028f2:	9b00      	ldr	r3, [sp, #0]
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80028fa:	9b01      	ldr	r3, [sp, #4]
 80028fc:	f013 0f04 	tst.w	r3, #4
 8002900:	d02d      	beq.n	800295e <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002902:	69a3      	ldr	r3, [r4, #24]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d015      	beq.n	8002934 <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002908:	68e3      	ldr	r3, [r4, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d022      	beq.n	8002954 <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800290e:	4620      	mov	r0, r4
 8002910:	f7ff ffcf 	bl	80028b2 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002914:	9b01      	ldr	r3, [sp, #4]
 8002916:	f013 0f20 	tst.w	r3, #32
 800291a:	d003      	beq.n	8002924 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800291c:	9b00      	ldr	r3, [sp, #0]
 800291e:	f043 0320 	orr.w	r3, r3, #32
 8002922:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002924:	9b00      	ldr	r3, [sp, #0]
 8002926:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 800292a:	b003      	add	sp, #12
 800292c:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 800292e:	f7ff ffbe 	bl	80028ae <HAL_HCD_Connect_Callback>
 8002932:	e7d6      	b.n	80028e2 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002934:	9b01      	ldr	r3, [sp, #4]
 8002936:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800293a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800293e:	d004      	beq.n	800294a <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002940:	2101      	movs	r1, #1
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	f002 fd6a 	bl	800541c <USB_InitFSLSPClkSel>
 8002948:	e7e1      	b.n	800290e <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800294a:	2102      	movs	r1, #2
 800294c:	6820      	ldr	r0, [r4, #0]
 800294e:	f002 fd65 	bl	800541c <USB_InitFSLSPClkSel>
 8002952:	e7dc      	b.n	800290e <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8002954:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002958:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 800295c:	e7d7      	b.n	800290e <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800295e:	4620      	mov	r0, r4
 8002960:	f7ff ffa8 	bl	80028b4 <HAL_HCD_PortDisabled_Callback>
 8002964:	e7d6      	b.n	8002914 <HCD_Port_IRQHandler+0x5e>

08002966 <HAL_HCD_HC_NotifyURBChange_Callback>:
}
 8002966:	4770      	bx	lr

08002968 <HCD_HC_IN_IRQHandler>:
{
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	4605      	mov	r5, r0
 800296c:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800296e:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002970:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8002974:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8002978:	68a3      	ldr	r3, [r4, #8]
 800297a:	f013 0f04 	tst.w	r3, #4
 800297e:	d040      	beq.n	8002a02 <HCD_HC_IN_IRQHandler+0x9a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002980:	2304      	movs	r3, #4
 8002982:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002984:	68e3      	ldr	r3, [r4, #12]
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800298c:	68a3      	ldr	r3, [r4, #8]
 800298e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002992:	f040 8093 	bne.w	8002abc <HCD_HC_IN_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002996:	68a3      	ldr	r3, [r4, #8]
 8002998:	f013 0f01 	tst.w	r3, #1
 800299c:	f000 80d7 	beq.w	8002b4e <HCD_HC_IN_IRQHandler+0x1e6>
    if (hhcd->Init.dma_enable != 0U)
 80029a0:	692b      	ldr	r3, [r5, #16]
 80029a2:	b143      	cbz	r3, 80029b6 <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029a4:	232c      	movs	r3, #44	; 0x2c
 80029a6:	fb03 5306 	mla	r3, r3, r6, r5
 80029aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029ac:	6921      	ldr	r1, [r4, #16]
 80029ae:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029b2:	1a52      	subs	r2, r2, r1
 80029b4:	651a      	str	r2, [r3, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 80029b6:	232c      	movs	r3, #44	; 0x2c
 80029b8:	fb03 5306 	mla	r3, r3, r6, r5
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029c2:	2100      	movs	r1, #0
 80029c4:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029c6:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8081 	beq.w	8002ad4 <HCD_HC_IN_IRQHandler+0x16c>
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d07e      	beq.n	8002ad4 <HCD_HC_IN_IRQHandler+0x16c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	f000 8093 	beq.w	8002b02 <HCD_HC_IN_IRQHandler+0x19a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f040 8083 	bne.w	8002ae8 <HCD_HC_IN_IRQHandler+0x180>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029e2:	232c      	movs	r3, #44	; 0x2c
 80029e4:	fb03 5306 	mla	r3, r3, r6, r5
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ee:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 80029f2:	4051      	eors	r1, r2
 80029f4:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029f8:	4631      	mov	r1, r6
 80029fa:	4628      	mov	r0, r5
 80029fc:	f7ff ffb3 	bl	8002966 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a00:	e072      	b.n	8002ae8 <HCD_HC_IN_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a02:	68a3      	ldr	r3, [r4, #8]
 8002a04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a08:	d106      	bne.n	8002a18 <HCD_HC_IN_IRQHandler+0xb0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a0a:	68a3      	ldr	r3, [r4, #8]
 8002a0c:	f013 0f20 	tst.w	r3, #32
 8002a10:	d013      	beq.n	8002a3a <HCD_HC_IN_IRQHandler+0xd2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a12:	2320      	movs	r3, #32
 8002a14:	60a3      	str	r3, [r4, #8]
 8002a16:	e7b9      	b.n	800298c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1c:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a1e:	232c      	movs	r3, #44	; 0x2c
 8002a20:	fb03 0301 	mla	r3, r3, r1, r0
 8002a24:	2207      	movs	r2, #7
 8002a26:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a2a:	68e3      	ldr	r3, [r4, #12]
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a32:	6800      	ldr	r0, [r0, #0]
 8002a34:	f002 fd17 	bl	8005466 <USB_HC_Halt>
 8002a38:	e7a8      	b.n	800298c <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a3a:	68a3      	ldr	r3, [r4, #8]
 8002a3c:	f013 0f08 	tst.w	r3, #8
 8002a40:	d117      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x10a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002a48:	d125      	bne.n	8002a96 <HCD_HC_IN_IRQHandler+0x12e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a4a:	68a3      	ldr	r3, [r4, #8]
 8002a4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a50:	d09c      	beq.n	800298c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a52:	68e3      	ldr	r3, [r4, #12]
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a5a:	232c      	movs	r3, #44	; 0x2c
 8002a5c:	fb03 0301 	mla	r3, r3, r1, r0
 8002a60:	2206      	movs	r2, #6
 8002a62:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a66:	6800      	ldr	r0, [r0, #0]
 8002a68:	f002 fcfd 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	60a3      	str	r3, [r4, #8]
 8002a70:	e78c      	b.n	800298c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a72:	68e3      	ldr	r3, [r4, #12]
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a7a:	232c      	movs	r3, #44	; 0x2c
 8002a7c:	fb03 0301 	mla	r3, r3, r1, r0
 8002a80:	2205      	movs	r2, #5
 8002a82:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a86:	2310      	movs	r3, #16
 8002a88:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8e:	6800      	ldr	r0, [r0, #0]
 8002a90:	f002 fce9 	bl	8005466 <USB_HC_Halt>
 8002a94:	e77a      	b.n	800298c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a96:	68e3      	ldr	r3, [r4, #12]
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a9e:	232c      	movs	r3, #44	; 0x2c
 8002aa0:	fb03 0301 	mla	r3, r3, r1, r0
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aaa:	2310      	movs	r3, #16
 8002aac:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab2:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab4:	6800      	ldr	r0, [r0, #0]
 8002ab6:	f002 fcd6 	bl	8005466 <USB_HC_Halt>
 8002aba:	e767      	b.n	800298c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002abc:	68e3      	ldr	r3, [r4, #12]
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac4:	4631      	mov	r1, r6
 8002ac6:	6828      	ldr	r0, [r5, #0]
 8002ac8:	f002 fccd 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad0:	60a3      	str	r3, [r4, #8]
}
 8002ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad4:	68e3      	ldr	r3, [r4, #12]
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002adc:	4631      	mov	r1, r6
 8002ade:	6828      	ldr	r0, [r5, #0]
 8002ae0:	f002 fcc1 	bl	8005466 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 8002ae8:	692b      	ldr	r3, [r5, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d01a      	beq.n	8002b24 <HCD_HC_IN_IRQHandler+0x1bc>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002aee:	202c      	movs	r0, #44	; 0x2c
 8002af0:	fb00 5506 	mla	r5, r0, r6, r5
 8002af4:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8002af8:	f083 0301 	eor.w	r3, r3, #1
 8002afc:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8002b00:	e7e7      	b.n	8002ad2 <HCD_HC_IN_IRQHandler+0x16a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b02:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b0a:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b0e:	232c      	movs	r3, #44	; 0x2c
 8002b10:	fb03 5306 	mla	r3, r3, r6, r5
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f7ff ff22 	bl	8002966 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b22:	e7e1      	b.n	8002ae8 <HCD_HC_IN_IRQHandler+0x180>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002b24:	232c      	movs	r3, #44	; 0x2c
 8002b26:	fb03 5306 	mla	r3, r3, r6, r5
 8002b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	f013 0f01 	tst.w	r3, #1
 8002b38:	d0cb      	beq.n	8002ad2 <HCD_HC_IN_IRQHandler+0x16a>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b3a:	232c      	movs	r3, #44	; 0x2c
 8002b3c:	fb03 5506 	mla	r5, r3, r6, r5
 8002b40:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8002b44:	f083 0301 	eor.w	r3, r3, #1
 8002b48:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 8002b4c:	e7c1      	b.n	8002ad2 <HCD_HC_IN_IRQHandler+0x16a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b4e:	68a3      	ldr	r3, [r4, #8]
 8002b50:	f013 0f02 	tst.w	r3, #2
 8002b54:	d064      	beq.n	8002c20 <HCD_HC_IN_IRQHandler+0x2b8>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b56:	68e3      	ldr	r3, [r4, #12]
 8002b58:	f023 0302 	bic.w	r3, r3, #2
 8002b5c:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b5e:	232c      	movs	r3, #44	; 0x2c
 8002b60:	fb03 5306 	mla	r3, r3, r6, r5
 8002b64:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d013      	beq.n	8002b94 <HCD_HC_IN_IRQHandler+0x22c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d023      	beq.n	8002bb8 <HCD_HC_IN_IRQHandler+0x250>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b70:	2b06      	cmp	r3, #6
 8002b72:	d028      	beq.n	8002bc6 <HCD_HC_IN_IRQHandler+0x25e>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d026      	beq.n	8002bc6 <HCD_HC_IN_IRQHandler+0x25e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d042      	beq.n	8002c02 <HCD_HC_IN_IRQHandler+0x29a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b7c:	2b07      	cmp	r3, #7
 8002b7e:	d10f      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 8002b80:	232c      	movs	r3, #44	; 0x2c
 8002b82:	fb03 5306 	mla	r3, r3, r6, r5
 8002b86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b88:	3201      	adds	r2, #1
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002b92:	e005      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b94:	232c      	movs	r3, #44	; 0x2c
 8002b96:	fb03 5306 	mla	r3, r3, r6, r5
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba4:	232c      	movs	r3, #44	; 0x2c
 8002ba6:	fb03 5306 	mla	r3, r3, r6, r5
 8002baa:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002bae:	4631      	mov	r1, r6
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f7ff fed8 	bl	8002966 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bb6:	e78c      	b.n	8002ad2 <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002bb8:	232c      	movs	r3, #44	; 0x2c
 8002bba:	fb03 5306 	mla	r3, r3, r6, r5
 8002bbe:	2205      	movs	r2, #5
 8002bc0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002bc4:	e7ec      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 8002bc6:	222c      	movs	r2, #44	; 0x2c
 8002bc8:	fb02 5206 	mla	r2, r2, r6, r5
 8002bcc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002bce:	3301      	adds	r3, #1
 8002bd0:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d906      	bls.n	8002be4 <HCD_HC_IN_IRQHandler+0x27c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	2200      	movs	r2, #0
 8002bda:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bdc:	2204      	movs	r2, #4
 8002bde:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002be2:	e7dd      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x238>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002be4:	232c      	movs	r3, #44	; 0x2c
 8002be6:	fb03 5306 	mla	r3, r3, r6, r5
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bf0:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bfc:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002c00:	e7ce      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c02:	232c      	movs	r3, #44	; 0x2c
 8002c04:	fb03 5306 	mla	r3, r3, r6, r5
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c0e:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c1a:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8002c1e:	e7bf      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x238>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c20:	68a3      	ldr	r3, [r4, #8]
 8002c22:	f013 0f10 	tst.w	r3, #16
 8002c26:	f43f af54 	beq.w	8002ad2 <HCD_HC_IN_IRQHandler+0x16a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c2a:	232c      	movs	r3, #44	; 0x2c
 8002c2c:	fb03 5306 	mla	r3, r3, r6, r5
 8002c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d00c      	beq.n	8002c52 <HCD_HC_IN_IRQHandler+0x2ea>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c38:	b10b      	cbz	r3, 8002c3e <HCD_HC_IN_IRQHandler+0x2d6>
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d106      	bne.n	8002c4c <HCD_HC_IN_IRQHandler+0x2e4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c3e:	232c      	movs	r3, #44	; 0x2c
 8002c40:	fb03 5306 	mla	r3, r3, r6, r5
 8002c44:	2200      	movs	r2, #0
 8002c46:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8002c48:	692b      	ldr	r3, [r5, #16]
 8002c4a:	b183      	cbz	r3, 8002c6e <HCD_HC_IN_IRQHandler+0x306>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	60a3      	str	r3, [r4, #8]
}
 8002c50:	e73f      	b.n	8002ad2 <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c52:	232c      	movs	r3, #44	; 0x2c
 8002c54:	fb03 5306 	mla	r3, r3, r6, r5
 8002c58:	2200      	movs	r2, #0
 8002c5a:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c5c:	68e3      	ldr	r3, [r4, #12]
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c64:	4631      	mov	r1, r6
 8002c66:	6828      	ldr	r0, [r5, #0]
 8002c68:	f002 fbfd 	bl	8005466 <USB_HC_Halt>
 8002c6c:	e7ee      	b.n	8002c4c <HCD_HC_IN_IRQHandler+0x2e4>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c6e:	232c      	movs	r3, #44	; 0x2c
 8002c70:	fb03 5306 	mla	r3, r3, r6, r5
 8002c74:	2203      	movs	r2, #3
 8002c76:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c7a:	68e3      	ldr	r3, [r4, #12]
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c82:	4631      	mov	r1, r6
 8002c84:	6828      	ldr	r0, [r5, #0]
 8002c86:	f002 fbee 	bl	8005466 <USB_HC_Halt>
 8002c8a:	e7df      	b.n	8002c4c <HCD_HC_IN_IRQHandler+0x2e4>

08002c8c <HCD_HC_OUT_IRQHandler>:
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c8e:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002c94:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8002c98:	68a2      	ldr	r2, [r4, #8]
 8002c9a:	f012 0f04 	tst.w	r2, #4
 8002c9e:	d006      	beq.n	8002cae <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca4:	68e3      	ldr	r3, [r4, #12]
 8002ca6:	f043 0302 	orr.w	r3, r3, #2
 8002caa:	60e3      	str	r3, [r4, #12]
}
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	4605      	mov	r5, r0
 8002cb0:	460e      	mov	r6, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cb2:	68a2      	ldr	r2, [r4, #8]
 8002cb4:	f012 0f20 	tst.w	r2, #32
 8002cb8:	d018      	beq.n	8002cec <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cba:	2320      	movs	r3, #32
 8002cbc:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cbe:	232c      	movs	r3, #44	; 0x2c
 8002cc0:	fb03 0301 	mla	r3, r3, r1, r0
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d1ef      	bne.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ccc:	232c      	movs	r3, #44	; 0x2c
 8002cce:	fb03 0301 	mla	r3, r3, r1, r0
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cde:	68e3      	ldr	r3, [r4, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce4:	6800      	ldr	r0, [r0, #0]
 8002ce6:	f002 fbbe 	bl	8005466 <USB_HC_Halt>
 8002cea:	e7df      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cec:	68a2      	ldr	r2, [r4, #8]
 8002cee:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002cf2:	d124      	bne.n	8002d3e <HCD_HC_OUT_IRQHandler+0xb2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002cf4:	68a2      	ldr	r2, [r4, #8]
 8002cf6:	f012 0f01 	tst.w	r2, #1
 8002cfa:	d02b      	beq.n	8002d54 <HCD_HC_OUT_IRQHandler+0xc8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cfc:	232c      	movs	r3, #44	; 0x2c
 8002cfe:	fb03 0301 	mla	r3, r3, r1, r0
 8002d02:	2200      	movs	r2, #0
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d06:	68a3      	ldr	r3, [r4, #8]
 8002d08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d0c:	d007      	beq.n	8002d1e <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d0e:	232c      	movs	r3, #44	; 0x2c
 8002d10:	fb03 0301 	mla	r3, r3, r1, r0
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d1a:	2340      	movs	r3, #64	; 0x40
 8002d1c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d1e:	68e3      	ldr	r3, [r4, #12]
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d26:	4631      	mov	r1, r6
 8002d28:	6828      	ldr	r0, [r5, #0]
 8002d2a:	f002 fb9c 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d2e:	2301      	movs	r3, #1
 8002d30:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d32:	202c      	movs	r0, #44	; 0x2c
 8002d34:	fb00 5506 	mla	r5, r0, r6, r5
 8002d38:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8002d3c:	e7b6      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d3e:	68e3      	ldr	r3, [r4, #12]
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d46:	6800      	ldr	r0, [r0, #0]
 8002d48:	f002 fb8d 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d50:	60a3      	str	r3, [r4, #8]
 8002d52:	e7ab      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d54:	68a2      	ldr	r2, [r4, #8]
 8002d56:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d5a:	d129      	bne.n	8002db0 <HCD_HC_OUT_IRQHandler+0x124>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d5c:	68a2      	ldr	r2, [r4, #8]
 8002d5e:	f012 0f08 	tst.w	r2, #8
 8002d62:	d13a      	bne.n	8002dda <HCD_HC_OUT_IRQHandler+0x14e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d64:	68a2      	ldr	r2, [r4, #8]
 8002d66:	f012 0f10 	tst.w	r2, #16
 8002d6a:	d046      	beq.n	8002dfa <HCD_HC_OUT_IRQHandler+0x16e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d6c:	232c      	movs	r3, #44	; 0x2c
 8002d6e:	fb03 0301 	mla	r3, r3, r1, r0
 8002d72:	2200      	movs	r2, #0
 8002d74:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8002d76:	2203      	movs	r2, #3
 8002d78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b95b      	cbnz	r3, 8002d9a <HCD_HC_OUT_IRQHandler+0x10e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002d82:	232c      	movs	r3, #44	; 0x2c
 8002d84:	fb03 0301 	mla	r3, r3, r1, r0
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	b92b      	cbnz	r3, 8002d9a <HCD_HC_OUT_IRQHandler+0x10e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d8e:	232c      	movs	r3, #44	; 0x2c
 8002d90:	fb03 0301 	mla	r3, r3, r1, r0
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d9a:	68e3      	ldr	r3, [r4, #12]
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da2:	4631      	mov	r1, r6
 8002da4:	6828      	ldr	r0, [r5, #0]
 8002da6:	f002 fb5e 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002daa:	2310      	movs	r3, #16
 8002dac:	60a3      	str	r3, [r4, #8]
 8002dae:	e77d      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 8002db0:	232c      	movs	r3, #44	; 0x2c
 8002db2:	fb03 0301 	mla	r3, r3, r1, r0
 8002db6:	2204      	movs	r2, #4
 8002db8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc6:	68e3      	ldr	r3, [r4, #12]
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dce:	6800      	ldr	r0, [r0, #0]
 8002dd0:	f002 fb49 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dd4:	2340      	movs	r3, #64	; 0x40
 8002dd6:	60a3      	str	r3, [r4, #8]
 8002dd8:	e768      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dda:	2308      	movs	r3, #8
 8002ddc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dde:	68e3      	ldr	r3, [r4, #12]
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	f002 fb3d 	bl	8005466 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002dec:	232c      	movs	r3, #44	; 0x2c
 8002dee:	fb03 5506 	mla	r5, r3, r6, r5
 8002df2:	2305      	movs	r3, #5
 8002df4:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8002df8:	e758      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002dfa:	68a2      	ldr	r2, [r4, #8]
 8002dfc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e00:	d029      	beq.n	8002e56 <HCD_HC_OUT_IRQHandler+0x1ca>
    if (hhcd->Init.dma_enable == 0U)
 8002e02:	6903      	ldr	r3, [r0, #16]
 8002e04:	b183      	cbz	r3, 8002e28 <HCD_HC_OUT_IRQHandler+0x19c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e06:	222c      	movs	r2, #44	; 0x2c
 8002e08:	fb02 0201 	mla	r2, r2, r1, r0
 8002e0c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002e0e:	3301      	adds	r3, #1
 8002e10:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d816      	bhi.n	8002e44 <HCD_HC_OUT_IRQHandler+0x1b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e16:	232c      	movs	r3, #44	; 0x2c
 8002e18:	fb03 0501 	mla	r5, r3, r1, r0
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	60a3      	str	r3, [r4, #8]
 8002e26:	e741      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e28:	232c      	movs	r3, #44	; 0x2c
 8002e2a:	fb03 0301 	mla	r3, r3, r1, r0
 8002e2e:	2206      	movs	r2, #6
 8002e30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e34:	68e3      	ldr	r3, [r4, #12]
 8002e36:	f043 0302 	orr.w	r3, r3, #2
 8002e3a:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3c:	6800      	ldr	r0, [r0, #0]
 8002e3e:	f002 fb12 	bl	8005466 <USB_HC_Halt>
 8002e42:	e7ee      	b.n	8002e22 <HCD_HC_OUT_IRQHandler+0x196>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e44:	4613      	mov	r3, r2
 8002e46:	2200      	movs	r2, #0
 8002e48:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002e50:	f7ff fd89 	bl	8002966 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e54:	e7e5      	b.n	8002e22 <HCD_HC_OUT_IRQHandler+0x196>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e56:	68a2      	ldr	r2, [r4, #8]
 8002e58:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e5c:	d127      	bne.n	8002eae <HCD_HC_OUT_IRQHandler+0x222>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e5e:	68a2      	ldr	r2, [r4, #8]
 8002e60:	f012 0f02 	tst.w	r2, #2
 8002e64:	f43f af22 	beq.w	8002cac <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e68:	68e2      	ldr	r2, [r4, #12]
 8002e6a:	f022 0202 	bic.w	r2, r2, #2
 8002e6e:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e70:	222c      	movs	r2, #44	; 0x2c
 8002e72:	fb02 0201 	mla	r2, r2, r1, r0
 8002e76:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8002e7a:	2a01      	cmp	r2, #1
 8002e7c:	d02a      	beq.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x248>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e7e:	2a03      	cmp	r2, #3
 8002e80:	d05b      	beq.n	8002f3a <HCD_HC_OUT_IRQHandler+0x2ae>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e82:	2a04      	cmp	r2, #4
 8002e84:	d06b      	beq.n	8002f5e <HCD_HC_OUT_IRQHandler+0x2d2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e86:	2a05      	cmp	r2, #5
 8002e88:	d070      	beq.n	8002f6c <HCD_HC_OUT_IRQHandler+0x2e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e8a:	2a06      	cmp	r2, #6
 8002e8c:	d001      	beq.n	8002e92 <HCD_HC_OUT_IRQHandler+0x206>
 8002e8e:	2a08      	cmp	r2, #8
 8002e90:	d159      	bne.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].ErrCnt++;
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 5106 	mla	r1, r1, r6, r5
 8002e98:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8002e9a:	3201      	adds	r2, #1
 8002e9c:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e9e:	2a02      	cmp	r2, #2
 8002ea0:	d96a      	bls.n	8002f78 <HCD_HC_OUT_IRQHandler+0x2ec>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	65ca      	str	r2, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
 8002eac:	e04b      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eae:	68e3      	ldr	r3, [r4, #12]
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb6:	6800      	ldr	r0, [r0, #0]
 8002eb8:	f002 fad5 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec4:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ec6:	232c      	movs	r3, #44	; 0x2c
 8002ec8:	fb03 5506 	mla	r5, r3, r6, r5
 8002ecc:	2308      	movs	r3, #8
 8002ece:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8002ed2:	e6eb      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ed4:	232c      	movs	r3, #44	; 0x2c
 8002ed6:	fb03 0301 	mla	r3, r3, r1, r0
 8002eda:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ede:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ee2:	3b02      	subs	r3, #2
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d82d      	bhi.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
        if (hhcd->Init.dma_enable == 0U)
 8002eea:	6901      	ldr	r1, [r0, #16]
 8002eec:	b941      	cbnz	r1, 8002f00 <HCD_HC_OUT_IRQHandler+0x274>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002eee:	232c      	movs	r3, #44	; 0x2c
 8002ef0:	fb03 0306 	mla	r3, r3, r6, r0
 8002ef4:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8002ef8:	f082 0201 	eor.w	r2, r2, #1
 8002efc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002f00:	2901      	cmp	r1, #1
 8002f02:	d120      	bne.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
 8002f04:	232c      	movs	r3, #44	; 0x2c
 8002f06:	fb03 5306 	mla	r3, r3, r6, r5
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0c:	b1db      	cbz	r3, 8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f0e:	222c      	movs	r2, #44	; 0x2c
 8002f10:	fb02 5206 	mla	r2, r2, r6, r5
 8002f14:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8002f20:	f013 0f01 	tst.w	r3, #1
 8002f24:	d00f      	beq.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f26:	232c      	movs	r3, #44	; 0x2c
 8002f28:	fb03 5306 	mla	r3, r3, r6, r5
 8002f2c:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8002f30:	f082 0201 	eor.w	r2, r2, #1
 8002f34:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8002f38:	e005      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f3a:	232c      	movs	r3, #44	; 0x2c
 8002f3c:	fb03 0301 	mla	r3, r3, r1, r0
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f46:	2302      	movs	r3, #2
 8002f48:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f4a:	232c      	movs	r3, #44	; 0x2c
 8002f4c:	fb03 5306 	mla	r3, r3, r6, r5
 8002f50:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002f54:	4631      	mov	r1, r6
 8002f56:	4628      	mov	r0, r5
 8002f58:	f7ff fd05 	bl	8002966 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f5c:	e6a6      	b.n	8002cac <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f5e:	232c      	movs	r3, #44	; 0x2c
 8002f60:	fb03 0301 	mla	r3, r3, r1, r0
 8002f64:	2202      	movs	r2, #2
 8002f66:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002f6a:	e7ec      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f6c:	232c      	movs	r3, #44	; 0x2c
 8002f6e:	fb03 0301 	mla	r3, r3, r1, r0
 8002f72:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8002f76:	e7e6      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f78:	222c      	movs	r2, #44	; 0x2c
 8002f7a:	fb02 5206 	mla	r2, r2, r6, r5
 8002f7e:	2102      	movs	r1, #2
 8002f80:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f84:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f88:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8002f94:	e7d7      	b.n	8002f46 <HCD_HC_OUT_IRQHandler+0x2ba>

08002f96 <HAL_HCD_IRQHandler>:
{
 8002f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f98:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f9a:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f002 f98f 	bl	80052c0 <USB_GetMode>
 8002fa2:	2801      	cmp	r0, #1
 8002fa4:	d000      	beq.n	8002fa8 <HAL_HCD_IRQHandler+0x12>
}
 8002fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa8:	462e      	mov	r6, r5
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002faa:	6820      	ldr	r0, [r4, #0]
 8002fac:	f002 f984 	bl	80052b8 <USB_ReadInterrupts>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d0f8      	beq.n	8002fa6 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fb4:	6820      	ldr	r0, [r4, #0]
 8002fb6:	f002 f97f 	bl	80052b8 <USB_ReadInterrupts>
 8002fba:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002fbe:	d003      	beq.n	8002fc8 <HAL_HCD_IRQHandler+0x32>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002fc6:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fc8:	6820      	ldr	r0, [r4, #0]
 8002fca:	f002 f975 	bl	80052b8 <USB_ReadInterrupts>
 8002fce:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002fd2:	d003      	beq.n	8002fdc <HAL_HCD_IRQHandler+0x46>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fda:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	f002 f96b 	bl	80052b8 <USB_ReadInterrupts>
 8002fe2:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002fe6:	d003      	beq.n	8002ff0 <HAL_HCD_IRQHandler+0x5a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fee:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	f002 f961 	bl	80052b8 <USB_ReadInterrupts>
 8002ff6:	f010 0f02 	tst.w	r0, #2
 8002ffa:	d002      	beq.n	8003002 <HAL_HCD_IRQHandler+0x6c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	2202      	movs	r2, #2
 8003000:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	f002 f958 	bl	80052b8 <USB_ReadInterrupts>
 8003008:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800300c:	d008      	beq.n	8003020 <HAL_HCD_IRQHandler+0x8a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003014:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003016:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800301a:	f013 0f01 	tst.w	r3, #1
 800301e:	d01d      	beq.n	800305c <HAL_HCD_IRQHandler+0xc6>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	f002 f949 	bl	80052b8 <USB_ReadInterrupts>
 8003026:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800302a:	d126      	bne.n	800307a <HAL_HCD_IRQHandler+0xe4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	f002 f943 	bl	80052b8 <USB_ReadInterrupts>
 8003032:	f010 0f08 	tst.w	r0, #8
 8003036:	d124      	bne.n	8003082 <HAL_HCD_IRQHandler+0xec>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f002 f93d 	bl	80052b8 <USB_ReadInterrupts>
 800303e:	f010 0f10 	tst.w	r0, #16
 8003042:	d125      	bne.n	8003090 <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003044:	6820      	ldr	r0, [r4, #0]
 8003046:	f002 f937 	bl	80052b8 <USB_ReadInterrupts>
 800304a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800304e:	d0aa      	beq.n	8002fa6 <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003050:	6820      	ldr	r0, [r4, #0]
 8003052:	f002 fa03 	bl	800545c <USB_HC_ReadInterrupt>
 8003056:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003058:	2500      	movs	r5, #0
 800305a:	e02c      	b.n	80030b6 <HAL_HCD_IRQHandler+0x120>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800305c:	2110      	movs	r1, #16
 800305e:	4628      	mov	r0, r5
 8003060:	f002 f8d6 	bl	8005210 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003064:	4628      	mov	r0, r5
 8003066:	f002 f8eb 	bl	8005240 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800306a:	2101      	movs	r1, #1
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	f002 f9d5 	bl	800541c <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff fc1c 	bl	80028b0 <HAL_HCD_Disconnect_Callback>
 8003078:	e7d2      	b.n	8003020 <HAL_HCD_IRQHandler+0x8a>
      HCD_Port_IRQHandler(hhcd);
 800307a:	4620      	mov	r0, r4
 800307c:	f7ff fc1b 	bl	80028b6 <HCD_Port_IRQHandler>
 8003080:	e7d4      	b.n	800302c <HAL_HCD_IRQHandler+0x96>
      HAL_HCD_SOF_Callback(hhcd);
 8003082:	4620      	mov	r0, r4
 8003084:	f7ff fc12 	bl	80028ac <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	2208      	movs	r2, #8
 800308c:	615a      	str	r2, [r3, #20]
 800308e:	e7d3      	b.n	8003038 <HAL_HCD_IRQHandler+0xa2>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	6993      	ldr	r3, [r2, #24]
 8003094:	f023 0310 	bic.w	r3, r3, #16
 8003098:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 800309a:	4620      	mov	r0, r4
 800309c:	f7ff fb6d 	bl	800277a <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	6993      	ldr	r3, [r2, #24]
 80030a4:	f043 0310 	orr.w	r3, r3, #16
 80030a8:	6193      	str	r3, [r2, #24]
 80030aa:	e7cb      	b.n	8003044 <HAL_HCD_IRQHandler+0xae>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80030ac:	b2e9      	uxtb	r1, r5
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff fdec 	bl	8002c8c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030b4:	3501      	adds	r5, #1
 80030b6:	68a3      	ldr	r3, [r4, #8]
 80030b8:	42ab      	cmp	r3, r5
 80030ba:	d912      	bls.n	80030e2 <HAL_HCD_IRQHandler+0x14c>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030bc:	f005 030f 	and.w	r3, r5, #15
 80030c0:	fa27 f303 	lsr.w	r3, r7, r3
 80030c4:	f013 0f01 	tst.w	r3, #1
 80030c8:	d0f4      	beq.n	80030b4 <HAL_HCD_IRQHandler+0x11e>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030ca:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 80030ce:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80030d2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80030d6:	d0e9      	beq.n	80030ac <HAL_HCD_IRQHandler+0x116>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80030d8:	b2e9      	uxtb	r1, r5
 80030da:	4620      	mov	r0, r4
 80030dc:	f7ff fc44 	bl	8002968 <HCD_HC_IN_IRQHandler>
 80030e0:	e7e8      	b.n	80030b4 <HAL_HCD_IRQHandler+0x11e>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e8:	615a      	str	r2, [r3, #20]
 80030ea:	e75c      	b.n	8002fa6 <HAL_HCD_IRQHandler+0x10>

080030ec <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ec:	2800      	cmp	r0, #0
 80030ee:	f000 80cc 	beq.w	800328a <HAL_I2C_Init+0x19e>
{
 80030f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f4:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d077      	beq.n	80031ee <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fe:	2324      	movs	r3, #36	; 0x24
 8003100:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	6813      	ldr	r3, [r2, #0]
 8003112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003116:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003118:	6822      	ldr	r2, [r4, #0]
 800311a:	6813      	ldr	r3, [r2, #0]
 800311c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003120:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003122:	f000 fe25 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003126:	6862      	ldr	r2, [r4, #4]
 8003128:	4b5a      	ldr	r3, [pc, #360]	; (8003294 <HAL_I2C_Init+0x1a8>)
 800312a:	429a      	cmp	r2, r3
 800312c:	d864      	bhi.n	80031f8 <HAL_I2C_Init+0x10c>
 800312e:	4b5a      	ldr	r3, [pc, #360]	; (8003298 <HAL_I2C_Init+0x1ac>)
 8003130:	4298      	cmp	r0, r3
 8003132:	bf8c      	ite	hi
 8003134:	2300      	movhi	r3, #0
 8003136:	2301      	movls	r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 80a8 	bne.w	800328e <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800313e:	4d57      	ldr	r5, [pc, #348]	; (800329c <HAL_I2C_Init+0x1b0>)
 8003140:	fba5 3500 	umull	r3, r5, r5, r0
 8003144:	0caf      	lsrs	r7, r5, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003146:	6826      	ldr	r6, [r4, #0]
 8003148:	6871      	ldr	r1, [r6, #4]
 800314a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800314e:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8003152:	6071      	str	r1, [r6, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003154:	6821      	ldr	r1, [r4, #0]
 8003156:	6a0b      	ldr	r3, [r1, #32]
 8003158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800315c:	6865      	ldr	r5, [r4, #4]
 800315e:	4a4d      	ldr	r2, [pc, #308]	; (8003294 <HAL_I2C_Init+0x1a8>)
 8003160:	4295      	cmp	r5, r2
 8003162:	d84f      	bhi.n	8003204 <HAL_I2C_Init+0x118>
 8003164:	1c7a      	adds	r2, r7, #1
 8003166:	4313      	orrs	r3, r2
 8003168:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800316a:	6825      	ldr	r5, [r4, #0]
 800316c:	69e9      	ldr	r1, [r5, #28]
 800316e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003172:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003176:	6863      	ldr	r3, [r4, #4]
 8003178:	4a46      	ldr	r2, [pc, #280]	; (8003294 <HAL_I2C_Init+0x1a8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d84c      	bhi.n	8003218 <HAL_I2C_Init+0x12c>
 800317e:	3801      	subs	r0, #1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fbb0 f0f3 	udiv	r0, r0, r3
 8003186:	3001      	adds	r0, #1
 8003188:	f640 73fc 	movw	r3, #4092	; 0xffc
 800318c:	4218      	tst	r0, r3
 800318e:	d078      	beq.n	8003282 <HAL_I2C_Init+0x196>
 8003190:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003194:	430b      	orrs	r3, r1
 8003196:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003198:	6821      	ldr	r1, [r4, #0]
 800319a:	680b      	ldr	r3, [r1, #0]
 800319c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031a0:	69e2      	ldr	r2, [r4, #28]
 80031a2:	6a20      	ldr	r0, [r4, #32]
 80031a4:	4302      	orrs	r2, r0
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031aa:	6821      	ldr	r1, [r4, #0]
 80031ac:	688b      	ldr	r3, [r1, #8]
 80031ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031b6:	6922      	ldr	r2, [r4, #16]
 80031b8:	68e0      	ldr	r0, [r4, #12]
 80031ba:	4302      	orrs	r2, r0
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c0:	6821      	ldr	r1, [r4, #0]
 80031c2:	68cb      	ldr	r3, [r1, #12]
 80031c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031c8:	6962      	ldr	r2, [r4, #20]
 80031ca:	69a0      	ldr	r0, [r4, #24]
 80031cc:	4302      	orrs	r2, r0
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d2:	6822      	ldr	r2, [r4, #0]
 80031d4:	6813      	ldr	r3, [r2, #0]
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	2000      	movs	r0, #0
 80031de:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	2320      	movs	r3, #32
 80031e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 80031ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80031ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80031f2:	f7fe fb57 	bl	80018a4 <HAL_I2C_MspInit>
 80031f6:	e782      	b.n	80030fe <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031f8:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <HAL_I2C_Init+0x1b4>)
 80031fa:	4298      	cmp	r0, r3
 80031fc:	bf8c      	ite	hi
 80031fe:	2300      	movhi	r3, #0
 8003200:	2301      	movls	r3, #1
 8003202:	e799      	b.n	8003138 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003204:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003208:	fb02 f207 	mul.w	r2, r2, r7
 800320c:	4d25      	ldr	r5, [pc, #148]	; (80032a4 <HAL_I2C_Init+0x1b8>)
 800320e:	fba5 5202 	umull	r5, r2, r5, r2
 8003212:	0992      	lsrs	r2, r2, #6
 8003214:	3201      	adds	r2, #1
 8003216:	e7a6      	b.n	8003166 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003218:	68a2      	ldr	r2, [r4, #8]
 800321a:	b9ba      	cbnz	r2, 800324c <HAL_I2C_Init+0x160>
 800321c:	1e46      	subs	r6, r0, #1
 800321e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003222:	fbb6 f6f7 	udiv	r6, r6, r7
 8003226:	3601      	adds	r6, #1
 8003228:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800322c:	fab6 f686 	clz	r6, r6
 8003230:	0976      	lsrs	r6, r6, #5
 8003232:	bb46      	cbnz	r6, 8003286 <HAL_I2C_Init+0x19a>
 8003234:	b9c2      	cbnz	r2, 8003268 <HAL_I2C_Init+0x17c>
 8003236:	1e42      	subs	r2, r0, #1
 8003238:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800323c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003240:	3201      	adds	r2, #1
 8003242:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003246:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800324a:	e7a3      	b.n	8003194 <HAL_I2C_Init+0xa8>
 800324c:	1e46      	subs	r6, r0, #1
 800324e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003252:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003256:	fbb6 f6f7 	udiv	r6, r6, r7
 800325a:	3601      	adds	r6, #1
 800325c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003260:	fab6 f686 	clz	r6, r6
 8003264:	0976      	lsrs	r6, r6, #5
 8003266:	e7e4      	b.n	8003232 <HAL_I2C_Init+0x146>
 8003268:	1e42      	subs	r2, r0, #1
 800326a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800326e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003272:	fbb2 f2f3 	udiv	r2, r2, r3
 8003276:	3201      	adds	r2, #1
 8003278:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800327c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003280:	e788      	b.n	8003194 <HAL_I2C_Init+0xa8>
 8003282:	2304      	movs	r3, #4
 8003284:	e786      	b.n	8003194 <HAL_I2C_Init+0xa8>
 8003286:	2301      	movs	r3, #1
 8003288:	e784      	b.n	8003194 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800328a:	2001      	movs	r0, #1
}
 800328c:	4770      	bx	lr
    return HAL_ERROR;
 800328e:	2001      	movs	r0, #1
 8003290:	e7ac      	b.n	80031ec <HAL_I2C_Init+0x100>
 8003292:	bf00      	nop
 8003294:	000186a0 	.word	0x000186a0
 8003298:	001e847f 	.word	0x001e847f
 800329c:	431bde83 	.word	0x431bde83
 80032a0:	003d08ff 	.word	0x003d08ff
 80032a4:	10624dd3 	.word	0x10624dd3

080032a8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d001      	beq.n	80032b6 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80032b2:	2002      	movs	r0, #2
  }
}
 80032b4:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b6:	2324      	movs	r3, #36	; 0x24
 80032b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80032bc:	6802      	ldr	r2, [r0, #0]
 80032be:	6813      	ldr	r3, [r2, #0]
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032c6:	6802      	ldr	r2, [r0, #0]
 80032c8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80032ca:	f023 0310 	bic.w	r3, r3, #16
 80032ce:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 80032d0:	6802      	ldr	r2, [r0, #0]
 80032d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80032d4:	4319      	orrs	r1, r3
 80032d6:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 80032d8:	6802      	ldr	r2, [r0, #0]
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	2320      	movs	r3, #32
 80032e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 80032e8:	2000      	movs	r0, #0
 80032ea:	4770      	bx	lr

080032ec <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d001      	beq.n	80032fa <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2002      	movs	r0, #2
  }
}
 80032f8:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fa:	2324      	movs	r3, #36	; 0x24
 80032fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8003300:	6802      	ldr	r2, [r0, #0]
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 800330a:	6802      	ldr	r2, [r0, #0]
 800330c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800330e:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8003310:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8003314:	4319      	orrs	r1, r3
 8003316:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8003318:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 800331a:	6802      	ldr	r2, [r0, #0]
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	2320      	movs	r3, #32
 8003326:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 800332a:	2000      	movs	r0, #0
 800332c:	4770      	bx	lr

0800332e <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800332e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003330:	684e      	ldr	r6, [r1, #4]
 8003332:	6805      	ldr	r5, [r0, #0]
 8003334:	68eb      	ldr	r3, [r5, #12]
 8003336:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800333a:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800333c:	01d4      	lsls	r4, r2, #7
 800333e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003342:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003346:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800334a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800334e:	680b      	ldr	r3, [r1, #0]
 8003350:	6805      	ldr	r5, [r0, #0]
 8003352:	68ef      	ldr	r7, [r5, #12]
 8003354:	f3c7 470b 	ubfx	r7, r7, #16, #12
 8003358:	443b      	add	r3, r7
 800335a:	3301      	adds	r3, #1
 800335c:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003360:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003364:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003368:	68ce      	ldr	r6, [r1, #12]
 800336a:	6805      	ldr	r5, [r0, #0]
 800336c:	68eb      	ldr	r3, [r5, #12]
 800336e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003372:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003374:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003378:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800337c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003380:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003384:	688b      	ldr	r3, [r1, #8]
 8003386:	6805      	ldr	r5, [r0, #0]
 8003388:	68ef      	ldr	r7, [r5, #12]
 800338a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800338e:	443b      	add	r3, r7
 8003390:	3301      	adds	r3, #1
 8003392:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 8003396:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800339a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800339e:	6803      	ldr	r3, [r0, #0]
 80033a0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80033a4:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 80033a8:	f025 0507 	bic.w	r5, r5, #7
 80033ac:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80033b0:	6803      	ldr	r3, [r0, #0]
 80033b2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80033b6:	690d      	ldr	r5, [r1, #16]
 80033b8:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80033bc:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80033c0:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80033c4:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80033c6:	6806      	ldr	r6, [r0, #0]
 80033c8:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 80033cc:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 80033d0:	2500      	movs	r5, #0
 80033d2:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80033d6:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 80033da:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80033de:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80033e2:	6806      	ldr	r6, [r0, #0]
 80033e4:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 80033e8:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80033ec:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80033f0:	6803      	ldr	r3, [r0, #0]
 80033f2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80033f6:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80033fa:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 80033fe:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003402:	6803      	ldr	r3, [r0, #0]
 8003404:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003408:	694e      	ldr	r6, [r1, #20]
 800340a:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800340e:	6803      	ldr	r3, [r0, #0]
 8003410:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8003414:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8003418:	f426 66e0 	bic.w	r6, r6, #1792	; 0x700
 800341c:	f026 0607 	bic.w	r6, r6, #7
 8003420:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003424:	69ce      	ldr	r6, [r1, #28]
 8003426:	6a0f      	ldr	r7, [r1, #32]
 8003428:	6803      	ldr	r3, [r0, #0]
 800342a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800342e:	433e      	orrs	r6, r7
 8003430:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003434:	6803      	ldr	r3, [r0, #0]
 8003436:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800343a:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 800343e:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003442:	6803      	ldr	r3, [r0, #0]
 8003444:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8003448:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800344a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800344e:	690b      	ldr	r3, [r1, #16]
 8003450:	b16b      	cbz	r3, 800346e <LTDC_SetConfig+0x140>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003452:	2b01      	cmp	r3, #1
 8003454:	d03b      	beq.n	80034ce <LTDC_SetConfig+0x1a0>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003456:	2b04      	cmp	r3, #4
 8003458:	d03b      	beq.n	80034d2 <LTDC_SetConfig+0x1a4>
 800345a:	2b02      	cmp	r3, #2
 800345c:	d008      	beq.n	8003470 <LTDC_SetConfig+0x142>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800345e:	2b03      	cmp	r3, #3
 8003460:	d039      	beq.n	80034d6 <LTDC_SetConfig+0x1a8>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003462:	2b07      	cmp	r3, #7
 8003464:	d001      	beq.n	800346a <LTDC_SetConfig+0x13c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003466:	2301      	movs	r3, #1
 8003468:	e002      	b.n	8003470 <LTDC_SetConfig+0x142>
    tmp = 2U;
 800346a:	2302      	movs	r3, #2
 800346c:	e000      	b.n	8003470 <LTDC_SetConfig+0x142>
    tmp = 4U;
 800346e:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003470:	6802      	ldr	r2, [r0, #0]
 8003472:	4422      	add	r2, r4
 8003474:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8003478:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800347c:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003480:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003482:	fb03 f502 	mul.w	r5, r3, r2
 8003486:	684a      	ldr	r2, [r1, #4]
 8003488:	680e      	ldr	r6, [r1, #0]
 800348a:	1b92      	subs	r2, r2, r6
 800348c:	fb03 f302 	mul.w	r3, r3, r2
 8003490:	3303      	adds	r3, #3
 8003492:	6802      	ldr	r2, [r0, #0]
 8003494:	4422      	add	r2, r4
 8003496:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800349a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	4423      	add	r3, r4
 80034a2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80034a6:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80034aa:	f022 0207 	bic.w	r2, r2, #7
 80034ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034b2:	6803      	ldr	r3, [r0, #0]
 80034b4:	4423      	add	r3, r4
 80034b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80034b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	441c      	add	r4, r3
 80034c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80034cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e7ce      	b.n	8003470 <LTDC_SetConfig+0x142>
    tmp = 2U;
 80034d2:	2302      	movs	r3, #2
 80034d4:	e7cc      	b.n	8003470 <LTDC_SetConfig+0x142>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e7ca      	b.n	8003470 <LTDC_SetConfig+0x142>
	...

080034dc <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80034dc:	2800      	cmp	r0, #0
 80034de:	d072      	beq.n	80035c6 <HAL_LTDC_Init+0xea>
{
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80034e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d067      	beq.n	80035bc <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034ec:	2302      	movs	r3, #2
 80034ee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	6993      	ldr	r3, [r2, #24]
 80034f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034fa:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034fc:	6821      	ldr	r1, [r4, #0]
 80034fe:	698a      	ldr	r2, [r1, #24]
 8003500:	6863      	ldr	r3, [r4, #4]
 8003502:	68a0      	ldr	r0, [r4, #8]
 8003504:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003506:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003508:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800350a:	6920      	ldr	r0, [r4, #16]
 800350c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800350e:	4313      	orrs	r3, r2
 8003510:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003512:	6821      	ldr	r1, [r4, #0]
 8003514:	688a      	ldr	r2, [r1, #8]
 8003516:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_LTDC_Init+0xf0>)
 8003518:	401a      	ands	r2, r3
 800351a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800351c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	6882      	ldr	r2, [r0, #8]
 8003522:	69a1      	ldr	r1, [r4, #24]
 8003524:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003528:	430a      	orrs	r2, r1
 800352a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	68ca      	ldr	r2, [r1, #12]
 8003530:	401a      	ands	r2, r3
 8003532:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003534:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	68c2      	ldr	r2, [r0, #12]
 800353a:	6a21      	ldr	r1, [r4, #32]
 800353c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003540:	430a      	orrs	r2, r1
 8003542:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003544:	6821      	ldr	r1, [r4, #0]
 8003546:	690a      	ldr	r2, [r1, #16]
 8003548:	401a      	ands	r2, r3
 800354a:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800354c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	6902      	ldr	r2, [r0, #16]
 8003552:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003554:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003558:	430a      	orrs	r2, r1
 800355a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800355c:	6821      	ldr	r1, [r4, #0]
 800355e:	694a      	ldr	r2, [r1, #20]
 8003560:	4013      	ands	r3, r2
 8003562:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003564:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003566:	6821      	ldr	r1, [r4, #0]
 8003568:	694b      	ldr	r3, [r1, #20]
 800356a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800356c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003570:	4313      	orrs	r3, r2
 8003572:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003574:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003578:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800357c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800357e:	6821      	ldr	r1, [r4, #0]
 8003580:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003582:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003586:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003588:	6821      	ldr	r1, [r4, #0]
 800358a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800358c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003590:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8003594:	4303      	orrs	r3, r0
 8003596:	4313      	orrs	r3, r2
 8003598:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800359a:	6822      	ldr	r2, [r4, #0]
 800359c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800359e:	f043 0306 	orr.w	r3, r3, #6
 80035a2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80035a4:	6822      	ldr	r2, [r4, #0]
 80035a6:	6993      	ldr	r3, [r2, #24]
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80035ae:	2000      	movs	r0, #0
 80035b0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80035bc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80035c0:	f7fe f9c6 	bl	8001950 <HAL_LTDC_MspInit>
 80035c4:	e792      	b.n	80034ec <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80035c6:	2001      	movs	r0, #1
}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	f000f800 	.word	0xf000f800

080035d0 <HAL_LTDC_ErrorCallback>:
}
 80035d0:	4770      	bx	lr

080035d2 <HAL_LTDC_LineEventCallback>:
}
 80035d2:	4770      	bx	lr

080035d4 <HAL_LTDC_ReloadEventCallback>:
}
 80035d4:	4770      	bx	lr

080035d6 <HAL_LTDC_IRQHandler>:
{
 80035d6:	b570      	push	{r4, r5, r6, lr}
 80035d8:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80035da:	6803      	ldr	r3, [r0, #0]
 80035dc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80035de:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80035e0:	f015 0f04 	tst.w	r5, #4
 80035e4:	d002      	beq.n	80035ec <HAL_LTDC_IRQHandler+0x16>
 80035e6:	f016 0f04 	tst.w	r6, #4
 80035ea:	d112      	bne.n	8003612 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80035ec:	f015 0f02 	tst.w	r5, #2
 80035f0:	d002      	beq.n	80035f8 <HAL_LTDC_IRQHandler+0x22>
 80035f2:	f016 0f02 	tst.w	r6, #2
 80035f6:	d121      	bne.n	800363c <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80035f8:	f015 0f01 	tst.w	r5, #1
 80035fc:	d002      	beq.n	8003604 <HAL_LTDC_IRQHandler+0x2e>
 80035fe:	f016 0f01 	tst.w	r6, #1
 8003602:	d132      	bne.n	800366a <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003604:	f015 0f08 	tst.w	r5, #8
 8003608:	d002      	beq.n	8003610 <HAL_LTDC_IRQHandler+0x3a>
 800360a:	f016 0f08 	tst.w	r6, #8
 800360e:	d13d      	bne.n	800368c <HAL_LTDC_IRQHandler+0xb6>
}
 8003610:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800361a:	6803      	ldr	r3, [r0, #0]
 800361c:	2204      	movs	r2, #4
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003620:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800362c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8003630:	2300      	movs	r3, #0
 8003632:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003636:	f7ff ffcb 	bl	80035d0 <HAL_LTDC_ErrorCallback>
 800363a:	e7d7      	b.n	80035ec <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003640:	f023 0302 	bic.w	r3, r3, #2
 8003644:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	2202      	movs	r2, #2
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800364c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003656:	2304      	movs	r3, #4
 8003658:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800365c:	2300      	movs	r3, #0
 800365e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8003662:	4620      	mov	r0, r4
 8003664:	f7ff ffb4 	bl	80035d0 <HAL_LTDC_ErrorCallback>
 8003668:	e7c6      	b.n	80035f8 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800366a:	6822      	ldr	r2, [r4, #0]
 800366c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	2301      	movs	r3, #1
 8003678:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800367a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800367e:	2300      	movs	r3, #0
 8003680:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8003684:	4620      	mov	r0, r4
 8003686:	f7ff ffa4 	bl	80035d2 <HAL_LTDC_LineEventCallback>
 800368a:	e7bb      	b.n	8003604 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003690:	f023 0308 	bic.w	r3, r3, #8
 8003694:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800369c:	2301      	movs	r3, #1
 800369e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80036a2:	2300      	movs	r3, #0
 80036a4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80036a8:	4620      	mov	r0, r4
 80036aa:	f7ff ff93 	bl	80035d4 <HAL_LTDC_ReloadEventCallback>
}
 80036ae:	e7af      	b.n	8003610 <HAL_LTDC_IRQHandler+0x3a>

080036b0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80036b0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d027      	beq.n	8003708 <HAL_LTDC_ConfigLayer+0x58>
{
 80036b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036bc:	4606      	mov	r6, r0
 80036be:	460f      	mov	r7, r1
 80036c0:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80036c2:	f04f 0801 	mov.w	r8, #1
 80036c6:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80036d0:	2434      	movs	r4, #52	; 0x34
 80036d2:	fb04 0402 	mla	r4, r4, r2, r0
 80036d6:	3438      	adds	r4, #56	; 0x38
 80036d8:	460d      	mov	r5, r1
 80036da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80036ea:	4662      	mov	r2, ip
 80036ec:	4639      	mov	r1, r7
 80036ee:	4630      	mov	r0, r6
 80036f0:	f7ff fe1d 	bl	800332e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80036f4:	6833      	ldr	r3, [r6, #0]
 80036f6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80036fa:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80036fe:	2000      	movs	r0, #0
 8003700:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8003708:	2002      	movs	r0, #2
}
 800370a:	4770      	bx	lr

0800370c <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 800370c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003710:	2b01      	cmp	r3, #1
 8003712:	d011      	beq.n	8003738 <HAL_LTDC_EnableDither+0x2c>
 8003714:	2201      	movs	r2, #1
 8003716:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800371a:	2302      	movs	r3, #2
 800371c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003720:	4906      	ldr	r1, [pc, #24]	; (800373c <HAL_LTDC_EnableDither+0x30>)
 8003722:	698b      	ldr	r3, [r1, #24]
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	618b      	str	r3, [r1, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800372a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800372e:	2300      	movs	r3, #0
 8003730:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8003734:	4618      	mov	r0, r3
 8003736:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8003738:	2002      	movs	r0, #2
}
 800373a:	4770      	bx	lr
 800373c:	40016800 	.word	0x40016800

08003740 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003740:	2800      	cmp	r0, #0
 8003742:	f000 81df 	beq.w	8003b04 <HAL_RCC_OscConfig+0x3c4>
{
 8003746:	b570      	push	{r4, r5, r6, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374c:	6803      	ldr	r3, [r0, #0]
 800374e:	f013 0f01 	tst.w	r3, #1
 8003752:	d03b      	beq.n	80037cc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003754:	4ba6      	ldr	r3, [pc, #664]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b04      	cmp	r3, #4
 800375e:	d02c      	beq.n	80037ba <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003760:	4ba3      	ldr	r3, [pc, #652]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003768:	2b08      	cmp	r3, #8
 800376a:	d021      	beq.n	80037b0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d04f      	beq.n	8003814 <HAL_RCC_OscConfig+0xd4>
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d052      	beq.n	8003820 <HAL_RCC_OscConfig+0xe0>
 800377a:	4b9d      	ldr	r3, [pc, #628]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800378a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d050      	beq.n	8003834 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fe fb97 	bl	8001ec4 <HAL_GetTick>
 8003796:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003798:	4b95      	ldr	r3, [pc, #596]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037a0:	d114      	bne.n	80037cc <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a2:	f7fe fb8f 	bl	8001ec4 <HAL_GetTick>
 80037a6:	1b40      	subs	r0, r0, r5
 80037a8:	2864      	cmp	r0, #100	; 0x64
 80037aa:	d9f5      	bls.n	8003798 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80037ac:	2003      	movs	r0, #3
 80037ae:	e1b0      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b0:	4b8f      	ldr	r3, [pc, #572]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80037b8:	d0d8      	beq.n	800376c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ba:	4b8d      	ldr	r3, [pc, #564]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037c2:	d003      	beq.n	80037cc <HAL_RCC_OscConfig+0x8c>
 80037c4:	6863      	ldr	r3, [r4, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 819e 	beq.w	8003b08 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f013 0f02 	tst.w	r3, #2
 80037d2:	d054      	beq.n	800387e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037d4:	4b86      	ldr	r3, [pc, #536]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f013 0f0c 	tst.w	r3, #12
 80037dc:	d03e      	beq.n	800385c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037de:	4b84      	ldr	r3, [pc, #528]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d033      	beq.n	8003852 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ea:	68e3      	ldr	r3, [r4, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d067      	beq.n	80038c0 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f0:	4b80      	ldr	r3, [pc, #512]	; (80039f4 <HAL_RCC_OscConfig+0x2b4>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fe fb65 	bl	8001ec4 <HAL_GetTick>
 80037fa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	4b7c      	ldr	r3, [pc, #496]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f013 0f02 	tst.w	r3, #2
 8003804:	d153      	bne.n	80038ae <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003806:	f7fe fb5d 	bl	8001ec4 <HAL_GetTick>
 800380a:	1b40      	subs	r0, r0, r5
 800380c:	2802      	cmp	r0, #2
 800380e:	d9f5      	bls.n	80037fc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003810:	2003      	movs	r0, #3
 8003812:	e17e      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003814:	4a76      	ldr	r2, [pc, #472]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e7b5      	b.n	800378c <HAL_RCC_OscConfig+0x4c>
 8003820:	4b73      	ldr	r3, [pc, #460]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e7ab      	b.n	800378c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003834:	f7fe fb46 	bl	8001ec4 <HAL_GetTick>
 8003838:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	4b6d      	ldr	r3, [pc, #436]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003842:	d0c3      	beq.n	80037cc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003844:	f7fe fb3e 	bl	8001ec4 <HAL_GetTick>
 8003848:	1b40      	subs	r0, r0, r5
 800384a:	2864      	cmp	r0, #100	; 0x64
 800384c:	d9f5      	bls.n	800383a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800384e:	2003      	movs	r0, #3
 8003850:	e15f      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003852:	4b67      	ldr	r3, [pc, #412]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800385a:	d1c6      	bne.n	80037ea <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385c:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f013 0f02 	tst.w	r3, #2
 8003864:	d003      	beq.n	800386e <HAL_RCC_OscConfig+0x12e>
 8003866:	68e3      	ldr	r3, [r4, #12]
 8003868:	2b01      	cmp	r3, #1
 800386a:	f040 814f 	bne.w	8003b0c <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4a60      	ldr	r2, [pc, #384]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003870:	6813      	ldr	r3, [r2, #0]
 8003872:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003876:	6921      	ldr	r1, [r4, #16]
 8003878:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800387c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	f013 0f08 	tst.w	r3, #8
 8003884:	d040      	beq.n	8003908 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003886:	6963      	ldr	r3, [r4, #20]
 8003888:	b363      	cbz	r3, 80038e4 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388a:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fe fb18 	bl	8001ec4 <HAL_GetTick>
 8003894:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	4b56      	ldr	r3, [pc, #344]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	f013 0f02 	tst.w	r3, #2
 800389e:	d133      	bne.n	8003908 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a0:	f7fe fb10 	bl	8001ec4 <HAL_GetTick>
 80038a4:	1b40      	subs	r0, r0, r5
 80038a6:	2802      	cmp	r0, #2
 80038a8:	d9f5      	bls.n	8003896 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 80038aa:	2003      	movs	r0, #3
 80038ac:	e131      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ae:	4a50      	ldr	r2, [pc, #320]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038b6:	6921      	ldr	r1, [r4, #16]
 80038b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e7de      	b.n	800387e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80038c0:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <HAL_RCC_OscConfig+0x2b4>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038c6:	f7fe fafd 	bl	8001ec4 <HAL_GetTick>
 80038ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038cc:	4b48      	ldr	r3, [pc, #288]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f013 0f02 	tst.w	r3, #2
 80038d4:	d0d3      	beq.n	800387e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fe faf5 	bl	8001ec4 <HAL_GetTick>
 80038da:	1b40      	subs	r0, r0, r5
 80038dc:	2802      	cmp	r0, #2
 80038de:	d9f5      	bls.n	80038cc <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80038e0:	2003      	movs	r0, #3
 80038e2:	e116      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e4:	4b44      	ldr	r3, [pc, #272]	; (80039f8 <HAL_RCC_OscConfig+0x2b8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fe faeb 	bl	8001ec4 <HAL_GetTick>
 80038ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f4:	f013 0f02 	tst.w	r3, #2
 80038f8:	d006      	beq.n	8003908 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fe fae3 	bl	8001ec4 <HAL_GetTick>
 80038fe:	1b40      	subs	r0, r0, r5
 8003900:	2802      	cmp	r0, #2
 8003902:	d9f5      	bls.n	80038f0 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8003904:	2003      	movs	r0, #3
 8003906:	e104      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	f013 0f04 	tst.w	r3, #4
 800390e:	d078      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003910:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003918:	d10d      	bne.n	8003936 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 8003920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003922:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003932:	2501      	movs	r5, #1
 8003934:	e000      	b.n	8003938 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8003936:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_RCC_OscConfig+0x2bc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003940:	d021      	beq.n	8003986 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003942:	68a3      	ldr	r3, [r4, #8]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d032      	beq.n	80039ae <HAL_RCC_OscConfig+0x26e>
 8003948:	2b05      	cmp	r3, #5
 800394a:	d036      	beq.n	80039ba <HAL_RCC_OscConfig+0x27a>
 800394c:	4b28      	ldr	r3, [pc, #160]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 800394e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	671a      	str	r2, [r3, #112]	; 0x70
 8003956:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003958:	f022 0204 	bic.w	r2, r2, #4
 800395c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d034      	beq.n	80039ce <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe faae 	bl	8001ec4 <HAL_GetTick>
 8003968:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	f013 0f02 	tst.w	r3, #2
 8003972:	d145      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fe faa6 	bl	8001ec4 <HAL_GetTick>
 8003978:	1b80      	subs	r0, r0, r6
 800397a:	f241 3388 	movw	r3, #5000	; 0x1388
 800397e:	4298      	cmp	r0, r3
 8003980:	d9f3      	bls.n	800396a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8003982:	2003      	movs	r0, #3
 8003984:	e0c5      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003986:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <HAL_RCC_OscConfig+0x2bc>)
 8003988:	6813      	ldr	r3, [r2, #0]
 800398a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003990:	f7fe fa98 	bl	8001ec4 <HAL_GetTick>
 8003994:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003996:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_OscConfig+0x2bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800399e:	d1d0      	bne.n	8003942 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a0:	f7fe fa90 	bl	8001ec4 <HAL_GetTick>
 80039a4:	1b80      	subs	r0, r0, r6
 80039a6:	2802      	cmp	r0, #2
 80039a8:	d9f5      	bls.n	8003996 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80039aa:	2003      	movs	r0, #3
 80039ac:	e0b1      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80039b0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
 80039b8:	e7d1      	b.n	800395e <HAL_RCC_OscConfig+0x21e>
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80039bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039be:	f042 0204 	orr.w	r2, r2, #4
 80039c2:	671a      	str	r2, [r3, #112]	; 0x70
 80039c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	671a      	str	r2, [r3, #112]	; 0x70
 80039cc:	e7c7      	b.n	800395e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fe fa79 	bl	8001ec4 <HAL_GetTick>
 80039d2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_OscConfig+0x2b0>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	f013 0f02 	tst.w	r3, #2
 80039dc:	d010      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fe fa71 	bl	8001ec4 <HAL_GetTick>
 80039e2:	1b80      	subs	r0, r0, r6
 80039e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80039e8:	4298      	cmp	r0, r3
 80039ea:	d9f3      	bls.n	80039d4 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80039ec:	2003      	movs	r0, #3
 80039ee:	e090      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	42470000 	.word	0x42470000
 80039f8:	42470e80 	.word	0x42470e80
 80039fc:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a00:	b9ed      	cbnz	r5, 8003a3e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a02:	69a3      	ldr	r3, [r4, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8083 	beq.w	8003b10 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a0a:	4a49      	ldr	r2, [pc, #292]	; (8003b30 <HAL_RCC_OscConfig+0x3f0>)
 8003a0c:	6892      	ldr	r2, [r2, #8]
 8003a0e:	f002 020c 	and.w	r2, r2, #12
 8003a12:	2a08      	cmp	r2, #8
 8003a14:	d051      	beq.n	8003aba <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d017      	beq.n	8003a4a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <HAL_RCC_OscConfig+0x3f4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe fa50 	bl	8001ec4 <HAL_GetTick>
 8003a24:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b42      	ldr	r3, [pc, #264]	; (8003b30 <HAL_RCC_OscConfig+0x3f0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a2e:	d042      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe fa48 	bl	8001ec4 <HAL_GetTick>
 8003a34:	1b00      	subs	r0, r0, r4
 8003a36:	2802      	cmp	r0, #2
 8003a38:	d9f5      	bls.n	8003a26 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	e069      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3e:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <HAL_RCC_OscConfig+0x3f0>)
 8003a40:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a46:	6413      	str	r3, [r2, #64]	; 0x40
 8003a48:	e7db      	b.n	8003a02 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8003a4a:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <HAL_RCC_OscConfig+0x3f4>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a50:	f7fe fa38 	bl	8001ec4 <HAL_GetTick>
 8003a54:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <HAL_RCC_OscConfig+0x3f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a5e:	d006      	beq.n	8003a6e <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe fa30 	bl	8001ec4 <HAL_GetTick>
 8003a64:	1b40      	subs	r0, r0, r5
 8003a66:	2802      	cmp	r0, #2
 8003a68:	d9f5      	bls.n	8003a56 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8003a6a:	2003      	movs	r0, #3
 8003a6c:	e051      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6e:	69e3      	ldr	r3, [r4, #28]
 8003a70:	6a22      	ldr	r2, [r4, #32]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a76:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003a7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a7c:	0852      	lsrs	r2, r2, #1
 8003a7e:	3a01      	subs	r2, #1
 8003a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003a8a:	4a29      	ldr	r2, [pc, #164]	; (8003b30 <HAL_RCC_OscConfig+0x3f0>)
 8003a8c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a8e:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <HAL_RCC_OscConfig+0x3f4>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a94:	f7fe fa16 	bl	8001ec4 <HAL_GetTick>
 8003a98:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCC_OscConfig+0x3f0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe fa0e 	bl	8001ec4 <HAL_GetTick>
 8003aa8:	1b00      	subs	r0, r0, r4
 8003aaa:	2802      	cmp	r0, #2
 8003aac:	d9f5      	bls.n	8003a9a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003aae:	2003      	movs	r0, #3
 8003ab0:	e02f      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e02d      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	e02b      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d02b      	beq.n	8003b16 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <HAL_RCC_OscConfig+0x3f0>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003ac6:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac8:	4291      	cmp	r1, r2
 8003aca:	d126      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003acc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ad0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	428a      	cmp	r2, r1
 8003ad4:	d123      	bne.n	8003b1e <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003adc:	401a      	ands	r2, r3
 8003ade:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003ae2:	d11e      	bne.n	8003b22 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003ae8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003aea:	0852      	lsrs	r2, r2, #1
 8003aec:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aee:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003af2:	d118      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003af8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003afa:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003afe:	d114      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8003b00:	2000      	movs	r0, #0
 8003b02:	e006      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8003b04:	2001      	movs	r0, #1
}
 8003b06:	4770      	bx	lr
        return HAL_ERROR;
 8003b08:	2001      	movs	r0, #1
 8003b0a:	e002      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8003b10:	2000      	movs	r0, #0
}
 8003b12:	b002      	add	sp, #8
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003b16:	2001      	movs	r0, #1
 8003b18:	e7fb      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	e7f9      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
 8003b1e:	2001      	movs	r0, #1
 8003b20:	e7f7      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
 8003b22:	2001      	movs	r0, #1
 8003b24:	e7f5      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
 8003b26:	2001      	movs	r0, #1
 8003b28:	e7f3      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	e7f1      	b.n	8003b12 <HAL_RCC_OscConfig+0x3d2>
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
 8003b34:	42470060 	.word	0x42470060

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d053      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0xb6>
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d153      	bne.n	8003bf2 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003b58:	d028      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003b62:	0158      	lsls	r0, r3, #5
 8003b64:	2100      	movs	r1, #0
 8003b66:	1ac0      	subs	r0, r0, r3
 8003b68:	f161 0100 	sbc.w	r1, r1, #0
 8003b6c:	018e      	lsls	r6, r1, #6
 8003b6e:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8003b72:	0187      	lsls	r7, r0, #6
 8003b74:	1a3c      	subs	r4, r7, r0
 8003b76:	eb66 0501 	sbc.w	r5, r6, r1
 8003b7a:	00e9      	lsls	r1, r5, #3
 8003b7c:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8003b80:	00e0      	lsls	r0, r4, #3
 8003b82:	18c0      	adds	r0, r0, r3
 8003b84:	f141 0100 	adc.w	r1, r1, #0
 8003b88:	024b      	lsls	r3, r1, #9
 8003b8a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003b8e:	0244      	lsls	r4, r0, #9
 8003b90:	4620      	mov	r0, r4
 8003b92:	4619      	mov	r1, r3
 8003b94:	2300      	movs	r3, #0
 8003b96:	f7fc fb7b 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003ba6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003baa:	e023      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003bb4:	015c      	lsls	r4, r3, #5
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	1ae4      	subs	r4, r4, r3
 8003bba:	f165 0500 	sbc.w	r5, r5, #0
 8003bbe:	01ae      	lsls	r6, r5, #6
 8003bc0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8003bc4:	01a7      	lsls	r7, r4, #6
 8003bc6:	1b38      	subs	r0, r7, r4
 8003bc8:	eb66 0105 	sbc.w	r1, r6, r5
 8003bcc:	00cc      	lsls	r4, r1, #3
 8003bce:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8003bd2:	00c5      	lsls	r5, r0, #3
 8003bd4:	18e8      	adds	r0, r5, r3
 8003bd6:	f144 0100 	adc.w	r1, r4, #0
 8003bda:	028b      	lsls	r3, r1, #10
 8003bdc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003be0:	0284      	lsls	r4, r0, #10
 8003be2:	4620      	mov	r0, r4
 8003be4:	4619      	mov	r1, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	f7fc fb52 	bl	8000290 <__aeabi_uldivmod>
 8003bec:	e7d5      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8003bee:	4803      	ldr	r0, [pc, #12]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf2:	4803      	ldr	r0, [pc, #12]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	007a1200 	.word	0x007a1200
 8003c00:	00f42400 	.word	0x00f42400

08003c04 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003c04:	2800      	cmp	r0, #0
 8003c06:	f000 809b 	beq.w	8003d40 <HAL_RCC_ClockConfig+0x13c>
{
 8003c0a:	b570      	push	{r4, r5, r6, lr}
 8003c0c:	460d      	mov	r5, r1
 8003c0e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b4f      	ldr	r3, [pc, #316]	; (8003d50 <HAL_RCC_ClockConfig+0x14c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	d208      	bcs.n	8003c2e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1c:	b2cb      	uxtb	r3, r1
 8003c1e:	4a4c      	ldr	r2, [pc, #304]	; (8003d50 <HAL_RCC_ClockConfig+0x14c>)
 8003c20:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	428b      	cmp	r3, r1
 8003c2a:	f040 808b 	bne.w	8003d44 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	f013 0f02 	tst.w	r3, #2
 8003c34:	d017      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c36:	f013 0f04 	tst.w	r3, #4
 8003c3a:	d004      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c3c:	4a45      	ldr	r2, [pc, #276]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003c3e:	6893      	ldr	r3, [r2, #8]
 8003c40:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c44:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	f013 0f08 	tst.w	r3, #8
 8003c4c:	d004      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c4e:	4a41      	ldr	r2, [pc, #260]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003c50:	6893      	ldr	r3, [r2, #8]
 8003c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c56:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c58:	4a3e      	ldr	r2, [pc, #248]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003c5a:	6893      	ldr	r3, [r2, #8]
 8003c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c60:	68a1      	ldr	r1, [r4, #8]
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	f013 0f01 	tst.w	r3, #1
 8003c6c:	d032      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	6863      	ldr	r3, [r4, #4]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d021      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c74:	1e9a      	subs	r2, r3, #2
 8003c76:	2a01      	cmp	r2, #1
 8003c78:	d925      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	4a36      	ldr	r2, [pc, #216]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	f012 0f02 	tst.w	r2, #2
 8003c82:	d061      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c84:	4933      	ldr	r1, [pc, #204]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003c86:	688a      	ldr	r2, [r1, #8]
 8003c88:	f022 0203 	bic.w	r2, r2, #3
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003c90:	f7fe f918 	bl	8001ec4 <HAL_GetTick>
 8003c94:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	6862      	ldr	r2, [r4, #4]
 8003ca0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca6:	f7fe f90d 	bl	8001ec4 <HAL_GetTick>
 8003caa:	1b80      	subs	r0, r0, r6
 8003cac:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cb0:	4298      	cmp	r0, r3
 8003cb2:	d9f0      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	e042      	b.n	8003d3e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003cc0:	d1e0      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	e03b      	b.n	8003d3e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003cce:	d1d9      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	e034      	b.n	8003d3e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCC_ClockConfig+0x14c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	42ab      	cmp	r3, r5
 8003cde:	d907      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce0:	b2ea      	uxtb	r2, r5
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCC_ClockConfig+0x14c>)
 8003ce4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	42ab      	cmp	r3, r5
 8003cee:	d12d      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	f013 0f04 	tst.w	r3, #4
 8003cf6:	d006      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf8:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003cfa:	6893      	ldr	r3, [r2, #8]
 8003cfc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003d00:	68e1      	ldr	r1, [r4, #12]
 8003d02:	430b      	orrs	r3, r1
 8003d04:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	f013 0f08 	tst.w	r3, #8
 8003d0c:	d007      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0e:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003d10:	6893      	ldr	r3, [r2, #8]
 8003d12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d16:	6921      	ldr	r1, [r4, #16]
 8003d18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d1c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1e:	f7ff ff0b 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCC_ClockConfig+0x150>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d2a:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <HAL_RCC_ClockConfig+0x154>)
 8003d2c:	5cd3      	ldrb	r3, [r2, r3]
 8003d2e:	40d8      	lsrs	r0, r3
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x158>)
 8003d32:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_ClockConfig+0x15c>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	f7fd ffe2 	bl	8001d00 <HAL_InitTick>
  return HAL_OK;
 8003d3c:	2000      	movs	r0, #0
}
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003d40:	2001      	movs	r0, #1
}
 8003d42:	4770      	bx	lr
      return HAL_ERROR;
 8003d44:	2001      	movs	r0, #1
 8003d46:	e7fa      	b.n	8003d3e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003d48:	2001      	movs	r0, #1
 8003d4a:	e7f8      	b.n	8003d3e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	e7f6      	b.n	8003d3e <HAL_RCC_ClockConfig+0x13a>
 8003d50:	40023c00 	.word	0x40023c00
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08009ba8 	.word	0x08009ba8
 8003d5c:	2000004c 	.word	0x2000004c
 8003d60:	20000054 	.word	0x20000054

08003d64 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003d64:	4b01      	ldr	r3, [pc, #4]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x8>)
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	2000004c 	.word	0x2000004c

08003d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d70:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d72:	f7ff fff7 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d76:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d7e:	4a03      	ldr	r2, [pc, #12]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d80:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d82:	40d8      	lsrs	r0, r3
 8003d84:	bd08      	pop	{r3, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08009bb8 	.word	0x08009bb8

08003d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d90:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d92:	f7ff ffe7 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d9e:	4a03      	ldr	r2, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003da0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003da2:	40d8      	lsrs	r0, r3
 8003da4:	bd08      	pop	{r3, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08009bb8 	.word	0x08009bb8

08003db0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003db0:	230f      	movs	r3, #15
 8003db2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_GetClockConfig+0x34>)
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	f002 0203 	and.w	r2, r2, #3
 8003dbc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003dc4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003dcc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	08db      	lsrs	r3, r3, #3
 8003dd2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003dd6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCC_GetClockConfig+0x38>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	600b      	str	r3, [r1, #0]
}
 8003de2:	4770      	bx	lr
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40023c00 	.word	0x40023c00

08003dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dec:	b530      	push	{r4, r5, lr}
 8003dee:	b083      	sub	sp, #12
 8003df0:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003df2:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003df4:	f013 0f43 	tst.w	r3, #67	; 0x43
 8003df8:	d114      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x38>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f013 0f0c 	tst.w	r3, #12
 8003e00:	d169      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	f013 0f20 	tst.w	r3, #32
 8003e08:	f040 80be 	bne.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	f013 0f10 	tst.w	r3, #16
 8003e12:	f000 8120 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e16:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8003e1a:	4b90      	ldr	r3, [pc, #576]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003e1c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003e1e:	2000      	movs	r0, #0
}
 8003e20:	b003      	add	sp, #12
 8003e22:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003e24:	4b8e      	ldr	r3, [pc, #568]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003e2a:	f7fe f84b 	bl	8001ec4 <HAL_GetTick>
 8003e2e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e30:	4b8c      	ldr	r3, [pc, #560]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003e38:	d006      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e3a:	f7fe f843 	bl	8001ec4 <HAL_GetTick>
 8003e3e:	1b43      	subs	r3, r0, r5
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d9f5      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 8003e44:	2003      	movs	r0, #3
 8003e46:	e7eb      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	f013 0f01 	tst.w	r3, #1
 8003e4e:	d007      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e50:	6862      	ldr	r2, [r4, #4]
 8003e52:	68a3      	ldr	r3, [r4, #8]
 8003e54:	071b      	lsls	r3, r3, #28
 8003e56:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003e5a:	4a82      	ldr	r2, [pc, #520]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003e5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	f013 0f02 	tst.w	r3, #2
 8003e66:	d015      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e68:	4a7e      	ldr	r2, [pc, #504]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003e6a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003e6e:	6860      	ldr	r0, [r4, #4]
 8003e70:	68e3      	ldr	r3, [r4, #12]
 8003e72:	061b      	lsls	r3, r3, #24
 8003e74:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003e78:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e82:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003e86:	f023 031f 	bic.w	r3, r3, #31
 8003e8a:	69e1      	ldr	r1, [r4, #28]
 8003e8c:	3901      	subs	r1, #1
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e9c:	6862      	ldr	r2, [r4, #4]
 8003e9e:	68e3      	ldr	r3, [r4, #12]
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003ea6:	68a2      	ldr	r2, [r4, #8]
 8003ea8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003eac:	4a6d      	ldr	r2, [pc, #436]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003eae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003eb2:	4b6b      	ldr	r3, [pc, #428]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003eb8:	f7fe f804 	bl	8001ec4 <HAL_GetTick>
 8003ebc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ebe:	4b69      	ldr	r3, [pc, #420]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003ec6:	d198      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ec8:	f7fd fffc 	bl	8001ec4 <HAL_GetTick>
 8003ecc:	1b40      	subs	r0, r0, r5
 8003ece:	2802      	cmp	r0, #2
 8003ed0:	d9f5      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
        return HAL_TIMEOUT;
 8003ed2:	2003      	movs	r0, #3
 8003ed4:	e7a4      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE();
 8003ed6:	4b64      	ldr	r3, [pc, #400]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003edc:	f7fd fff2 	bl	8001ec4 <HAL_GetTick>
 8003ee0:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ee2:	4b60      	ldr	r3, [pc, #384]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003eea:	d006      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003eec:	f7fd ffea 	bl	8001ec4 <HAL_GetTick>
 8003ef0:	1b43      	subs	r3, r0, r5
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d9f5      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
        return HAL_TIMEOUT;
 8003ef6:	2003      	movs	r0, #3
 8003ef8:	e792      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	f013 0f04 	tst.w	r3, #4
 8003f00:	d016      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x144>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f02:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f04:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f08:	6920      	ldr	r0, [r4, #16]
 8003f0a:	6963      	ldr	r3, [r4, #20]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003f12:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003f16:	430b      	orrs	r3, r1
 8003f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f1c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003f20:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003f24:	6a21      	ldr	r1, [r4, #32]
 8003f26:	3901      	subs	r1, #1
 8003f28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	f013 0f08 	tst.w	r3, #8
 8003f36:	d014      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f38:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f3e:	6921      	ldr	r1, [r4, #16]
 8003f40:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003f44:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003f48:	69a1      	ldr	r1, [r4, #24]
 8003f4a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003f4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f52:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003f56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003f62:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003f68:	f7fd ffac 	bl	8001ec4 <HAL_GetTick>
 8003f6c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003f76:	f47f af44 	bne.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f7a:	f7fd ffa3 	bl	8001ec4 <HAL_GetTick>
 8003f7e:	1b40      	subs	r0, r0, r5
 8003f80:	2802      	cmp	r0, #2
 8003f82:	d9f4      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x182>
        return HAL_TIMEOUT;
 8003f84:	2003      	movs	r0, #3
 8003f86:	e74b      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	4b35      	ldr	r3, [pc, #212]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003fa0:	4a32      	ldr	r2, [pc, #200]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003faa:	f7fd ff8b 	bl	8001ec4 <HAL_GetTick>
 8003fae:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fb0:	4b2e      	ldr	r3, [pc, #184]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fd ff83 	bl	8001ec4 <HAL_GetTick>
 8003fbe:	1b40      	subs	r0, r0, r5
 8003fc0:	2802      	cmp	r0, #2
 8003fc2:	d9f5      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        return HAL_TIMEOUT;
 8003fc4:	2003      	movs	r0, #3
 8003fc6:	e72b      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fcc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003fd0:	d012      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8003fd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003fd4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d00d      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fdc:	4b21      	ldr	r3, [pc, #132]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fe0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe4:	4922      	ldr	r1, [pc, #136]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	2000      	movs	r0, #0
 8003fec:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8003fee:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f013 0f01 	tst.w	r3, #1
 8003ff6:	d112      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ffa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003ffe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004002:	d01d      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004004:	4a17      	ldr	r2, [pc, #92]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004006:	6893      	ldr	r3, [r2, #8]
 8004008:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800400c:	6093      	str	r3, [r2, #8]
 800400e:	4915      	ldr	r1, [pc, #84]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004010:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004012:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004014:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004018:	4313      	orrs	r3, r2
 800401a:	670b      	str	r3, [r1, #112]	; 0x70
 800401c:	e6f6      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 800401e:	f7fd ff51 	bl	8001ec4 <HAL_GetTick>
 8004022:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f013 0f02 	tst.w	r3, #2
 800402c:	d1e4      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fd ff49 	bl	8001ec4 <HAL_GetTick>
 8004032:	1b40      	subs	r0, r0, r5
 8004034:	f241 3388 	movw	r3, #5000	; 0x1388
 8004038:	4298      	cmp	r0, r3
 800403a:	d9f3      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x238>
            return HAL_TIMEOUT;
 800403c:	2003      	movs	r0, #3
 800403e:	e6ef      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004040:	4908      	ldr	r1, [pc, #32]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004042:	688a      	ldr	r2, [r1, #8]
 8004044:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004048:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800404c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]
 8004054:	e7db      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x222>
  return HAL_OK;
 8004056:	2000      	movs	r0, #0
 8004058:	e6e2      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800405a:	bf00      	nop
 800405c:	424711e0 	.word	0x424711e0
 8004060:	42470068 	.word	0x42470068
 8004064:	40023800 	.word	0x40023800
 8004068:	42470070 	.word	0x42470070
 800406c:	40007000 	.word	0x40007000
 8004070:	42470e40 	.word	0x42470e40

08004074 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004074:	b1e0      	cbz	r0, 80040b0 <HAL_SDRAM_Init+0x3c>
{   
 8004076:	b538      	push	{r3, r4, r5, lr}
 8004078:	460d      	mov	r5, r1
 800407a:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800407c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004080:	b18b      	cbz	r3, 80040a6 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004082:	2302      	movs	r3, #2
 8004084:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004088:	4621      	mov	r1, r4
 800408a:	f851 0b04 	ldr.w	r0, [r1], #4
 800408e:	f000 ff98 	bl	8004fc2 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004092:	6862      	ldr	r2, [r4, #4]
 8004094:	4629      	mov	r1, r5
 8004096:	6820      	ldr	r0, [r4, #0]
 8004098:	f000 ffcf 	bl	800503a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800409c:	2301      	movs	r3, #1
 800409e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 80040a2:	2000      	movs	r0, #0
}
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80040a6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80040aa:	f7fd fe25 	bl	8001cf8 <HAL_SDRAM_MspInit>
 80040ae:	e7e8      	b.n	8004082 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 80040b0:	2001      	movs	r0, #1
}
 80040b2:	4770      	bx	lr

080040b4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80040b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80040bc:	b2c0      	uxtb	r0, r0
 80040be:	2802      	cmp	r0, #2
 80040c0:	d00d      	beq.n	80040de <HAL_SDRAM_SendCommand+0x2a>
 80040c2:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80040c4:	2302      	movs	r3, #2
 80040c6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	f001 f800 	bl	80050d0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d004      	beq.n	80040e0 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80040dc:	2000      	movs	r0, #0
}
 80040de:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80040e0:	2305      	movs	r3, #5
 80040e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 80040e6:	2000      	movs	r0, #0
 80040e8:	e7f9      	b.n	80040de <HAL_SDRAM_SendCommand+0x2a>

080040ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80040ea:	b510      	push	{r4, lr}
 80040ec:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80040ee:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80040f2:	b2c0      	uxtb	r0, r0
 80040f4:	2802      	cmp	r0, #2
 80040f6:	d009      	beq.n	800410c <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80040f8:	2302      	movs	r3, #2
 80040fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	f001 f80e 	bl	8005120 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004104:	2301      	movs	r3, #1
 8004106:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 800410a:	2000      	movs	r0, #0
}
 800410c:	bd10      	pop	{r4, pc}
	...

08004110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	4605      	mov	r5, r0
 8004118:	4688      	mov	r8, r1
 800411a:	4617      	mov	r7, r2
 800411c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800411e:	f7fd fed1 	bl	8001ec4 <HAL_GetTick>
 8004122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004124:	1a1b      	subs	r3, r3, r0
 8004126:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800412a:	f7fd fecb 	bl	8001ec4 <HAL_GetTick>
 800412e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004130:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004138:	fb09 f303 	mul.w	r3, r9, r3
 800413c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	689c      	ldr	r4, [r3, #8]
 8004142:	ea38 0304 	bics.w	r3, r8, r4
 8004146:	bf0c      	ite	eq
 8004148:	2401      	moveq	r4, #1
 800414a:	2400      	movne	r4, #0
 800414c:	42bc      	cmp	r4, r7
 800414e:	d040      	beq.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004150:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004154:	d0f3      	beq.n	800413e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004156:	f7fd feb5 	bl	8001ec4 <HAL_GetTick>
 800415a:	eba0 000a 	sub.w	r0, r0, sl
 800415e:	4548      	cmp	r0, r9
 8004160:	d20a      	bcs.n	8004178 <SPI_WaitFlagStateUntilTimeout+0x68>
 8004162:	f1b9 0f00 	cmp.w	r9, #0
 8004166:	d007      	beq.n	8004178 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004168:	9a01      	ldr	r2, [sp, #4]
 800416a:	b102      	cbz	r2, 800416e <SPI_WaitFlagStateUntilTimeout+0x5e>
 800416c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800416e:	9b01      	ldr	r3, [sp, #4]
 8004170:	3b01      	subs	r3, #1
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	4691      	mov	r9, r2
 8004176:	e7e2      	b.n	800413e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004178:	682a      	ldr	r2, [r5, #0]
 800417a:	6853      	ldr	r3, [r2, #4]
 800417c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004180:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004182:	686b      	ldr	r3, [r5, #4]
 8004184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004188:	d00b      	beq.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800418a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004190:	d014      	beq.n	80041bc <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8004192:	2301      	movs	r3, #1
 8004194:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004198:	2300      	movs	r3, #0
 800419a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 800419e:	2003      	movs	r0, #3
 80041a0:	e018      	b.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a2:	68ab      	ldr	r3, [r5, #8]
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a8:	d002      	beq.n	80041b0 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d1ec      	bne.n	800418a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80041b0:	682a      	ldr	r2, [r5, #0]
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e7e6      	b.n	800418a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80041bc:	682a      	ldr	r2, [r5, #0]
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	682a      	ldr	r2, [r5, #0]
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e7df      	b.n	8004192 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 80041d2:	2000      	movs	r0, #0
}
 80041d4:	b002      	add	sp, #8
 80041d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041da:	bf00      	nop
 80041dc:	2000004c 	.word	0x2000004c

080041e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b530      	push	{r4, r5, lr}
 80041e2:	b085      	sub	sp, #20
 80041e4:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041e6:	4b16      	ldr	r3, [pc, #88]	; (8004240 <SPI_EndRxTxTransaction+0x60>)
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	4b16      	ldr	r3, [pc, #88]	; (8004244 <SPI_EndRxTxTransaction+0x64>)
 80041ec:	fba3 3000 	umull	r3, r0, r3, r0
 80041f0:	0d40      	lsrs	r0, r0, #21
 80041f2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80041f6:	fb05 f000 	mul.w	r0, r5, r0
 80041fa:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041fc:	6863      	ldr	r3, [r4, #4]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004202:	d00b      	beq.n	800421c <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004204:	9b03      	ldr	r3, [sp, #12]
 8004206:	b1bb      	cbz	r3, 8004238 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004208:	9b03      	ldr	r3, [sp, #12]
 800420a:	3b01      	subs	r3, #1
 800420c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004216:	d1f5      	bne.n	8004204 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8004218:	2000      	movs	r0, #0
 800421a:	e00e      	b.n	800423a <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800421c:	9200      	str	r2, [sp, #0]
 800421e:	460b      	mov	r3, r1
 8004220:	2200      	movs	r2, #0
 8004222:	2180      	movs	r1, #128	; 0x80
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff ff73 	bl	8004110 <SPI_WaitFlagStateUntilTimeout>
 800422a:	b130      	cbz	r0, 800423a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800422e:	f043 0320 	orr.w	r3, r3, #32
 8004232:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004234:	2003      	movs	r0, #3
 8004236:	e000      	b.n	800423a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004238:	2000      	movs	r0, #0
}
 800423a:	b005      	add	sp, #20
 800423c:	bd30      	pop	{r4, r5, pc}
 800423e:	bf00      	nop
 8004240:	2000004c 	.word	0x2000004c
 8004244:	165e9f81 	.word	0x165e9f81

08004248 <SPI_EndRxTransaction>:
{
 8004248:	b510      	push	{r4, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	4604      	mov	r4, r0
 800424e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004250:	6841      	ldr	r1, [r0, #4]
 8004252:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004256:	d014      	beq.n	8004282 <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004258:	6861      	ldr	r1, [r4, #4]
 800425a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800425e:	d12a      	bne.n	80042b6 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004260:	68a1      	ldr	r1, [r4, #8]
 8004262:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004266:	d019      	beq.n	800429c <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004268:	9200      	str	r2, [sp, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	4620      	mov	r0, r4
 8004270:	f7ff ff4e 	bl	8004110 <SPI_WaitFlagStateUntilTimeout>
 8004274:	b330      	cbz	r0, 80042c4 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004276:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004278:	f043 0320 	orr.w	r3, r3, #32
 800427c:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800427e:	2003      	movs	r0, #3
 8004280:	e020      	b.n	80042c4 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004282:	6881      	ldr	r1, [r0, #8]
 8004284:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004288:	d002      	beq.n	8004290 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800428e:	d1e3      	bne.n	8004258 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	6801      	ldr	r1, [r0, #0]
 8004294:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004298:	6001      	str	r1, [r0, #0]
 800429a:	e7dd      	b.n	8004258 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800429c:	9200      	str	r2, [sp, #0]
 800429e:	2200      	movs	r2, #0
 80042a0:	2101      	movs	r1, #1
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7ff ff34 	bl	8004110 <SPI_WaitFlagStateUntilTimeout>
 80042a8:	b160      	cbz	r0, 80042c4 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042ac:	f043 0320 	orr.w	r3, r3, #32
 80042b0:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80042b2:	2003      	movs	r0, #3
 80042b4:	e006      	b.n	80042c4 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042b6:	9200      	str	r2, [sp, #0]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2101      	movs	r1, #1
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff ff27 	bl	8004110 <SPI_WaitFlagStateUntilTimeout>
 80042c2:	b908      	cbnz	r0, 80042c8 <SPI_EndRxTransaction+0x80>
}
 80042c4:	b002      	add	sp, #8
 80042c6:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042ca:	f043 0320 	orr.w	r3, r3, #32
 80042ce:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80042d0:	2003      	movs	r0, #3
 80042d2:	e7f7      	b.n	80042c4 <SPI_EndRxTransaction+0x7c>

080042d4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d05a      	beq.n	800438e <HAL_SPI_Init+0xba>
{
 80042d8:	b510      	push	{r4, lr}
 80042da:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042de:	b933      	cbnz	r3, 80042ee <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042e0:	6843      	ldr	r3, [r0, #4]
 80042e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e6:	d005      	beq.n	80042f4 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61c3      	str	r3, [r0, #28]
 80042ec:	e002      	b.n	80042f4 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ee:	2300      	movs	r3, #0
 80042f0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042f2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d040      	beq.n	8004382 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004300:	2302      	movs	r3, #2
 8004302:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	6813      	ldr	r3, [r2, #0]
 800430a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800430e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004316:	68a2      	ldr	r2, [r4, #8]
 8004318:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800431c:	4313      	orrs	r3, r2
 800431e:	68e2      	ldr	r2, [r4, #12]
 8004320:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004324:	4313      	orrs	r3, r2
 8004326:	6922      	ldr	r2, [r4, #16]
 8004328:	f002 0202 	and.w	r2, r2, #2
 800432c:	4313      	orrs	r3, r2
 800432e:	6962      	ldr	r2, [r4, #20]
 8004330:	f002 0201 	and.w	r2, r2, #1
 8004334:	4313      	orrs	r3, r2
 8004336:	69a2      	ldr	r2, [r4, #24]
 8004338:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800433c:	4313      	orrs	r3, r2
 800433e:	69e2      	ldr	r2, [r4, #28]
 8004340:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004344:	4313      	orrs	r3, r2
 8004346:	6a22      	ldr	r2, [r4, #32]
 8004348:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800434c:	4313      	orrs	r3, r2
 800434e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004350:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004354:	6821      	ldr	r1, [r4, #0]
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800435a:	8b63      	ldrh	r3, [r4, #26]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004362:	f002 0210 	and.w	r2, r2, #16
 8004366:	6821      	ldr	r1, [r4, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	69d3      	ldr	r3, [r2, #28]
 8004370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004374:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004376:	2000      	movs	r0, #0
 8004378:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800437a:	2301      	movs	r3, #1
 800437c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004380:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004382:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004386:	4620      	mov	r0, r4
 8004388:	f7fd fbc8 	bl	8001b1c <HAL_SPI_MspInit>
 800438c:	e7b8      	b.n	8004300 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800438e:	2001      	movs	r0, #1
}
 8004390:	4770      	bx	lr

08004392 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8004392:	b190      	cbz	r0, 80043ba <HAL_SPI_DeInit+0x28>
{
 8004394:	b510      	push	{r4, lr}
 8004396:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8004398:	2302      	movs	r3, #2
 800439a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800439e:	6802      	ldr	r2, [r0, #0]
 80043a0:	6813      	ldr	r3, [r2, #0]
 80043a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a6:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80043a8:	f7fd fbf0 	bl	8001b8c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ac:	2000      	movs	r0, #0
 80043ae:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80043b0:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043b4:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
}
 80043b8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80043ba:	2001      	movs	r0, #1
}
 80043bc:	4770      	bx	lr

080043be <HAL_SPI_Transmit>:
{
 80043be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80043c6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	f000 80cc 	beq.w	8004568 <HAL_SPI_Transmit+0x1aa>
 80043d0:	4604      	mov	r4, r0
 80043d2:	4688      	mov	r8, r1
 80043d4:	4691      	mov	r9, r2
 80043d6:	2301      	movs	r3, #1
 80043d8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80043dc:	f7fd fd72 	bl	8001ec4 <HAL_GetTick>
 80043e0:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80043e2:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80043e6:	b2f6      	uxtb	r6, r6
 80043e8:	2e01      	cmp	r6, #1
 80043ea:	f040 80aa 	bne.w	8004542 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80043ee:	f1b8 0f00 	cmp.w	r8, #0
 80043f2:	f000 80a7 	beq.w	8004544 <HAL_SPI_Transmit+0x186>
 80043f6:	f1b9 0f00 	cmp.w	r9, #0
 80043fa:	f000 80a3 	beq.w	8004544 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043fe:	2303      	movs	r3, #3
 8004400:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004404:	2300      	movs	r3, #0
 8004406:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004408:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800440c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004410:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004414:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004416:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004418:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800441a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800441c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800441e:	68a3      	ldr	r3, [r4, #8]
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004424:	d01e      	beq.n	8004464 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800442e:	d103      	bne.n	8004438 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004436:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004438:	68e3      	ldr	r3, [r4, #12]
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443e:	d01c      	beq.n	800447a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004440:	6863      	ldr	r3, [r4, #4]
 8004442:	b113      	cbz	r3, 800444a <HAL_SPI_Transmit+0x8c>
 8004444:	f1b9 0f01 	cmp.w	r9, #1
 8004448:	d152      	bne.n	80044f0 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800444a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004452:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004454:	3301      	adds	r3, #1
 8004456:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004458:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29b      	uxth	r3, r3
 8004460:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004462:	e045      	b.n	80044f0 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8004464:	6822      	ldr	r2, [r4, #0]
 8004466:	6813      	ldr	r3, [r2, #0]
 8004468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800446e:	6822      	ldr	r2, [r4, #0]
 8004470:	6813      	ldr	r3, [r2, #0]
 8004472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	e7d5      	b.n	8004426 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447a:	6863      	ldr	r3, [r4, #4]
 800447c:	b113      	cbz	r3, 8004484 <HAL_SPI_Transmit+0xc6>
 800447e:	f1b9 0f01 	cmp.w	r9, #1
 8004482:	d116      	bne.n	80044b2 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004484:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	8812      	ldrh	r2, [r2, #0]
 800448a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800448c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800448e:	3302      	adds	r3, #2
 8004490:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004492:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29b      	uxth	r3, r3
 800449a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800449c:	e009      	b.n	80044b2 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800449e:	f7fd fd11 	bl	8001ec4 <HAL_GetTick>
 80044a2:	1bc0      	subs	r0, r0, r7
 80044a4:	42a8      	cmp	r0, r5
 80044a6:	d302      	bcc.n	80044ae <HAL_SPI_Transmit+0xf0>
 80044a8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80044ac:	d154      	bne.n	8004558 <HAL_SPI_Transmit+0x19a>
 80044ae:	2d00      	cmp	r5, #0
 80044b0:	d054      	beq.n	800455c <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 80044b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02e      	beq.n	8004518 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	f012 0f02 	tst.w	r2, #2
 80044c2:	d0ec      	beq.n	800449e <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044c6:	8812      	ldrh	r2, [r2, #0]
 80044c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044cc:	3302      	adds	r3, #2
 80044ce:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80044d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80044da:	e7ea      	b.n	80044b2 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044dc:	f7fd fcf2 	bl	8001ec4 <HAL_GetTick>
 80044e0:	1bc0      	subs	r0, r0, r7
 80044e2:	42a8      	cmp	r0, r5
 80044e4:	d302      	bcc.n	80044ec <HAL_SPI_Transmit+0x12e>
 80044e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80044ea:	d139      	bne.n	8004560 <HAL_SPI_Transmit+0x1a2>
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	d039      	beq.n	8004564 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 80044f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	b183      	cbz	r3, 8004518 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	f012 0f02 	tst.w	r2, #2
 80044fe:	d0ed      	beq.n	80044dc <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004500:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004508:	3301      	adds	r3, #1
 800450a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800450c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800450e:	b292      	uxth	r2, r2
 8004510:	3a01      	subs	r2, #1
 8004512:	b292      	uxth	r2, r2
 8004514:	86e2      	strh	r2, [r4, #54]	; 0x36
 8004516:	e7eb      	b.n	80044f0 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004518:	463a      	mov	r2, r7
 800451a:	4629      	mov	r1, r5
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff fe5f 	bl	80041e0 <SPI_EndRxTxTransaction>
 8004522:	b108      	cbz	r0, 8004528 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004524:	2320      	movs	r3, #32
 8004526:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004528:	68a3      	ldr	r3, [r4, #8]
 800452a:	b933      	cbnz	r3, 800453a <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	9201      	str	r2, [sp, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800453a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800453c:	b913      	cbnz	r3, 8004544 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800453e:	2600      	movs	r6, #0
 8004540:	e000      	b.n	8004544 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8004542:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004544:	2301      	movs	r3, #1
 8004546:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800454a:	2300      	movs	r3, #0
 800454c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004550:	4630      	mov	r0, r6
 8004552:	b003      	add	sp, #12
 8004554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8004558:	2603      	movs	r6, #3
 800455a:	e7f3      	b.n	8004544 <HAL_SPI_Transmit+0x186>
 800455c:	2603      	movs	r6, #3
 800455e:	e7f1      	b.n	8004544 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 8004560:	2603      	movs	r6, #3
 8004562:	e7ef      	b.n	8004544 <HAL_SPI_Transmit+0x186>
 8004564:	2603      	movs	r6, #3
 8004566:	e7ed      	b.n	8004544 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 8004568:	2602      	movs	r6, #2
 800456a:	e7f1      	b.n	8004550 <HAL_SPI_Transmit+0x192>

0800456c <HAL_SPI_TransmitReceive>:
{
 800456c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004570:	b083      	sub	sp, #12
 8004572:	461f      	mov	r7, r3
 8004574:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004576:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800457a:	2b01      	cmp	r3, #1
 800457c:	f000 8110 	beq.w	80047a0 <HAL_SPI_TransmitReceive+0x234>
 8004580:	4604      	mov	r4, r0
 8004582:	4688      	mov	r8, r1
 8004584:	4691      	mov	r9, r2
 8004586:	2301      	movs	r3, #1
 8004588:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800458c:	f7fd fc9a 	bl	8001ec4 <HAL_GetTick>
 8004590:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004592:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004596:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004598:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800459a:	2b01      	cmp	r3, #1
 800459c:	d00a      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0x48>
 800459e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80045a2:	f040 80e3 	bne.w	800476c <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045a6:	68a2      	ldr	r2, [r4, #8]
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	f040 80e9 	bne.w	8004780 <HAL_SPI_TransmitReceive+0x214>
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	f040 80e8 	bne.w	8004784 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045b4:	f1b8 0f00 	cmp.w	r8, #0
 80045b8:	f000 80e6 	beq.w	8004788 <HAL_SPI_TransmitReceive+0x21c>
 80045bc:	f1b9 0f00 	cmp.w	r9, #0
 80045c0:	f000 80e4 	beq.w	800478c <HAL_SPI_TransmitReceive+0x220>
 80045c4:	2f00      	cmp	r7, #0
 80045c6:	f000 80e3 	beq.w	8004790 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ca:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d002      	beq.n	80045da <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045d4:	2305      	movs	r3, #5
 80045d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045da:	2300      	movs	r3, #0
 80045dc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045de:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045e2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045e4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045e6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045ea:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045ec:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80045ee:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045f0:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80045fa:	d103      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004602:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004604:	68e3      	ldr	r3, [r4, #12]
 8004606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460a:	d011      	beq.n	8004630 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	b10b      	cbz	r3, 8004614 <HAL_SPI_TransmitReceive+0xa8>
 8004610:	2f01      	cmp	r7, #1
 8004612:	d10b      	bne.n	800462c <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004614:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800461c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800461e:	3301      	adds	r3, #1
 8004620:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004622:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800462c:	2701      	movs	r7, #1
 800462e:	e06b      	b.n	8004708 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	b10b      	cbz	r3, 8004638 <HAL_SPI_TransmitReceive+0xcc>
 8004634:	2f01      	cmp	r7, #1
 8004636:	d10b      	bne.n	8004650 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004638:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	8812      	ldrh	r2, [r2, #0]
 800463e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004640:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004642:	3302      	adds	r3, #2
 8004644:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004646:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29b      	uxth	r3, r3
 800464e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004650:	2701      	movs	r7, #1
 8004652:	e01c      	b.n	800468e <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	f012 0f01 	tst.w	r2, #1
 800465c:	d00e      	beq.n	800467c <HAL_SPI_TransmitReceive+0x110>
 800465e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004660:	b292      	uxth	r2, r2
 8004662:	b15a      	cbz	r2, 800467c <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004668:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800466a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800466c:	3302      	adds	r3, #2
 800466e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004670:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800467a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800467c:	f7fd fc22 	bl	8001ec4 <HAL_GetTick>
 8004680:	1b80      	subs	r0, r0, r6
 8004682:	42a8      	cmp	r0, r5
 8004684:	d303      	bcc.n	800468e <HAL_SPI_TransmitReceive+0x122>
 8004686:	f1b5 3fff 	cmp.w	r5, #4294967295
 800468a:	f040 8083 	bne.w	8004794 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800468e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004690:	b29b      	uxth	r3, r3
 8004692:	b91b      	cbnz	r3, 800469c <HAL_SPI_TransmitReceive+0x130>
 8004694:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d053      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	f012 0f02 	tst.w	r2, #2
 80046a4:	d0d6      	beq.n	8004654 <HAL_SPI_TransmitReceive+0xe8>
 80046a6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80046a8:	b292      	uxth	r2, r2
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	d0d2      	beq.n	8004654 <HAL_SPI_TransmitReceive+0xe8>
 80046ae:	2f00      	cmp	r7, #0
 80046b0:	d0d0      	beq.n	8004654 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046b4:	8812      	ldrh	r2, [r2, #0]
 80046b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046ba:	3302      	adds	r3, #2
 80046bc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80046be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80046c8:	2700      	movs	r7, #0
 80046ca:	e7c3      	b.n	8004654 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	f012 0f01 	tst.w	r2, #1
 80046d4:	d00e      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x188>
 80046d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80046d8:	b292      	uxth	r2, r2
 80046da:	b15a      	cbz	r2, 80046f4 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046e4:	3301      	adds	r3, #1
 80046e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80046e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80046f2:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046f4:	f7fd fbe6 	bl	8001ec4 <HAL_GetTick>
 80046f8:	1b83      	subs	r3, r0, r6
 80046fa:	42ab      	cmp	r3, r5
 80046fc:	d302      	bcc.n	8004704 <HAL_SPI_TransmitReceive+0x198>
 80046fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004702:	d149      	bne.n	8004798 <HAL_SPI_TransmitReceive+0x22c>
 8004704:	2d00      	cmp	r5, #0
 8004706:	d049      	beq.n	800479c <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004708:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	b913      	cbnz	r3, 8004714 <HAL_SPI_TransmitReceive+0x1a8>
 800470e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	b1bb      	cbz	r3, 8004744 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	f012 0f02 	tst.w	r2, #2
 800471c:	d0d6      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x160>
 800471e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004720:	b292      	uxth	r2, r2
 8004722:	2a00      	cmp	r2, #0
 8004724:	d0d2      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x160>
 8004726:	2f00      	cmp	r7, #0
 8004728:	d0d0      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800472a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004730:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004732:	3301      	adds	r3, #1
 8004734:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004736:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29b      	uxth	r3, r3
 800473e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004740:	2700      	movs	r7, #0
 8004742:	e7c3      	b.n	80046cc <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004744:	4632      	mov	r2, r6
 8004746:	4629      	mov	r1, r5
 8004748:	4620      	mov	r0, r4
 800474a:	f7ff fd49 	bl	80041e0 <SPI_EndRxTxTransaction>
 800474e:	b948      	cbnz	r0, 8004764 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004750:	68a3      	ldr	r3, [r4, #8]
 8004752:	b963      	cbnz	r3, 800476e <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	9201      	str	r2, [sp, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	9b01      	ldr	r3, [sp, #4]
 8004762:	e004      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004764:	2320      	movs	r3, #32
 8004766:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004768:	2001      	movs	r0, #1
    goto error;
 800476a:	e000      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 800476c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800476e:	2301      	movs	r3, #1
 8004770:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004774:	2300      	movs	r3, #0
 8004776:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800477a:	b003      	add	sp, #12
 800477c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8004780:	2002      	movs	r0, #2
 8004782:	e7f4      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
 8004784:	2002      	movs	r0, #2
 8004786:	e7f2      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8004788:	2001      	movs	r0, #1
 800478a:	e7f0      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
 800478c:	2001      	movs	r0, #1
 800478e:	e7ee      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
 8004790:	2001      	movs	r0, #1
 8004792:	e7ec      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8004794:	2003      	movs	r0, #3
 8004796:	e7ea      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8004798:	2003      	movs	r0, #3
 800479a:	e7e8      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
 800479c:	2003      	movs	r0, #3
 800479e:	e7e6      	b.n	800476e <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80047a0:	2002      	movs	r0, #2
 80047a2:	e7ea      	b.n	800477a <HAL_SPI_TransmitReceive+0x20e>

080047a4 <HAL_SPI_Receive>:
{
 80047a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047a8:	b083      	sub	sp, #12
 80047aa:	4604      	mov	r4, r0
 80047ac:	4688      	mov	r8, r1
 80047ae:	4691      	mov	r9, r2
 80047b0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047b2:	6843      	ldr	r3, [r0, #4]
 80047b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b8:	d038      	beq.n	800482c <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 80047ba:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80047be:	2b01      	cmp	r3, #1
 80047c0:	f000 80a8 	beq.w	8004914 <HAL_SPI_Receive+0x170>
 80047c4:	2301      	movs	r3, #1
 80047c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80047ca:	f7fd fb7b 	bl	8001ec4 <HAL_GetTick>
 80047ce:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80047d0:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80047d4:	b2f6      	uxtb	r6, r6
 80047d6:	2e01      	cmp	r6, #1
 80047d8:	f040 8089 	bne.w	80048ee <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80047dc:	f1b8 0f00 	cmp.w	r8, #0
 80047e0:	f000 8086 	beq.w	80048f0 <HAL_SPI_Receive+0x14c>
 80047e4:	f1b9 0f00 	cmp.w	r9, #0
 80047e8:	f000 8082 	beq.w	80048f0 <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047ec:	2304      	movs	r3, #4
 80047ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047f6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047fa:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047fe:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004802:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004804:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004806:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004808:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800480a:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480c:	68a3      	ldr	r3, [r4, #8]
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004812:	d018      	beq.n	8004846 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	f012 0f40 	tst.w	r2, #64	; 0x40
 800481c:	d103      	bne.n	8004826 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004824:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004826:	68e3      	ldr	r3, [r4, #12]
 8004828:	b313      	cbz	r3, 8004870 <HAL_SPI_Receive+0xcc>
 800482a:	e040      	b.n	80048ae <HAL_SPI_Receive+0x10a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800482c:	6883      	ldr	r3, [r0, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1c3      	bne.n	80047ba <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004832:	2304      	movs	r3, #4
 8004834:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004838:	9500      	str	r5, [sp, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	460a      	mov	r2, r1
 800483e:	f7ff fe95 	bl	800456c <HAL_SPI_TransmitReceive>
 8004842:	4606      	mov	r6, r0
 8004844:	e05a      	b.n	80048fc <HAL_SPI_Receive+0x158>
    __HAL_SPI_DISABLE(hspi);
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	6813      	ldr	r3, [r2, #0]
 800484a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e7db      	b.n	8004814 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800485c:	f7fd fb32 	bl	8001ec4 <HAL_GetTick>
 8004860:	1bc0      	subs	r0, r0, r7
 8004862:	42a8      	cmp	r0, r5
 8004864:	d302      	bcc.n	800486c <HAL_SPI_Receive+0xc8>
 8004866:	f1b5 3fff 	cmp.w	r5, #4294967295
 800486a:	d14b      	bne.n	8004904 <HAL_SPI_Receive+0x160>
 800486c:	2d00      	cmp	r5, #0
 800486e:	d04b      	beq.n	8004908 <HAL_SPI_Receive+0x164>
    while (hspi->RxXferCount > 0U)
 8004870:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02e      	beq.n	80048d6 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	f012 0f01 	tst.w	r2, #1
 8004880:	d0ec      	beq.n	800485c <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004882:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004884:	7b1b      	ldrb	r3, [r3, #12]
 8004886:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800488a:	3301      	adds	r3, #1
 800488c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800488e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29b      	uxth	r3, r3
 8004896:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004898:	e7ea      	b.n	8004870 <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489a:	f7fd fb13 	bl	8001ec4 <HAL_GetTick>
 800489e:	1bc0      	subs	r0, r0, r7
 80048a0:	42a8      	cmp	r0, r5
 80048a2:	d302      	bcc.n	80048aa <HAL_SPI_Receive+0x106>
 80048a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80048a8:	d130      	bne.n	800490c <HAL_SPI_Receive+0x168>
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	d030      	beq.n	8004910 <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 80048ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	b183      	cbz	r3, 80048d6 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	f012 0f01 	tst.w	r2, #1
 80048bc:	d0ed      	beq.n	800489a <HAL_SPI_Receive+0xf6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048c6:	3302      	adds	r3, #2
 80048c8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80048ca:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80048cc:	b292      	uxth	r2, r2
 80048ce:	3a01      	subs	r2, #1
 80048d0:	b292      	uxth	r2, r2
 80048d2:	87e2      	strh	r2, [r4, #62]	; 0x3e
 80048d4:	e7eb      	b.n	80048ae <HAL_SPI_Receive+0x10a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d6:	463a      	mov	r2, r7
 80048d8:	4629      	mov	r1, r5
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff fcb4 	bl	8004248 <SPI_EndRxTransaction>
 80048e0:	b108      	cbz	r0, 80048e6 <HAL_SPI_Receive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e2:	2320      	movs	r3, #32
 80048e4:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048e8:	b913      	cbnz	r3, 80048f0 <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048ea:	2600      	movs	r6, #0
 80048ec:	e000      	b.n	80048f0 <HAL_SPI_Receive+0x14c>
    errorcode = HAL_BUSY;
 80048ee:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048f6:	2300      	movs	r3, #0
 80048f8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80048fc:	4630      	mov	r0, r6
 80048fe:	b003      	add	sp, #12
 8004900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8004904:	2603      	movs	r6, #3
 8004906:	e7f3      	b.n	80048f0 <HAL_SPI_Receive+0x14c>
 8004908:	2603      	movs	r6, #3
 800490a:	e7f1      	b.n	80048f0 <HAL_SPI_Receive+0x14c>
          errorcode = HAL_TIMEOUT;
 800490c:	2603      	movs	r6, #3
 800490e:	e7ef      	b.n	80048f0 <HAL_SPI_Receive+0x14c>
 8004910:	2603      	movs	r6, #3
 8004912:	e7ed      	b.n	80048f0 <HAL_SPI_Receive+0x14c>
  __HAL_LOCK(hspi);
 8004914:	2602      	movs	r6, #2
 8004916:	e7f1      	b.n	80048fc <HAL_SPI_Receive+0x158>

08004918 <HAL_SPI_GetState>:
  return hspi->State;
 8004918:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800491c:	4770      	bx	lr

0800491e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491e:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004920:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004922:	6a05      	ldr	r5, [r0, #32]
 8004924:	f025 0501 	bic.w	r5, r5, #1
 8004928:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800492c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004930:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004934:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004938:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800493a:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 800493c:	6203      	str	r3, [r0, #32]
}
 800493e:	bc30      	pop	{r4, r5}
 8004940:	4770      	bx	lr

08004942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004942:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004944:	6a05      	ldr	r5, [r0, #32]
 8004946:	f025 0510 	bic.w	r5, r5, #16
 800494a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800494e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004950:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004954:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800495c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004960:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004962:	6203      	str	r3, [r0, #32]
}
 8004964:	bc30      	pop	{r4, r5}
 8004966:	4770      	bx	lr

08004968 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004968:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496e:	430b      	orrs	r3, r1
 8004970:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004974:	6083      	str	r3, [r0, #8]
}
 8004976:	4770      	bx	lr

08004978 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004978:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d137      	bne.n	80049f2 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004982:	2302      	movs	r3, #2
 8004984:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004988:	6802      	ldr	r2, [r0, #0]
 800498a:	68d3      	ldr	r3, [r2, #12]
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	6803      	ldr	r3, [r0, #0]
 8004994:	4a19      	ldr	r2, [pc, #100]	; (80049fc <HAL_TIM_Base_Start_IT+0x84>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d020      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x64>
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d01d      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x64>
 80049a0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d019      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x64>
 80049a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d015      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x64>
 80049b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d011      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x64>
 80049b8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00d      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x64>
 80049c0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d009      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x64>
 80049c8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d005      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80049d8:	2000      	movs	r0, #0
 80049da:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	2a06      	cmp	r2, #6
 80049e4:	d007      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80049ee:	2000      	movs	r0, #0
 80049f0:	4770      	bx	lr
    return HAL_ERROR;
 80049f2:	2001      	movs	r0, #1
 80049f4:	4770      	bx	lr
  return HAL_OK;
 80049f6:	2000      	movs	r0, #0
}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000

08004a00 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_IC_CaptureCallback>:
}
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_TriggerCallback>:
}
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIM_IRQHandler>:
{
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a0c:	6803      	ldr	r3, [r0, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	f012 0f02 	tst.w	r2, #2
 8004a14:	d011      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	f012 0f02 	tst.w	r2, #2
 8004a1c:	d00d      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a1e:	f06f 0202 	mvn.w	r2, #2
 8004a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a28:	6803      	ldr	r3, [r0, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f013 0f03 	tst.w	r3, #3
 8004a30:	d070      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	f7ff ffe6 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	2300      	movs	r3, #0
 8004a38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	f012 0f04 	tst.w	r2, #4
 8004a42:	d012      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	f012 0f04 	tst.w	r2, #4
 8004a4a:	d00e      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a4c:	f06f 0204 	mvn.w	r2, #4
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a52:	2302      	movs	r3, #2
 8004a54:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004a5e:	d05f      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff ffce 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	2300      	movs	r3, #0
 8004a68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	f012 0f08 	tst.w	r2, #8
 8004a72:	d012      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	f012 0f08 	tst.w	r2, #8
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a7c:	f06f 0208 	mvn.w	r2, #8
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a82:	2304      	movs	r3, #4
 8004a84:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f013 0f03 	tst.w	r3, #3
 8004a8e:	d04e      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff ffb6 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	2300      	movs	r3, #0
 8004a98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	f012 0f10 	tst.w	r2, #16
 8004aa2:	d012      	beq.n	8004aca <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	f012 0f10 	tst.w	r2, #16
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aac:	f06f 0210 	mvn.w	r2, #16
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004abe:	d03d      	beq.n	8004b3c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f7ff ff9e 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	f012 0f01 	tst.w	r2, #1
 8004ad2:	d003      	beq.n	8004adc <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	f012 0f01 	tst.w	r2, #1
 8004ada:	d136      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004aec:	d134      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004af6:	d003      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004afe:	d132      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	f012 0f20 	tst.w	r2, #32
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	f012 0f20 	tst.w	r2, #32
 8004b10:	d130      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x16c>
}
 8004b12:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b14:	f7ff ff74 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f7ff ff73 	bl	8004a04 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b1e:	e78a      	b.n	8004a36 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7ff ff6d 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b26:	4620      	mov	r0, r4
 8004b28:	f7ff ff6c 	bl	8004a04 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b2c:	e79b      	b.n	8004a66 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f7ff ff66 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	4620      	mov	r0, r4
 8004b36:	f7ff ff65 	bl	8004a04 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b3a:	e7ac      	b.n	8004a96 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7ff ff5f 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7ff ff5e 	bl	8004a04 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b48:	e7bd      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4a:	f06f 0201 	mvn.w	r2, #1
 8004b4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7fc fbed 	bl	8001330 <HAL_TIM_PeriodElapsedCallback>
 8004b56:	e7c1      	b.n	8004adc <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 f971 	bl	8004e46 <HAL_TIMEx_BreakCallback>
 8004b64:	e7c3      	b.n	8004aee <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7ff ff4a 	bl	8004a06 <HAL_TIM_TriggerCallback>
 8004b72:	e7c5      	b.n	8004b00 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b74:	f06f 0220 	mvn.w	r2, #32
 8004b78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 f962 	bl	8004e44 <HAL_TIMEx_CommutCallback>
}
 8004b80:	e7c7      	b.n	8004b12 <HAL_TIM_IRQHandler+0x10a>
	...

08004b84 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004b84:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b86:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <TIM_Base_SetConfig+0xc4>)
 8004b88:	4290      	cmp	r0, r2
 8004b8a:	d012      	beq.n	8004bb2 <TIM_Base_SetConfig+0x2e>
 8004b8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b90:	d00f      	beq.n	8004bb2 <TIM_Base_SetConfig+0x2e>
 8004b92:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004b96:	4290      	cmp	r0, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_Base_SetConfig+0x2e>
 8004b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b9e:	4290      	cmp	r0, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_Base_SetConfig+0x2e>
 8004ba2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ba6:	4290      	cmp	r0, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_Base_SetConfig+0x2e>
 8004baa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004bae:	4290      	cmp	r0, r2
 8004bb0:	d103      	bne.n	8004bba <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004bb6:	684a      	ldr	r2, [r1, #4]
 8004bb8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	4a23      	ldr	r2, [pc, #140]	; (8004c48 <TIM_Base_SetConfig+0xc4>)
 8004bbc:	4290      	cmp	r0, r2
 8004bbe:	d02a      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004bc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004bc4:	d027      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004bc6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004bca:	4290      	cmp	r0, r2
 8004bcc:	d023      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd2:	4290      	cmp	r0, r2
 8004bd4:	d01f      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bda:	4290      	cmp	r0, r2
 8004bdc:	d01b      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004bde:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004be2:	4290      	cmp	r0, r2
 8004be4:	d017      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004be6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004bea:	4290      	cmp	r0, r2
 8004bec:	d013      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bf2:	4290      	cmp	r0, r2
 8004bf4:	d00f      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bfa:	4290      	cmp	r0, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004bfe:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004c02:	4290      	cmp	r0, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c0a:	4290      	cmp	r0, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_Base_SetConfig+0x92>
 8004c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c12:	4290      	cmp	r0, r2
 8004c14:	d103      	bne.n	8004c1e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1a:	68ca      	ldr	r2, [r1, #12]
 8004c1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c22:	694a      	ldr	r2, [r1, #20]
 8004c24:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c28:	688b      	ldr	r3, [r1, #8]
 8004c2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c2c:	680b      	ldr	r3, [r1, #0]
 8004c2e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <TIM_Base_SetConfig+0xc4>)
 8004c32:	4298      	cmp	r0, r3
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0xba>
 8004c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c3a:	4298      	cmp	r0, r3
 8004c3c:	d101      	bne.n	8004c42 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8004c3e:	690b      	ldr	r3, [r1, #16]
 8004c40:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004c42:	2301      	movs	r3, #1
 8004c44:	6143      	str	r3, [r0, #20]
}
 8004c46:	4770      	bx	lr
 8004c48:	40010000 	.word	0x40010000

08004c4c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004c4c:	b340      	cbz	r0, 8004ca0 <HAL_TIM_Base_Init+0x54>
{
 8004c4e:	b510      	push	{r4, lr}
 8004c50:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c56:	b1f3      	cbz	r3, 8004c96 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5e:	4621      	mov	r1, r4
 8004c60:	f851 0b04 	ldr.w	r0, [r1], #4
 8004c64:	f7ff ff8e 	bl	8004b84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004c72:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004c76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004c7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004c8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004c92:	2000      	movs	r0, #0
}
 8004c94:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004c96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004c9a:	f7fc ff8f 	bl	8001bbc <HAL_TIM_Base_MspInit>
 8004c9e:	e7db      	b.n	8004c58 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004ca0:	2001      	movs	r0, #1
}
 8004ca2:	4770      	bx	lr

08004ca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ca6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb4:	6082      	str	r2, [r0, #8]
}
 8004cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004cbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d078      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0xfa>
{
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004cd4:	6802      	ldr	r2, [r0, #0]
 8004cd6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004ce0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004ce2:	680b      	ldr	r3, [r1, #0]
 8004ce4:	2b60      	cmp	r3, #96	; 0x60
 8004ce6:	d04c      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0xc6>
 8004ce8:	d829      	bhi.n	8004d3e <HAL_TIM_ConfigClockSource+0x82>
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d054      	beq.n	8004d98 <HAL_TIM_ConfigClockSource+0xdc>
 8004cee:	d90c      	bls.n	8004d0a <HAL_TIM_ConfigClockSource+0x4e>
 8004cf0:	2b50      	cmp	r3, #80	; 0x50
 8004cf2:	d122      	bne.n	8004d3a <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf4:	68ca      	ldr	r2, [r1, #12]
 8004cf6:	6849      	ldr	r1, [r1, #4]
 8004cf8:	6800      	ldr	r0, [r0, #0]
 8004cfa:	f7ff fe10 	bl	800491e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cfe:	2150      	movs	r1, #80	; 0x50
 8004d00:	6820      	ldr	r0, [r4, #0]
 8004d02:	f7ff fe31 	bl	8004968 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2000      	movs	r0, #0
      break;
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d00d      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x6e>
 8004d0e:	d909      	bls.n	8004d24 <HAL_TIM_ConfigClockSource+0x68>
 8004d10:	2b30      	cmp	r3, #48	; 0x30
 8004d12:	d00a      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8004d14:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004d22:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004d24:	b10b      	cbz	r3, 8004d2a <HAL_TIM_ConfigClockSource+0x6e>
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d105      	bne.n	8004d36 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6820      	ldr	r0, [r4, #0]
 8004d2e:	f7ff fe1b 	bl	8004968 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2000      	movs	r0, #0
      break;
 8004d34:	e7ef      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004d36:	2001      	movs	r0, #1
 8004d38:	e7ed      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	e7eb      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d42:	d034      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0xf2>
 8004d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d48:	d10c      	bne.n	8004d64 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8004d4a:	68cb      	ldr	r3, [r1, #12]
 8004d4c:	684a      	ldr	r2, [r1, #4]
 8004d4e:	6889      	ldr	r1, [r1, #8]
 8004d50:	6800      	ldr	r0, [r0, #0]
 8004d52:	f7ff ffa7 	bl	8004ca4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d56:	6822      	ldr	r2, [r4, #0]
 8004d58:	6893      	ldr	r3, [r2, #8]
 8004d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d5e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d60:	2000      	movs	r0, #0
      break;
 8004d62:	e7d8      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004d64:	2b70      	cmp	r3, #112	; 0x70
 8004d66:	d124      	bne.n	8004db2 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004d68:	68cb      	ldr	r3, [r1, #12]
 8004d6a:	684a      	ldr	r2, [r1, #4]
 8004d6c:	6889      	ldr	r1, [r1, #8]
 8004d6e:	6800      	ldr	r0, [r0, #0]
 8004d70:	f7ff ff98 	bl	8004ca4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004d7c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2000      	movs	r0, #0
      break;
 8004d80:	e7c9      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d82:	68ca      	ldr	r2, [r1, #12]
 8004d84:	6849      	ldr	r1, [r1, #4]
 8004d86:	6800      	ldr	r0, [r0, #0]
 8004d88:	f7ff fddb 	bl	8004942 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d8c:	2160      	movs	r1, #96	; 0x60
 8004d8e:	6820      	ldr	r0, [r4, #0]
 8004d90:	f7ff fdea 	bl	8004968 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004d94:	2000      	movs	r0, #0
      break;
 8004d96:	e7be      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d98:	68ca      	ldr	r2, [r1, #12]
 8004d9a:	6849      	ldr	r1, [r1, #4]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f7ff fdbe 	bl	800491e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da2:	2140      	movs	r1, #64	; 0x40
 8004da4:	6820      	ldr	r0, [r4, #0]
 8004da6:	f7ff fddf 	bl	8004968 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2000      	movs	r0, #0
      break;
 8004dac:	e7b3      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004dae:	2000      	movs	r0, #0
 8004db0:	e7b1      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004db2:	2001      	movs	r0, #1
 8004db4:	e7af      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004db6:	2002      	movs	r0, #2
}
 8004db8:	4770      	bx	lr
	...

08004dbc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d03b      	beq.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8004dc4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd2:	6803      	ldr	r3, [r0, #0]
 8004dd4:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ddc:	680a      	ldr	r2, [r1, #0]
 8004dde:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de2:	6803      	ldr	r3, [r0, #0]
 8004de4:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01a      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dee:	d017      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004df0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d013      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004df8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00f      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e08:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e10:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e18:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e20:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e24:	684a      	ldr	r2, [r1, #4]
 8004e26:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e28:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e30:	2300      	movs	r3, #0
 8004e32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004e36:	4618      	mov	r0, r3
}
 8004e38:	bc30      	pop	{r4, r5}
 8004e3a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004e3c:	2002      	movs	r0, #2
}
 8004e3e:	4770      	bx	lr
 8004e40:	40010000 	.word	0x40010000

08004e44 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e46:	4770      	bx	lr

08004e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4c:	6802      	ldr	r2, [r0, #0]
 8004e4e:	6913      	ldr	r3, [r2, #16]
 8004e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e54:	68c1      	ldr	r1, [r0, #12]
 8004e56:	430b      	orrs	r3, r1
 8004e58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e5a:	6883      	ldr	r3, [r0, #8]
 8004e5c:	6902      	ldr	r2, [r0, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	6942      	ldr	r2, [r0, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	69c2      	ldr	r2, [r0, #28]
 8004e66:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004e68:	6801      	ldr	r1, [r0, #0]
 8004e6a:	68cb      	ldr	r3, [r1, #12]
 8004e6c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e70:	f023 030c 	bic.w	r3, r3, #12
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e78:	6802      	ldr	r2, [r0, #0]
 8004e7a:	6953      	ldr	r3, [r2, #20]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	6981      	ldr	r1, [r0, #24]
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e86:	6803      	ldr	r3, [r0, #0]
 8004e88:	4a34      	ldr	r2, [pc, #208]	; (8004f5c <UART_SetConfig+0x114>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d006      	beq.n	8004e9c <UART_SetConfig+0x54>
 8004e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d002      	beq.n	8004e9c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e96:	f7fe ff6b 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8004e9a:	e001      	b.n	8004ea0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e9c:	f7fe ff78 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea0:	69e3      	ldr	r3, [r4, #28]
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea6:	d02a      	beq.n	8004efe <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea8:	2600      	movs	r6, #0
 8004eaa:	1805      	adds	r5, r0, r0
 8004eac:	eb46 0106 	adc.w	r1, r6, r6
 8004eb0:	182d      	adds	r5, r5, r0
 8004eb2:	eb46 0101 	adc.w	r1, r6, r1
 8004eb6:	00cb      	lsls	r3, r1, #3
 8004eb8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004ebc:	00ea      	lsls	r2, r5, #3
 8004ebe:	4615      	mov	r5, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6863      	ldr	r3, [r4, #4]
 8004ec4:	009a      	lsls	r2, r3, #2
 8004ec6:	0f9b      	lsrs	r3, r3, #30
 8004ec8:	1828      	adds	r0, r5, r0
 8004eca:	eb46 0101 	adc.w	r1, r6, r1
 8004ece:	f7fb f9df 	bl	8000290 <__aeabi_uldivmod>
 8004ed2:	4d23      	ldr	r5, [pc, #140]	; (8004f60 <UART_SetConfig+0x118>)
 8004ed4:	fba5 3200 	umull	r3, r2, r5, r0
 8004ed8:	0951      	lsrs	r1, r2, #5
 8004eda:	2364      	movs	r3, #100	; 0x64
 8004edc:	fb03 0311 	mls	r3, r3, r1, r0
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	3332      	adds	r3, #50	; 0x32
 8004ee4:	fba5 2303 	umull	r2, r3, r5, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eee:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	6821      	ldr	r1, [r4, #0]
 8004ef8:	4413      	add	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]
  }
}
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004efe:	2600      	movs	r6, #0
 8004f00:	1805      	adds	r5, r0, r0
 8004f02:	eb46 0106 	adc.w	r1, r6, r6
 8004f06:	182d      	adds	r5, r5, r0
 8004f08:	eb46 0101 	adc.w	r1, r6, r1
 8004f0c:	00cb      	lsls	r3, r1, #3
 8004f0e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004f12:	00ea      	lsls	r2, r5, #3
 8004f14:	4615      	mov	r5, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	6862      	ldr	r2, [r4, #4]
 8004f1a:	4633      	mov	r3, r6
 8004f1c:	1892      	adds	r2, r2, r2
 8004f1e:	eb46 0303 	adc.w	r3, r6, r3
 8004f22:	1828      	adds	r0, r5, r0
 8004f24:	eb46 0101 	adc.w	r1, r6, r1
 8004f28:	f7fb f9b2 	bl	8000290 <__aeabi_uldivmod>
 8004f2c:	4d0c      	ldr	r5, [pc, #48]	; (8004f60 <UART_SetConfig+0x118>)
 8004f2e:	fba5 3200 	umull	r3, r2, r5, r0
 8004f32:	0951      	lsrs	r1, r2, #5
 8004f34:	2364      	movs	r3, #100	; 0x64
 8004f36:	fb03 0311 	mls	r3, r3, r1, r0
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	3332      	adds	r3, #50	; 0x32
 8004f3e:	fba5 2303 	umull	r2, r3, r5, r3
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	005a      	lsls	r2, r3, #1
 8004f46:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004f4a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	6821      	ldr	r1, [r4, #0]
 8004f54:	4413      	add	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]
 8004f58:	e7d0      	b.n	8004efc <UART_SetConfig+0xb4>
 8004f5a:	bf00      	nop
 8004f5c:	40011000 	.word	0x40011000
 8004f60:	51eb851f 	.word	0x51eb851f

08004f64 <HAL_UART_Init>:
  if (huart == NULL)
 8004f64:	b358      	cbz	r0, 8004fbe <HAL_UART_Init+0x5a>
{
 8004f66:	b510      	push	{r4, lr}
 8004f68:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004f6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f6e:	b30b      	cbz	r3, 8004fb4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	2324      	movs	r3, #36	; 0x24
 8004f72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	68d3      	ldr	r3, [r2, #12]
 8004f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f7e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7ff ff61 	bl	8004e48 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	6913      	ldr	r3, [r2, #16]
 8004f8a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004f8e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f90:	6822      	ldr	r2, [r4, #0]
 8004f92:	6953      	ldr	r3, [r2, #20]
 8004f94:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004f98:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	68d3      	ldr	r3, [r2, #12]
 8004f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fa2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fa8:	2320      	movs	r3, #32
 8004faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004fb2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004fb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004fb8:	f7fc fe18 	bl	8001bec <HAL_UART_MspInit>
 8004fbc:	e7d8      	b.n	8004f70 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004fbe:	2001      	movs	r0, #1
}
 8004fc0:	4770      	bx	lr

08004fc2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004fc2:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004fc4:	680b      	ldr	r3, [r1, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d01a      	beq.n	8005000 <FMC_SDRAM_Init+0x3e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004fca:	6802      	ldr	r2, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004fcc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004fd0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004fd4:	684b      	ldr	r3, [r1, #4]
                                               Init->RowBitsNumber      |\
 8004fd6:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004fd8:	4323      	orrs	r3, r4
                                               Init->MemoryDataWidth    |\
 8004fda:	68cc      	ldr	r4, [r1, #12]
                                               Init->RowBitsNumber      |\
 8004fdc:	4323      	orrs	r3, r4
                                               Init->InternalBankNumber |\
 8004fde:	690c      	ldr	r4, [r1, #16]
                                               Init->MemoryDataWidth    |\
 8004fe0:	4323      	orrs	r3, r4
                                               Init->CASLatency         |\
 8004fe2:	694c      	ldr	r4, [r1, #20]
                                               Init->InternalBankNumber |\
 8004fe4:	4323      	orrs	r3, r4
                                               Init->WriteProtection    |\
 8004fe6:	698c      	ldr	r4, [r1, #24]
                                               Init->CASLatency         |\
 8004fe8:	4323      	orrs	r3, r4
                                               Init->SDClockPeriod      |\
 8004fea:	69cc      	ldr	r4, [r1, #28]
                                               Init->WriteProtection    |\
 8004fec:	4323      	orrs	r3, r4
                                               Init->ReadBurst          |\
 8004fee:	6a0c      	ldr	r4, [r1, #32]
                                               Init->SDClockPeriod      |\
 8004ff0:	4323      	orrs	r3, r4
                                               Init->ReadPipeDelay
 8004ff2:	6a49      	ldr	r1, [r1, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004ff4:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004ff6:	4313      	orrs	r3, r2
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004ff8:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	bc30      	pop	{r4, r5}
 8004ffe:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005000:	6802      	ldr	r2, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005002:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005006:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8005008:	6a0c      	ldr	r4, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800500a:	431c      	orrs	r4, r3
                        Init->ReadPipeDelay);  
 800500c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800500e:	431c      	orrs	r4, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005010:	4314      	orrs	r4, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005012:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005014:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8005018:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800501c:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber      |\
 800501e:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005020:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth    |\
 8005022:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber      |\
 8005024:	432b      	orrs	r3, r5
                       Init->InternalBankNumber |\
 8005026:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth    |\
 8005028:	432b      	orrs	r3, r5
                       Init->CASLatency         |\
 800502a:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber |\
 800502c:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 800502e:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency         |\
 8005030:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005032:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005034:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005036:	6043      	str	r3, [r0, #4]
 8005038:	e7df      	b.n	8004ffa <FMC_SDRAM_Init+0x38>

0800503a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800503a:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800503c:	2a01      	cmp	r2, #1
 800503e:	d021      	beq.n	8005084 <FMC_SDRAM_Timing_Init+0x4a>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005040:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005042:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005046:	680b      	ldr	r3, [r1, #0]
 8005048:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800504a:	684c      	ldr	r4, [r1, #4]
 800504c:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800504e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005052:	688c      	ldr	r4, [r1, #8]
 8005054:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005056:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800505a:	68cc      	ldr	r4, [r1, #12]
 800505c:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800505e:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005062:	690c      	ldr	r4, [r1, #16]
 8005064:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005066:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800506a:	694c      	ldr	r4, [r1, #20]
 800506c:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800506e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8005072:	6989      	ldr	r1, [r1, #24]
 8005074:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005076:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800507a:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800507c:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 800507e:	2000      	movs	r0, #0
 8005080:	bc30      	pop	{r4, r5}
 8005082:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005084:	6884      	ldr	r4, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005086:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 800508a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800508e:	68ca      	ldr	r2, [r1, #12]
 8005090:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005092:	694b      	ldr	r3, [r1, #20]
 8005094:	1e5a      	subs	r2, r3, #1
 8005096:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005098:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 800509c:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800509e:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80050a0:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80050a4:	680b      	ldr	r3, [r1, #0]
 80050a6:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80050a8:	684d      	ldr	r5, [r1, #4]
 80050aa:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80050ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80050b0:	688d      	ldr	r5, [r1, #8]
 80050b2:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80050b4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80050b8:	690d      	ldr	r5, [r1, #16]
 80050ba:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80050bc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80050c0:	6989      	ldr	r1, [r1, #24]
 80050c2:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80050c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80050c8:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80050ca:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80050cc:	60c3      	str	r3, [r0, #12]
 80050ce:	e7d6      	b.n	800507e <FMC_SDRAM_Timing_Init+0x44>

080050d0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	4604      	mov	r4, r0
 80050d6:	4615      	mov	r5, r2
  __IO uint32_t tmpr = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	9301      	str	r3, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80050dc:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 80050de:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80050e0:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80050e2:	688a      	ldr	r2, [r1, #8]
 80050e4:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 80050e6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9U)
 80050ea:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80050ec:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80050f0:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	6103      	str	r3, [r0, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80050f6:	f7fc fee5 	bl	8001ec4 <HAL_GetTick>
 80050fa:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80050fc:	69a3      	ldr	r3, [r4, #24]
 80050fe:	f013 0f20 	tst.w	r3, #32
 8005102:	d00a      	beq.n	800511a <FMC_SDRAM_SendCommand+0x4a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005104:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005108:	d0f8      	beq.n	80050fc <FMC_SDRAM_SendCommand+0x2c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800510a:	b125      	cbz	r5, 8005116 <FMC_SDRAM_SendCommand+0x46>
 800510c:	f7fc feda 	bl	8001ec4 <HAL_GetTick>
 8005110:	1b80      	subs	r0, r0, r6
 8005112:	42a8      	cmp	r0, r5
 8005114:	d9f2      	bls.n	80050fc <FMC_SDRAM_SendCommand+0x2c>
      {
        return HAL_TIMEOUT;
 8005116:	2003      	movs	r0, #3
 8005118:	e000      	b.n	800511c <FMC_SDRAM_SendCommand+0x4c>
      }
    }
  }

  return HAL_OK;
 800511a:	2000      	movs	r0, #0
}
 800511c:	b002      	add	sp, #8
 800511e:	bd70      	pop	{r4, r5, r6, pc}

08005120 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005120:	6943      	ldr	r3, [r0, #20]
 8005122:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005126:	6143      	str	r3, [r0, #20]
  
  return HAL_OK;   
}
 8005128:	2000      	movs	r0, #0
 800512a:	4770      	bx	lr

0800512c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800512c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	3301      	adds	r3, #1
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	4a0e      	ldr	r2, [pc, #56]	; (8005174 <USB_CoreReset+0x48>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d814      	bhi.n	8005168 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800513e:	6903      	ldr	r3, [r0, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	daf6      	bge.n	8005132 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005148:	6903      	ldr	r3, [r0, #16]
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8005150:	9b01      	ldr	r3, [sp, #4]
 8005152:	3301      	adds	r3, #1
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	4a07      	ldr	r2, [pc, #28]	; (8005174 <USB_CoreReset+0x48>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d808      	bhi.n	800516e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800515c:	6903      	ldr	r3, [r0, #16]
 800515e:	f013 0f01 	tst.w	r3, #1
 8005162:	d1f5      	bne.n	8005150 <USB_CoreReset+0x24>

  return HAL_OK;
 8005164:	2000      	movs	r0, #0
 8005166:	e000      	b.n	800516a <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8005168:	2003      	movs	r0, #3
}
 800516a:	b002      	add	sp, #8
 800516c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800516e:	2003      	movs	r0, #3
 8005170:	e7fb      	b.n	800516a <USB_CoreReset+0x3e>
 8005172:	bf00      	nop
 8005174:	00030d40 	.word	0x00030d40

08005178 <USB_CoreInit>:
{
 8005178:	b084      	sub	sp, #16
 800517a:	b510      	push	{r4, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	a803      	add	r0, sp, #12
 8005180:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005184:	9b08      	ldr	r3, [sp, #32]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d11f      	bne.n	80051ca <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800518a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800518c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005190:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80051a4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80051a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d009      	beq.n	80051c0 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80051ac:	4620      	mov	r0, r4
 80051ae:	f7ff ffbd 	bl	800512c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80051b2:	9b06      	ldr	r3, [sp, #24]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d01b      	beq.n	80051f0 <USB_CoreInit+0x78>
}
 80051b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051bc:	b004      	add	sp, #16
 80051be:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051c0:	68e3      	ldr	r3, [r4, #12]
 80051c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c6:	60e3      	str	r3, [r4, #12]
 80051c8:	e7f0      	b.n	80051ac <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d0:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80051d2:	4620      	mov	r0, r4
 80051d4:	f7ff ffaa 	bl	800512c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80051d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051da:	b923      	cbnz	r3, 80051e6 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80051e4:	e7e5      	b.n	80051b2 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80051ee:	e7e0      	b.n	80051b2 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051f0:	68a3      	ldr	r3, [r4, #8]
 80051f2:	f043 0306 	orr.w	r3, r3, #6
 80051f6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051f8:	68a3      	ldr	r3, [r4, #8]
 80051fa:	f043 0320 	orr.w	r3, r3, #32
 80051fe:	60a3      	str	r3, [r4, #8]
 8005200:	e7da      	b.n	80051b8 <USB_CoreInit+0x40>

08005202 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005202:	6883      	ldr	r3, [r0, #8]
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6083      	str	r3, [r0, #8]
}
 800520a:	2000      	movs	r0, #0
 800520c:	4770      	bx	lr
	...

08005210 <USB_FlushTxFifo>:
{
 8005210:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005216:	0189      	lsls	r1, r1, #6
 8005218:	f041 0120 	orr.w	r1, r1, #32
 800521c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800521e:	9b01      	ldr	r3, [sp, #4]
 8005220:	3301      	adds	r3, #1
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	4a05      	ldr	r2, [pc, #20]	; (800523c <USB_FlushTxFifo+0x2c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d805      	bhi.n	8005236 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800522a:	6903      	ldr	r3, [r0, #16]
 800522c:	f013 0f20 	tst.w	r3, #32
 8005230:	d1f5      	bne.n	800521e <USB_FlushTxFifo+0xe>
  return HAL_OK;
 8005232:	2000      	movs	r0, #0
 8005234:	e000      	b.n	8005238 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8005236:	2003      	movs	r0, #3
}
 8005238:	b002      	add	sp, #8
 800523a:	4770      	bx	lr
 800523c:	00030d40 	.word	0x00030d40

08005240 <USB_FlushRxFifo>:
{
 8005240:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005246:	2310      	movs	r3, #16
 8005248:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800524a:	9b01      	ldr	r3, [sp, #4]
 800524c:	3301      	adds	r3, #1
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	4a05      	ldr	r2, [pc, #20]	; (8005268 <USB_FlushRxFifo+0x28>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d805      	bhi.n	8005262 <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005256:	6903      	ldr	r3, [r0, #16]
 8005258:	f013 0f10 	tst.w	r3, #16
 800525c:	d1f5      	bne.n	800524a <USB_FlushRxFifo+0xa>
  return HAL_OK;
 800525e:	2000      	movs	r0, #0
 8005260:	e000      	b.n	8005264 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 8005262:	2003      	movs	r0, #3
}
 8005264:	b002      	add	sp, #8
 8005266:	4770      	bx	lr
 8005268:	00030d40 	.word	0x00030d40

0800526c <USB_ReadPacket>:
{
 800526c:	b4f0      	push	{r4, r5, r6, r7}
 800526e:	b082      	sub	sp, #8
 8005270:	4607      	mov	r7, r0
 8005272:	4608      	mov	r0, r1
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005274:	463e      	mov	r6, r7
  uint32_t count32b = (uint32_t)len >> 2U;
 8005276:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8005278:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	42ab      	cmp	r3, r5
 8005280:	d206      	bcs.n	8005290 <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005282:	f506 5480 	add.w	r4, r6, #4096	; 0x1000
 8005286:	6824      	ldr	r4, [r4, #0]
 8005288:	f840 4b04 	str.w	r4, [r0], #4
  for (i = 0U; i < count32b; i++)
 800528c:	3301      	adds	r3, #1
 800528e:	e7f6      	b.n	800527e <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8005290:	b17a      	cbz	r2, 80052b2 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005292:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	9301      	str	r3, [sp, #4]
    i = 0U;
 800529a:	2500      	movs	r5, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800529c:	b2eb      	uxtb	r3, r5
 800529e:	00dc      	lsls	r4, r3, #3
 80052a0:	9b01      	ldr	r3, [sp, #4]
 80052a2:	40e3      	lsrs	r3, r4
 80052a4:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 80052a8:	3501      	adds	r5, #1
      remaining_bytes--;
 80052aa:	3a01      	subs	r2, #1
 80052ac:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	d1f4      	bne.n	800529c <USB_ReadPacket+0x30>
}
 80052b2:	b002      	add	sp, #8
 80052b4:	bcf0      	pop	{r4, r5, r6, r7}
 80052b6:	4770      	bx	lr

080052b8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80052b8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80052ba:	6980      	ldr	r0, [r0, #24]
}
 80052bc:	4010      	ands	r0, r2
 80052be:	4770      	bx	lr

080052c0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80052c0:	6940      	ldr	r0, [r0, #20]
}
 80052c2:	f000 0001 	and.w	r0, r0, #1
 80052c6:	4770      	bx	lr

080052c8 <USB_SetCurrentMode>:
{
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052cc:	68c3      	ldr	r3, [r0, #12]
 80052ce:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052d2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80052d4:	2901      	cmp	r1, #1
 80052d6:	d013      	beq.n	8005300 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 80052d8:	bb19      	cbnz	r1, 8005322 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052da:	68c3      	ldr	r3, [r0, #12]
 80052dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e0:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80052e2:	2400      	movs	r4, #0
      HAL_Delay(1U);
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7fc fdf3 	bl	8001ed0 <HAL_Delay>
      ms++;
 80052ea:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052ec:	4628      	mov	r0, r5
 80052ee:	f7ff ffe7 	bl	80052c0 <USB_GetMode>
 80052f2:	b108      	cbz	r0, 80052f8 <USB_SetCurrentMode+0x30>
 80052f4:	2c31      	cmp	r4, #49	; 0x31
 80052f6:	d9f5      	bls.n	80052e4 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 80052f8:	2c32      	cmp	r4, #50	; 0x32
 80052fa:	d014      	beq.n	8005326 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80052fc:	2000      	movs	r0, #0
}
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005300:	68c3      	ldr	r3, [r0, #12]
 8005302:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005306:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8005308:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800530a:	2001      	movs	r0, #1
 800530c:	f7fc fde0 	bl	8001ed0 <HAL_Delay>
      ms++;
 8005310:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005312:	4628      	mov	r0, r5
 8005314:	f7ff ffd4 	bl	80052c0 <USB_GetMode>
 8005318:	2801      	cmp	r0, #1
 800531a:	d0ed      	beq.n	80052f8 <USB_SetCurrentMode+0x30>
 800531c:	2c31      	cmp	r4, #49	; 0x31
 800531e:	d9f4      	bls.n	800530a <USB_SetCurrentMode+0x42>
 8005320:	e7ea      	b.n	80052f8 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8005322:	2001      	movs	r0, #1
 8005324:	e7eb      	b.n	80052fe <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8005326:	2001      	movs	r0, #1
 8005328:	e7e9      	b.n	80052fe <USB_SetCurrentMode+0x36>
	...

0800532c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800532c:	b084      	sub	sp, #16
 800532e:	b538      	push	{r3, r4, r5, lr}
 8005330:	4604      	mov	r4, r0
 8005332:	a805      	add	r0, sp, #20
 8005334:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	4625      	mov	r5, r4
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005346:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800534a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800534e:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005356:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800535a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800535e:	d010      	beq.n	8005382 <USB_HostInit+0x56>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005360:	9b07      	ldr	r3, [sp, #28]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d006      	beq.n	8005374 <USB_HostInit+0x48>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005366:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800536a:	f023 0304 	bic.w	r3, r3, #4
 800536e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8005372:	e00c      	b.n	800538e <USB_HostInit+0x62>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005374:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8005378:	f043 0304 	orr.w	r3, r3, #4
 800537c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8005380:	e005      	b.n	800538e <USB_HostInit+0x62>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005382:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8005386:	f023 0304 	bic.w	r3, r3, #4
 800538a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800538e:	2110      	movs	r1, #16
 8005390:	4620      	mov	r0, r4
 8005392:	f7ff ff3d 	bl	8005210 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005396:	4620      	mov	r0, r4
 8005398:	f7ff ff52 	bl	8005240 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800539c:	2200      	movs	r2, #0
 800539e:	9b06      	ldr	r3, [sp, #24]
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d90a      	bls.n	80053ba <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80053a4:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ac:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 80053b0:	2100      	movs	r1, #0
 80053b2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 80053b6:	3201      	adds	r2, #1
 80053b8:	e7f1      	b.n	800539e <USB_HostInit+0x72>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295
 80053c2:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80053c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80053ca:	d017      	beq.n	80053fc <USB_HostInit+0xd0>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d0:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053d2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80053d6:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <USB_HostInit+0xe4>)
 80053da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053de:	9b08      	ldr	r3, [sp, #32]
 80053e0:	b91b      	cbnz	r3, 80053ea <USB_HostInit+0xbe>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053e2:	69a3      	ldr	r3, [r4, #24]
 80053e4:	f043 0310 	orr.w	r3, r3, #16
 80053e8:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053ea:	69a2      	ldr	r2, [r4, #24]
 80053ec:	4b09      	ldr	r3, [pc, #36]	; (8005414 <USB_HostInit+0xe8>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 80053f2:	2000      	movs	r0, #0
 80053f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053f8:	b004      	add	sp, #16
 80053fa:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005400:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8005404:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005406:	4b04      	ldr	r3, [pc, #16]	; (8005418 <USB_HostInit+0xec>)
 8005408:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800540c:	e7e7      	b.n	80053de <USB_HostInit+0xb2>
 800540e:	bf00      	nop
 8005410:	00e00300 	.word	0x00e00300
 8005414:	a3200008 	.word	0xa3200008
 8005418:	004000e0 	.word	0x004000e0

0800541c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800541c:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800541e:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8005422:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800542e:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8005432:	f001 0203 	and.w	r2, r1, #3
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 800543c:	2901      	cmp	r1, #1
 800543e:	d005      	beq.n	800544c <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8005440:	2902      	cmp	r1, #2
 8005442:	d007      	beq.n	8005454 <USB_InitFSLSPClkSel+0x38>
  {
    /* ... */
  }

  return HAL_OK;
}
 8005444:	2000      	movs	r0, #0
 8005446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800544a:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 800544c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	e7f7      	b.n	8005444 <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 8005454:	f241 7370 	movw	r3, #6000	; 0x1770
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	e7f3      	b.n	8005444 <USB_InitFSLSPClkSel+0x28>

0800545c <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800545c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005460:	6940      	ldr	r0, [r0, #20]
}
 8005462:	b280      	uxth	r0, r0
 8005464:	4770      	bx	lr

08005466 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005466:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005468:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800546c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8005470:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005474:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005478:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800547c:	6885      	ldr	r5, [r0, #8]
 800547e:	f015 0f20 	tst.w	r5, #32
 8005482:	d002      	beq.n	800548a <USB_HC_Halt+0x24>
 8005484:	0fe4      	lsrs	r4, r4, #31
 8005486:	2c00      	cmp	r4, #0
 8005488:	d055      	beq.n	8005536 <USB_HC_Halt+0xd0>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800548a:	b333      	cbz	r3, 80054da <USB_HC_Halt+0x74>
 800548c:	2b02      	cmp	r3, #2
 800548e:	d024      	beq.n	80054da <USB_HC_Halt+0x74>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005490:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005498:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800549c:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80054a0:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 80054a4:	d14a      	bne.n	800553c <USB_HC_Halt+0xd6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054a6:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80054aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80054ae:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054b2:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80054b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80054ba:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054be:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80054c2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80054c6:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      do
      {
        if (++count > 1000U)
 80054ca:	3301      	adds	r3, #1
 80054cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054d0:	d831      	bhi.n	8005536 <USB_HC_Halt+0xd0>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054d2:	6811      	ldr	r1, [r2, #0]
 80054d4:	2900      	cmp	r1, #0
 80054d6:	dbf8      	blt.n	80054ca <USB_HC_Halt+0x64>
 80054d8:	e02d      	b.n	8005536 <USB_HC_Halt+0xd0>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054da:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80054de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054e2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054e6:	6883      	ldr	r3, [r0, #8]
 80054e8:	f013 0f20 	tst.w	r3, #32
 80054ec:	d123      	bne.n	8005536 <USB_HC_Halt+0xd0>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80054f0:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 80054f4:	d119      	bne.n	800552a <USB_HC_Halt+0xc4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054f6:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80054fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80054fe:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005502:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8005506:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800550a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800550e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8005512:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005516:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
          if (++count > 1000U)
 800551a:	3301      	adds	r3, #1
 800551c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005520:	d809      	bhi.n	8005536 <USB_HC_Halt+0xd0>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005522:	6811      	ldr	r1, [r2, #0]
 8005524:	2900      	cmp	r1, #0
 8005526:	dbf8      	blt.n	800551a <USB_HC_Halt+0xb4>
 8005528:	e005      	b.n	8005536 <USB_HC_Halt+0xd0>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800552a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800552e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005532:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8005536:	2000      	movs	r0, #0
 8005538:	bc30      	pop	{r4, r5}
 800553a:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800553c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005544:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005548:	e7f5      	b.n	8005536 <USB_HC_Halt+0xd0>

0800554a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800554a:	f100 0308 	add.w	r3, r0, #8
 800554e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005550:	f04f 32ff 	mov.w	r2, #4294967295
 8005554:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005556:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005558:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800555e:	4770      	bx	lr

08005560 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005560:	2300      	movs	r3, #0
 8005562:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005564:	4770      	bx	lr

08005566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005566:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005568:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800556e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005570:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005572:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005574:	6803      	ldr	r3, [r0, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	6003      	str	r3, [r0, #0]
}
 800557a:	4770      	bx	lr

0800557c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800557c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800557e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005580:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005584:	d011      	beq.n	80055aa <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005586:	f100 0308 	add.w	r3, r0, #8
 800558a:	461c      	mov	r4, r3
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	42aa      	cmp	r2, r5
 8005592:	d9fa      	bls.n	800558a <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005594:	6863      	ldr	r3, [r4, #4]
 8005596:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005598:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800559a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800559c:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800559e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80055a0:	6803      	ldr	r3, [r0, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	6003      	str	r3, [r0, #0]
}
 80055a6:	bc30      	pop	{r4, r5}
 80055a8:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80055aa:	6904      	ldr	r4, [r0, #16]
 80055ac:	e7f2      	b.n	8005594 <vListInsert+0x18>

080055ae <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055ae:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055b0:	6841      	ldr	r1, [r0, #4]
 80055b2:	6882      	ldr	r2, [r0, #8]
 80055b4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055b6:	6841      	ldr	r1, [r0, #4]
 80055b8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	4282      	cmp	r2, r0
 80055be:	d006      	beq.n	80055ce <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055c0:	2200      	movs	r2, #0
 80055c2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	3a01      	subs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055ca:	6818      	ldr	r0, [r3, #0]
}
 80055cc:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055ce:	6882      	ldr	r2, [r0, #8]
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	e7f5      	b.n	80055c0 <uxListRemove+0x12>

080055d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80055d4:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80055d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80055d8:	b118      	cbz	r0, 80055e2 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80055e2:	4770      	bx	lr

080055e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055e4:	b510      	push	{r4, lr}
 80055e6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055e8:	f001 f8a4 	bl	8006734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d004      	beq.n	80055fe <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80055f4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80055f6:	f001 f8bf 	bl	8006778 <vPortExitCritical>

	return xReturn;
}
 80055fa:	4620      	mov	r0, r4
 80055fc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80055fe:	2401      	movs	r4, #1
 8005600:	e7f9      	b.n	80055f6 <prvIsQueueFull+0x12>

08005602 <prvIsQueueEmpty>:
{
 8005602:	b510      	push	{r4, lr}
 8005604:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005606:	f001 f895 	bl	8006734 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800560a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800560c:	b923      	cbnz	r3, 8005618 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800560e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005610:	f001 f8b2 	bl	8006778 <vPortExitCritical>
}
 8005614:	4620      	mov	r0, r4
 8005616:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8005618:	2400      	movs	r4, #0
 800561a:	e7f9      	b.n	8005610 <prvIsQueueEmpty+0xe>

0800561c <prvCopyDataToQueue>:
{
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	4604      	mov	r4, r0
 8005620:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005622:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005624:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005626:	b95a      	cbnz	r2, 8005640 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005628:	6803      	ldr	r3, [r0, #0]
 800562a:	b11b      	cbz	r3, 8005634 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800562c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800562e:	3601      	adds	r6, #1
 8005630:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005632:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005634:	6880      	ldr	r0, [r0, #8]
 8005636:	f000 ff51 	bl	80064dc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	60a3      	str	r3, [r4, #8]
 800563e:	e7f6      	b.n	800562e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005640:	b96d      	cbnz	r5, 800565e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005642:	6840      	ldr	r0, [r0, #4]
 8005644:	f001 faee 	bl	8006c24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005648:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800564a:	6863      	ldr	r3, [r4, #4]
 800564c:	4413      	add	r3, r2
 800564e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005650:	68a2      	ldr	r2, [r4, #8]
 8005652:	4293      	cmp	r3, r2
 8005654:	d319      	bcc.n	800568a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800565a:	4628      	mov	r0, r5
 800565c:	e7e7      	b.n	800562e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800565e:	68c0      	ldr	r0, [r0, #12]
 8005660:	f001 fae0 	bl	8006c24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005664:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005666:	4251      	negs	r1, r2
 8005668:	68e3      	ldr	r3, [r4, #12]
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800566e:	6822      	ldr	r2, [r4, #0]
 8005670:	4293      	cmp	r3, r2
 8005672:	d202      	bcs.n	800567a <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005674:	68a3      	ldr	r3, [r4, #8]
 8005676:	440b      	add	r3, r1
 8005678:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800567a:	2d02      	cmp	r5, #2
 800567c:	d001      	beq.n	8005682 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800567e:	2000      	movs	r0, #0
 8005680:	e7d5      	b.n	800562e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005682:	b126      	cbz	r6, 800568e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005684:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005686:	2000      	movs	r0, #0
 8005688:	e7d1      	b.n	800562e <prvCopyDataToQueue+0x12>
 800568a:	4628      	mov	r0, r5
 800568c:	e7cf      	b.n	800562e <prvCopyDataToQueue+0x12>
 800568e:	2000      	movs	r0, #0
 8005690:	e7cd      	b.n	800562e <prvCopyDataToQueue+0x12>

08005692 <prvUnlockQueue>:
{
 8005692:	b538      	push	{r3, r4, r5, lr}
 8005694:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005696:	f001 f84d 	bl	8006734 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800569a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800569e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056a0:	e003      	b.n	80056aa <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80056a2:	f000 feaf 	bl	8006404 <vTaskMissedYield>
			--cTxLock;
 80056a6:	3c01      	subs	r4, #1
 80056a8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056aa:	2c00      	cmp	r4, #0
 80056ac:	dd08      	ble.n	80056c0 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056b0:	b133      	cbz	r3, 80056c0 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80056b6:	f000 fe11 	bl	80062dc <xTaskRemoveFromEventList>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d0f3      	beq.n	80056a6 <prvUnlockQueue+0x14>
 80056be:	e7f0      	b.n	80056a2 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80056c0:	23ff      	movs	r3, #255	; 0xff
 80056c2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80056c6:	f001 f857 	bl	8006778 <vPortExitCritical>
	taskENTER_CRITICAL();
 80056ca:	f001 f833 	bl	8006734 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80056ce:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80056d2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056d4:	e003      	b.n	80056de <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80056d6:	f000 fe95 	bl	8006404 <vTaskMissedYield>
				--cRxLock;
 80056da:	3c01      	subs	r4, #1
 80056dc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056de:	2c00      	cmp	r4, #0
 80056e0:	dd08      	ble.n	80056f4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056e2:	692b      	ldr	r3, [r5, #16]
 80056e4:	b133      	cbz	r3, 80056f4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e6:	f105 0010 	add.w	r0, r5, #16
 80056ea:	f000 fdf7 	bl	80062dc <xTaskRemoveFromEventList>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d0f3      	beq.n	80056da <prvUnlockQueue+0x48>
 80056f2:	e7f0      	b.n	80056d6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80056f4:	23ff      	movs	r3, #255	; 0xff
 80056f6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80056fa:	f001 f83d 	bl	8006778 <vPortExitCritical>
}
 80056fe:	bd38      	pop	{r3, r4, r5, pc}

08005700 <xQueueGenericReset>:
{
 8005700:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005702:	b1e0      	cbz	r0, 800573e <xQueueGenericReset+0x3e>
 8005704:	460d      	mov	r5, r1
 8005706:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005708:	f001 f814 	bl	8006734 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800570c:	6821      	ldr	r1, [r4, #0]
 800570e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005712:	fb03 1002 	mla	r0, r3, r2, r1
 8005716:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005718:	2000      	movs	r0, #0
 800571a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800571c:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800571e:	3a01      	subs	r2, #1
 8005720:	fb02 1303 	mla	r3, r2, r3, r1
 8005724:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005726:	23ff      	movs	r3, #255	; 0xff
 8005728:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800572c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005730:	b9ed      	cbnz	r5, 800576e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	b963      	cbnz	r3, 8005750 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005736:	f001 f81f 	bl	8006778 <vPortExitCritical>
}
 800573a:	2001      	movs	r0, #1
 800573c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800574e:	e7fe      	b.n	800574e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005750:	f104 0010 	add.w	r0, r4, #16
 8005754:	f000 fdc2 	bl	80062dc <xTaskRemoveFromEventList>
 8005758:	2800      	cmp	r0, #0
 800575a:	d0ec      	beq.n	8005736 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <xQueueGenericReset+0x80>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	e7e3      	b.n	8005736 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800576e:	f104 0010 	add.w	r0, r4, #16
 8005772:	f7ff feea 	bl	800554a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005776:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800577a:	f7ff fee6 	bl	800554a <vListInitialise>
 800577e:	e7da      	b.n	8005736 <xQueueGenericReset+0x36>
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <prvInitialiseNewQueue>:
{
 8005784:	b510      	push	{r4, lr}
 8005786:	4603      	mov	r3, r0
 8005788:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800578a:	460c      	mov	r4, r1
 800578c:	b931      	cbnz	r1, 800579c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800578e:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005790:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005792:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005794:	2101      	movs	r1, #1
 8005796:	f7ff ffb3 	bl	8005700 <xQueueGenericReset>
}
 800579a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800579c:	6002      	str	r2, [r0, #0]
 800579e:	e7f7      	b.n	8005790 <prvInitialiseNewQueue+0xc>

080057a0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057a0:	b940      	cbnz	r0, 80057b4 <xQueueGenericCreate+0x14>
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	e7fe      	b.n	80057b2 <xQueueGenericCreate+0x12>
	{
 80057b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b6:	b083      	sub	sp, #12
 80057b8:	460d      	mov	r5, r1
 80057ba:	4616      	mov	r6, r2
 80057bc:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057be:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057c2:	3048      	adds	r0, #72	; 0x48
 80057c4:	f001 f93e 	bl	8006a44 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80057c8:	4604      	mov	r4, r0
 80057ca:	b150      	cbz	r0, 80057e2 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057d2:	9000      	str	r0, [sp, #0]
 80057d4:	4633      	mov	r3, r6
 80057d6:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80057da:	4629      	mov	r1, r5
 80057dc:	4638      	mov	r0, r7
 80057de:	f7ff ffd1 	bl	8005784 <prvInitialiseNewQueue>
	}
 80057e2:	4620      	mov	r0, r4
 80057e4:	b003      	add	sp, #12
 80057e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057e8 <xQueueGenericSend>:
{
 80057e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ea:	b085      	sub	sp, #20
 80057ec:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80057ee:	b188      	cbz	r0, 8005814 <xQueueGenericSend+0x2c>
 80057f0:	460e      	mov	r6, r1
 80057f2:	461d      	mov	r5, r3
 80057f4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f6:	b1b1      	cbz	r1, 8005826 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057f8:	2d02      	cmp	r5, #2
 80057fa:	d120      	bne.n	800583e <xQueueGenericSend+0x56>
 80057fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d01d      	beq.n	800583e <xQueueGenericSend+0x56>
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	e7fe      	b.n	8005812 <xQueueGenericSend+0x2a>
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005824:	e7fe      	b.n	8005824 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005826:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0e5      	beq.n	80057f8 <xQueueGenericSend+0x10>
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	e7fe      	b.n	800583c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800583e:	f000 fde7 	bl	8006410 <xTaskGetSchedulerState>
 8005842:	4607      	mov	r7, r0
 8005844:	b958      	cbnz	r0, 800585e <xQueueGenericSend+0x76>
 8005846:	9b01      	ldr	r3, [sp, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d044      	beq.n	80058d6 <xQueueGenericSend+0xee>
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	e7fe      	b.n	800585c <xQueueGenericSend+0x74>
 800585e:	2700      	movs	r7, #0
 8005860:	e039      	b.n	80058d6 <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005862:	462a      	mov	r2, r5
 8005864:	4631      	mov	r1, r6
 8005866:	4620      	mov	r0, r4
 8005868:	f7ff fed8 	bl	800561c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800586c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800586e:	b96a      	cbnz	r2, 800588c <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8005870:	b138      	cbz	r0, 8005882 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8005872:	4b3c      	ldr	r3, [pc, #240]	; (8005964 <xQueueGenericSend+0x17c>)
 8005874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005882:	f000 ff79 	bl	8006778 <vPortExitCritical>
				return pdPASS;
 8005886:	2001      	movs	r0, #1
}
 8005888:	b005      	add	sp, #20
 800588a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800588c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005890:	f000 fd24 	bl	80062dc <xTaskRemoveFromEventList>
 8005894:	2800      	cmp	r0, #0
 8005896:	d0f4      	beq.n	8005882 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8005898:	4b32      	ldr	r3, [pc, #200]	; (8005964 <xQueueGenericSend+0x17c>)
 800589a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	e7eb      	b.n	8005882 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 80058aa:	f000 ff65 	bl	8006778 <vPortExitCritical>
					return errQUEUE_FULL;
 80058ae:	2000      	movs	r0, #0
 80058b0:	e7ea      	b.n	8005888 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058b2:	a802      	add	r0, sp, #8
 80058b4:	f000 fd58 	bl	8006368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058b8:	2701      	movs	r7, #1
 80058ba:	e019      	b.n	80058f0 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 80058bc:	2300      	movs	r3, #0
 80058be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80058c2:	e021      	b.n	8005908 <xQueueGenericSend+0x120>
 80058c4:	2300      	movs	r3, #0
 80058c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ca:	e023      	b.n	8005914 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 80058cc:	4620      	mov	r0, r4
 80058ce:	f7ff fee0 	bl	8005692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058d2:	f000 fbe5 	bl	80060a0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80058d6:	f000 ff2d 	bl	8006734 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058de:	429a      	cmp	r2, r3
 80058e0:	d3bf      	bcc.n	8005862 <xQueueGenericSend+0x7a>
 80058e2:	2d02      	cmp	r5, #2
 80058e4:	d0bd      	beq.n	8005862 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80058e6:	9b01      	ldr	r3, [sp, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0de      	beq.n	80058aa <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	d0e0      	beq.n	80058b2 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 80058f0:	f000 ff42 	bl	8006778 <vPortExitCritical>
		vTaskSuspendAll();
 80058f4:	f000 fb40 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058f8:	f000 ff1c 	bl	8006734 <vPortEnterCritical>
 80058fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005900:	b25b      	sxtb	r3, r3
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d0d9      	beq.n	80058bc <xQueueGenericSend+0xd4>
 8005908:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800590c:	b25b      	sxtb	r3, r3
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d0d7      	beq.n	80058c4 <xQueueGenericSend+0xdc>
 8005914:	f000 ff30 	bl	8006778 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005918:	a901      	add	r1, sp, #4
 800591a:	a802      	add	r0, sp, #8
 800591c:	f000 fd30 	bl	8006380 <xTaskCheckForTimeOut>
 8005920:	b9c8      	cbnz	r0, 8005956 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005922:	4620      	mov	r0, r4
 8005924:	f7ff fe5e 	bl	80055e4 <prvIsQueueFull>
 8005928:	2800      	cmp	r0, #0
 800592a:	d0cf      	beq.n	80058cc <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800592c:	9901      	ldr	r1, [sp, #4]
 800592e:	f104 0010 	add.w	r0, r4, #16
 8005932:	f000 fcbb 	bl	80062ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff feab 	bl	8005692 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800593c:	f000 fbb0 	bl	80060a0 <xTaskResumeAll>
 8005940:	2800      	cmp	r0, #0
 8005942:	d1c8      	bne.n	80058d6 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <xQueueGenericSend+0x17c>)
 8005946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	e7bf      	b.n	80058d6 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8005956:	4620      	mov	r0, r4
 8005958:	f7ff fe9b 	bl	8005692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800595c:	f000 fba0 	bl	80060a0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005960:	2000      	movs	r0, #0
 8005962:	e791      	b.n	8005888 <xQueueGenericSend+0xa0>
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xQueueSemaphoreTake>:
{
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800596e:	b158      	cbz	r0, 8005988 <xQueueSemaphoreTake+0x20>
 8005970:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005972:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005974:	b18b      	cbz	r3, 800599a <xQueueSemaphoreTake+0x32>
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	e7fe      	b.n	8005986 <xQueueSemaphoreTake+0x1e>
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005998:	e7fe      	b.n	8005998 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800599a:	f000 fd39 	bl	8006410 <xTaskGetSchedulerState>
 800599e:	4606      	mov	r6, r0
 80059a0:	b950      	cbnz	r0, 80059b8 <xQueueSemaphoreTake+0x50>
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	b15b      	cbz	r3, 80059be <xQueueSemaphoreTake+0x56>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	e7fe      	b.n	80059b6 <xQueueSemaphoreTake+0x4e>
 80059b8:	2500      	movs	r5, #0
 80059ba:	462e      	mov	r6, r5
 80059bc:	e053      	b.n	8005a66 <xQueueSemaphoreTake+0xfe>
 80059be:	4605      	mov	r5, r0
 80059c0:	e051      	b.n	8005a66 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059c2:	3b01      	subs	r3, #1
 80059c4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	b13b      	cbz	r3, 80059da <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	b94b      	cbnz	r3, 80059e2 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80059ce:	f000 fed3 	bl	8006778 <vPortExitCritical>
				return pdPASS;
 80059d2:	2501      	movs	r5, #1
}
 80059d4:	4628      	mov	r0, r5
 80059d6:	b004      	add	sp, #16
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059da:	f000 fe35 	bl	8006648 <pvTaskIncrementMutexHeldCount>
 80059de:	60a0      	str	r0, [r4, #8]
 80059e0:	e7f3      	b.n	80059ca <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059e2:	f104 0010 	add.w	r0, r4, #16
 80059e6:	f000 fc79 	bl	80062dc <xTaskRemoveFromEventList>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d0ef      	beq.n	80059ce <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 80059ee:	4b46      	ldr	r3, [pc, #280]	; (8005b08 <xQueueSemaphoreTake+0x1a0>)
 80059f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	e7e6      	b.n	80059ce <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a00:	b145      	cbz	r5, 8005a14 <xQueueSemaphoreTake+0xac>
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	e7fe      	b.n	8005a12 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 8005a14:	f000 feb0 	bl	8006778 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005a18:	e7dc      	b.n	80059d4 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a1a:	a802      	add	r0, sp, #8
 8005a1c:	f000 fca4 	bl	8006368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a20:	2601      	movs	r6, #1
 8005a22:	e02a      	b.n	8005a7a <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 8005a24:	2300      	movs	r3, #0
 8005a26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005a2a:	e032      	b.n	8005a92 <xQueueSemaphoreTake+0x12a>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a32:	e034      	b.n	8005a9e <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 8005a34:	f000 fe7e 	bl	8006734 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a38:	68a0      	ldr	r0, [r4, #8]
 8005a3a:	f000 fcf9 	bl	8006430 <xTaskPriorityInherit>
 8005a3e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005a40:	f000 fe9a 	bl	8006778 <vPortExitCritical>
 8005a44:	e03b      	b.n	8005abe <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff fe23 	bl	8005692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a4c:	f000 fb28 	bl	80060a0 <xTaskResumeAll>
 8005a50:	e009      	b.n	8005a66 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff fe1d 	bl	8005692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a58:	f000 fb22 	bl	80060a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff fdd0 	bl	8005602 <prvIsQueueEmpty>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d140      	bne.n	8005ae8 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 8005a66:	f000 fe65 	bl	8006734 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1a8      	bne.n	80059c2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a70:	9b01      	ldr	r3, [sp, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0c4      	beq.n	8005a00 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	d0cf      	beq.n	8005a1a <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 8005a7a:	f000 fe7d 	bl	8006778 <vPortExitCritical>
		vTaskSuspendAll();
 8005a7e:	f000 fa7b 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a82:	f000 fe57 	bl	8006734 <vPortEnterCritical>
 8005a86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d0c8      	beq.n	8005a24 <xQueueSemaphoreTake+0xbc>
 8005a92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005a96:	b25b      	sxtb	r3, r3
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d0c6      	beq.n	8005a2c <xQueueSemaphoreTake+0xc4>
 8005a9e:	f000 fe6b 	bl	8006778 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aa2:	a901      	add	r1, sp, #4
 8005aa4:	a802      	add	r0, sp, #8
 8005aa6:	f000 fc6b 	bl	8006380 <xTaskCheckForTimeOut>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d1d1      	bne.n	8005a52 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7ff fda7 	bl	8005602 <prvIsQueueEmpty>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d0c6      	beq.n	8005a46 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0ba      	beq.n	8005a34 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005abe:	9901      	ldr	r1, [sp, #4]
 8005ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ac4:	f000 fbf2 	bl	80062ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f7ff fde2 	bl	8005692 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ace:	f000 fae7 	bl	80060a0 <xTaskResumeAll>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d1c7      	bne.n	8005a66 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <xQueueSemaphoreTake+0x1a0>)
 8005ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	e7be      	b.n	8005a66 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8005ae8:	b90d      	cbnz	r5, 8005aee <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 8005aea:	2500      	movs	r5, #0
 8005aec:	e772      	b.n	80059d4 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8005aee:	f000 fe21 	bl	8006734 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7ff fd6e 	bl	80055d4 <prvGetDisinheritPriorityAfterTimeout>
 8005af8:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005afa:	68a0      	ldr	r0, [r4, #8]
 8005afc:	f000 fd48 	bl	8006590 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005b00:	f000 fe3a 	bl	8006778 <vPortExitCritical>
 8005b04:	e7f1      	b.n	8005aea <xQueueSemaphoreTake+0x182>
 8005b06:	bf00      	nop
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b0c:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <prvResetNextTaskUnblockTime+0x24>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	b923      	cbnz	r3, 8005b1e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b14:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <prvResetNextTaskUnblockTime+0x28>)
 8005b16:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <prvResetNextTaskUnblockTime+0x24>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <prvResetNextTaskUnblockTime+0x28>)
 8005b2a:	601a      	str	r2, [r3, #0]
	}
}
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000408 	.word	0x20000408
 8005b34:	200004d8 	.word	0x200004d8

08005b38 <prvInitialiseNewTask>:
{
 8005b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b3c:	4680      	mov	r8, r0
 8005b3e:	460d      	mov	r5, r1
 8005b40:	4617      	mov	r7, r2
 8005b42:	4699      	mov	r9, r3
 8005b44:	9e08      	ldr	r6, [sp, #32]
 8005b46:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005b4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b4c:	0092      	lsls	r2, r2, #2
 8005b4e:	21a5      	movs	r1, #165	; 0xa5
 8005b50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005b52:	f001 f875 	bl	8006c40 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b58:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8005b5c:	3a01      	subs	r2, #1
 8005b5e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b62:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8005b66:	b38d      	cbz	r5, 8005bcc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2a0f      	cmp	r2, #15
 8005b6c:	d807      	bhi.n	8005b7e <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b6e:	5ca9      	ldrb	r1, [r5, r2]
 8005b70:	18a3      	adds	r3, r4, r2
 8005b72:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005b76:	5cab      	ldrb	r3, [r5, r2]
 8005b78:	b10b      	cbz	r3, 8005b7e <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	e7f5      	b.n	8005b6a <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b84:	2e06      	cmp	r6, #6
 8005b86:	d900      	bls.n	8005b8a <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b88:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8005b8a:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005b8c:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b8e:	2500      	movs	r5, #0
 8005b90:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b92:	1d20      	adds	r0, r4, #4
 8005b94:	f7ff fce4 	bl	8005560 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b98:	f104 0018 	add.w	r0, r4, #24
 8005b9c:	f7ff fce0 	bl	8005560 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ba0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba2:	f1c6 0607 	rsb	r6, r6, #7
 8005ba6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ba8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8005baa:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8005bac:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bae:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bb2:	464a      	mov	r2, r9
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	f000 fd92 	bl	80066e0 <pxPortInitialiseStack>
 8005bbc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005bbe:	f1ba 0f00 	cmp.w	sl, #0
 8005bc2:	d001      	beq.n	8005bc8 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bc4:	f8ca 4000 	str.w	r4, [sl]
}
 8005bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8005bd2:	e7d7      	b.n	8005b84 <prvInitialiseNewTask+0x4c>

08005bd4 <prvInitialiseTaskLists>:
{
 8005bd4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bd6:	2400      	movs	r4, #0
 8005bd8:	e007      	b.n	8005bea <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bda:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005bde:	0093      	lsls	r3, r2, #2
 8005be0:	480e      	ldr	r0, [pc, #56]	; (8005c1c <prvInitialiseTaskLists+0x48>)
 8005be2:	4418      	add	r0, r3
 8005be4:	f7ff fcb1 	bl	800554a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be8:	3401      	adds	r4, #1
 8005bea:	2c06      	cmp	r4, #6
 8005bec:	d9f5      	bls.n	8005bda <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005bee:	4d0c      	ldr	r5, [pc, #48]	; (8005c20 <prvInitialiseTaskLists+0x4c>)
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f7ff fcaa 	bl	800554a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bf6:	4c0b      	ldr	r4, [pc, #44]	; (8005c24 <prvInitialiseTaskLists+0x50>)
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f7ff fca6 	bl	800554a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bfe:	480a      	ldr	r0, [pc, #40]	; (8005c28 <prvInitialiseTaskLists+0x54>)
 8005c00:	f7ff fca3 	bl	800554a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005c04:	4809      	ldr	r0, [pc, #36]	; (8005c2c <prvInitialiseTaskLists+0x58>)
 8005c06:	f7ff fca0 	bl	800554a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005c0a:	4809      	ldr	r0, [pc, #36]	; (8005c30 <prvInitialiseTaskLists+0x5c>)
 8005c0c:	f7ff fc9d 	bl	800554a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c10:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <prvInitialiseTaskLists+0x60>)
 8005c12:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <prvInitialiseTaskLists+0x64>)
 8005c16:	601c      	str	r4, [r3, #0]
}
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000410 	.word	0x20000410
 8005c20:	200004b0 	.word	0x200004b0
 8005c24:	200004c4 	.word	0x200004c4
 8005c28:	200004e4 	.word	0x200004e4
 8005c2c:	20000510 	.word	0x20000510
 8005c30:	200004fc 	.word	0x200004fc
 8005c34:	20000408 	.word	0x20000408
 8005c38:	2000040c 	.word	0x2000040c

08005c3c <prvAddNewTaskToReadyList>:
{
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005c40:	f000 fd78 	bl	8006734 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005c44:	4a20      	ldr	r2, [pc, #128]	; (8005cc8 <prvAddNewTaskToReadyList+0x8c>)
 8005c46:	6813      	ldr	r3, [r2, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <prvAddNewTaskToReadyList+0x90>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	b15b      	cbz	r3, 8005c6a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005c52:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <prvAddNewTaskToReadyList+0x94>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	b96b      	cbnz	r3, 8005c74 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c58:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <prvAddNewTaskToReadyList+0x90>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d807      	bhi.n	8005c74 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005c64:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <prvAddNewTaskToReadyList+0x90>)
 8005c66:	601c      	str	r4, [r3, #0]
 8005c68:	e004      	b.n	8005c74 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005c6a:	4b18      	ldr	r3, [pc, #96]	; (8005ccc <prvAddNewTaskToReadyList+0x90>)
 8005c6c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d026      	beq.n	8005cc2 <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8005c74:	4a17      	ldr	r2, [pc, #92]	; (8005cd4 <prvAddNewTaskToReadyList+0x98>)
 8005c76:	6813      	ldr	r3, [r2, #0]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005c7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4083      	lsls	r3, r0
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <prvAddNewTaskToReadyList+0x9c>)
 8005c84:	6811      	ldr	r1, [r2, #0]
 8005c86:	430b      	orrs	r3, r1
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c8e:	1d21      	adds	r1, r4, #4
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <prvAddNewTaskToReadyList+0xa0>)
 8005c92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c96:	f7ff fc66 	bl	8005566 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005c9a:	f000 fd6d 	bl	8006778 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <prvAddNewTaskToReadyList+0x94>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	b16b      	cbz	r3, 8005cc0 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ca4:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <prvAddNewTaskToReadyList+0x90>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d207      	bcs.n	8005cc0 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <prvAddNewTaskToReadyList+0xa4>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
}
 8005cc0:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005cc2:	f7ff ff87 	bl	8005bd4 <prvInitialiseTaskLists>
 8005cc6:	e7d5      	b.n	8005c74 <prvAddNewTaskToReadyList+0x38>
 8005cc8:	2000049c 	.word	0x2000049c
 8005ccc:	20000404 	.word	0x20000404
 8005cd0:	200004f8 	.word	0x200004f8
 8005cd4:	200004a8 	.word	0x200004a8
 8005cd8:	200004ac 	.word	0x200004ac
 8005cdc:	20000410 	.word	0x20000410
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <prvDeleteTCB>:
	{
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ce8:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8005cec:	b163      	cbz	r3, 8005d08 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d011      	beq.n	8005d16 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d00e      	beq.n	8005d14 <prvDeleteTCB+0x30>
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	e7fe      	b.n	8005d06 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8005d08:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005d0a:	f000 ff23 	bl	8006b54 <vPortFree>
				vPortFree( pxTCB );
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 ff20 	bl	8006b54 <vPortFree>
	}
 8005d14:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005d16:	f000 ff1d 	bl	8006b54 <vPortFree>
 8005d1a:	e7fb      	b.n	8005d14 <prvDeleteTCB+0x30>

08005d1c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <prvCheckTasksWaitingTermination+0x40>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	b1d3      	cbz	r3, 8005d58 <prvCheckTasksWaitingTermination+0x3c>
{
 8005d22:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005d24:	f000 fd06 	bl	8006734 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <prvCheckTasksWaitingTermination+0x44>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d2e:	1d20      	adds	r0, r4, #4
 8005d30:	f7ff fc3d 	bl	80055ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d34:	4a0b      	ldr	r2, [pc, #44]	; (8005d64 <prvCheckTasksWaitingTermination+0x48>)
 8005d36:	6813      	ldr	r3, [r2, #0]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d3c:	4a07      	ldr	r2, [pc, #28]	; (8005d5c <prvCheckTasksWaitingTermination+0x40>)
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005d44:	f000 fd18 	bl	8006778 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f7ff ffcb 	bl	8005ce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <prvCheckTasksWaitingTermination+0x40>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <prvCheckTasksWaitingTermination+0x8>
}
 8005d56:	bd10      	pop	{r4, pc}
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	200004a0 	.word	0x200004a0
 8005d60:	20000510 	.word	0x20000510
 8005d64:	2000049c 	.word	0x2000049c

08005d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005d70:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d72:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	3004      	adds	r0, #4
 8005d78:	f7ff fc19 	bl	80055ae <uxListRemove>
 8005d7c:	b950      	cbnz	r0, 8005d94 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	2301      	movs	r3, #1
 8005d86:	fa03 f202 	lsl.w	r2, r3, r2
 8005d8a:	4918      	ldr	r1, [pc, #96]	; (8005dec <prvAddCurrentTaskToDelayedList+0x84>)
 8005d8c:	680b      	ldr	r3, [r1, #0]
 8005d8e:	ea23 0302 	bic.w	r3, r3, r2
 8005d92:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d94:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005d98:	d00d      	beq.n	8005db6 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d9a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005da2:	42a6      	cmp	r6, r4
 8005da4:	d910      	bls.n	8005dc8 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <prvAddCurrentTaskToDelayedList+0x88>)
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	3104      	adds	r1, #4
 8005db0:	f7ff fbe4 	bl	800557c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005db6:	2d00      	cmp	r5, #0
 8005db8:	d0ef      	beq.n	8005d9a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005dbc:	6819      	ldr	r1, [r3, #0]
 8005dbe:	3104      	adds	r1, #4
 8005dc0:	480c      	ldr	r0, [pc, #48]	; (8005df4 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005dc2:	f7ff fbd0 	bl	8005566 <vListInsertEnd>
 8005dc6:	e7f5      	b.n	8005db4 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	3104      	adds	r1, #4
 8005dd2:	f7ff fbd3 	bl	800557c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	42a3      	cmp	r3, r4
 8005ddc:	d9ea      	bls.n	8005db4 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8005de0:	601c      	str	r4, [r3, #0]
}
 8005de2:	e7e7      	b.n	8005db4 <prvAddCurrentTaskToDelayedList+0x4c>
 8005de4:	20000524 	.word	0x20000524
 8005de8:	20000404 	.word	0x20000404
 8005dec:	200004ac 	.word	0x200004ac
 8005df0:	2000040c 	.word	0x2000040c
 8005df4:	200004fc 	.word	0x200004fc
 8005df8:	20000408 	.word	0x20000408
 8005dfc:	200004d8 	.word	0x200004d8

08005e00 <prvIdleTask>:
{
 8005e00:	b508      	push	{r3, lr}
 8005e02:	e009      	b.n	8005e18 <prvIdleTask+0x18>
				taskYIELD();
 8005e04:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <prvIdleTask+0x28>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8005e14:	f7fb f9ab 	bl	800116e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005e18:	f7ff ff80 	bl	8005d1c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e1c:	4b03      	ldr	r3, [pc, #12]	; (8005e2c <prvIdleTask+0x2c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d8ef      	bhi.n	8005e04 <prvIdleTask+0x4>
 8005e24:	e7f6      	b.n	8005e14 <prvIdleTask+0x14>
 8005e26:	bf00      	nop
 8005e28:	e000ed04 	.word	0xe000ed04
 8005e2c:	20000410 	.word	0x20000410

08005e30 <xTaskCreateStatic>:
	{
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005e36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005e38:	b175      	cbz	r5, 8005e58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e3a:	b1b4      	cbz	r4, 8005e6a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e3c:	2658      	movs	r6, #88	; 0x58
 8005e3e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e40:	9e04      	ldr	r6, [sp, #16]
 8005e42:	2e58      	cmp	r6, #88	; 0x58
 8005e44:	d01a      	beq.n	8005e7c <xTaskCreateStatic+0x4c>
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	e7fe      	b.n	8005e56 <xTaskCreateStatic+0x26>
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005e68:	e7fe      	b.n	8005e68 <xTaskCreateStatic+0x38>
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005e7a:	e7fe      	b.n	8005e7a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e7c:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e7e:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e80:	2502      	movs	r5, #2
 8005e82:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e86:	2500      	movs	r5, #0
 8005e88:	9503      	str	r5, [sp, #12]
 8005e8a:	9402      	str	r4, [sp, #8]
 8005e8c:	ad05      	add	r5, sp, #20
 8005e8e:	9501      	str	r5, [sp, #4]
 8005e90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005e92:	9500      	str	r5, [sp, #0]
 8005e94:	f7ff fe50 	bl	8005b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f7ff fecf 	bl	8005c3c <prvAddNewTaskToReadyList>
	}
 8005e9e:	9805      	ldr	r0, [sp, #20]
 8005ea0:	b006      	add	sp, #24
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}

08005ea4 <xTaskCreate>:
	{
 8005ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	4607      	mov	r7, r0
 8005eac:	4688      	mov	r8, r1
 8005eae:	4614      	mov	r4, r2
 8005eb0:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005eb2:	0090      	lsls	r0, r2, #2
 8005eb4:	f000 fdc6 	bl	8006a44 <pvPortMalloc>
			if( pxStack != NULL )
 8005eb8:	b300      	cbz	r0, 8005efc <xTaskCreate+0x58>
 8005eba:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ebc:	2058      	movs	r0, #88	; 0x58
 8005ebe:	f000 fdc1 	bl	8006a44 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	b1b0      	cbz	r0, 8005ef4 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8005ec6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8005eca:	b1e5      	cbz	r5, 8005f06 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	9502      	str	r5, [sp, #8]
 8005ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4633      	mov	r3, r6
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff fe27 	bl	8005b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eea:	4628      	mov	r0, r5
 8005eec:	f7ff fea6 	bl	8005c3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	e005      	b.n	8005f00 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8005ef4:	4648      	mov	r0, r9
 8005ef6:	f000 fe2d 	bl	8006b54 <vPortFree>
 8005efa:	e7e6      	b.n	8005eca <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005f00:	b005      	add	sp, #20
 8005f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8005f0a:	e7f9      	b.n	8005f00 <xTaskCreate+0x5c>

08005f0c <vTaskStartScheduler>:
{
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f10:	2400      	movs	r4, #0
 8005f12:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f14:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f16:	aa07      	add	r2, sp, #28
 8005f18:	a906      	add	r1, sp, #24
 8005f1a:	a805      	add	r0, sp, #20
 8005f1c:	f7fb f92a 	bl	8001174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f20:	9b05      	ldr	r3, [sp, #20]
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	9400      	str	r4, [sp, #0]
 8005f2a:	4623      	mov	r3, r4
 8005f2c:	9a07      	ldr	r2, [sp, #28]
 8005f2e:	490d      	ldr	r1, [pc, #52]	; (8005f64 <vTaskStartScheduler+0x58>)
 8005f30:	480d      	ldr	r0, [pc, #52]	; (8005f68 <vTaskStartScheduler+0x5c>)
 8005f32:	f7ff ff7d 	bl	8005e30 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005f36:	b190      	cbz	r0, 8005f5e <vTaskStartScheduler+0x52>
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f48:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <vTaskStartScheduler+0x60>)
 8005f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <vTaskStartScheduler+0x64>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <vTaskStartScheduler+0x68>)
 8005f58:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005f5a:	f000 fc8d 	bl	8006878 <xPortStartScheduler>
}
 8005f5e:	b008      	add	sp, #32
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	bf00      	nop
 8005f64:	08009bc0 	.word	0x08009bc0
 8005f68:	08005e01 	.word	0x08005e01
 8005f6c:	200004d8 	.word	0x200004d8
 8005f70:	200004f8 	.word	0x200004f8
 8005f74:	20000524 	.word	0x20000524

08005f78 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005f78:	4a02      	ldr	r2, [pc, #8]	; (8005f84 <vTaskSuspendAll+0xc>)
 8005f7a:	6813      	ldr	r3, [r2, #0]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	200004a4 	.word	0x200004a4

08005f88 <xTaskIncrementTick>:
{
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f8a:	4b3a      	ldr	r3, [pc, #232]	; (8006074 <xTaskIncrementTick+0xec>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d169      	bne.n	8006066 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f92:	4b39      	ldr	r3, [pc, #228]	; (8006078 <xTaskIncrementTick+0xf0>)
 8005f94:	681d      	ldr	r5, [r3, #0]
 8005f96:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005f98:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f9a:	b9c5      	cbnz	r5, 8005fce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005f9c:	4b37      	ldr	r3, [pc, #220]	; (800607c <xTaskIncrementTick+0xf4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	b143      	cbz	r3, 8005fb6 <xTaskIncrementTick+0x2e>
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	e7fe      	b.n	8005fb4 <xTaskIncrementTick+0x2c>
 8005fb6:	4a31      	ldr	r2, [pc, #196]	; (800607c <xTaskIncrementTick+0xf4>)
 8005fb8:	6811      	ldr	r1, [r2, #0]
 8005fba:	4b31      	ldr	r3, [pc, #196]	; (8006080 <xTaskIncrementTick+0xf8>)
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	6010      	str	r0, [r2, #0]
 8005fc0:	6019      	str	r1, [r3, #0]
 8005fc2:	4a30      	ldr	r2, [pc, #192]	; (8006084 <xTaskIncrementTick+0xfc>)
 8005fc4:	6813      	ldr	r3, [r2, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	f7ff fd9f 	bl	8005b0c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fce:	4b2e      	ldr	r3, [pc, #184]	; (8006088 <xTaskIncrementTick+0x100>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	42ab      	cmp	r3, r5
 8005fd4:	d93d      	bls.n	8006052 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8005fd6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fd8:	4b2c      	ldr	r3, [pc, #176]	; (800608c <xTaskIncrementTick+0x104>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fe2:	009a      	lsls	r2, r3, #2
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	; (8006090 <xTaskIncrementTick+0x108>)
 8005fe6:	589b      	ldr	r3, [r3, r2]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d900      	bls.n	8005fee <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8005fec:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8005fee:	4b29      	ldr	r3, [pc, #164]	; (8006094 <xTaskIncrementTick+0x10c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d03c      	beq.n	8006070 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8005ff6:	2401      	movs	r4, #1
	return xSwitchRequired;
 8005ff8:	e03a      	b.n	8006070 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8005ffa:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffc:	4b1f      	ldr	r3, [pc, #124]	; (800607c <xTaskIncrementTick+0xf4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	b343      	cbz	r3, 8006056 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006004:	4b1d      	ldr	r3, [pc, #116]	; (800607c <xTaskIncrementTick+0xf4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800600c:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800600e:	429d      	cmp	r5, r3
 8006010:	d326      	bcc.n	8006060 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006012:	1d37      	adds	r7, r6, #4
 8006014:	4638      	mov	r0, r7
 8006016:	f7ff faca 	bl	80055ae <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800601a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800601c:	b11b      	cbz	r3, 8006026 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800601e:	f106 0018 	add.w	r0, r6, #24
 8006022:	f7ff fac4 	bl	80055ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006026:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006028:	2201      	movs	r2, #1
 800602a:	409a      	lsls	r2, r3
 800602c:	491a      	ldr	r1, [pc, #104]	; (8006098 <xTaskIncrementTick+0x110>)
 800602e:	6808      	ldr	r0, [r1, #0]
 8006030:	4302      	orrs	r2, r0
 8006032:	600a      	str	r2, [r1, #0]
 8006034:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006038:	009a      	lsls	r2, r3, #2
 800603a:	4639      	mov	r1, r7
 800603c:	4814      	ldr	r0, [pc, #80]	; (8006090 <xTaskIncrementTick+0x108>)
 800603e:	4410      	add	r0, r2
 8006040:	f7ff fa91 	bl	8005566 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006044:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006046:	4b11      	ldr	r3, [pc, #68]	; (800608c <xTaskIncrementTick+0x104>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	429a      	cmp	r2, r3
 800604e:	d2d4      	bcs.n	8005ffa <xTaskIncrementTick+0x72>
 8006050:	e7d4      	b.n	8005ffc <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8006052:	2400      	movs	r4, #0
 8006054:	e7d2      	b.n	8005ffc <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <xTaskIncrementTick+0x100>)
 8006058:	f04f 32ff 	mov.w	r2, #4294967295
 800605c:	601a      	str	r2, [r3, #0]
					break;
 800605e:	e7bb      	b.n	8005fd8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006060:	4a09      	ldr	r2, [pc, #36]	; (8006088 <xTaskIncrementTick+0x100>)
 8006062:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006064:	e7b8      	b.n	8005fd8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8006066:	4a0d      	ldr	r2, [pc, #52]	; (800609c <xTaskIncrementTick+0x114>)
 8006068:	6813      	ldr	r3, [r2, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800606e:	2400      	movs	r4, #0
}
 8006070:	4620      	mov	r0, r4
 8006072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006074:	200004a4 	.word	0x200004a4
 8006078:	20000524 	.word	0x20000524
 800607c:	20000408 	.word	0x20000408
 8006080:	2000040c 	.word	0x2000040c
 8006084:	200004dc 	.word	0x200004dc
 8006088:	200004d8 	.word	0x200004d8
 800608c:	20000404 	.word	0x20000404
 8006090:	20000410 	.word	0x20000410
 8006094:	20000528 	.word	0x20000528
 8006098:	200004ac 	.word	0x200004ac
 800609c:	200004e0 	.word	0x200004e0

080060a0 <xTaskResumeAll>:
{
 80060a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80060a2:	4b34      	ldr	r3, [pc, #208]	; (8006174 <xTaskResumeAll+0xd4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	b943      	cbnz	r3, 80060ba <xTaskResumeAll+0x1a>
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	e7fe      	b.n	80060b8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80060ba:	f000 fb3b 	bl	8006734 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80060be:	4b2d      	ldr	r3, [pc, #180]	; (8006174 <xTaskResumeAll+0xd4>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	3a01      	subs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d14d      	bne.n	8006168 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060cc:	4b2a      	ldr	r3, [pc, #168]	; (8006178 <xTaskResumeAll+0xd8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	b90b      	cbnz	r3, 80060d6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80060d2:	2400      	movs	r4, #0
 80060d4:	e049      	b.n	800616a <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 80060d6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060d8:	4b28      	ldr	r3, [pc, #160]	; (800617c <xTaskResumeAll+0xdc>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	b31b      	cbz	r3, 8006126 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060de:	4b27      	ldr	r3, [pc, #156]	; (800617c <xTaskResumeAll+0xdc>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060e4:	f104 0018 	add.w	r0, r4, #24
 80060e8:	f7ff fa61 	bl	80055ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ec:	1d25      	adds	r5, r4, #4
 80060ee:	4628      	mov	r0, r5
 80060f0:	f7ff fa5d 	bl	80055ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80060f6:	2301      	movs	r3, #1
 80060f8:	4083      	lsls	r3, r0
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <xTaskResumeAll+0xe0>)
 80060fc:	6811      	ldr	r1, [r2, #0]
 80060fe:	430b      	orrs	r3, r1
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006106:	4629      	mov	r1, r5
 8006108:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <xTaskResumeAll+0xe4>)
 800610a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800610e:	f7ff fa2a 	bl	8005566 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006112:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006114:	4b1c      	ldr	r3, [pc, #112]	; (8006188 <xTaskResumeAll+0xe8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	429a      	cmp	r2, r3
 800611c:	d3dc      	bcc.n	80060d8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800611e:	4b1b      	ldr	r3, [pc, #108]	; (800618c <xTaskResumeAll+0xec>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e7d8      	b.n	80060d8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8006126:	b10c      	cbz	r4, 800612c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8006128:	f7ff fcf0 	bl	8005b0c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800612c:	4b18      	ldr	r3, [pc, #96]	; (8006190 <xTaskResumeAll+0xf0>)
 800612e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006130:	b974      	cbnz	r4, 8006150 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8006132:	4b16      	ldr	r3, [pc, #88]	; (800618c <xTaskResumeAll+0xec>)
 8006134:	681c      	ldr	r4, [r3, #0]
 8006136:	b1c4      	cbz	r4, 800616a <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <xTaskResumeAll+0xf4>)
 800613a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006148:	2401      	movs	r4, #1
 800614a:	e00e      	b.n	800616a <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800614c:	3c01      	subs	r4, #1
 800614e:	d007      	beq.n	8006160 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8006150:	f7ff ff1a 	bl	8005f88 <xTaskIncrementTick>
 8006154:	2800      	cmp	r0, #0
 8006156:	d0f9      	beq.n	800614c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8006158:	4b0c      	ldr	r3, [pc, #48]	; (800618c <xTaskResumeAll+0xec>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	e7f5      	b.n	800614c <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <xTaskResumeAll+0xf0>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e7e4      	b.n	8006132 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8006168:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800616a:	f000 fb05 	bl	8006778 <vPortExitCritical>
}
 800616e:	4620      	mov	r0, r4
 8006170:	bd38      	pop	{r3, r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	200004a4 	.word	0x200004a4
 8006178:	2000049c 	.word	0x2000049c
 800617c:	200004e4 	.word	0x200004e4
 8006180:	200004ac 	.word	0x200004ac
 8006184:	20000410 	.word	0x20000410
 8006188:	20000404 	.word	0x20000404
 800618c:	20000528 	.word	0x20000528
 8006190:	200004e0 	.word	0x200004e0
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <vTaskDelay>:
	{
 8006198:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800619a:	b1a8      	cbz	r0, 80061c8 <vTaskDelay+0x30>
 800619c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800619e:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <vTaskDelay+0x44>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	b143      	cbz	r3, 80061b6 <vTaskDelay+0x1e>
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	e7fe      	b.n	80061b4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80061b6:	f7ff fedf 	bl	8005f78 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061ba:	2100      	movs	r1, #0
 80061bc:	4620      	mov	r0, r4
 80061be:	f7ff fdd3 	bl	8005d68 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80061c2:	f7ff ff6d 	bl	80060a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80061c6:	b938      	cbnz	r0, 80061d8 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <vTaskDelay+0x48>)
 80061ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	f3bf 8f6f 	isb	sy
	}
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	bf00      	nop
 80061dc:	200004a4 	.word	0x200004a4
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <vTaskSwitchContext+0xb4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	b11b      	cbz	r3, 80061f2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80061ea:	4b2c      	ldr	r3, [pc, #176]	; (800629c <vTaskSwitchContext+0xb8>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	4770      	bx	lr
{
 80061f2:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 80061f4:	4b29      	ldr	r3, [pc, #164]	; (800629c <vTaskSwitchContext+0xb8>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80061fa:	4b29      	ldr	r3, [pc, #164]	; (80062a0 <vTaskSwitchContext+0xbc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8006206:	d103      	bne.n	8006210 <vTaskSwitchContext+0x2c>
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800620e:	d01b      	beq.n	8006248 <vTaskSwitchContext+0x64>
 8006210:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <vTaskSwitchContext+0xbc>)
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	6819      	ldr	r1, [r3, #0]
 8006216:	3134      	adds	r1, #52	; 0x34
 8006218:	f7fa ffaa 	bl	8001170 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800621c:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <vTaskSwitchContext+0xc0>)
 800621e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006220:	fab3 f383 	clz	r3, r3
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f1c3 031f 	rsb	r3, r3, #31
 800622a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800622e:	008a      	lsls	r2, r1, #2
 8006230:	491d      	ldr	r1, [pc, #116]	; (80062a8 <vTaskSwitchContext+0xc4>)
 8006232:	588a      	ldr	r2, [r1, r2]
 8006234:	b98a      	cbnz	r2, 800625a <vTaskSwitchContext+0x76>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	e7fe      	b.n	8006246 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800624e:	d1df      	bne.n	8006210 <vTaskSwitchContext+0x2c>
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8006256:	d1db      	bne.n	8006210 <vTaskSwitchContext+0x2c>
 8006258:	e7e0      	b.n	800621c <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625a:	4913      	ldr	r1, [pc, #76]	; (80062a8 <vTaskSwitchContext+0xc4>)
 800625c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006260:	0082      	lsls	r2, r0, #2
 8006262:	440a      	add	r2, r1
 8006264:	6850      	ldr	r0, [r2, #4]
 8006266:	6840      	ldr	r0, [r0, #4]
 8006268:	6050      	str	r0, [r2, #4]
 800626a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800626e:	00a2      	lsls	r2, r4, #2
 8006270:	4614      	mov	r4, r2
 8006272:	3208      	adds	r2, #8
 8006274:	4411      	add	r1, r2
 8006276:	4288      	cmp	r0, r1
 8006278:	d009      	beq.n	800628e <vTaskSwitchContext+0xaa>
 800627a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800627e:	009a      	lsls	r2, r3, #2
 8006280:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <vTaskSwitchContext+0xc4>)
 8006282:	4413      	add	r3, r2
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <vTaskSwitchContext+0xbc>)
 800628a:	601a      	str	r2, [r3, #0]
}
 800628c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628e:	6840      	ldr	r0, [r0, #4]
 8006290:	4a05      	ldr	r2, [pc, #20]	; (80062a8 <vTaskSwitchContext+0xc4>)
 8006292:	4422      	add	r2, r4
 8006294:	6050      	str	r0, [r2, #4]
 8006296:	e7f0      	b.n	800627a <vTaskSwitchContext+0x96>
 8006298:	200004a4 	.word	0x200004a4
 800629c:	20000528 	.word	0x20000528
 80062a0:	20000404 	.word	0x20000404
 80062a4:	200004ac 	.word	0x200004ac
 80062a8:	20000410 	.word	0x20000410

080062ac <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80062ac:	b158      	cbz	r0, 80062c6 <vTaskPlaceOnEventList+0x1a>
{
 80062ae:	b510      	push	{r4, lr}
 80062b0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <vTaskPlaceOnEventList+0x2c>)
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	3118      	adds	r1, #24
 80062b8:	f7ff f960 	bl	800557c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062bc:	2101      	movs	r1, #1
 80062be:	4620      	mov	r0, r4
 80062c0:	f7ff fd52 	bl	8005d68 <prvAddCurrentTaskToDelayedList>
}
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80062d6:	e7fe      	b.n	80062d6 <vTaskPlaceOnEventList+0x2a>
 80062d8:	20000404 	.word	0x20000404

080062dc <xTaskRemoveFromEventList>:
{
 80062dc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062de:	68c3      	ldr	r3, [r0, #12]
 80062e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80062e2:	b324      	cbz	r4, 800632e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062e4:	f104 0518 	add.w	r5, r4, #24
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7ff f960 	bl	80055ae <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ee:	4b18      	ldr	r3, [pc, #96]	; (8006350 <xTaskRemoveFromEventList+0x74>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	bb2b      	cbnz	r3, 8006340 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062f4:	1d25      	adds	r5, r4, #4
 80062f6:	4628      	mov	r0, r5
 80062f8:	f7ff f959 	bl	80055ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80062fe:	2301      	movs	r3, #1
 8006300:	4083      	lsls	r3, r0
 8006302:	4a14      	ldr	r2, [pc, #80]	; (8006354 <xTaskRemoveFromEventList+0x78>)
 8006304:	6811      	ldr	r1, [r2, #0]
 8006306:	430b      	orrs	r3, r1
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800630e:	4629      	mov	r1, r5
 8006310:	4b11      	ldr	r3, [pc, #68]	; (8006358 <xTaskRemoveFromEventList+0x7c>)
 8006312:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006316:	f7ff f926 	bl	8005566 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800631a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800631c:	4b0f      	ldr	r3, [pc, #60]	; (800635c <xTaskRemoveFromEventList+0x80>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	429a      	cmp	r2, r3
 8006324:	d911      	bls.n	800634a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006326:	2001      	movs	r0, #1
 8006328:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <xTaskRemoveFromEventList+0x84>)
 800632a:	6018      	str	r0, [r3, #0]
 800632c:	e00e      	b.n	800634c <xTaskRemoveFromEventList+0x70>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800633e:	e7fe      	b.n	800633e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006340:	4629      	mov	r1, r5
 8006342:	4808      	ldr	r0, [pc, #32]	; (8006364 <xTaskRemoveFromEventList+0x88>)
 8006344:	f7ff f90f 	bl	8005566 <vListInsertEnd>
 8006348:	e7e7      	b.n	800631a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800634a:	2000      	movs	r0, #0
}
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	bf00      	nop
 8006350:	200004a4 	.word	0x200004a4
 8006354:	200004ac 	.word	0x200004ac
 8006358:	20000410 	.word	0x20000410
 800635c:	20000404 	.word	0x20000404
 8006360:	20000528 	.word	0x20000528
 8006364:	200004e4 	.word	0x200004e4

08006368 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <vTaskInternalSetTimeOutState+0x10>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800636e:	4b03      	ldr	r3, [pc, #12]	; (800637c <vTaskInternalSetTimeOutState+0x14>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6043      	str	r3, [r0, #4]
}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	200004dc 	.word	0x200004dc
 800637c:	20000524 	.word	0x20000524

08006380 <xTaskCheckForTimeOut>:
{
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006382:	b1c8      	cbz	r0, 80063b8 <xTaskCheckForTimeOut+0x38>
 8006384:	460c      	mov	r4, r1
 8006386:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006388:	b1f9      	cbz	r1, 80063ca <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800638a:	f000 f9d3 	bl	8006734 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800638e:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <xTaskCheckForTimeOut+0x7c>)
 8006390:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006392:	686b      	ldr	r3, [r5, #4]
 8006394:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	f1b2 3fff 	cmp.w	r2, #4294967295
 800639c:	d026      	beq.n	80063ec <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800639e:	682f      	ldr	r7, [r5, #0]
 80063a0:	4e17      	ldr	r6, [pc, #92]	; (8006400 <xTaskCheckForTimeOut+0x80>)
 80063a2:	6836      	ldr	r6, [r6, #0]
 80063a4:	42b7      	cmp	r7, r6
 80063a6:	d001      	beq.n	80063ac <xTaskCheckForTimeOut+0x2c>
 80063a8:	428b      	cmp	r3, r1
 80063aa:	d924      	bls.n	80063f6 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063ac:	4282      	cmp	r2, r0
 80063ae:	d815      	bhi.n	80063dc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80063b4:	2401      	movs	r4, #1
 80063b6:	e01a      	b.n	80063ee <xTaskCheckForTimeOut+0x6e>
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80063c8:	e7fe      	b.n	80063c8 <xTaskCheckForTimeOut+0x48>
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80063da:	e7fe      	b.n	80063da <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80063dc:	1a5b      	subs	r3, r3, r1
 80063de:	4413      	add	r3, r2
 80063e0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7ff ffc0 	bl	8006368 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063e8:	2400      	movs	r4, #0
 80063ea:	e000      	b.n	80063ee <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80063ec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80063ee:	f000 f9c3 	bl	8006778 <vPortExitCritical>
}
 80063f2:	4620      	mov	r0, r4
 80063f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80063f6:	2401      	movs	r4, #1
 80063f8:	e7f9      	b.n	80063ee <xTaskCheckForTimeOut+0x6e>
 80063fa:	bf00      	nop
 80063fc:	20000524 	.word	0x20000524
 8006400:	200004dc 	.word	0x200004dc

08006404 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006404:	4b01      	ldr	r3, [pc, #4]	; (800640c <vTaskMissedYield+0x8>)
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]
}
 800640a:	4770      	bx	lr
 800640c:	20000528 	.word	0x20000528

08006410 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <xTaskGetSchedulerState+0x18>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b133      	cbz	r3, 8006424 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <xTaskGetSchedulerState+0x1c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	b10b      	cbz	r3, 8006420 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800641c:	2000      	movs	r0, #0
	}
 800641e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8006420:	2002      	movs	r0, #2
 8006422:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006424:	2001      	movs	r0, #1
 8006426:	4770      	bx	lr
 8006428:	200004f8 	.word	0x200004f8
 800642c:	200004a4 	.word	0x200004a4

08006430 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8006430:	2800      	cmp	r0, #0
 8006432:	d049      	beq.n	80064c8 <xTaskPriorityInherit+0x98>
	{
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006438:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800643a:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <xTaskPriorityInherit+0xa0>)
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006440:	4293      	cmp	r3, r2
 8006442:	d239      	bcs.n	80064b8 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006444:	6982      	ldr	r2, [r0, #24]
 8006446:	2a00      	cmp	r2, #0
 8006448:	db05      	blt.n	8006456 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800644a:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <xTaskPriorityInherit+0xa0>)
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006450:	f1c2 0207 	rsb	r2, r2, #7
 8006454:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006456:	6961      	ldr	r1, [r4, #20]
 8006458:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800645c:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <xTaskPriorityInherit+0xa4>)
 800645e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006462:	4299      	cmp	r1, r3
 8006464:	d005      	beq.n	8006472 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <xTaskPriorityInherit+0xa0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800646e:	2001      	movs	r0, #1
	}
 8006470:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006472:	1d25      	adds	r5, r4, #4
 8006474:	4628      	mov	r0, r5
 8006476:	f7ff f89a 	bl	80055ae <uxListRemove>
 800647a:	b940      	cbnz	r0, 800648e <xTaskPriorityInherit+0x5e>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800647c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800647e:	2301      	movs	r3, #1
 8006480:	fa03 f202 	lsl.w	r2, r3, r2
 8006484:	4914      	ldr	r1, [pc, #80]	; (80064d8 <xTaskPriorityInherit+0xa8>)
 8006486:	680b      	ldr	r3, [r1, #0]
 8006488:	ea23 0302 	bic.w	r3, r3, r2
 800648c:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <xTaskPriorityInherit+0xa0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006494:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006496:	2401      	movs	r4, #1
 8006498:	fa04 f300 	lsl.w	r3, r4, r0
 800649c:	4a0e      	ldr	r2, [pc, #56]	; (80064d8 <xTaskPriorityInherit+0xa8>)
 800649e:	6811      	ldr	r1, [r2, #0]
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80064a8:	4629      	mov	r1, r5
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <xTaskPriorityInherit+0xa4>)
 80064ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064b0:	f7ff f859 	bl	8005566 <vListInsertEnd>
				xReturn = pdTRUE;
 80064b4:	4620      	mov	r0, r4
 80064b6:	e7db      	b.n	8006470 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <xTaskPriorityInherit+0xa0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d303      	bcc.n	80064cc <xTaskPriorityInherit+0x9c>
	BaseType_t xReturn = pdFALSE;
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7d3      	b.n	8006470 <xTaskPriorityInherit+0x40>
 80064c8:	2000      	movs	r0, #0
	}
 80064ca:	4770      	bx	lr
					xReturn = pdTRUE;
 80064cc:	2001      	movs	r0, #1
		return xReturn;
 80064ce:	e7cf      	b.n	8006470 <xTaskPriorityInherit+0x40>
 80064d0:	20000404 	.word	0x20000404
 80064d4:	20000410 	.word	0x20000410
 80064d8:	200004ac 	.word	0x200004ac

080064dc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80064dc:	2800      	cmp	r0, #0
 80064de:	d04c      	beq.n	800657a <xTaskPriorityDisinherit+0x9e>
	{
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80064e4:	4b27      	ldr	r3, [pc, #156]	; (8006584 <xTaskPriorityDisinherit+0xa8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4283      	cmp	r3, r0
 80064ea:	d008      	beq.n	80064fe <xTaskPriorityDisinherit+0x22>
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	e7fe      	b.n	80064fc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80064fe:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006500:	b943      	cbnz	r3, 8006514 <xTaskPriorityDisinherit+0x38>
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	e7fe      	b.n	8006512 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006514:	3b01      	subs	r3, #1
 8006516:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006518:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800651a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800651c:	4291      	cmp	r1, r2
 800651e:	d02e      	beq.n	800657e <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006520:	b10b      	cbz	r3, 8006526 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006522:	2000      	movs	r0, #0
	}
 8006524:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006526:	1d05      	adds	r5, r0, #4
 8006528:	4628      	mov	r0, r5
 800652a:	f7ff f840 	bl	80055ae <uxListRemove>
 800652e:	b970      	cbnz	r0, 800654e <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006530:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006532:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4913      	ldr	r1, [pc, #76]	; (8006588 <xTaskPriorityDisinherit+0xac>)
 800653a:	58cb      	ldr	r3, [r1, r3]
 800653c:	b93b      	cbnz	r3, 800654e <xTaskPriorityDisinherit+0x72>
 800653e:	2301      	movs	r3, #1
 8006540:	fa03 f202 	lsl.w	r2, r3, r2
 8006544:	4911      	ldr	r1, [pc, #68]	; (800658c <xTaskPriorityDisinherit+0xb0>)
 8006546:	680b      	ldr	r3, [r1, #0]
 8006548:	ea23 0302 	bic.w	r3, r3, r2
 800654c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800654e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006550:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006552:	f1c0 0307 	rsb	r3, r0, #7
 8006556:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006558:	2401      	movs	r4, #1
 800655a:	fa04 f300 	lsl.w	r3, r4, r0
 800655e:	4a0b      	ldr	r2, [pc, #44]	; (800658c <xTaskPriorityDisinherit+0xb0>)
 8006560:	6811      	ldr	r1, [r2, #0]
 8006562:	430b      	orrs	r3, r1
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800656a:	4629      	mov	r1, r5
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <xTaskPriorityDisinherit+0xac>)
 800656e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006572:	f7fe fff8 	bl	8005566 <vListInsertEnd>
					xReturn = pdTRUE;
 8006576:	4620      	mov	r0, r4
 8006578:	e7d4      	b.n	8006524 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800657a:	2000      	movs	r0, #0
	}
 800657c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800657e:	2000      	movs	r0, #0
 8006580:	e7d0      	b.n	8006524 <xTaskPriorityDisinherit+0x48>
 8006582:	bf00      	nop
 8006584:	20000404 	.word	0x20000404
 8006588:	20000410 	.word	0x20000410
 800658c:	200004ac 	.word	0x200004ac

08006590 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8006590:	2800      	cmp	r0, #0
 8006592:	d051      	beq.n	8006638 <vTaskPriorityDisinheritAfterTimeout+0xa8>
	{
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	460a      	mov	r2, r1
 8006598:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800659a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800659c:	b941      	cbnz	r1, 80065b0 <vTaskPriorityDisinheritAfterTimeout+0x20>
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	e7fe      	b.n	80065ae <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80065b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d200      	bcs.n	80065b8 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80065b6:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80065b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d001      	beq.n	80065c2 <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80065be:	2901      	cmp	r1, #1
 80065c0:	d000      	beq.n	80065c4 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80065c4:	491d      	ldr	r1, [pc, #116]	; (800663c <vTaskPriorityDisinheritAfterTimeout+0xac>)
 80065c6:	6809      	ldr	r1, [r1, #0]
 80065c8:	42a1      	cmp	r1, r4
 80065ca:	d02c      	beq.n	8006626 <vTaskPriorityDisinheritAfterTimeout+0x96>
					pxTCB->uxPriority = uxPriorityToUse;
 80065cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065ce:	69a1      	ldr	r1, [r4, #24]
 80065d0:	2900      	cmp	r1, #0
 80065d2:	db02      	blt.n	80065da <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d4:	f1c3 0307 	rsb	r3, r3, #7
 80065d8:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80065da:	6961      	ldr	r1, [r4, #20]
 80065dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80065e0:	4b17      	ldr	r3, [pc, #92]	; (8006640 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80065e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80065e6:	4291      	cmp	r1, r2
 80065e8:	d1eb      	bne.n	80065c2 <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ea:	1d25      	adds	r5, r4, #4
 80065ec:	4628      	mov	r0, r5
 80065ee:	f7fe ffde 	bl	80055ae <uxListRemove>
 80065f2:	b940      	cbnz	r0, 8006606 <vTaskPriorityDisinheritAfterTimeout+0x76>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80065f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80065f6:	2301      	movs	r3, #1
 80065f8:	fa03 f202 	lsl.w	r2, r3, r2
 80065fc:	4911      	ldr	r1, [pc, #68]	; (8006644 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 80065fe:	680b      	ldr	r3, [r1, #0]
 8006600:	ea23 0302 	bic.w	r3, r3, r2
 8006604:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8006606:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006608:	2301      	movs	r3, #1
 800660a:	4083      	lsls	r3, r0
 800660c:	4a0d      	ldr	r2, [pc, #52]	; (8006644 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800660e:	6811      	ldr	r1, [r2, #0]
 8006610:	430b      	orrs	r3, r1
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006618:	4629      	mov	r1, r5
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800661c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006620:	f7fe ffa1 	bl	8005566 <vListInsertEnd>
	}
 8006624:	e7cd      	b.n	80065c2 <vTaskPriorityDisinheritAfterTimeout+0x32>
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8006636:	e7fe      	b.n	8006636 <vTaskPriorityDisinheritAfterTimeout+0xa6>
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000404 	.word	0x20000404
 8006640:	20000410 	.word	0x20000410
 8006644:	200004ac 	.word	0x200004ac

08006648 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <pvTaskIncrementMutexHeldCount+0x18>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	b123      	cbz	r3, 8006658 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800664e:	4b04      	ldr	r3, [pc, #16]	; (8006660 <pvTaskIncrementMutexHeldCount+0x18>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006654:	3301      	adds	r3, #1
 8006656:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8006658:	4b01      	ldr	r3, [pc, #4]	; (8006660 <pvTaskIncrementMutexHeldCount+0x18>)
 800665a:	6818      	ldr	r0, [r3, #0]
	}
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20000404 	.word	0x20000404

08006664 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006664:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800666a:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <prvTaskExitError+0x3c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d008      	beq.n	8006686 <prvTaskExitError+0x22>
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	e7fe      	b.n	8006684 <prvTaskExitError+0x20>
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0fc      	beq.n	8006696 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800669c:	b002      	add	sp, #8
 800669e:	4770      	bx	lr
 80066a0:	20000058 	.word	0x20000058

080066a4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066a4:	4808      	ldr	r0, [pc, #32]	; (80066c8 <prvPortStartFirstTask+0x24>)
 80066a6:	6800      	ldr	r0, [r0, #0]
 80066a8:	6800      	ldr	r0, [r0, #0]
 80066aa:	f380 8808 	msr	MSP, r0
 80066ae:	f04f 0000 	mov.w	r0, #0
 80066b2:	f380 8814 	msr	CONTROL, r0
 80066b6:	b662      	cpsie	i
 80066b8:	b661      	cpsie	f
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	df00      	svc	0
 80066c4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066c6:	0000      	.short	0x0000
 80066c8:	e000ed08 	.word	0xe000ed08

080066cc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066cc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066dc <vPortEnableVFP+0x10>
 80066d0:	6801      	ldr	r1, [r0, #0]
 80066d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066d6:	6001      	str	r1, [r0, #0]
 80066d8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066da:	0000      	.short	0x0000
 80066dc:	e000ed88 	.word	0xe000ed88

080066e0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066e8:	f021 0101 	bic.w	r1, r1, #1
 80066ec:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <pxPortInitialiseStack+0x28>)
 80066f2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066f6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066fa:	f06f 0302 	mvn.w	r3, #2
 80066fe:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006702:	3844      	subs	r0, #68	; 0x44
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	08006665 	.word	0x08006665
 800670c:	00000000 	.word	0x00000000

08006710 <SVC_Handler>:
	__asm volatile (
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <pxCurrentTCBConst2>)
 8006712:	6819      	ldr	r1, [r3, #0]
 8006714:	6808      	ldr	r0, [r1, #0]
 8006716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671a:	f380 8809 	msr	PSP, r0
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f380 8811 	msr	BASEPRI, r0
 800672a:	4770      	bx	lr
 800672c:	f3af 8000 	nop.w

08006730 <pxCurrentTCBConst2>:
 8006730:	20000404 	.word	0x20000404

08006734 <vPortEnterCritical>:
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006744:	4a0a      	ldr	r2, [pc, #40]	; (8006770 <vPortEnterCritical+0x3c>)
 8006746:	6813      	ldr	r3, [r2, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800674c:	2b01      	cmp	r3, #1
 800674e:	d000      	beq.n	8006752 <vPortEnterCritical+0x1e>
}
 8006750:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <vPortEnterCritical+0x40>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f013 0fff 	tst.w	r3, #255	; 0xff
 800675a:	d0f9      	beq.n	8006750 <vPortEnterCritical+0x1c>
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	e7fe      	b.n	800676c <vPortEnterCritical+0x38>
 800676e:	bf00      	nop
 8006770:	20000058 	.word	0x20000058
 8006774:	e000ed04 	.word	0xe000ed04

08006778 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006778:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <vPortExitCritical+0x28>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	b943      	cbnz	r3, 8006790 <vPortExitCritical+0x18>
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	e7fe      	b.n	800678e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006790:	3b01      	subs	r3, #1
 8006792:	4a03      	ldr	r2, [pc, #12]	; (80067a0 <vPortExitCritical+0x28>)
 8006794:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006796:	b90b      	cbnz	r3, 800679c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006798:	f383 8811 	msr	BASEPRI, r3
}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20000058 	.word	0x20000058
	...

080067b0 <PendSV_Handler>:
	__asm volatile
 80067b0:	f3ef 8009 	mrs	r0, PSP
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	4b15      	ldr	r3, [pc, #84]	; (8006810 <pxCurrentTCBConst>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f01e 0f10 	tst.w	lr, #16
 80067c0:	bf08      	it	eq
 80067c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067d4:	f380 8811 	msr	BASEPRI, r0
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f7ff fd00 	bl	80061e4 <vTaskSwitchContext>
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f380 8811 	msr	BASEPRI, r0
 80067ec:	bc09      	pop	{r0, r3}
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	6808      	ldr	r0, [r1, #0]
 80067f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f6:	f01e 0f10 	tst.w	lr, #16
 80067fa:	bf08      	it	eq
 80067fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006800:	f380 8809 	msr	PSP, r0
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst>:
 8006810:	20000404 	.word	0x20000404

08006814 <SysTick_Handler>:
{
 8006814:	b508      	push	{r3, lr}
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006826:	f7ff fbaf 	bl	8005f88 <xTaskIncrementTick>
 800682a:	b118      	cbz	r0, 8006834 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <SysTick_Handler+0x28>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006834:	2300      	movs	r3, #0
 8006836:	f383 8811 	msr	BASEPRI, r3
}
 800683a:	bd08      	pop	{r3, pc}
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006840:	4a08      	ldr	r2, [pc, #32]	; (8006864 <vPortSetupTimerInterrupt+0x24>)
 8006842:	2300      	movs	r3, #0
 8006844:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006846:	4908      	ldr	r1, [pc, #32]	; (8006868 <vPortSetupTimerInterrupt+0x28>)
 8006848:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <vPortSetupTimerInterrupt+0x2c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4908      	ldr	r1, [pc, #32]	; (8006870 <vPortSetupTimerInterrupt+0x30>)
 8006850:	fba1 1303 	umull	r1, r3, r1, r3
 8006854:	099b      	lsrs	r3, r3, #6
 8006856:	3b01      	subs	r3, #1
 8006858:	4906      	ldr	r1, [pc, #24]	; (8006874 <vPortSetupTimerInterrupt+0x34>)
 800685a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800685c:	2307      	movs	r3, #7
 800685e:	6013      	str	r3, [r2, #0]
}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	e000e010 	.word	0xe000e010
 8006868:	e000e018 	.word	0xe000e018
 800686c:	2000004c 	.word	0x2000004c
 8006870:	10624dd3 	.word	0x10624dd3
 8006874:	e000e014 	.word	0xe000e014

08006878 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006878:	4b3a      	ldr	r3, [pc, #232]	; (8006964 <xPortStartScheduler+0xec>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <xPortStartScheduler+0xf0>)
 800687e:	429a      	cmp	r2, r3
 8006880:	d029      	beq.n	80068d6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006882:	4b38      	ldr	r3, [pc, #224]	; (8006964 <xPortStartScheduler+0xec>)
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4b39      	ldr	r3, [pc, #228]	; (800696c <xPortStartScheduler+0xf4>)
 8006888:	429a      	cmp	r2, r3
 800688a:	d02d      	beq.n	80068e8 <xPortStartScheduler+0x70>
{
 800688c:	b510      	push	{r4, lr}
 800688e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006890:	4b37      	ldr	r3, [pc, #220]	; (8006970 <xPortStartScheduler+0xf8>)
 8006892:	781a      	ldrb	r2, [r3, #0]
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006898:	22ff      	movs	r2, #255	; 0xff
 800689a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80068a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068ac:	4a31      	ldr	r2, [pc, #196]	; (8006974 <xPortStartScheduler+0xfc>)
 80068ae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068b0:	4b31      	ldr	r3, [pc, #196]	; (8006978 <xPortStartScheduler+0x100>)
 80068b2:	2207      	movs	r2, #7
 80068b4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80068ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80068be:	d01c      	beq.n	80068fa <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80068c0:	4a2d      	ldr	r2, [pc, #180]	; (8006978 <xPortStartScheduler+0x100>)
 80068c2:	6813      	ldr	r3, [r2, #0]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f88d 3003 	strb.w	r3, [sp, #3]
 80068d4:	e7ef      	b.n	80068b6 <xPortStartScheduler+0x3e>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068e6:	e7fe      	b.n	80068e6 <xPortStartScheduler+0x6e>
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068f8:	e7fe      	b.n	80068f8 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068fa:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <xPortStartScheduler+0x100>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d008      	beq.n	8006914 <xPortStartScheduler+0x9c>
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	e7fe      	b.n	8006912 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006914:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800691a:	4a17      	ldr	r2, [pc, #92]	; (8006978 <xPortStartScheduler+0x100>)
 800691c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800691e:	9b01      	ldr	r3, [sp, #4]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	4a13      	ldr	r2, [pc, #76]	; (8006970 <xPortStartScheduler+0xf8>)
 8006924:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006926:	4b15      	ldr	r3, [pc, #84]	; (800697c <xPortStartScheduler+0x104>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800692e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006936:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006938:	f7ff ff82 	bl	8006840 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800693c:	2400      	movs	r4, #0
 800693e:	4b10      	ldr	r3, [pc, #64]	; (8006980 <xPortStartScheduler+0x108>)
 8006940:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006942:	f7ff fec3 	bl	80066cc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006946:	4a0f      	ldr	r2, [pc, #60]	; (8006984 <xPortStartScheduler+0x10c>)
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800694e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006950:	f7ff fea8 	bl	80066a4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006954:	f7ff fc46 	bl	80061e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006958:	f7ff fe84 	bl	8006664 <prvTaskExitError>
}
 800695c:	4620      	mov	r0, r4
 800695e:	b002      	add	sp, #8
 8006960:	bd10      	pop	{r4, pc}
 8006962:	bf00      	nop
 8006964:	e000ed00 	.word	0xe000ed00
 8006968:	410fc271 	.word	0x410fc271
 800696c:	410fc270 	.word	0x410fc270
 8006970:	e000e400 	.word	0xe000e400
 8006974:	2000052c 	.word	0x2000052c
 8006978:	20000530 	.word	0x20000530
 800697c:	e000ed20 	.word	0xe000ed20
 8006980:	20000058 	.word	0x20000058
 8006984:	e000ef34 	.word	0xe000ef34

08006988 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006988:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800698a:	f012 0f07 	tst.w	r2, #7
 800698e:	d01e      	beq.n	80069ce <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006990:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006992:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006996:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800699a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800699c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800699e:	480e      	ldr	r0, [pc, #56]	; (80069d8 <prvHeapInit+0x50>)
 80069a0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069a2:	2100      	movs	r1, #0
 80069a4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069a6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80069a8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069aa:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80069ae:	480b      	ldr	r0, [pc, #44]	; (80069dc <prvHeapInit+0x54>)
 80069b0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80069b2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069b4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069b6:	1a99      	subs	r1, r3, r2
 80069b8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069ba:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <prvHeapInit+0x58>)
 80069be:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <prvHeapInit+0x5c>)
 80069c2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069c4:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <prvHeapInit+0x60>)
 80069c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069ca:	601a      	str	r2, [r3, #0]
}
 80069cc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d2:	e7e4      	b.n	800699e <prvHeapInit+0x16>
 80069d4:	20000538 	.word	0x20000538
 80069d8:	2000854c 	.word	0x2000854c
 80069dc:	20000534 	.word	0x20000534
 80069e0:	20008540 	.word	0x20008540
 80069e4:	2000853c 	.word	0x2000853c
 80069e8:	20008538 	.word	0x20008538

080069ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069ec:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069ee:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <prvInsertBlockIntoFreeList+0x50>)
 80069f0:	461a      	mov	r2, r3
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4283      	cmp	r3, r0
 80069f6:	d3fb      	bcc.n	80069f0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069f8:	6851      	ldr	r1, [r2, #4]
 80069fa:	1854      	adds	r4, r2, r1
 80069fc:	4284      	cmp	r4, r0
 80069fe:	d00a      	beq.n	8006a16 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a00:	6841      	ldr	r1, [r0, #4]
 8006a02:	1844      	adds	r4, r0, r1
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	d00b      	beq.n	8006a20 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a08:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a0a:	4290      	cmp	r0, r2
 8006a0c:	d000      	beq.n	8006a10 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a0e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a14:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a16:	6840      	ldr	r0, [r0, #4]
 8006a18:	4401      	add	r1, r0
 8006a1a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	e7ef      	b.n	8006a00 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a20:	4c07      	ldr	r4, [pc, #28]	; (8006a40 <prvInsertBlockIntoFreeList+0x54>)
 8006a22:	6824      	ldr	r4, [r4, #0]
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d006      	beq.n	8006a36 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4419      	add	r1, r3
 8006a2c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6003      	str	r3, [r0, #0]
 8006a34:	e7e9      	b.n	8006a0a <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a36:	6004      	str	r4, [r0, #0]
 8006a38:	e7e7      	b.n	8006a0a <prvInsertBlockIntoFreeList+0x1e>
 8006a3a:	bf00      	nop
 8006a3c:	2000854c 	.word	0x2000854c
 8006a40:	20000534 	.word	0x20000534

08006a44 <pvPortMalloc>:
{
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006a48:	f7ff fa96 	bl	8005f78 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006a4c:	4b3b      	ldr	r3, [pc, #236]	; (8006b3c <pvPortMalloc+0xf8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	b19b      	cbz	r3, 8006a7a <pvPortMalloc+0x36>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a52:	4b3b      	ldr	r3, [pc, #236]	; (8006b40 <pvPortMalloc+0xfc>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	421c      	tst	r4, r3
 8006a58:	d112      	bne.n	8006a80 <pvPortMalloc+0x3c>
			if( xWantedSize > 0 )
 8006a5a:	b134      	cbz	r4, 8006a6a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8006a5c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a5e:	f014 0f07 	tst.w	r4, #7
 8006a62:	d002      	beq.n	8006a6a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a64:	f024 0407 	bic.w	r4, r4, #7
 8006a68:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a6a:	b1d4      	cbz	r4, 8006aa2 <pvPortMalloc+0x5e>
 8006a6c:	4b35      	ldr	r3, [pc, #212]	; (8006b44 <pvPortMalloc+0x100>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	d31a      	bcc.n	8006aaa <pvPortMalloc+0x66>
				pxBlock = xStart.pxNextFreeBlock;
 8006a74:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <pvPortMalloc+0x104>)
 8006a76:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a78:	e01d      	b.n	8006ab6 <pvPortMalloc+0x72>
			prvHeapInit();
 8006a7a:	f7ff ff85 	bl	8006988 <prvHeapInit>
 8006a7e:	e7e8      	b.n	8006a52 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 8006a80:	f7ff fb0e 	bl	80060a0 <xTaskResumeAll>
void *pvReturn = NULL;
 8006a84:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8006a86:	f7fa fb74 	bl	8001172 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a8a:	f016 0f07 	tst.w	r6, #7
 8006a8e:	d053      	beq.n	8006b38 <pvPortMalloc+0xf4>
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	e7fe      	b.n	8006aa0 <pvPortMalloc+0x5c>
	( void ) xTaskResumeAll();
 8006aa2:	f7ff fafd 	bl	80060a0 <xTaskResumeAll>
void *pvReturn = NULL;
 8006aa6:	2600      	movs	r6, #0
 8006aa8:	e7ed      	b.n	8006a86 <pvPortMalloc+0x42>
	( void ) xTaskResumeAll();
 8006aaa:	f7ff faf9 	bl	80060a0 <xTaskResumeAll>
void *pvReturn = NULL;
 8006aae:	2600      	movs	r6, #0
 8006ab0:	e7e9      	b.n	8006a86 <pvPortMalloc+0x42>
					pxPreviousBlock = pxBlock;
 8006ab2:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ab4:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ab6:	686a      	ldr	r2, [r5, #4]
 8006ab8:	42a2      	cmp	r2, r4
 8006aba:	d202      	bcs.n	8006ac2 <pvPortMalloc+0x7e>
 8006abc:	682a      	ldr	r2, [r5, #0]
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	d1f7      	bne.n	8006ab2 <pvPortMalloc+0x6e>
				if( pxBlock != pxEnd )
 8006ac2:	4a1e      	ldr	r2, [pc, #120]	; (8006b3c <pvPortMalloc+0xf8>)
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	42aa      	cmp	r2, r5
 8006ac8:	d014      	beq.n	8006af4 <pvPortMalloc+0xb0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006aca:	681e      	ldr	r6, [r3, #0]
 8006acc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ace:	682a      	ldr	r2, [r5, #0]
 8006ad0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ad2:	686b      	ldr	r3, [r5, #4]
 8006ad4:	1b1b      	subs	r3, r3, r4
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d914      	bls.n	8006b04 <pvPortMalloc+0xc0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ada:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006adc:	f010 0f07 	tst.w	r0, #7
 8006ae0:	d00c      	beq.n	8006afc <pvPortMalloc+0xb8>
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	e7fe      	b.n	8006af2 <pvPortMalloc+0xae>
	( void ) xTaskResumeAll();
 8006af4:	f7ff fad4 	bl	80060a0 <xTaskResumeAll>
void *pvReturn = NULL;
 8006af8:	2600      	movs	r6, #0
 8006afa:	e7c4      	b.n	8006a86 <pvPortMalloc+0x42>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006afc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006afe:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b00:	f7ff ff74 	bl	80069ec <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b04:	686a      	ldr	r2, [r5, #4]
 8006b06:	490f      	ldr	r1, [pc, #60]	; (8006b44 <pvPortMalloc+0x100>)
 8006b08:	680b      	ldr	r3, [r1, #0]
 8006b0a:	1a9b      	subs	r3, r3, r2
 8006b0c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b0e:	490f      	ldr	r1, [pc, #60]	; (8006b4c <pvPortMalloc+0x108>)
 8006b10:	6809      	ldr	r1, [r1, #0]
 8006b12:	428b      	cmp	r3, r1
 8006b14:	d201      	bcs.n	8006b1a <pvPortMalloc+0xd6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b16:	490d      	ldr	r1, [pc, #52]	; (8006b4c <pvPortMalloc+0x108>)
 8006b18:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b1a:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <pvPortMalloc+0xfc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8006b26:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <pvPortMalloc+0x10c>)
 8006b28:	6813      	ldr	r3, [r2, #0]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8006b2e:	f7ff fab7 	bl	80060a0 <xTaskResumeAll>
		if( pvReturn == NULL )
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	d1a9      	bne.n	8006a8a <pvPortMalloc+0x46>
 8006b36:	e7a6      	b.n	8006a86 <pvPortMalloc+0x42>
}
 8006b38:	4630      	mov	r0, r6
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	20000534 	.word	0x20000534
 8006b40:	20008538 	.word	0x20008538
 8006b44:	2000853c 	.word	0x2000853c
 8006b48:	2000854c 	.word	0x2000854c
 8006b4c:	20008540 	.word	0x20008540
 8006b50:	20008544 	.word	0x20008544

08006b54 <vPortFree>:
	if( pv != NULL )
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d034      	beq.n	8006bc2 <vPortFree+0x6e>
{
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006b5c:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b60:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006b64:	4a17      	ldr	r2, [pc, #92]	; (8006bc4 <vPortFree+0x70>)
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	4213      	tst	r3, r2
 8006b6a:	d108      	bne.n	8006b7e <vPortFree+0x2a>
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	e7fe      	b.n	8006b7c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b7e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006b82:	b141      	cbz	r1, 8006b96 <vPortFree+0x42>
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	e7fe      	b.n	8006b94 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b96:	ea23 0302 	bic.w	r3, r3, r2
 8006b9a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006b9e:	f7ff f9eb 	bl	8005f78 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ba2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006ba6:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <vPortFree+0x74>)
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	440b      	add	r3, r1
 8006bac:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7ff ff1c 	bl	80069ec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bb4:	4a05      	ldr	r2, [pc, #20]	; (8006bcc <vPortFree+0x78>)
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006bbc:	f7ff fa70 	bl	80060a0 <xTaskResumeAll>
}
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}
 8006bc2:	4770      	bx	lr
 8006bc4:	20008538 	.word	0x20008538
 8006bc8:	2000853c 	.word	0x2000853c
 8006bcc:	20008548 	.word	0x20008548

08006bd0 <__errno>:
 8006bd0:	4b01      	ldr	r3, [pc, #4]	; (8006bd8 <__errno+0x8>)
 8006bd2:	6818      	ldr	r0, [r3, #0]
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	2000005c 	.word	0x2000005c

08006bdc <__libc_init_array>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	4d0d      	ldr	r5, [pc, #52]	; (8006c14 <__libc_init_array+0x38>)
 8006be0:	4c0d      	ldr	r4, [pc, #52]	; (8006c18 <__libc_init_array+0x3c>)
 8006be2:	1b64      	subs	r4, r4, r5
 8006be4:	10a4      	asrs	r4, r4, #2
 8006be6:	2600      	movs	r6, #0
 8006be8:	42a6      	cmp	r6, r4
 8006bea:	d109      	bne.n	8006c00 <__libc_init_array+0x24>
 8006bec:	4d0b      	ldr	r5, [pc, #44]	; (8006c1c <__libc_init_array+0x40>)
 8006bee:	4c0c      	ldr	r4, [pc, #48]	; (8006c20 <__libc_init_array+0x44>)
 8006bf0:	f000 fc62 	bl	80074b8 <_init>
 8006bf4:	1b64      	subs	r4, r4, r5
 8006bf6:	10a4      	asrs	r4, r4, #2
 8006bf8:	2600      	movs	r6, #0
 8006bfa:	42a6      	cmp	r6, r4
 8006bfc:	d105      	bne.n	8006c0a <__libc_init_array+0x2e>
 8006bfe:	bd70      	pop	{r4, r5, r6, pc}
 8006c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c04:	4798      	blx	r3
 8006c06:	3601      	adds	r6, #1
 8006c08:	e7ee      	b.n	8006be8 <__libc_init_array+0xc>
 8006c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c0e:	4798      	blx	r3
 8006c10:	3601      	adds	r6, #1
 8006c12:	e7f2      	b.n	8006bfa <__libc_init_array+0x1e>
 8006c14:	08009c64 	.word	0x08009c64
 8006c18:	08009c64 	.word	0x08009c64
 8006c1c:	08009c64 	.word	0x08009c64
 8006c20:	08009c68 	.word	0x08009c68

08006c24 <memcpy>:
 8006c24:	440a      	add	r2, r1
 8006c26:	4291      	cmp	r1, r2
 8006c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c2c:	d100      	bne.n	8006c30 <memcpy+0xc>
 8006c2e:	4770      	bx	lr
 8006c30:	b510      	push	{r4, lr}
 8006c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c3a:	4291      	cmp	r1, r2
 8006c3c:	d1f9      	bne.n	8006c32 <memcpy+0xe>
 8006c3e:	bd10      	pop	{r4, pc}

08006c40 <memset>:
 8006c40:	4402      	add	r2, r0
 8006c42:	4603      	mov	r3, r0
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d100      	bne.n	8006c4a <memset+0xa>
 8006c48:	4770      	bx	lr
 8006c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c4e:	e7f9      	b.n	8006c44 <memset+0x4>

08006c50 <sniprintf>:
 8006c50:	b40c      	push	{r2, r3}
 8006c52:	b530      	push	{r4, r5, lr}
 8006c54:	4b17      	ldr	r3, [pc, #92]	; (8006cb4 <sniprintf+0x64>)
 8006c56:	1e0c      	subs	r4, r1, #0
 8006c58:	681d      	ldr	r5, [r3, #0]
 8006c5a:	b09d      	sub	sp, #116	; 0x74
 8006c5c:	da08      	bge.n	8006c70 <sniprintf+0x20>
 8006c5e:	238b      	movs	r3, #139	; 0x8b
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295
 8006c66:	b01d      	add	sp, #116	; 0x74
 8006c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c6c:	b002      	add	sp, #8
 8006c6e:	4770      	bx	lr
 8006c70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c78:	bf14      	ite	ne
 8006c7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c7e:	4623      	moveq	r3, r4
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	9307      	str	r3, [sp, #28]
 8006c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c88:	9002      	str	r0, [sp, #8]
 8006c8a:	9006      	str	r0, [sp, #24]
 8006c8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c92:	ab21      	add	r3, sp, #132	; 0x84
 8006c94:	a902      	add	r1, sp, #8
 8006c96:	4628      	mov	r0, r5
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	f000 f8c5 	bl	8006e28 <_svfiprintf_r>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	bfbc      	itt	lt
 8006ca2:	238b      	movlt	r3, #139	; 0x8b
 8006ca4:	602b      	strlt	r3, [r5, #0]
 8006ca6:	2c00      	cmp	r4, #0
 8006ca8:	d0dd      	beq.n	8006c66 <sniprintf+0x16>
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	e7d9      	b.n	8006c66 <sniprintf+0x16>
 8006cb2:	bf00      	nop
 8006cb4:	2000005c 	.word	0x2000005c

08006cb8 <__retarget_lock_acquire_recursive>:
 8006cb8:	4770      	bx	lr

08006cba <__retarget_lock_release_recursive>:
 8006cba:	4770      	bx	lr

08006cbc <_malloc_r>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	1ccd      	adds	r5, r1, #3
 8006cc0:	f025 0503 	bic.w	r5, r5, #3
 8006cc4:	3508      	adds	r5, #8
 8006cc6:	2d0c      	cmp	r5, #12
 8006cc8:	bf38      	it	cc
 8006cca:	250c      	movcc	r5, #12
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	4606      	mov	r6, r0
 8006cd0:	db01      	blt.n	8006cd6 <_malloc_r+0x1a>
 8006cd2:	42a9      	cmp	r1, r5
 8006cd4:	d903      	bls.n	8006cde <_malloc_r+0x22>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	2000      	movs	r0, #0
 8006cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cde:	f000 fb61 	bl	80073a4 <__malloc_lock>
 8006ce2:	4921      	ldr	r1, [pc, #132]	; (8006d68 <_malloc_r+0xac>)
 8006ce4:	680a      	ldr	r2, [r1, #0]
 8006ce6:	4614      	mov	r4, r2
 8006ce8:	b99c      	cbnz	r4, 8006d12 <_malloc_r+0x56>
 8006cea:	4f20      	ldr	r7, [pc, #128]	; (8006d6c <_malloc_r+0xb0>)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	b923      	cbnz	r3, 8006cfa <_malloc_r+0x3e>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 fb2c 	bl	8007350 <_sbrk_r>
 8006cf8:	6038      	str	r0, [r7, #0]
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f000 fb27 	bl	8007350 <_sbrk_r>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	d123      	bne.n	8006d4e <_malloc_r+0x92>
 8006d06:	230c      	movs	r3, #12
 8006d08:	6033      	str	r3, [r6, #0]
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f000 fb50 	bl	80073b0 <__malloc_unlock>
 8006d10:	e7e3      	b.n	8006cda <_malloc_r+0x1e>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	1b5b      	subs	r3, r3, r5
 8006d16:	d417      	bmi.n	8006d48 <_malloc_r+0x8c>
 8006d18:	2b0b      	cmp	r3, #11
 8006d1a:	d903      	bls.n	8006d24 <_malloc_r+0x68>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	441c      	add	r4, r3
 8006d20:	6025      	str	r5, [r4, #0]
 8006d22:	e004      	b.n	8006d2e <_malloc_r+0x72>
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	42a2      	cmp	r2, r4
 8006d28:	bf0c      	ite	eq
 8006d2a:	600b      	streq	r3, [r1, #0]
 8006d2c:	6053      	strne	r3, [r2, #4]
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f000 fb3e 	bl	80073b0 <__malloc_unlock>
 8006d34:	f104 000b 	add.w	r0, r4, #11
 8006d38:	1d23      	adds	r3, r4, #4
 8006d3a:	f020 0007 	bic.w	r0, r0, #7
 8006d3e:	1ac2      	subs	r2, r0, r3
 8006d40:	d0cc      	beq.n	8006cdc <_malloc_r+0x20>
 8006d42:	1a1b      	subs	r3, r3, r0
 8006d44:	50a3      	str	r3, [r4, r2]
 8006d46:	e7c9      	b.n	8006cdc <_malloc_r+0x20>
 8006d48:	4622      	mov	r2, r4
 8006d4a:	6864      	ldr	r4, [r4, #4]
 8006d4c:	e7cc      	b.n	8006ce8 <_malloc_r+0x2c>
 8006d4e:	1cc4      	adds	r4, r0, #3
 8006d50:	f024 0403 	bic.w	r4, r4, #3
 8006d54:	42a0      	cmp	r0, r4
 8006d56:	d0e3      	beq.n	8006d20 <_malloc_r+0x64>
 8006d58:	1a21      	subs	r1, r4, r0
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f000 faf8 	bl	8007350 <_sbrk_r>
 8006d60:	3001      	adds	r0, #1
 8006d62:	d1dd      	bne.n	8006d20 <_malloc_r+0x64>
 8006d64:	e7cf      	b.n	8006d06 <_malloc_r+0x4a>
 8006d66:	bf00      	nop
 8006d68:	20008554 	.word	0x20008554
 8006d6c:	20008558 	.word	0x20008558

08006d70 <__ssputs_r>:
 8006d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	688e      	ldr	r6, [r1, #8]
 8006d76:	429e      	cmp	r6, r3
 8006d78:	4682      	mov	sl, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	4690      	mov	r8, r2
 8006d7e:	461f      	mov	r7, r3
 8006d80:	d838      	bhi.n	8006df4 <__ssputs_r+0x84>
 8006d82:	898a      	ldrh	r2, [r1, #12]
 8006d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d88:	d032      	beq.n	8006df0 <__ssputs_r+0x80>
 8006d8a:	6825      	ldr	r5, [r4, #0]
 8006d8c:	6909      	ldr	r1, [r1, #16]
 8006d8e:	eba5 0901 	sub.w	r9, r5, r1
 8006d92:	6965      	ldr	r5, [r4, #20]
 8006d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	444b      	add	r3, r9
 8006da0:	106d      	asrs	r5, r5, #1
 8006da2:	429d      	cmp	r5, r3
 8006da4:	bf38      	it	cc
 8006da6:	461d      	movcc	r5, r3
 8006da8:	0553      	lsls	r3, r2, #21
 8006daa:	d531      	bpl.n	8006e10 <__ssputs_r+0xa0>
 8006dac:	4629      	mov	r1, r5
 8006dae:	f7ff ff85 	bl	8006cbc <_malloc_r>
 8006db2:	4606      	mov	r6, r0
 8006db4:	b950      	cbnz	r0, 8006dcc <__ssputs_r+0x5c>
 8006db6:	230c      	movs	r3, #12
 8006db8:	f8ca 3000 	str.w	r3, [sl]
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dcc:	6921      	ldr	r1, [r4, #16]
 8006dce:	464a      	mov	r2, r9
 8006dd0:	f7ff ff28 	bl	8006c24 <memcpy>
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	81a3      	strh	r3, [r4, #12]
 8006de0:	6126      	str	r6, [r4, #16]
 8006de2:	6165      	str	r5, [r4, #20]
 8006de4:	444e      	add	r6, r9
 8006de6:	eba5 0509 	sub.w	r5, r5, r9
 8006dea:	6026      	str	r6, [r4, #0]
 8006dec:	60a5      	str	r5, [r4, #8]
 8006dee:	463e      	mov	r6, r7
 8006df0:	42be      	cmp	r6, r7
 8006df2:	d900      	bls.n	8006df6 <__ssputs_r+0x86>
 8006df4:	463e      	mov	r6, r7
 8006df6:	4632      	mov	r2, r6
 8006df8:	6820      	ldr	r0, [r4, #0]
 8006dfa:	4641      	mov	r1, r8
 8006dfc:	f000 fab8 	bl	8007370 <memmove>
 8006e00:	68a3      	ldr	r3, [r4, #8]
 8006e02:	6822      	ldr	r2, [r4, #0]
 8006e04:	1b9b      	subs	r3, r3, r6
 8006e06:	4432      	add	r2, r6
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	e7db      	b.n	8006dc8 <__ssputs_r+0x58>
 8006e10:	462a      	mov	r2, r5
 8006e12:	f000 fb23 	bl	800745c <_realloc_r>
 8006e16:	4606      	mov	r6, r0
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d1e1      	bne.n	8006de0 <__ssputs_r+0x70>
 8006e1c:	6921      	ldr	r1, [r4, #16]
 8006e1e:	4650      	mov	r0, sl
 8006e20:	f000 facc 	bl	80073bc <_free_r>
 8006e24:	e7c7      	b.n	8006db6 <__ssputs_r+0x46>
	...

08006e28 <_svfiprintf_r>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	4698      	mov	r8, r3
 8006e2e:	898b      	ldrh	r3, [r1, #12]
 8006e30:	061b      	lsls	r3, r3, #24
 8006e32:	b09d      	sub	sp, #116	; 0x74
 8006e34:	4607      	mov	r7, r0
 8006e36:	460d      	mov	r5, r1
 8006e38:	4614      	mov	r4, r2
 8006e3a:	d50e      	bpl.n	8006e5a <_svfiprintf_r+0x32>
 8006e3c:	690b      	ldr	r3, [r1, #16]
 8006e3e:	b963      	cbnz	r3, 8006e5a <_svfiprintf_r+0x32>
 8006e40:	2140      	movs	r1, #64	; 0x40
 8006e42:	f7ff ff3b 	bl	8006cbc <_malloc_r>
 8006e46:	6028      	str	r0, [r5, #0]
 8006e48:	6128      	str	r0, [r5, #16]
 8006e4a:	b920      	cbnz	r0, 8006e56 <_svfiprintf_r+0x2e>
 8006e4c:	230c      	movs	r3, #12
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	e0d1      	b.n	8006ffa <_svfiprintf_r+0x1d2>
 8006e56:	2340      	movs	r3, #64	; 0x40
 8006e58:	616b      	str	r3, [r5, #20]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e5e:	2320      	movs	r3, #32
 8006e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e68:	2330      	movs	r3, #48	; 0x30
 8006e6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007014 <_svfiprintf_r+0x1ec>
 8006e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e72:	f04f 0901 	mov.w	r9, #1
 8006e76:	4623      	mov	r3, r4
 8006e78:	469a      	mov	sl, r3
 8006e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e7e:	b10a      	cbz	r2, 8006e84 <_svfiprintf_r+0x5c>
 8006e80:	2a25      	cmp	r2, #37	; 0x25
 8006e82:	d1f9      	bne.n	8006e78 <_svfiprintf_r+0x50>
 8006e84:	ebba 0b04 	subs.w	fp, sl, r4
 8006e88:	d00b      	beq.n	8006ea2 <_svfiprintf_r+0x7a>
 8006e8a:	465b      	mov	r3, fp
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4638      	mov	r0, r7
 8006e92:	f7ff ff6d 	bl	8006d70 <__ssputs_r>
 8006e96:	3001      	adds	r0, #1
 8006e98:	f000 80aa 	beq.w	8006ff0 <_svfiprintf_r+0x1c8>
 8006e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e9e:	445a      	add	r2, fp
 8006ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80a2 	beq.w	8006ff0 <_svfiprintf_r+0x1c8>
 8006eac:	2300      	movs	r3, #0
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eb6:	f10a 0a01 	add.w	sl, sl, #1
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	9307      	str	r3, [sp, #28]
 8006ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ec4:	4654      	mov	r4, sl
 8006ec6:	2205      	movs	r2, #5
 8006ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ecc:	4851      	ldr	r0, [pc, #324]	; (8007014 <_svfiprintf_r+0x1ec>)
 8006ece:	f7f9 f98f 	bl	80001f0 <memchr>
 8006ed2:	9a04      	ldr	r2, [sp, #16]
 8006ed4:	b9d8      	cbnz	r0, 8006f0e <_svfiprintf_r+0xe6>
 8006ed6:	06d0      	lsls	r0, r2, #27
 8006ed8:	bf44      	itt	mi
 8006eda:	2320      	movmi	r3, #32
 8006edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ee0:	0711      	lsls	r1, r2, #28
 8006ee2:	bf44      	itt	mi
 8006ee4:	232b      	movmi	r3, #43	; 0x2b
 8006ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eea:	f89a 3000 	ldrb.w	r3, [sl]
 8006eee:	2b2a      	cmp	r3, #42	; 0x2a
 8006ef0:	d015      	beq.n	8006f1e <_svfiprintf_r+0xf6>
 8006ef2:	9a07      	ldr	r2, [sp, #28]
 8006ef4:	4654      	mov	r4, sl
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	f04f 0c0a 	mov.w	ip, #10
 8006efc:	4621      	mov	r1, r4
 8006efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f02:	3b30      	subs	r3, #48	; 0x30
 8006f04:	2b09      	cmp	r3, #9
 8006f06:	d94e      	bls.n	8006fa6 <_svfiprintf_r+0x17e>
 8006f08:	b1b0      	cbz	r0, 8006f38 <_svfiprintf_r+0x110>
 8006f0a:	9207      	str	r2, [sp, #28]
 8006f0c:	e014      	b.n	8006f38 <_svfiprintf_r+0x110>
 8006f0e:	eba0 0308 	sub.w	r3, r0, r8
 8006f12:	fa09 f303 	lsl.w	r3, r9, r3
 8006f16:	4313      	orrs	r3, r2
 8006f18:	9304      	str	r3, [sp, #16]
 8006f1a:	46a2      	mov	sl, r4
 8006f1c:	e7d2      	b.n	8006ec4 <_svfiprintf_r+0x9c>
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	1d19      	adds	r1, r3, #4
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	9103      	str	r1, [sp, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bfbb      	ittet	lt
 8006f2a:	425b      	neglt	r3, r3
 8006f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f30:	9307      	strge	r3, [sp, #28]
 8006f32:	9307      	strlt	r3, [sp, #28]
 8006f34:	bfb8      	it	lt
 8006f36:	9204      	strlt	r2, [sp, #16]
 8006f38:	7823      	ldrb	r3, [r4, #0]
 8006f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f3c:	d10c      	bne.n	8006f58 <_svfiprintf_r+0x130>
 8006f3e:	7863      	ldrb	r3, [r4, #1]
 8006f40:	2b2a      	cmp	r3, #42	; 0x2a
 8006f42:	d135      	bne.n	8006fb0 <_svfiprintf_r+0x188>
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	1d1a      	adds	r2, r3, #4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	9203      	str	r2, [sp, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bfb8      	it	lt
 8006f50:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f54:	3402      	adds	r4, #2
 8006f56:	9305      	str	r3, [sp, #20]
 8006f58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007024 <_svfiprintf_r+0x1fc>
 8006f5c:	7821      	ldrb	r1, [r4, #0]
 8006f5e:	2203      	movs	r2, #3
 8006f60:	4650      	mov	r0, sl
 8006f62:	f7f9 f945 	bl	80001f0 <memchr>
 8006f66:	b140      	cbz	r0, 8006f7a <_svfiprintf_r+0x152>
 8006f68:	2340      	movs	r3, #64	; 0x40
 8006f6a:	eba0 000a 	sub.w	r0, r0, sl
 8006f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	4303      	orrs	r3, r0
 8006f76:	3401      	adds	r4, #1
 8006f78:	9304      	str	r3, [sp, #16]
 8006f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f7e:	4826      	ldr	r0, [pc, #152]	; (8007018 <_svfiprintf_r+0x1f0>)
 8006f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f84:	2206      	movs	r2, #6
 8006f86:	f7f9 f933 	bl	80001f0 <memchr>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d038      	beq.n	8007000 <_svfiprintf_r+0x1d8>
 8006f8e:	4b23      	ldr	r3, [pc, #140]	; (800701c <_svfiprintf_r+0x1f4>)
 8006f90:	bb1b      	cbnz	r3, 8006fda <_svfiprintf_r+0x1b2>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	3307      	adds	r3, #7
 8006f96:	f023 0307 	bic.w	r3, r3, #7
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	9303      	str	r3, [sp, #12]
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa0:	4433      	add	r3, r6
 8006fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa4:	e767      	b.n	8006e76 <_svfiprintf_r+0x4e>
 8006fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006faa:	460c      	mov	r4, r1
 8006fac:	2001      	movs	r0, #1
 8006fae:	e7a5      	b.n	8006efc <_svfiprintf_r+0xd4>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	3401      	adds	r4, #1
 8006fb4:	9305      	str	r3, [sp, #20]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	f04f 0c0a 	mov.w	ip, #10
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fc2:	3a30      	subs	r2, #48	; 0x30
 8006fc4:	2a09      	cmp	r2, #9
 8006fc6:	d903      	bls.n	8006fd0 <_svfiprintf_r+0x1a8>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0c5      	beq.n	8006f58 <_svfiprintf_r+0x130>
 8006fcc:	9105      	str	r1, [sp, #20]
 8006fce:	e7c3      	b.n	8006f58 <_svfiprintf_r+0x130>
 8006fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e7f0      	b.n	8006fbc <_svfiprintf_r+0x194>
 8006fda:	ab03      	add	r3, sp, #12
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	462a      	mov	r2, r5
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <_svfiprintf_r+0x1f8>)
 8006fe2:	a904      	add	r1, sp, #16
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f3af 8000 	nop.w
 8006fea:	1c42      	adds	r2, r0, #1
 8006fec:	4606      	mov	r6, r0
 8006fee:	d1d6      	bne.n	8006f9e <_svfiprintf_r+0x176>
 8006ff0:	89ab      	ldrh	r3, [r5, #12]
 8006ff2:	065b      	lsls	r3, r3, #25
 8006ff4:	f53f af2c 	bmi.w	8006e50 <_svfiprintf_r+0x28>
 8006ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ffa:	b01d      	add	sp, #116	; 0x74
 8006ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007000:	ab03      	add	r3, sp, #12
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	462a      	mov	r2, r5
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <_svfiprintf_r+0x1f8>)
 8007008:	a904      	add	r1, sp, #16
 800700a:	4638      	mov	r0, r7
 800700c:	f000 f87a 	bl	8007104 <_printf_i>
 8007010:	e7eb      	b.n	8006fea <_svfiprintf_r+0x1c2>
 8007012:	bf00      	nop
 8007014:	08009c28 	.word	0x08009c28
 8007018:	08009c32 	.word	0x08009c32
 800701c:	00000000 	.word	0x00000000
 8007020:	08006d71 	.word	0x08006d71
 8007024:	08009c2e 	.word	0x08009c2e

08007028 <_printf_common>:
 8007028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	4616      	mov	r6, r2
 800702e:	4699      	mov	r9, r3
 8007030:	688a      	ldr	r2, [r1, #8]
 8007032:	690b      	ldr	r3, [r1, #16]
 8007034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007038:	4293      	cmp	r3, r2
 800703a:	bfb8      	it	lt
 800703c:	4613      	movlt	r3, r2
 800703e:	6033      	str	r3, [r6, #0]
 8007040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007044:	4607      	mov	r7, r0
 8007046:	460c      	mov	r4, r1
 8007048:	b10a      	cbz	r2, 800704e <_printf_common+0x26>
 800704a:	3301      	adds	r3, #1
 800704c:	6033      	str	r3, [r6, #0]
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	0699      	lsls	r1, r3, #26
 8007052:	bf42      	ittt	mi
 8007054:	6833      	ldrmi	r3, [r6, #0]
 8007056:	3302      	addmi	r3, #2
 8007058:	6033      	strmi	r3, [r6, #0]
 800705a:	6825      	ldr	r5, [r4, #0]
 800705c:	f015 0506 	ands.w	r5, r5, #6
 8007060:	d106      	bne.n	8007070 <_printf_common+0x48>
 8007062:	f104 0a19 	add.w	sl, r4, #25
 8007066:	68e3      	ldr	r3, [r4, #12]
 8007068:	6832      	ldr	r2, [r6, #0]
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	42ab      	cmp	r3, r5
 800706e:	dc26      	bgt.n	80070be <_printf_common+0x96>
 8007070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007074:	1e13      	subs	r3, r2, #0
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	bf18      	it	ne
 800707a:	2301      	movne	r3, #1
 800707c:	0692      	lsls	r2, r2, #26
 800707e:	d42b      	bmi.n	80070d8 <_printf_common+0xb0>
 8007080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007084:	4649      	mov	r1, r9
 8007086:	4638      	mov	r0, r7
 8007088:	47c0      	blx	r8
 800708a:	3001      	adds	r0, #1
 800708c:	d01e      	beq.n	80070cc <_printf_common+0xa4>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	68e5      	ldr	r5, [r4, #12]
 8007092:	6832      	ldr	r2, [r6, #0]
 8007094:	f003 0306 	and.w	r3, r3, #6
 8007098:	2b04      	cmp	r3, #4
 800709a:	bf08      	it	eq
 800709c:	1aad      	subeq	r5, r5, r2
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	6922      	ldr	r2, [r4, #16]
 80070a2:	bf0c      	ite	eq
 80070a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a8:	2500      	movne	r5, #0
 80070aa:	4293      	cmp	r3, r2
 80070ac:	bfc4      	itt	gt
 80070ae:	1a9b      	subgt	r3, r3, r2
 80070b0:	18ed      	addgt	r5, r5, r3
 80070b2:	2600      	movs	r6, #0
 80070b4:	341a      	adds	r4, #26
 80070b6:	42b5      	cmp	r5, r6
 80070b8:	d11a      	bne.n	80070f0 <_printf_common+0xc8>
 80070ba:	2000      	movs	r0, #0
 80070bc:	e008      	b.n	80070d0 <_printf_common+0xa8>
 80070be:	2301      	movs	r3, #1
 80070c0:	4652      	mov	r2, sl
 80070c2:	4649      	mov	r1, r9
 80070c4:	4638      	mov	r0, r7
 80070c6:	47c0      	blx	r8
 80070c8:	3001      	adds	r0, #1
 80070ca:	d103      	bne.n	80070d4 <_printf_common+0xac>
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295
 80070d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d4:	3501      	adds	r5, #1
 80070d6:	e7c6      	b.n	8007066 <_printf_common+0x3e>
 80070d8:	18e1      	adds	r1, r4, r3
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	2030      	movs	r0, #48	; 0x30
 80070de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070e2:	4422      	add	r2, r4
 80070e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070ec:	3302      	adds	r3, #2
 80070ee:	e7c7      	b.n	8007080 <_printf_common+0x58>
 80070f0:	2301      	movs	r3, #1
 80070f2:	4622      	mov	r2, r4
 80070f4:	4649      	mov	r1, r9
 80070f6:	4638      	mov	r0, r7
 80070f8:	47c0      	blx	r8
 80070fa:	3001      	adds	r0, #1
 80070fc:	d0e6      	beq.n	80070cc <_printf_common+0xa4>
 80070fe:	3601      	adds	r6, #1
 8007100:	e7d9      	b.n	80070b6 <_printf_common+0x8e>
	...

08007104 <_printf_i>:
 8007104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	4691      	mov	r9, r2
 800710c:	7e27      	ldrb	r7, [r4, #24]
 800710e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007110:	2f78      	cmp	r7, #120	; 0x78
 8007112:	4680      	mov	r8, r0
 8007114:	469a      	mov	sl, r3
 8007116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800711a:	d807      	bhi.n	800712c <_printf_i+0x28>
 800711c:	2f62      	cmp	r7, #98	; 0x62
 800711e:	d80a      	bhi.n	8007136 <_printf_i+0x32>
 8007120:	2f00      	cmp	r7, #0
 8007122:	f000 80d8 	beq.w	80072d6 <_printf_i+0x1d2>
 8007126:	2f58      	cmp	r7, #88	; 0x58
 8007128:	f000 80a3 	beq.w	8007272 <_printf_i+0x16e>
 800712c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007134:	e03a      	b.n	80071ac <_printf_i+0xa8>
 8007136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800713a:	2b15      	cmp	r3, #21
 800713c:	d8f6      	bhi.n	800712c <_printf_i+0x28>
 800713e:	a001      	add	r0, pc, #4	; (adr r0, 8007144 <_printf_i+0x40>)
 8007140:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007144:	0800719d 	.word	0x0800719d
 8007148:	080071b1 	.word	0x080071b1
 800714c:	0800712d 	.word	0x0800712d
 8007150:	0800712d 	.word	0x0800712d
 8007154:	0800712d 	.word	0x0800712d
 8007158:	0800712d 	.word	0x0800712d
 800715c:	080071b1 	.word	0x080071b1
 8007160:	0800712d 	.word	0x0800712d
 8007164:	0800712d 	.word	0x0800712d
 8007168:	0800712d 	.word	0x0800712d
 800716c:	0800712d 	.word	0x0800712d
 8007170:	080072bd 	.word	0x080072bd
 8007174:	080071e1 	.word	0x080071e1
 8007178:	0800729f 	.word	0x0800729f
 800717c:	0800712d 	.word	0x0800712d
 8007180:	0800712d 	.word	0x0800712d
 8007184:	080072df 	.word	0x080072df
 8007188:	0800712d 	.word	0x0800712d
 800718c:	080071e1 	.word	0x080071e1
 8007190:	0800712d 	.word	0x0800712d
 8007194:	0800712d 	.word	0x0800712d
 8007198:	080072a7 	.word	0x080072a7
 800719c:	680b      	ldr	r3, [r1, #0]
 800719e:	1d1a      	adds	r2, r3, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	600a      	str	r2, [r1, #0]
 80071a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0a3      	b.n	80072f8 <_printf_i+0x1f4>
 80071b0:	6825      	ldr	r5, [r4, #0]
 80071b2:	6808      	ldr	r0, [r1, #0]
 80071b4:	062e      	lsls	r6, r5, #24
 80071b6:	f100 0304 	add.w	r3, r0, #4
 80071ba:	d50a      	bpl.n	80071d2 <_printf_i+0xce>
 80071bc:	6805      	ldr	r5, [r0, #0]
 80071be:	600b      	str	r3, [r1, #0]
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	da03      	bge.n	80071cc <_printf_i+0xc8>
 80071c4:	232d      	movs	r3, #45	; 0x2d
 80071c6:	426d      	negs	r5, r5
 80071c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071cc:	485e      	ldr	r0, [pc, #376]	; (8007348 <_printf_i+0x244>)
 80071ce:	230a      	movs	r3, #10
 80071d0:	e019      	b.n	8007206 <_printf_i+0x102>
 80071d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071d6:	6805      	ldr	r5, [r0, #0]
 80071d8:	600b      	str	r3, [r1, #0]
 80071da:	bf18      	it	ne
 80071dc:	b22d      	sxthne	r5, r5
 80071de:	e7ef      	b.n	80071c0 <_printf_i+0xbc>
 80071e0:	680b      	ldr	r3, [r1, #0]
 80071e2:	6825      	ldr	r5, [r4, #0]
 80071e4:	1d18      	adds	r0, r3, #4
 80071e6:	6008      	str	r0, [r1, #0]
 80071e8:	0628      	lsls	r0, r5, #24
 80071ea:	d501      	bpl.n	80071f0 <_printf_i+0xec>
 80071ec:	681d      	ldr	r5, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <_printf_i+0xf2>
 80071f0:	0669      	lsls	r1, r5, #25
 80071f2:	d5fb      	bpl.n	80071ec <_printf_i+0xe8>
 80071f4:	881d      	ldrh	r5, [r3, #0]
 80071f6:	4854      	ldr	r0, [pc, #336]	; (8007348 <_printf_i+0x244>)
 80071f8:	2f6f      	cmp	r7, #111	; 0x6f
 80071fa:	bf0c      	ite	eq
 80071fc:	2308      	moveq	r3, #8
 80071fe:	230a      	movne	r3, #10
 8007200:	2100      	movs	r1, #0
 8007202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007206:	6866      	ldr	r6, [r4, #4]
 8007208:	60a6      	str	r6, [r4, #8]
 800720a:	2e00      	cmp	r6, #0
 800720c:	bfa2      	ittt	ge
 800720e:	6821      	ldrge	r1, [r4, #0]
 8007210:	f021 0104 	bicge.w	r1, r1, #4
 8007214:	6021      	strge	r1, [r4, #0]
 8007216:	b90d      	cbnz	r5, 800721c <_printf_i+0x118>
 8007218:	2e00      	cmp	r6, #0
 800721a:	d04d      	beq.n	80072b8 <_printf_i+0x1b4>
 800721c:	4616      	mov	r6, r2
 800721e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007222:	fb03 5711 	mls	r7, r3, r1, r5
 8007226:	5dc7      	ldrb	r7, [r0, r7]
 8007228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800722c:	462f      	mov	r7, r5
 800722e:	42bb      	cmp	r3, r7
 8007230:	460d      	mov	r5, r1
 8007232:	d9f4      	bls.n	800721e <_printf_i+0x11a>
 8007234:	2b08      	cmp	r3, #8
 8007236:	d10b      	bne.n	8007250 <_printf_i+0x14c>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	07df      	lsls	r7, r3, #31
 800723c:	d508      	bpl.n	8007250 <_printf_i+0x14c>
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	6861      	ldr	r1, [r4, #4]
 8007242:	4299      	cmp	r1, r3
 8007244:	bfde      	ittt	le
 8007246:	2330      	movle	r3, #48	; 0x30
 8007248:	f806 3c01 	strble.w	r3, [r6, #-1]
 800724c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007250:	1b92      	subs	r2, r2, r6
 8007252:	6122      	str	r2, [r4, #16]
 8007254:	f8cd a000 	str.w	sl, [sp]
 8007258:	464b      	mov	r3, r9
 800725a:	aa03      	add	r2, sp, #12
 800725c:	4621      	mov	r1, r4
 800725e:	4640      	mov	r0, r8
 8007260:	f7ff fee2 	bl	8007028 <_printf_common>
 8007264:	3001      	adds	r0, #1
 8007266:	d14c      	bne.n	8007302 <_printf_i+0x1fe>
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	b004      	add	sp, #16
 800726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007272:	4835      	ldr	r0, [pc, #212]	; (8007348 <_printf_i+0x244>)
 8007274:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	680e      	ldr	r6, [r1, #0]
 800727c:	061f      	lsls	r7, r3, #24
 800727e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007282:	600e      	str	r6, [r1, #0]
 8007284:	d514      	bpl.n	80072b0 <_printf_i+0x1ac>
 8007286:	07d9      	lsls	r1, r3, #31
 8007288:	bf44      	itt	mi
 800728a:	f043 0320 	orrmi.w	r3, r3, #32
 800728e:	6023      	strmi	r3, [r4, #0]
 8007290:	b91d      	cbnz	r5, 800729a <_printf_i+0x196>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f023 0320 	bic.w	r3, r3, #32
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	2310      	movs	r3, #16
 800729c:	e7b0      	b.n	8007200 <_printf_i+0xfc>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	f043 0320 	orr.w	r3, r3, #32
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	2378      	movs	r3, #120	; 0x78
 80072a8:	4828      	ldr	r0, [pc, #160]	; (800734c <_printf_i+0x248>)
 80072aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ae:	e7e3      	b.n	8007278 <_printf_i+0x174>
 80072b0:	065e      	lsls	r6, r3, #25
 80072b2:	bf48      	it	mi
 80072b4:	b2ad      	uxthmi	r5, r5
 80072b6:	e7e6      	b.n	8007286 <_printf_i+0x182>
 80072b8:	4616      	mov	r6, r2
 80072ba:	e7bb      	b.n	8007234 <_printf_i+0x130>
 80072bc:	680b      	ldr	r3, [r1, #0]
 80072be:	6826      	ldr	r6, [r4, #0]
 80072c0:	6960      	ldr	r0, [r4, #20]
 80072c2:	1d1d      	adds	r5, r3, #4
 80072c4:	600d      	str	r5, [r1, #0]
 80072c6:	0635      	lsls	r5, r6, #24
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	d501      	bpl.n	80072d0 <_printf_i+0x1cc>
 80072cc:	6018      	str	r0, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <_printf_i+0x1d2>
 80072d0:	0671      	lsls	r1, r6, #25
 80072d2:	d5fb      	bpl.n	80072cc <_printf_i+0x1c8>
 80072d4:	8018      	strh	r0, [r3, #0]
 80072d6:	2300      	movs	r3, #0
 80072d8:	6123      	str	r3, [r4, #16]
 80072da:	4616      	mov	r6, r2
 80072dc:	e7ba      	b.n	8007254 <_printf_i+0x150>
 80072de:	680b      	ldr	r3, [r1, #0]
 80072e0:	1d1a      	adds	r2, r3, #4
 80072e2:	600a      	str	r2, [r1, #0]
 80072e4:	681e      	ldr	r6, [r3, #0]
 80072e6:	6862      	ldr	r2, [r4, #4]
 80072e8:	2100      	movs	r1, #0
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7f8 ff80 	bl	80001f0 <memchr>
 80072f0:	b108      	cbz	r0, 80072f6 <_printf_i+0x1f2>
 80072f2:	1b80      	subs	r0, r0, r6
 80072f4:	6060      	str	r0, [r4, #4]
 80072f6:	6863      	ldr	r3, [r4, #4]
 80072f8:	6123      	str	r3, [r4, #16]
 80072fa:	2300      	movs	r3, #0
 80072fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007300:	e7a8      	b.n	8007254 <_printf_i+0x150>
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	4632      	mov	r2, r6
 8007306:	4649      	mov	r1, r9
 8007308:	4640      	mov	r0, r8
 800730a:	47d0      	blx	sl
 800730c:	3001      	adds	r0, #1
 800730e:	d0ab      	beq.n	8007268 <_printf_i+0x164>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	079b      	lsls	r3, r3, #30
 8007314:	d413      	bmi.n	800733e <_printf_i+0x23a>
 8007316:	68e0      	ldr	r0, [r4, #12]
 8007318:	9b03      	ldr	r3, [sp, #12]
 800731a:	4298      	cmp	r0, r3
 800731c:	bfb8      	it	lt
 800731e:	4618      	movlt	r0, r3
 8007320:	e7a4      	b.n	800726c <_printf_i+0x168>
 8007322:	2301      	movs	r3, #1
 8007324:	4632      	mov	r2, r6
 8007326:	4649      	mov	r1, r9
 8007328:	4640      	mov	r0, r8
 800732a:	47d0      	blx	sl
 800732c:	3001      	adds	r0, #1
 800732e:	d09b      	beq.n	8007268 <_printf_i+0x164>
 8007330:	3501      	adds	r5, #1
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	9903      	ldr	r1, [sp, #12]
 8007336:	1a5b      	subs	r3, r3, r1
 8007338:	42ab      	cmp	r3, r5
 800733a:	dcf2      	bgt.n	8007322 <_printf_i+0x21e>
 800733c:	e7eb      	b.n	8007316 <_printf_i+0x212>
 800733e:	2500      	movs	r5, #0
 8007340:	f104 0619 	add.w	r6, r4, #25
 8007344:	e7f5      	b.n	8007332 <_printf_i+0x22e>
 8007346:	bf00      	nop
 8007348:	08009c39 	.word	0x08009c39
 800734c:	08009c4a 	.word	0x08009c4a

08007350 <_sbrk_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d06      	ldr	r5, [pc, #24]	; (800736c <_sbrk_r+0x1c>)
 8007354:	2300      	movs	r3, #0
 8007356:	4604      	mov	r4, r0
 8007358:	4608      	mov	r0, r1
 800735a:	602b      	str	r3, [r5, #0]
 800735c:	f7fa fd34 	bl	8001dc8 <_sbrk>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_sbrk_r+0x1a>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_sbrk_r+0x1a>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20008b24 	.word	0x20008b24

08007370 <memmove>:
 8007370:	4288      	cmp	r0, r1
 8007372:	b510      	push	{r4, lr}
 8007374:	eb01 0402 	add.w	r4, r1, r2
 8007378:	d902      	bls.n	8007380 <memmove+0x10>
 800737a:	4284      	cmp	r4, r0
 800737c:	4623      	mov	r3, r4
 800737e:	d807      	bhi.n	8007390 <memmove+0x20>
 8007380:	1e43      	subs	r3, r0, #1
 8007382:	42a1      	cmp	r1, r4
 8007384:	d008      	beq.n	8007398 <memmove+0x28>
 8007386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800738a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800738e:	e7f8      	b.n	8007382 <memmove+0x12>
 8007390:	4402      	add	r2, r0
 8007392:	4601      	mov	r1, r0
 8007394:	428a      	cmp	r2, r1
 8007396:	d100      	bne.n	800739a <memmove+0x2a>
 8007398:	bd10      	pop	{r4, pc}
 800739a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800739e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073a2:	e7f7      	b.n	8007394 <memmove+0x24>

080073a4 <__malloc_lock>:
 80073a4:	4801      	ldr	r0, [pc, #4]	; (80073ac <__malloc_lock+0x8>)
 80073a6:	f7ff bc87 	b.w	8006cb8 <__retarget_lock_acquire_recursive>
 80073aa:	bf00      	nop
 80073ac:	20008b1c 	.word	0x20008b1c

080073b0 <__malloc_unlock>:
 80073b0:	4801      	ldr	r0, [pc, #4]	; (80073b8 <__malloc_unlock+0x8>)
 80073b2:	f7ff bc82 	b.w	8006cba <__retarget_lock_release_recursive>
 80073b6:	bf00      	nop
 80073b8:	20008b1c 	.word	0x20008b1c

080073bc <_free_r>:
 80073bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073be:	2900      	cmp	r1, #0
 80073c0:	d048      	beq.n	8007454 <_free_r+0x98>
 80073c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c6:	9001      	str	r0, [sp, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f1a1 0404 	sub.w	r4, r1, #4
 80073ce:	bfb8      	it	lt
 80073d0:	18e4      	addlt	r4, r4, r3
 80073d2:	f7ff ffe7 	bl	80073a4 <__malloc_lock>
 80073d6:	4a20      	ldr	r2, [pc, #128]	; (8007458 <_free_r+0x9c>)
 80073d8:	9801      	ldr	r0, [sp, #4]
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	4615      	mov	r5, r2
 80073de:	b933      	cbnz	r3, 80073ee <_free_r+0x32>
 80073e0:	6063      	str	r3, [r4, #4]
 80073e2:	6014      	str	r4, [r2, #0]
 80073e4:	b003      	add	sp, #12
 80073e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073ea:	f7ff bfe1 	b.w	80073b0 <__malloc_unlock>
 80073ee:	42a3      	cmp	r3, r4
 80073f0:	d90b      	bls.n	800740a <_free_r+0x4e>
 80073f2:	6821      	ldr	r1, [r4, #0]
 80073f4:	1862      	adds	r2, r4, r1
 80073f6:	4293      	cmp	r3, r2
 80073f8:	bf04      	itt	eq
 80073fa:	681a      	ldreq	r2, [r3, #0]
 80073fc:	685b      	ldreq	r3, [r3, #4]
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	bf04      	itt	eq
 8007402:	1852      	addeq	r2, r2, r1
 8007404:	6022      	streq	r2, [r4, #0]
 8007406:	602c      	str	r4, [r5, #0]
 8007408:	e7ec      	b.n	80073e4 <_free_r+0x28>
 800740a:	461a      	mov	r2, r3
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	b10b      	cbz	r3, 8007414 <_free_r+0x58>
 8007410:	42a3      	cmp	r3, r4
 8007412:	d9fa      	bls.n	800740a <_free_r+0x4e>
 8007414:	6811      	ldr	r1, [r2, #0]
 8007416:	1855      	adds	r5, r2, r1
 8007418:	42a5      	cmp	r5, r4
 800741a:	d10b      	bne.n	8007434 <_free_r+0x78>
 800741c:	6824      	ldr	r4, [r4, #0]
 800741e:	4421      	add	r1, r4
 8007420:	1854      	adds	r4, r2, r1
 8007422:	42a3      	cmp	r3, r4
 8007424:	6011      	str	r1, [r2, #0]
 8007426:	d1dd      	bne.n	80073e4 <_free_r+0x28>
 8007428:	681c      	ldr	r4, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	6053      	str	r3, [r2, #4]
 800742e:	4421      	add	r1, r4
 8007430:	6011      	str	r1, [r2, #0]
 8007432:	e7d7      	b.n	80073e4 <_free_r+0x28>
 8007434:	d902      	bls.n	800743c <_free_r+0x80>
 8007436:	230c      	movs	r3, #12
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	e7d3      	b.n	80073e4 <_free_r+0x28>
 800743c:	6825      	ldr	r5, [r4, #0]
 800743e:	1961      	adds	r1, r4, r5
 8007440:	428b      	cmp	r3, r1
 8007442:	bf04      	itt	eq
 8007444:	6819      	ldreq	r1, [r3, #0]
 8007446:	685b      	ldreq	r3, [r3, #4]
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	bf04      	itt	eq
 800744c:	1949      	addeq	r1, r1, r5
 800744e:	6021      	streq	r1, [r4, #0]
 8007450:	6054      	str	r4, [r2, #4]
 8007452:	e7c7      	b.n	80073e4 <_free_r+0x28>
 8007454:	b003      	add	sp, #12
 8007456:	bd30      	pop	{r4, r5, pc}
 8007458:	20008554 	.word	0x20008554

0800745c <_realloc_r>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	4607      	mov	r7, r0
 8007460:	4614      	mov	r4, r2
 8007462:	460e      	mov	r6, r1
 8007464:	b921      	cbnz	r1, 8007470 <_realloc_r+0x14>
 8007466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800746a:	4611      	mov	r1, r2
 800746c:	f7ff bc26 	b.w	8006cbc <_malloc_r>
 8007470:	b922      	cbnz	r2, 800747c <_realloc_r+0x20>
 8007472:	f7ff ffa3 	bl	80073bc <_free_r>
 8007476:	4625      	mov	r5, r4
 8007478:	4628      	mov	r0, r5
 800747a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800747c:	f000 f814 	bl	80074a8 <_malloc_usable_size_r>
 8007480:	42a0      	cmp	r0, r4
 8007482:	d20f      	bcs.n	80074a4 <_realloc_r+0x48>
 8007484:	4621      	mov	r1, r4
 8007486:	4638      	mov	r0, r7
 8007488:	f7ff fc18 	bl	8006cbc <_malloc_r>
 800748c:	4605      	mov	r5, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	d0f2      	beq.n	8007478 <_realloc_r+0x1c>
 8007492:	4631      	mov	r1, r6
 8007494:	4622      	mov	r2, r4
 8007496:	f7ff fbc5 	bl	8006c24 <memcpy>
 800749a:	4631      	mov	r1, r6
 800749c:	4638      	mov	r0, r7
 800749e:	f7ff ff8d 	bl	80073bc <_free_r>
 80074a2:	e7e9      	b.n	8007478 <_realloc_r+0x1c>
 80074a4:	4635      	mov	r5, r6
 80074a6:	e7e7      	b.n	8007478 <_realloc_r+0x1c>

080074a8 <_malloc_usable_size_r>:
 80074a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ac:	1f18      	subs	r0, r3, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfbc      	itt	lt
 80074b2:	580b      	ldrlt	r3, [r1, r0]
 80074b4:	18c0      	addlt	r0, r0, r3
 80074b6:	4770      	bx	lr

080074b8 <_init>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr

080074c4 <_fini>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr
